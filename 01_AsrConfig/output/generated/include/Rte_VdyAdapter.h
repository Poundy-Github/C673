#ifndef RTE_VDYADAPTER_H
#define RTE_VDYADAPTER_H
/**
 * \file
 *
 * \brief AUTOSAR Rte
 *
 * This file contains the implementation of the AUTOSAR
 * module Rte.
 *
 * \version 6.6.3
 *
 * \author Elektrobit Automotive GmbH, 91058 Erlangen, Germany
 *
 * Copyright 2005 - 2021 Elektrobit Automotive GmbH
 * All rights exclusively reserved for Elektrobit Automotive GmbH,
 * unless expressly agreed to otherwise.
 */

/*
 * This file contains Rte component declarations for component type VdyAdapter
 *
 * This file has been automatically generated by
 * EB tresos AutoCore Rte Generator Version 6.6.3
 * on Thu Mar 16 15:33:14 CST 2023. !!!IGNORE-LINE!!!
 */

/*
 * \addtogroup Rte Runtime Environment
 * @{
 */

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */
/* ==================[Includes]=============================================== */
#include <TSMem.h>
#include <Rte_VdyAdapter_Type.h>
#include <Rte_VdyAdapter_Hook.h>
#include <Rte_Components_Shared.h>

/* ==================[Macros]================================================= */
#ifndef RTE_CORE /* if included by software component */
#ifndef RTE_APPLICATION_HEADER_FILE_H /* prevent double inclusion */
#define RTE_APPLICATION_HEADER_FILE_H
#else
#error Multiple application header files included.
#endif
#endif
/* ------------------[API mapping]-------------------------------------------- */
#ifndef RTE_CORE /* if included by software component */
#define Rte_Write_PP_VdyAdapter_AlgoCompState_AlgoCompState Rte_Write_VdyAdapter_PP_VdyAdapter_AlgoCompState_AlgoCompState
#define Rte_Write_PP_VdyAdapter_VdyErrors_VdyErrors Rte_Write_VdyAdapter_PP_VdyAdapter_VdyErrors_VdyErrors
#define Rte_Write_PP_VdyAdapter_VdyEstCurves_VdyEstCurves Rte_Write_VdyAdapter_PP_VdyAdapter_VdyEstCurves_VdyEstCurves
#define Rte_Write_PP_VdyAdapter_VdyOutputNvMData_VdyNvMInOutData Rte_Write_VdyAdapter_PP_VdyAdapter_VdyOutputNvMData_VdyNvMInOutData
#define Rte_Write_PP_VdyAdapter_VdyOffsets_VdyOffsets Rte_Write_VdyAdapter_PP_VdyAdapter_VdyOffsets_VdyOffsets
#define Rte_Write_PP_VdyAdapter_VehDyn_VehDyn Rte_Write_VdyAdapter_PP_VdyAdapter_VehDyn_VehDyn
#define Rte_Read_RP_Fcu_BaseCtrlData_BaseCtrlData Rte_Read_VdyAdapter_RP_Fcu_BaseCtrlData_BaseCtrlData
#define Rte_Read_RP_Cdm_VdyInputNvMData_VdyNvMInOutData Rte_Read_VdyAdapter_RP_Cdm_VdyInputNvMData_VdyNvMInOutData
#define Rte_Read_RP_Fcu_VehPar_VehPar Rte_Read_VdyAdapter_RP_Fcu_VehPar_VehPar
#define Rte_Read_RP_Fcu_VehSig_VehSig Rte_Read_VdyAdapter_RP_Fcu_VehSig_VehSig
#if (!defined(RTE_RUNNABLEAPI_VdyAdapter_InitFunction)) && (!defined(RTE_RUNNABLEAPI_VdyAdapter_VdyExec))
#define Rte_Call_RP_NvM_VdyBlockOperation_GetErrorStatus Rte_Call_VdyAdapter_RP_NvM_VdyBlockOperation_GetErrorStatus
#define Rte_Call_RP_NvM_VdyBlockOperation_ReadBlock Rte_Call_VdyAdapter_RP_NvM_VdyBlockOperation_ReadBlock
#define Rte_Call_RP_NvM_VdyBlockOperation_SetRamBlockStatus Rte_Call_VdyAdapter_RP_NvM_VdyBlockOperation_SetRamBlockStatus
#define Rte_Call_RP_NvM_VdyBlockOperation_WriteBlock Rte_Call_VdyAdapter_RP_NvM_VdyBlockOperation_WriteBlock
#endif
#if (!defined(RTE_RUNNABLEAPI_VdyAdapter_InitFunction)) && (!defined(RTE_RUNNABLEAPI_VdyAdapter_MainFunction))
#define Rte_Call_RP_MtsiAdapter_MeasFreezeData_MeasFreezeData Rte_Call_VdyAdapter_RP_MtsiAdapter_MeasFreezeData_MeasFreezeData
#define Rte_Call_RP_MtsiAdapter_UpdateTaskCycle_UpdateTaskCycle Rte_Call_VdyAdapter_RP_MtsiAdapter_UpdateTaskCycle_UpdateTaskCycle
#endif
#endif

/* ------------------[port handle API mapping]-------------------------------- */
#ifndef RTE_CORE /* if included by software component */
#endif

#define RTE_E_CSI_Mtsi_MeasFreezeData_E_NOT_OK 1U
#define RTE_E_NvMService_E_NOT_OK 1U
#ifndef RTE_CORE /* if included by software component */
#endif

/* ==================[Types]================================================== */
#ifndef RTE_CORE /* if included by software component */
typedef CONSTP2CONST(Rte_CDS_VdyAdapter, TYPEDEF, RTE_CONST) Rte_Instance;
#endif

/* ==================[Definition of variables with external linkage]========== */
#define RTE_START_SEC_OSAPPLICATION_C0_CONST_8
#include <Rte_MemMap.h>
extern CONST(Rte_CDS_VdyAdapter, RTE_CONST) Rte_Instance_VdyAdapter;
#define RTE_STOP_SEC_OSAPPLICATION_C0_CONST_8
#include <Rte_MemMap.h>
#define RTE_START_SEC_OSAPPLICATION_C0_CONST_UNSPECIFIED
#include <Rte_MemMap.h>
extern CONSTP2CONST(Rte_CDS_VdyAdapter, RTE_CONST, RTE_CONST) Rte_Inst_VdyAdapter;
#define RTE_STOP_SEC_OSAPPLICATION_C0_CONST_UNSPECIFIED
#include <Rte_MemMap.h>

/* ==================[Declaration of functions with external linkage]========= */
/* ------------------[declaration of runnable entities]----------------------- */
#define VdyAdapter_START_SEC_CODE
#include <VdyAdapter_MemMap.h>
extern FUNC(void, RTE_CODE) VdyAdapter_InitFunction (void);

extern FUNC(void, RTE_CODE) VdyAdapter_MainFunction (void);

extern FUNC(void, RTE_CODE) VdyAdapter_VdyExec (void);

#define VdyAdapter_STOP_SEC_CODE
#include <VdyAdapter_MemMap.h>

/* ------------------[declaration of API functions provided by Rte]----------- */
#define RTE_START_SEC_OSAPPLICATION_C0_CODE
#include <Rte_MemMap.h>
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Write_VdyAdapter_PP_VdyAdapter_AlgoCompState_AlgoCompState (P2CONST(AlgoCompState_t, AUTOMATIC, RTE_APPL_DATA) data);
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Write_VdyAdapter_PP_VdyAdapter_VdyErrors_VdyErrors (P2CONST(VDYErrors_t, AUTOMATIC, RTE_APPL_DATA) data);
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Write_VdyAdapter_PP_VdyAdapter_VdyEstCurves_VdyEstCurves (P2CONST(VDYEstCurves_t, AUTOMATIC, RTE_APPL_DATA) data);
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Write_VdyAdapter_PP_VdyAdapter_VdyOutputNvMData_VdyNvMInOutData (P2CONST(VDYNvIoData_t, AUTOMATIC, RTE_APPL_DATA) data);
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Write_VdyAdapter_PP_VdyAdapter_VdyOffsets_VdyOffsets (P2CONST(VDYOffsets_t, AUTOMATIC, RTE_APPL_DATA) data);
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Write_VdyAdapter_PP_VdyAdapter_VehDyn_VehDyn (P2CONST(VehDyn_t, AUTOMATIC, RTE_APPL_DATA) data);
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Read_VdyAdapter_RP_Fcu_BaseCtrlData_BaseCtrlData (P2VAR(BaseCtrlData_t, AUTOMATIC, RTE_APPL_DATA) data);
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Read_VdyAdapter_RP_Cdm_VdyInputNvMData_VdyNvMInOutData (P2VAR(VDYNvIoData_t, AUTOMATIC, RTE_APPL_DATA) data);
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Read_VdyAdapter_RP_Fcu_VehPar_VehPar (P2VAR(VehPar_t, AUTOMATIC, RTE_APPL_DATA) data);
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Read_VdyAdapter_RP_Fcu_VehSig_VehSig (P2VAR(VehSig_t, AUTOMATIC, RTE_APPL_DATA) data);
#if (!defined(RTE_RUNNABLEAPI_VdyAdapter_InitFunction)) && (!defined(RTE_RUNNABLEAPI_VdyAdapter_VdyExec))
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Call_VdyAdapter_RP_NvM_VdyBlockOperation_GetErrorStatus (P2VAR(NvM_RequestResultType, AUTOMATIC, RTE_APPL_DATA) RequestResultPtr);
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Call_VdyAdapter_RP_NvM_VdyBlockOperation_ReadBlock (NvM_DstPtrType DstPtr);
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Call_VdyAdapter_RP_NvM_VdyBlockOperation_SetRamBlockStatus (boolean BlockChanged);
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Call_VdyAdapter_RP_NvM_VdyBlockOperation_WriteBlock (NvM_SrcPtrType SrcPtr);
#endif
#if (!defined(RTE_RUNNABLEAPI_VdyAdapter_InitFunction)) && (!defined(RTE_RUNNABLEAPI_VdyAdapter_MainFunction))
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Call_VdyAdapter_RP_MtsiAdapter_MeasFreezeData_MeasFreezeData (uint32_t VirtualAddress, uint32_t FunctionId, VoidPtr_t Data, uint32_t Length);
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Call_VdyAdapter_RP_MtsiAdapter_UpdateTaskCycle_UpdateTaskCycle (uint16_t TaskId);
#endif

#define RTE_STOP_SEC_OSAPPLICATION_C0_CODE
#include <Rte_MemMap.h>

/* ------------------[declaration of API functions provided by other Appl]---- */

#ifdef __cplusplus
} /* extern "C" */
#endif /* __cplusplus */

#endif
/** @} doxygen end group definition  */
/* ==================[end of file]============================================ */
