#ifndef RTE_ESM_H
#define RTE_ESM_H
/**
 * \file
 *
 * \brief AUTOSAR Rte
 *
 * This file contains the implementation of the AUTOSAR
 * module Rte.
 *
 * \version 6.6.3
 *
 * \author Elektrobit Automotive GmbH, 91058 Erlangen, Germany
 *
 * Copyright 2005 - 2021 Elektrobit Automotive GmbH
 * All rights exclusively reserved for Elektrobit Automotive GmbH,
 * unless expressly agreed to otherwise.
 */

/*
 * This file contains Rte component declarations for component type Esm
 *
 * This file has been automatically generated by
 * EB tresos AutoCore Rte Generator Version 6.6.3
 * on Tue Jun 20 15:43:20 CST 2023. !!!IGNORE-LINE!!!
 */

/*
 * \addtogroup Rte Runtime Environment
 * @{
 */

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */
/* ==================[Includes]=============================================== */
#include <TSMem.h>
#include <Rte_Esm_Type.h>
#include <Rte_Esm_Hook.h>
#include <Rte_Components_Shared.h>

/* ==================[Macros]================================================= */
#ifndef RTE_CORE /* if included by software component */
#ifndef RTE_APPLICATION_HEADER_FILE_H /* prevent double inclusion */
#define RTE_APPLICATION_HEADER_FILE_H
#else
#error Multiple application header files included.
#endif
#endif
/* ------------------[API mapping]-------------------------------------------- */
#ifndef RTE_CORE /* if included by software component */
#if !defined(RTE_RUNNABLEAPI_Esm_InitFunction)
#define Rte_Read_RP_Dsm_SRI_SocResetControlState_DE_SocRersetControlState Rte_Read_Esm_RP_Dsm_SRI_SocResetControlState_DE_SocRersetControlState
#define Rte_Call_RP_Time_GlobalTime_GetTimeStampMs Rte_Call_Esm_RP_Time_GlobalTime_GetTimeStampMs
#define Rte_Call_RP_Comco_CSI_NMWakupFlag_NMWakupFlag Rte_Call_Esm_RP_Comco_CSI_NMWakupFlag_NMWakupFlag
#define Rte_Call_RP_EcuM_ShutdownTarget_Switchoff_SelectShutdownTarget Rte_Call_Esm_RP_EcuM_ShutdownTarget_Switchoff_SelectShutdownTarget
#define Rte_Call_RP_Sdc_SendInterface_SocInfo_SocShutdownReuqest Rte_Call_Esm_RP_Sdc_SendInterface_SocInfo_SocShutdownReuqest
#define Rte_Call_RP_Comco_CSI_nmCurrentState_nmCurrentState Rte_Call_Esm_RP_Comco_CSI_nmCurrentState_nmCurrentState
#endif
#endif

/* ------------------[port handle API mapping]-------------------------------- */
#ifndef RTE_CORE /* if included by software component */
#endif

#define RTE_E_CSI_NMWakupFlag_E_NOT_OK 1U
#define RTE_E_CSI_NMWakupFlag_E_OK 0U
#define RTE_E_CSI_nmCurrentState_E_NOT_OK 1U
#define RTE_E_CSI_nmCurrentState_E_OK 0U
#define RTE_E_EcuM_ShutdownTarget_E_NOT_OK 1U
#define RTE_E_CSI_Sdc_SendInterface_SocInfo_E_OK 0U
#define RTE_E_CSI_Time_GetTimeStampInfo_E_OK 0U
#ifndef RTE_CORE /* if included by software component */
#endif

/* ==================[Types]================================================== */
#ifndef RTE_CORE /* if included by software component */
typedef CONSTP2CONST(Rte_CDS_Esm, TYPEDEF, RTE_CONST) Rte_Instance;
#endif

/* ==================[Definition of variables with external linkage]========== */
#define RTE_START_SEC_OSAPPLICATION_C0_CONST_8
#include <Rte_MemMap.h>
extern CONST(Rte_CDS_Esm, RTE_CONST) Rte_Instance_Esm;
#define RTE_STOP_SEC_OSAPPLICATION_C0_CONST_8
#include <Rte_MemMap.h>
#define RTE_START_SEC_OSAPPLICATION_C0_CONST_UNSPECIFIED
#include <Rte_MemMap.h>
extern CONSTP2CONST(Rte_CDS_Esm, RTE_CONST, RTE_CONST) Rte_Inst_Esm;
#define RTE_STOP_SEC_OSAPPLICATION_C0_CONST_UNSPECIFIED
#include <Rte_MemMap.h>

/* ==================[Declaration of functions with external linkage]========= */
/* ------------------[declaration of runnable entities]----------------------- */
#define Esm_START_SEC_CODE
#include <Esm_MemMap.h>
extern FUNC(void, RTE_CODE) Esm_InitFunction (void);

extern FUNC(void, RTE_CODE) Esm_MainFunction (void);

#define Esm_STOP_SEC_CODE
#include <Esm_MemMap.h>

/* ------------------[declaration of API functions provided by Rte]----------- */
#define RTE_START_SEC_OSAPPLICATION_C0_CODE
#include <Rte_MemMap.h>
#if !defined(RTE_RUNNABLEAPI_Esm_InitFunction)
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Read_Esm_RP_Dsm_SRI_SocResetControlState_DE_SocRersetControlState (P2VAR(uint8, AUTOMATIC, RTE_APPL_DATA) data);
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Call_Esm_RP_Time_GlobalTime_GetTimeStampMs (P2VAR(uint64_t, AUTOMATIC, RTE_APPL_DATA) ts_ms);
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Call_Esm_RP_Comco_CSI_NMWakupFlag_NMWakupFlag (P2VAR(uint8_t, AUTOMATIC, RTE_APPL_DATA) u_WakeupFlag);
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Call_Esm_RP_EcuM_ShutdownTarget_Switchoff_SelectShutdownTarget (EcuM_StateType target, uint8 mode);
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Call_Esm_RP_Sdc_SendInterface_SocInfo_SocShutdownReuqest (void);
extern FUNC(Std_ReturnType, RTE_CODE) Rte_Call_Esm_RP_Comco_CSI_nmCurrentState_nmCurrentState (P2VAR(uint8_t, AUTOMATIC, RTE_APPL_DATA) u_CurNmState);
#endif

#define RTE_STOP_SEC_OSAPPLICATION_C0_CODE
#include <Rte_MemMap.h>

/* ------------------[declaration of API functions provided by other Appl]---- */

#ifdef __cplusplus
} /* extern "C" */
#endif /* __cplusplus */

#endif
/** @} doxygen end group definition  */
/* ==================[end of file]============================================ */
