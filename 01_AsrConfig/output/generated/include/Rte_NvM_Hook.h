#ifndef RTE_NVM_HOOK_H
#define RTE_NVM_HOOK_H
/**
 * \file
 *
 * \brief AUTOSAR Rte
 *
 * This file contains the implementation of the AUTOSAR
 * module Rte.
 *
 * \version 6.6.3
 *
 * \author Elektrobit Automotive GmbH, 91058 Erlangen, Germany
 *
 * Copyright 2005 - 2021 Elektrobit Automotive GmbH
 * All rights exclusively reserved for Elektrobit Automotive GmbH,
 * unless expressly agreed to otherwise.
 */

/*
 * This file contains Rte hook declarations for the software component type NvM
 *
 * This file has been automatically generated by
 * EB tresos AutoCore Rte Generator Version 6.6.3
 * on Thu Mar 16 13:26:11 CST 2023. !!!IGNORE-LINE!!!
 */

/*
 * \addtogroup Rte Runtime Environment
 * @{
 */

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */
/* ==================[Includes]=============================================== */
#include <Rte_Cfg.h>
#include <Rte_Type.h>

/* ==================[Macros]================================================= */
#ifndef RTE_CORE
#ifndef RTE_VFB_TRACE
#define RTE_VFB_TRACE 0
#endif
#endif
#define RTE_START_SEC_CODE
#include <Rte_MemMap.h>
#if (defined(Rte_CallHook_NvM_PMirror_NvM_BLOCK_VDYData_ReadRamBlockFromNvm_Start)) && (RTE_VFB_TRACE == FALSE)
#undef Rte_CallHook_NvM_PMirror_NvM_BLOCK_VDYData_ReadRamBlockFromNvm_Start
#endif
#if defined(Rte_CallHook_NvM_PMirror_NvM_BLOCK_VDYData_ReadRamBlockFromNvm_Start)
#undef Rte_CallHook_NvM_PMirror_NvM_BLOCK_VDYData_ReadRamBlockFromNvm_Start
extern FUNC(void, RTE_APPL_CODE) Rte_CallHook_NvM_PMirror_NvM_BLOCK_VDYData_ReadRamBlockFromNvm_Start (NvM_SrcPtrType SrcPtr);
#else
#define Rte_CallHook_NvM_PMirror_NvM_BLOCK_VDYData_ReadRamBlockFromNvm_Start(SrcPtr) ((void)0)
#endif
#if (defined(Rte_CallHook_NvM_PMirror_NvM_BLOCK_VDYData_ReadRamBlockFromNvm_Return)) && (RTE_VFB_TRACE == FALSE)
#undef Rte_CallHook_NvM_PMirror_NvM_BLOCK_VDYData_ReadRamBlockFromNvm_Return
#endif
#if defined(Rte_CallHook_NvM_PMirror_NvM_BLOCK_VDYData_ReadRamBlockFromNvm_Return)
#undef Rte_CallHook_NvM_PMirror_NvM_BLOCK_VDYData_ReadRamBlockFromNvm_Return
extern FUNC(void, RTE_APPL_CODE) Rte_CallHook_NvM_PMirror_NvM_BLOCK_VDYData_ReadRamBlockFromNvm_Return (NvM_SrcPtrType SrcPtr);
#else
#define Rte_CallHook_NvM_PMirror_NvM_BLOCK_VDYData_ReadRamBlockFromNvm_Return(SrcPtr) ((void)0)
#endif
#if (defined(Rte_CallHook_NvM_PMirror_NvM_BLOCK_VDYData_WriteRamBlockToNvm_Start)) && (RTE_VFB_TRACE == FALSE)
#undef Rte_CallHook_NvM_PMirror_NvM_BLOCK_VDYData_WriteRamBlockToNvm_Start
#endif
#if defined(Rte_CallHook_NvM_PMirror_NvM_BLOCK_VDYData_WriteRamBlockToNvm_Start)
#undef Rte_CallHook_NvM_PMirror_NvM_BLOCK_VDYData_WriteRamBlockToNvm_Start
extern FUNC(void, RTE_APPL_CODE) Rte_CallHook_NvM_PMirror_NvM_BLOCK_VDYData_WriteRamBlockToNvm_Start (NvM_DstPtrType DstPtr);
#else
#define Rte_CallHook_NvM_PMirror_NvM_BLOCK_VDYData_WriteRamBlockToNvm_Start(DstPtr) ((void)0)
#endif
#if (defined(Rte_CallHook_NvM_PMirror_NvM_BLOCK_VDYData_WriteRamBlockToNvm_Return)) && (RTE_VFB_TRACE == FALSE)
#undef Rte_CallHook_NvM_PMirror_NvM_BLOCK_VDYData_WriteRamBlockToNvm_Return
#endif
#if defined(Rte_CallHook_NvM_PMirror_NvM_BLOCK_VDYData_WriteRamBlockToNvm_Return)
#undef Rte_CallHook_NvM_PMirror_NvM_BLOCK_VDYData_WriteRamBlockToNvm_Return
extern FUNC(void, RTE_APPL_CODE) Rte_CallHook_NvM_PMirror_NvM_BLOCK_VDYData_WriteRamBlockToNvm_Return (NvM_DstPtrType DstPtr);
#else
#define Rte_CallHook_NvM_PMirror_NvM_BLOCK_VDYData_WriteRamBlockToNvm_Return(DstPtr) ((void)0)
#endif
#if (defined(Rte_Runnable_NvM_RE_MainFunction_Start)) && (RTE_VFB_TRACE == FALSE)
#undef Rte_Runnable_NvM_RE_MainFunction_Start
#endif
#if defined(Rte_Runnable_NvM_RE_MainFunction_Start)
#undef Rte_Runnable_NvM_RE_MainFunction_Start
extern FUNC(void, RTE_APPL_CODE) Rte_Runnable_NvM_RE_MainFunction_Start (void);
#else
#define Rte_Runnable_NvM_RE_MainFunction_Start() ((void)0)
#endif
#if (defined(Rte_Runnable_NvM_RE_MainFunction_Return)) && (RTE_VFB_TRACE == FALSE)
#undef Rte_Runnable_NvM_RE_MainFunction_Return
#endif
#if defined(Rte_Runnable_NvM_RE_MainFunction_Return)
#undef Rte_Runnable_NvM_RE_MainFunction_Return
extern FUNC(void, RTE_APPL_CODE) Rte_Runnable_NvM_RE_MainFunction_Return (void);
#else
#define Rte_Runnable_NvM_RE_MainFunction_Return() ((void)0)
#endif
#if (defined(Rte_Runnable_NvM_RE_GetErrorStatus_Start)) && (RTE_VFB_TRACE == FALSE)
#undef Rte_Runnable_NvM_RE_GetErrorStatus_Start
#endif
#if defined(Rte_Runnable_NvM_RE_GetErrorStatus_Start)
#undef Rte_Runnable_NvM_RE_GetErrorStatus_Start
extern FUNC(void, RTE_APPL_CODE) Rte_Runnable_NvM_RE_GetErrorStatus_Start (void);
#else
#define Rte_Runnable_NvM_RE_GetErrorStatus_Start() ((void)0)
#endif
#if (defined(Rte_Runnable_NvM_RE_GetErrorStatus_Return)) && (RTE_VFB_TRACE == FALSE)
#undef Rte_Runnable_NvM_RE_GetErrorStatus_Return
#endif
#if defined(Rte_Runnable_NvM_RE_GetErrorStatus_Return)
#undef Rte_Runnable_NvM_RE_GetErrorStatus_Return
extern FUNC(void, RTE_APPL_CODE) Rte_Runnable_NvM_RE_GetErrorStatus_Return (void);
#else
#define Rte_Runnable_NvM_RE_GetErrorStatus_Return() ((void)0)
#endif
#if (defined(Rte_Runnable_NvM_RE_SetDataIndex_Start)) && (RTE_VFB_TRACE == FALSE)
#undef Rte_Runnable_NvM_RE_SetDataIndex_Start
#endif
#if defined(Rte_Runnable_NvM_RE_SetDataIndex_Start)
#undef Rte_Runnable_NvM_RE_SetDataIndex_Start
extern FUNC(void, RTE_APPL_CODE) Rte_Runnable_NvM_RE_SetDataIndex_Start (void);
#else
#define Rte_Runnable_NvM_RE_SetDataIndex_Start() ((void)0)
#endif
#if (defined(Rte_Runnable_NvM_RE_SetDataIndex_Return)) && (RTE_VFB_TRACE == FALSE)
#undef Rte_Runnable_NvM_RE_SetDataIndex_Return
#endif
#if defined(Rte_Runnable_NvM_RE_SetDataIndex_Return)
#undef Rte_Runnable_NvM_RE_SetDataIndex_Return
extern FUNC(void, RTE_APPL_CODE) Rte_Runnable_NvM_RE_SetDataIndex_Return (void);
#else
#define Rte_Runnable_NvM_RE_SetDataIndex_Return() ((void)0)
#endif
#if (defined(Rte_Runnable_NvM_RE_GetDataIndex_Start)) && (RTE_VFB_TRACE == FALSE)
#undef Rte_Runnable_NvM_RE_GetDataIndex_Start
#endif
#if defined(Rte_Runnable_NvM_RE_GetDataIndex_Start)
#undef Rte_Runnable_NvM_RE_GetDataIndex_Start
extern FUNC(void, RTE_APPL_CODE) Rte_Runnable_NvM_RE_GetDataIndex_Start (void);
#else
#define Rte_Runnable_NvM_RE_GetDataIndex_Start() ((void)0)
#endif
#if (defined(Rte_Runnable_NvM_RE_GetDataIndex_Return)) && (RTE_VFB_TRACE == FALSE)
#undef Rte_Runnable_NvM_RE_GetDataIndex_Return
#endif
#if defined(Rte_Runnable_NvM_RE_GetDataIndex_Return)
#undef Rte_Runnable_NvM_RE_GetDataIndex_Return
extern FUNC(void, RTE_APPL_CODE) Rte_Runnable_NvM_RE_GetDataIndex_Return (void);
#else
#define Rte_Runnable_NvM_RE_GetDataIndex_Return() ((void)0)
#endif
#if (defined(Rte_Runnable_NvM_RE_SetRamBlockStatus_Start)) && (RTE_VFB_TRACE == FALSE)
#undef Rte_Runnable_NvM_RE_SetRamBlockStatus_Start
#endif
#if defined(Rte_Runnable_NvM_RE_SetRamBlockStatus_Start)
#undef Rte_Runnable_NvM_RE_SetRamBlockStatus_Start
extern FUNC(void, RTE_APPL_CODE) Rte_Runnable_NvM_RE_SetRamBlockStatus_Start (void);
#else
#define Rte_Runnable_NvM_RE_SetRamBlockStatus_Start() ((void)0)
#endif
#if (defined(Rte_Runnable_NvM_RE_SetRamBlockStatus_Return)) && (RTE_VFB_TRACE == FALSE)
#undef Rte_Runnable_NvM_RE_SetRamBlockStatus_Return
#endif
#if defined(Rte_Runnable_NvM_RE_SetRamBlockStatus_Return)
#undef Rte_Runnable_NvM_RE_SetRamBlockStatus_Return
extern FUNC(void, RTE_APPL_CODE) Rte_Runnable_NvM_RE_SetRamBlockStatus_Return (void);
#else
#define Rte_Runnable_NvM_RE_SetRamBlockStatus_Return() ((void)0)
#endif
#if (defined(Rte_Runnable_NvM_RE_ReadBlock_Start)) && (RTE_VFB_TRACE == FALSE)
#undef Rte_Runnable_NvM_RE_ReadBlock_Start
#endif
#if defined(Rte_Runnable_NvM_RE_ReadBlock_Start)
#undef Rte_Runnable_NvM_RE_ReadBlock_Start
extern FUNC(void, RTE_APPL_CODE) Rte_Runnable_NvM_RE_ReadBlock_Start (void);
#else
#define Rte_Runnable_NvM_RE_ReadBlock_Start() ((void)0)
#endif
#if (defined(Rte_Runnable_NvM_RE_ReadBlock_Return)) && (RTE_VFB_TRACE == FALSE)
#undef Rte_Runnable_NvM_RE_ReadBlock_Return
#endif
#if defined(Rte_Runnable_NvM_RE_ReadBlock_Return)
#undef Rte_Runnable_NvM_RE_ReadBlock_Return
extern FUNC(void, RTE_APPL_CODE) Rte_Runnable_NvM_RE_ReadBlock_Return (void);
#else
#define Rte_Runnable_NvM_RE_ReadBlock_Return() ((void)0)
#endif
#if (defined(Rte_Runnable_NvM_RE_WriteBlock_Start)) && (RTE_VFB_TRACE == FALSE)
#undef Rte_Runnable_NvM_RE_WriteBlock_Start
#endif
#if defined(Rte_Runnable_NvM_RE_WriteBlock_Start)
#undef Rte_Runnable_NvM_RE_WriteBlock_Start
extern FUNC(void, RTE_APPL_CODE) Rte_Runnable_NvM_RE_WriteBlock_Start (void);
#else
#define Rte_Runnable_NvM_RE_WriteBlock_Start() ((void)0)
#endif
#if (defined(Rte_Runnable_NvM_RE_WriteBlock_Return)) && (RTE_VFB_TRACE == FALSE)
#undef Rte_Runnable_NvM_RE_WriteBlock_Return
#endif
#if defined(Rte_Runnable_NvM_RE_WriteBlock_Return)
#undef Rte_Runnable_NvM_RE_WriteBlock_Return
extern FUNC(void, RTE_APPL_CODE) Rte_Runnable_NvM_RE_WriteBlock_Return (void);
#else
#define Rte_Runnable_NvM_RE_WriteBlock_Return() ((void)0)
#endif
#if (defined(Rte_Runnable_NvM_RE_RestoreBlockDefaults_Start)) && (RTE_VFB_TRACE == FALSE)
#undef Rte_Runnable_NvM_RE_RestoreBlockDefaults_Start
#endif
#if defined(Rte_Runnable_NvM_RE_RestoreBlockDefaults_Start)
#undef Rte_Runnable_NvM_RE_RestoreBlockDefaults_Start
extern FUNC(void, RTE_APPL_CODE) Rte_Runnable_NvM_RE_RestoreBlockDefaults_Start (void);
#else
#define Rte_Runnable_NvM_RE_RestoreBlockDefaults_Start() ((void)0)
#endif
#if (defined(Rte_Runnable_NvM_RE_RestoreBlockDefaults_Return)) && (RTE_VFB_TRACE == FALSE)
#undef Rte_Runnable_NvM_RE_RestoreBlockDefaults_Return
#endif
#if defined(Rte_Runnable_NvM_RE_RestoreBlockDefaults_Return)
#undef Rte_Runnable_NvM_RE_RestoreBlockDefaults_Return
extern FUNC(void, RTE_APPL_CODE) Rte_Runnable_NvM_RE_RestoreBlockDefaults_Return (void);
#else
#define Rte_Runnable_NvM_RE_RestoreBlockDefaults_Return() ((void)0)
#endif
#if (defined(Rte_Runnable_NvM_RE_EraseBlock_Start)) && (RTE_VFB_TRACE == FALSE)
#undef Rte_Runnable_NvM_RE_EraseBlock_Start
#endif
#if defined(Rte_Runnable_NvM_RE_EraseBlock_Start)
#undef Rte_Runnable_NvM_RE_EraseBlock_Start
extern FUNC(void, RTE_APPL_CODE) Rte_Runnable_NvM_RE_EraseBlock_Start (void);
#else
#define Rte_Runnable_NvM_RE_EraseBlock_Start() ((void)0)
#endif
#if (defined(Rte_Runnable_NvM_RE_EraseBlock_Return)) && (RTE_VFB_TRACE == FALSE)
#undef Rte_Runnable_NvM_RE_EraseBlock_Return
#endif
#if defined(Rte_Runnable_NvM_RE_EraseBlock_Return)
#undef Rte_Runnable_NvM_RE_EraseBlock_Return
extern FUNC(void, RTE_APPL_CODE) Rte_Runnable_NvM_RE_EraseBlock_Return (void);
#else
#define Rte_Runnable_NvM_RE_EraseBlock_Return() ((void)0)
#endif
#if (defined(Rte_Runnable_NvM_RE_InvalidateNvBlock_Start)) && (RTE_VFB_TRACE == FALSE)
#undef Rte_Runnable_NvM_RE_InvalidateNvBlock_Start
#endif
#if defined(Rte_Runnable_NvM_RE_InvalidateNvBlock_Start)
#undef Rte_Runnable_NvM_RE_InvalidateNvBlock_Start
extern FUNC(void, RTE_APPL_CODE) Rte_Runnable_NvM_RE_InvalidateNvBlock_Start (void);
#else
#define Rte_Runnable_NvM_RE_InvalidateNvBlock_Start() ((void)0)
#endif
#if (defined(Rte_Runnable_NvM_RE_InvalidateNvBlock_Return)) && (RTE_VFB_TRACE == FALSE)
#undef Rte_Runnable_NvM_RE_InvalidateNvBlock_Return
#endif
#if defined(Rte_Runnable_NvM_RE_InvalidateNvBlock_Return)
#undef Rte_Runnable_NvM_RE_InvalidateNvBlock_Return
extern FUNC(void, RTE_APPL_CODE) Rte_Runnable_NvM_RE_InvalidateNvBlock_Return (void);
#else
#define Rte_Runnable_NvM_RE_InvalidateNvBlock_Return() ((void)0)
#endif
#define RTE_STOP_SEC_CODE
#include <Rte_MemMap.h>

#ifdef __cplusplus
} /* extern "C" */
#endif /* __cplusplus */

#endif
/** @} doxygen end group definition  */
/* ==================[end of file]============================================ */
