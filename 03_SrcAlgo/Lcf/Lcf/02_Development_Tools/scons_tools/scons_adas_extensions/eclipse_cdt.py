"""
Filename                  :  scons_adas_extensions\eclipse_cdt.py
Description               :  Script used to generate Eclipse project for unit test.
"""
#***************************************************************************************************
# COMPANY: Continental AG, ADAS, A.D.C. GmbH
#
# PROJECT: ETK/SCT_Sconstools
#
# COMPONENT: scons_adas_extensions
#
# MODULE NAME: eclipse_cdt.py
#
# DESCRIPTION: Script used to generate Eclipse project for unit test.
#
# INITIAL AUTHOR: Spruck, Jochen (spruckj)
#
# CREATION DATE: - 2013/01/29
#
# LAST CHANGE:      $Date: 2021/12/13 19:03:52CET $
#                   $Author: Wang, David (Wangd3) $
#
# CURRENT VERSION:  $Revision: 1.1 $
#############################################################################
# CHANGES:                   $Log: eclipse_cdt.py  $
# CHANGES:                   Revision 1.1 2021/12/13 19:03:52CET Wang, David (Wangd3) 
# CHANGES:                   Initial revision
# CHANGES:                   Member added to project /ADAS/Projects/MFC5xx/MFC5J3/06_Algorithm/DPU/04_Engineering/02_Development_Tools/scons_tools/scons_adas_extensions/project.pj
# CHANGES:                   Revision 1.8 2016/07/27 10:55:50CEST Annashamachar, Shwetha (uidj8746) 
# CHANGES:                   Scons -c not cleaning results generated by xxx_ide_unittests
# CHANGES:                   Revision 1.7 2016/07/27 09:18:30CEST Annashamachar, Shwetha (uidj8746) 
# CHANGES:                   Scons -c not cleaning results generated by xxx_ide_unittests
# CHANGES:                   Revision 1.6 2016/05/27 11:46:04CEST Bhagawati, Tridip (uidr2134) 
# CHANGES:                   File and function header updated
# CHANGES:                   Revision 1.5 2015/06/26 05:17:17CEST Palanisamy-EXT, Lenin (uidr0826) 
# CHANGES:                   Add revision label with module description for all GSCons files (Issue 320651)
# CHANGES:                   - Added comments -  uidr0826 [Jun 26, 2015 5:17:17 AM CEST]
# CHANGES:                   Change Package : 350940:1 http://mks-psad:7002/im/viewissue?selection=350940

#***************************************************************************************************

# Eclipse CDT 5.0 generator for Waf
# Richard Quirk 2009-1011 (New BSD License)
# Thomas Nagy 2011 (ported to Waf 1.6)
# Chris Winstanley September 2012 (ported to scons, added workspace generation,
#                                  added preference import, modified 
#                                  prettyprinting) 
#########
# IMPORTS
#########
import sys, os, re
import SCons
from xml.dom.minidom import Document
from SCons.Script import *

#########
# GLOBALS
#########
oe_cdt = 'org.eclipse.cdt'
cdt_mk = oe_cdt + '.make.core'
cdt_core = oe_cdt + '.core'
cdt_bld = oe_cdt + '.build.core'

def _WritePreferenceXmlAntBuilderFile(filename, preferencesFile):
    """
    Function                     :  _WritePreferenceXmlAntBuilderFile
    Description                  :  Writes an Ant builder file which contains a reference to the preferences file to be imported.
    filename                     :  
    preferencesFile              :  
    Returns                      :  
    """
    fileHeader = \
        '<?xml version="1.0" encoding="UTF-8" ?>\n' \
        '<project default="importpreferences">\n' \
        '<target name="importpreferences" description="import preferences from file">\n'
    fileFooter = ' </target>\n</project>' 
    xmlFile = open(filename, 'w')
    xmlFile.write(fileHeader)
    xmlFile.write('<ImportPreferences preferencesFile="' +
                  preferencesFile + '"/>')
    xmlFile.write(fileFooter)
    xmlFile.close()

def _WriteXmlToProjectFile(xmlDoc, fileName):
    """
    Function              :  _WriteXmlToProjectFile
    Description           :  Writes the given XML document to the given file.
    xmlDoc                :  XML file to be read from.
    fileName              :  Project file to write.
    Returns               :  
    """
    projectFile = open(fileName,'w')

    # The standard prettyprintting provided by xmlDoc.toprettyxml(), eg:
    #
    #     <dictionary>
    #         <key>
    #             org.eclipse.cdt.make.core.enableFullBuild
    #         </key>
    #         <value>
    #             true
    #         </value>
    #     </dictionary>
    #
    # does not appear to get on with Eclipse very well - strange things
    # happen like not being able to clean the current project by right
    # clicking on the project in the browser and selecting clean.
    #
    # However, the following style appears to work better:
    # 
    #     <dictionary>
    #         <key>org.eclipse.cdt.make.core.enableFullBuild</key>
    #         <value>true</value>
    #     </dictionary>
    #
    # Unforunately the regex below doesn't maintain indentation - TBD!

    # projectFile.write(xmlDoc.toprettyxml())
    out = xmlDoc.toxml()
    niceOut = re.sub(r'><', r'>\n<', re.sub(r'(<\/.*?>)', r'\1\n', out))
    projectFile.write(niceOut)
    projectFile.close()
    return 0

def _CreateImportFile(fileName):
    """
    Function             :  _CreateImportFile
    Description          :  Creates a .import file that signifies a particular Eclipse project has been imported into a workspace.
    fileName             :  
    Returns              :  
    """
    open(fileName, 'w').write("DO NOT DELETE MANUALLY - use scons.bat -c\n")
    return 0

########################################################
# Actions
# SCons actions created for the _WriteXmlToProjectFile
# and _CreateImportFile functions.
########################################################
WritePreferenceXmlAntBuilderFile = \
    SCons.Action.ActionFactory(_WritePreferenceXmlAntBuilderFile,
                               lambda filename, preferences:
                               'Writing Ant build file to %s' % filename)

WriteXmlToProjectFile = \
    SCons.Action.ActionFactory(_WriteXmlToProjectFile,
                               lambda xmlDoc, fileName:
                               'Writing XML to %s' % fileName)

CreateImportFile = \
    SCons.Action.ActionFactory(_CreateImportFile, 
                               lambda fileName:
                               'Writing project export file %s' % fileName)
       
def EclipseProject(env,
                   target_name,
                   target_dir,
		   variants,
                   scons_targets,
		   cplusplus,
                   linked_resources=None,
		   additional_includes=None,
		   scons=None,
                   *args,
                   **kw):
 
    """
    Function                        :  EclipseProject
    Description                     :  Pseudo-Builder for eclipse projects. Don't use an actual builder as the targets are always the same and
	                                   we don't want to be forced to specify the targets on each call.
    env                             :  Environment variable.
    target_name                     :  Name of the application to be built.
    target_dir                      :  The directory where the Eclipse project will be stored.
    variants                        :  list of build variant, for example "debug", "release".
    scons_targets                   :  A list of SCons targets used to build the application, indexed by variant
    cplusplus                       :  True if a C++ project is to be built,
                                       False if a C project is to be built.	
    linked_resources                :  a list of external files and/or directories to be linked into the Eclipse project.
    additional_includes             :  non-default natures to be added to the list of natures in the .project file. Here you can specify natures for particular tools built on top of Eclipse.
    scons                           :  the command used to execute scons. Leave blank to allow eclipse_cdt.py to autodiscover.
    *args                           :  
    **kw                            :  
    Returns                         :  
    """
    scons_exe = ""
    if scons:
        python_exe = scons
	scons_py = ""
    else:
        python_exe = sys.executable
        # The following works OK for movable python.....
        #scons = os.path.abspath(sys.argv[0])
        # The following works OK for movable and portable python.....
        scons_py = str(Dir(os.path.dirname(sys.argv[0])).abspath)
	scons_py = scons_py+"\\"+os.path.basename(sys.argv[0])

    project = impl_create_project(target_name,
				  cplusplus,
                                  linked_resources,
                                  *args,
                                  **kw)
    projectTarget = Command(target_dir+'.project',
                            [],
                            WriteXmlToProjectFile(project, "$TARGET"))

    cpppath = list()
    for path in env['CPPPATH']:
        # ensure any SCons characters (#, .) are expanded
        cpppath.append(str(Dir(path).abspath))

    # Currently unused parameters - consider removal or proper inclusion in
    # interface.
    source_dirs = []

    project = impl_create_cproject(python_exe,
                                   scons_py,
				   variants,
                                   scons_targets,
                                   target_name,
                                   additional_includes,
                                   cpppath,
                                   source_dirs)
    cprojectTarget = Command(target_dir+'.cproject',
                             [],
                             WriteXmlToProjectFile(project, "$TARGET"))

    return [projectTarget, cprojectTarget]


def EclipseWorkspace(env, target_dir, projects=None, preferences=None):

    """
    Function                 :  EclipseWorkspace
    Description              :  Pseudo-Builder for eclipse workspaces.
    env                      :  Environment variable.
    target_dir               :  Directory to place the workspace.
    projects                 :  list of projects to import into the workspace.
    preferences              :  preference file (.epf) for import into the generated workspace
    Returns                  :  
    """
    baseWorkspaceString = \
        env['ECLIPSE_EXE'] + \
        " -nosplash" + \
        " -data " + \
        str(Dir(target_dir).abspath)

    baseWorkspaceCreationString = \
        baseWorkspaceString + \
        " -application org.eclipse.cdt.managedbuilder.core.headlessbuild"

    if preferences:

        preferencesString = \
            baseWorkspaceString + \
            " -application org.eclipse.ant.core.antRunner -buildfile " + \
            Dir(".").abspath + \
            "\\PreferenceImporter.xml"

        workspaceActions = \
            list([preferencesString, 
                  Delete(Dir(".").abspath+"\\PreferenceImporter.xml")])

        # Create Ant build file to import preferences required for the workspace
        preferencesImportFile = \
            Command("PreferenceImporter.xml",
                    preferences,
                    WritePreferenceXmlAntBuilderFile("$TARGET",
                                                     File(preferences).abspath))

        targetSources = list(preferencesImportFile)

    else:
        workspaceActions = list()
        targetSources = list()

    if projects:

        # Trying to import the same project into a workspace twice results in
        # an Eclipse error. There is no easy way to check if a project has
        # already been imported into an eclipse workspace already, so we use
        # a ".imported" file in the project directory to indicate that the
        # project has already been imported.

        projectPaths = ''
        importFiles = []
        projectsToImport = []

        for project in projects:
            projectPath = Dir(os.path.dirname(str(env.GetBuildPath(project[0])[0]))).abspath
            imported = projectPath + "\\.imported"
            importFile = env.Command(imported, '', CreateImportFile("$TARGET"))
            importFiles.append(importFile)
            Clean(target_dir, imported)
            Clean("all",importFiles)
            if not (os.path.exists(imported) and
                    os.path.isfile(imported) and
                    os.access(imported, os.R_OK)):
                projectPaths = projectPaths + " -import "+projectPath
                projectsToImport.append(project)

        if projectsToImport:

            workspaceCreationString = baseWorkspaceCreationString + projectPaths
            workspaceActions.insert(0, workspaceCreationString)
            targetSources.append(projectsToImport)

            workspace= env.Command(target_dir, targetSources, workspaceActions)

	    Depends(workspace, importFiles)

        # else: if there are projects that have already been imported then
        #       presumably the workspace already exists - do nothing.

    else:
        # Dummy headless build command to force creation of workspace
        # without projects.
        workspaceCreationString = \
            baseWorkspaceCreationString + " -cleanBuild all"

        workspaceActions.insert(0, workspaceCreationString)

        env.Command(target_dir,
                    targetSources,
                    workspaceCreationString)


def generate(env):
    """
    Function        :  generate
    Description     :  Standard SCons function.
    env             :  Environment variable.
    Returns         :  
    """
    try:
        env.AddMethod(EclipseProject, "EclipseProject")
        env.AddMethod(EclipseWorkspace, "EclipseWorkspace")
    except AttributeError:
        # Looks like we use a pre-0.98 version of SCons...
        from SCons.Script.SConscript import SConsEnvironment
        SConsEnvironment.EclipseProject = EclipseProject
        SConsEnvironment.EclipseWorkspace = EclipseWorkspace

def exists(env):
    """
    Function        :  exists
    Description     :  Standard SCons function.
    env             :  Environment variable.
    Returns         :  
    """
    return 1

def impl_create_project(appname,
		        cplusplus,
                        linked_resources,
                        *args,
                        **kw):
    """
    Function                     :  impl_create_project
    Description                  :  Creates the .project XML file.
    appname                      :  Name of the executable to be built.
    cplusplus                    :  True if a C++ project is to be built,
	                                False if a C project is to be built.
    linked_resources             :  A list of external files and/or directories to be linked into the Eclipse project.
    *args                        :  
    **kw                         :  
    Returns                      :  
    """
    doc = Document()
    projectDescription = doc.createElement('projectDescription')
    add(doc, projectDescription, 'name', appname)
    add(doc, projectDescription, 'comment')
    add(doc, projectDescription, 'projects')
    buildSpec = add(doc, projectDescription, 'buildSpec')
    buildCommand = add(doc, buildSpec, 'buildCommand')
    add(doc,
        buildCommand,
        'name',
        oe_cdt + '.managedbuilder.core.genmakebuilder')
    add(doc, buildCommand, 'triggers', 'clean,full,incremental,')
    arguments = add(doc, buildCommand, 'arguments')
    # the default make-style targets are overwritten by the .cproject values
    dictionaries = {
                    cdt_mk + '.contents': cdt_mk + '.activeConfigSettings',
                    cdt_mk + '.enableAutoBuild': 'false',
                    cdt_mk + '.enableCleanBuild': 'true',
                    cdt_mk + '.enableFullBuild': 'true',
                   }
    for k, v in dictionaries.items():
        addDictionary(doc, arguments, k, v)

    natures = add(doc, projectDescription, 'natures')

    if cplusplus:
        nature_list = """
                      core.cnature
                      core.ccnature
                      managedbuilder.core.ScannerConfigNature
                      managedbuilder.core.managedBuildNature
                      """.split()
    else:
        nature_list = """
                      core.cnature
                      managedbuilder.core.ScannerConfigNature
                      managedbuilder.core.managedBuildNature
                      """.split()
    for n in nature_list:
        add(doc, natures, 'nature', oe_cdt + '.' + n)

    additional_nature_list = kw['additional_natures'].split()
    for n in additional_nature_list:
        add(doc, natures, 'nature', n)

    add(doc, natures, 'nature', 'org.python.pydev.pythonNature')

    if linked_resources:
        resources = add(doc, projectDescription, 'linkedResources')
        for l in linked_resources: 
            link = add(doc, resources, 'link')
            add(doc, link, 'name', os.path.basename(l))
            if os.path.isdir(l): 
                add(doc, link, 'type', '2')
            else:
                add(doc, link, 'type', '1')
            l_with_forward_slashes = re.sub(r'\\', '/', l)
            add(doc, link, 'location', l_with_forward_slashes)

    doc.appendChild(projectDescription)
    return doc

def impl_create_cproject(executable,
                         scons,
			 variants,
                         scons_targets,
                         appname,
                         additional_includes,
                         cpppath,
                         source_dirs=[]):
    """
    Function                        :  impl_create_cproject
    Description                     :  Creates the .project XML file.
    executable                      :  Path to python executable.
    scons                           :  Path to the installed SCons python script.
    variants                        :  list of build variant, for example "debug", "release".
    scons_targets                   :  The SCons target used to build the application.
    appname                         :  Name of the executable to be built.
    additional_includes             :  Additional include paths to be included in the project that are not already defined in cpppath.
    cpppath                         :  Includes paths to be included in the project.
    source_dirs                     :  Unused.
    Returns                         :  
    """
    doc = Document()
    doc.appendChild(doc.createProcessingInstruction('fileVersion', '4.0.0'))
    cproject = doc.createElement('cproject')
    storageModuleConf = add(doc, cproject, 'storageModule',
                            {'moduleId': cdt_core + '.settings'})
    
    cconf_id_number = 0
    for variant, scons_target in zip(variants, scons_targets):
	cconf_id_number += 1
	cconf_id_number_str = str(cconf_id_number)
        cconf_id = cdt_core + '.default.config.' + cconf_id_number_str
        cconf = add(doc, storageModuleConf, 'cconfiguration', {'id':cconf_id})
    
        storageModule = add(doc, cconf, 'storageModule',
                            {'buildSystemId': oe_cdt + '.managedbuilder.core.configurationDataProvider',
                             'id': cconf_id,
                             'moduleId': cdt_core + '.settings',
                             'name': variant})
    
        add(doc, storageModule, 'externalSettings')
    
        extensions = add(doc, storageModule, 'extensions')
        extension_list = """
                         VCErrorParser
                         MakeErrorParser
                         GCCErrorParser
                         GASErrorParser
                         GLDErrorParser
                         """.split()
        ext = add(doc, extensions, 'extension',
                  {'id': cdt_core + '.ELF', 'point':cdt_core + '.BinaryParser'})
        for e in extension_list:
            ext = add(doc, extensions, 'extension',
                      {'id': cdt_core + '.' + e, 'point':cdt_core + '.ErrorParser'})
    
        storageModule = add(doc, cconf, 'storageModule',
                            {'moduleId': 'cdtBuildSystem', 'version': '4.0.0'})
        config = add(doc, storageModule, 'configuration',
                     {'artifactName': appname,
                      'id': cconf_id,
                      'name': variant,
                      'parent': cdt_bld + '.prefbase.cfg'})
        folderInfo = add(doc, config, 'folderInfo',
                         {'id': cconf_id+'.', 'name': '/', 'resourcePath': ''})
    
        toolChain = add(doc, folderInfo, 'toolChain',
                        {'id': cdt_bld + '.prefbase.toolchain.' + cconf_id_number_str,
                         'name': 'No ToolChain',
                         'resourceTypeBasedDiscovery': 'false',
                         'superClass': cdt_bld + '.prefbase.toolchain'})
    
        targetPlatform = add(doc, toolChain, 'targetPlatform',
                             { 'binaryParser': 'org.eclipse.cdt.core.ELF',
                               'id': cdt_bld + '.prefbase.toolchain.' + cconf_id_number_str, 'name': ''})
    
        if scons:
            scons_build = '"%s" %s'%(scons, scons_target)
            scons_clean = '"%s" -c %s'%(scons, scons_target)
        else:
            scons_build = '%s'%(scons_target)
            scons_clean = '-c %s'%(scons_target)
    
        builder = add(doc, toolChain, 'builder',
                      {'autoBuildTarget': scons_build,
                       'buildPath' :  str(Dir('#').abspath),
                       'command': executable,
                       'enableAutoBuild': 'false',
                       'cleanBuildTarget': scons_clean,
                       'enableIncrementalBuild': 'true',
                       'id': cdt_bld + '.settings.default.builder.' + cconf_id_number_str,
                       'incrementalBuildTarget': scons_build,
                       'managedBuildOn': 'false',
                       'name': 'Gnu Make Builder',
                       'superClass': cdt_bld + '.settings.default.builder'})
    
        for tool_name in ("Assembly", "GNU C++", "GNU C"):
            tool = add(doc, toolChain, 'tool',
                       {'id': cdt_bld + '.settings.holder.' + cconf_id_number_str,
                        'name': tool_name,
                        'superClass': cdt_bld + '.settings.holder'})
            if cpppath or additional_includes:
                incpaths = cdt_bld + '.settings.holder.incpaths'
                option = add(doc, tool, 'option',
                             {'id': incpaths+'.' + cconf_id_number_str,
                              'name': 'Include Paths',
                              'superClass': incpaths,
                              'valueType': 'includePath'})
                for i in additional_includes:
                    add(doc, option, 'listOptionValue',
                        {'builtIn': 'false',
                         'value': '"%s"'%(i)})
                for i in cpppath:
                    add(doc, option, 'listOptionValue',
                        {'builtIn': 'false',
                         'value': '"%s"'%(i)})
        if source_dirs:
            sourceEntries = add(doc, config, 'sourceEntries')
            for i in source_dirs:
                add(doc, sourceEntries, 'entry',
                    {'excluding': i,
                     'flags': 'VALUE_WORKSPACE_PATH|RESOLVED',
                     'kind': 'sourcePath',
                     'name': ''})
                add(doc, sourceEntries, 'entry',
                    {'flags': 'VALUE_WORKSPACE_PATH|RESOLVED',
                     'kind': 'sourcePath',
                     'name': i})
    
        storageModule = add(doc, cconf, 'storageModule',
                            {'moduleId': cdt_mk + '.buildtargets'})
        buildTargets = add(doc, storageModule, 'buildTargets')
        def addTargetWrap(name, runAll):
            """
            Function            :  addTargetWrap
            Description         :  
            name                :  
            runAll              :  
            Returns             :  
            """
            return addTarget(doc, buildTargets, executable, name,
                             '"%s" %s'%(scons, name), runAll)
        addTargetWrap('configure', True)
        addTargetWrap('dist', False)
        addTargetWrap('install', False)
        addTargetWrap('check', False)

    storageModule = add(doc, cproject, 'storageModule',
                        {'moduleId': 'cdtBuildSystem',
                         'version': '4.0.0'})

    project = add(doc, storageModule, 'project',
                  {'id': '%s.null.1'%appname, 'name': appname})

    doc.appendChild(cproject)
    return doc

def addDictionary(doc, parent, k, v):
    """
    Function            :  addDictionary
    Description         :  Eclipse project dictionary.
    doc                 :  
    parent              :  
    k                   :  
    v                   :  
    Returns             :  
    """
    dictionary = add(doc, parent, 'dictionary')
    add(doc, dictionary, 'key', k)
    add(doc, dictionary, 'value', v)
    return dictionary

def addTarget(doc,
              buildTargets,
              executable,
              name,
              buildTarget,
              runAllBuilders=True):
    """
    Function                   :  addTarget
    Description                :  Adds a build target to the project.
    doc                        :  
    buildTargets               :  
    executable                 :  
    name                       :  
    buildTarget                :  
    runAllBuilders             :  
    Returns                    :  
    """
    target = add(doc, buildTargets, 'target',
                 {'name': name,
                  'path': '',
                  'targetID': oe_cdt + '.build.MakeTargetBuilder'})
    add(doc, target, 'buildCommand', executable)
    add(doc, target, 'buildArguments', None)
    add(doc, target, 'buildTarget', buildTarget)
    add(doc, target, 'stopOnError', 'true')
    add(doc, target, 'useDefaultCommand', 'false')
    add(doc, target, 'runAllBuilders', str(runAllBuilders).lower())

def add(doc, parent, tag, value = None):
    """
    Function            :  add
    Description         :  Adds the given XML tag, value pair to the project file, under the given parent.
    doc                 :  
    parent              :  
    tag                 :  
    value               :  
    Returns             :  
    """
    el = doc.createElement(tag)
    if (value):
        if type(value) == type(str()):
            el.appendChild(doc.createTextNode(value))
        elif type(value) == type(dict()):
            setAttributes(el, value)
    parent.appendChild(el)
    return el

def setAttributes(node, attrs):
    """
    Function           :  setAttributes
    Description        :  Sets attributes for the given XML node.
    node               :  
    attrs              :  
    Returns            :  
    """
    for k, v in attrs.items():
        node.setAttribute(k, v) 
