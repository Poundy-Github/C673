/**********************************************************************************************************************
 *  COPYRIGHT
 *  -------------------------------------------------------------------------------------------------------------------
 *  Copyright (c) 2006-2010 by Vector Informatik GmbH.                                             All rights reserved.
 *
 *                This software is copyright protected and proprietary to Vector Informatik GmbH.
 *                Vector Informatik GmbH grants to you only those rights as set out in the license conditions.
 *                All other rights remain with Vector Informatik GmbH.
 *  -------------------------------------------------------------------------------------------------------------------
 *  FILE DESCRIPTION
 *  -------------------------------------------------------------------------------------------------------------------
 *          File:  Rte_Type.h
 *     Workspace:  D:/Sandboxes/MFC300/MFC300_Base/05_Software/MCU/03_Design/05_DaVinci/mfc310_SMPC.dev
 *   ECU-Project:  MPC
 *  Generated at:  Thu Jul  7 11:15:49 2011
 *
 *     Generator:  MICROSAR RTE Generator Version 2.17.3
 *       License:  License CBD1000091 valid for CBD1000091 A.D.C. GmbH Continental  Package: Daimler Car SLP10  Micro: MPC567xK / MPC5675K  Compiler: Metrowerks V4.0.0
 *
 *   Description:  Header file containing user defined AUTOSAR types and RTE structures
 *********************************************************************************************************************/

/* double include prevention */
#ifndef _RTE_TYPE_H
# define _RTE_TYPE_H

/* MaMu: avoid double include of Os.h to make rte_type.h useable for algos */
//# include "Rte.h"
# include "Std_Types.h"


/**********************************************************************************************************************
 * BEGIN CESSAR_RTE
 *********************************************************************************************************************/

// REMARK Andreas Gilch: Avoid redeclaration of types; e.g. 'ubit32' already in glob_types defined; HLA already includes
// glob_type and wouldn't include 'Rte_Type'. Hence: we do it this way ... :-(
#include "glob_type.h"

/**************************************************************************
This file is generated automatically by the RTE generator
Filename:	Rte_Type.h
CESSAR-CT Version: 3.1.1.11
RTE Version: 3.2.0.1.3.0
Generated on:	Mon Oct 22 11:07:35 CEST 2012
The AUTOSAR Types header file contains the the AUTOSAR data types 
and RTE implementation types definitions. 
**************************************************************************/


#define IN
#define OUT
#define INOUT


#define RTE_E_OK                    ((Std_ReturnType)  0)    /* [Satisfies_rte sws 1058] */
#define RTE_E_INVALID               ((Std_ReturnType)  1)    /* [Satisfies_rte sws 2594] */
#define RTE_E_COM_STOPPED           ((Std_ReturnType)128)    /* [Satisfies_rte sws 1060] */
#define RTE_E_TIMEOUT               ((Std_ReturnType)129)    /* [Satisfies_rte sws 1064] */
#define RTE_E_LIMIT                 ((Std_ReturnType)130)    /* [Satisfies_rte sws 1317] */
#define RTE_E_NO_DATA               ((Std_ReturnType)131)    /* [Satisfies_rte sws 1061] */
#define RTE_E_TRANSMIT_ACK          ((Std_ReturnType)132)    /* [Satisfies_rte sws 1065] */
#define RTE_E_LOST_DATA             ((Std_ReturnType) 64)    /* [Satisfies_rte sws 2571] */
#define RTE_E_MAX_AGE_EXCEEDED      ((Std_ReturnType) 64)    /* [Satisfies_rte sws 2525] */


//#define RTE_VENDOR_ID           8       /* [BSW00402] */
#define RTE_MODULE_ID          42       /* [BSW00402] */
//#define RTE_AR_MAJOR_VERSION    3       /* [BSW00402], [BSW00318], [BSW004] */
//#define RTE_AR_MINOR_VERSION    2       /* [BSW00402], [BSW00318], [BSW004] */
//#define RTE_AR_PATCH_VERSION    0       /* [BSW00402], [BSW00318], [BSW004] */
//#define RTE_SW_MAJOR_VERSION    1       /* [BSW00402], [BSW00318], [BSW004] */
//#define RTE_SW_MINOR_VERSION    3       /* [BSW00402], [BSW00318], [BSW004] */
//#define RTE_SW_PATCH_VERSION    0       /* [BSW00402], [BSW00318] */



/**********************************************/
/* User data types                            */
/**********************************************/

/* The user Data section contains the C type definitions of all AUTOSAR data types */
/* irrespective of their use by the generated RTE [Satisfies_rte sws 2648].        */

/* REMARK Andreas Gilch: removed some redeclarations of types; */
/* Integer types */
typedef uint8 Rte_StatusType             					/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef sint16 SInt16                     /* SInt16 represents integers with a minimum value of -32768 and a maximum value of 32767. For example: -1, 0, -12678, +10000, 2500. */	/* [Satisfies_rte sws 1178] */;
typedef sint32 SInt32                     /* SInt32 represents integers with a minimum value of -2147483648 and a maximum value of 2147483647. For example: -1, 0, -12688778, +10000, 250098675. */	/* [Satisfies_rte sws 1179] */;
typedef sint8 SInt4                      /* SInt4 represents integers with a minimum value of -8 and a maximum value of 7. For example: -1, 0, +7. */	/* [Satisfies_rte sws 1177], [Satisfies_rte sws 1265] */;
typedef sint8 SInt8                      /* SInt8 represents integers with a minimum value of -128 and a maximum value of 127. For example: -1, 0, 18, +100. */	/* [Satisfies_rte sws 1177] */;
typedef uint8 UInt1                      /* UInt1 represents integers with a minimum value of 0 and a maximum value of 1. For example: 0, 1. */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint16 UInt16                     /* UInt16 represents integers with a minimum value of 0 and a maximum value of 65535. For example: 1, 0, 1267, +10000. */			/* [Satisfies_rte sws 1181] */;
typedef uint32 UInt32                     /* UInt32 represents integers with a minimum value of 0 and a maximum value of 4294967295. For example: 1, 0, 12234567, 104400. */			/* [Satisfies_rte sws 1182] */;
typedef uint8 UInt4                      /* UInt4 represents integers with a minimum value of 0 and a maximum value of 15. For example: 1, 0, 12, +10. */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 UInt8                      /* UInt8 represents integers with a minimum value of 0 and a maximum value of 255. For example: 1, 0, 126, +10. */			/* [Satisfies_rte sws 1180] */;
//typedef uint32 ubit32                     /* UInt32 represents integers with a minimum value of 0 and a maximum value of 4294967295. For example: 1, 0, 12234567, 104400. */			/* [Satisfies_rte sws 1182] */;
typedef uint8 BootTargetType             					/* [Satisfies_rte sws 1180] */;
typedef uint8 ShutdownTargetType         					/* [Satisfies_rte sws 1180] */;
typedef uint8 StateType                  					/* [Satisfies_rte sws 1180] */;
typedef uint8 UserType                   					/* [Satisfies_rte sws 1180] */;
typedef uint64 Algo64DataTimeStamp_t;
typedef uint8 BlockIdType                					/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 RequestResultType          					/* [Satisfies_rte sws 1180] */;
typedef uint8 OffsetCompState_t          /* Offset state of the yaw rate,
 FullStandStill: voller Stillstandsabgleich
 ShortStandStill: kurzer Stillstandsabgleich
 NoStandStill: kein Stillstandsabgleich, Wert kommt aus dem EEPROM
 NoEeprom: kein Wert im EEPROM, kein Lernwert für die Offsetkompensierung @min: 0 @max:4 @values: enum { ALN_YAW_RATE_PROCESS_STAND_STILL=4,ALN_YAW_RATE_SHORT_STAND_STILL=1,ALN_YAW_RATE_NO_STAND_STILL=2,ALN_YAW_RATE_NO_EEPROM=3,ALN_YAW_RATE_FULL_STAND_STILL=0,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 LDPBrkMsgDispRq_t          /* Access to LDP break message display request @min: 0 @max:3 @values: enum { LDP_BRK_MSG_DISP_BRK_RT=2,LDP_BRK_MSG_DISP_BRK_IDLE=0,LDP_BRK_MSG_DISP_SNA=3,LDP_BRK_MSG_DISP_BRK_LT=1,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 LDPIndLmpOnRq_t            /* Access to LDP indication lamp on request @min: 0 @max:3 @values: enum { LDP_IND_LAMP_READY=2,LDP_IND_LAMP_IND_LAMP_ON=1,LDP_IND_LAMP_OFF=0,LDP_IND_LAMP_SNA=3,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 LDPMsgDispRq_t             /* Access to LDP message display request @min: 0 @max:3 @values: enum { LDP_MSG_DISP_SNA=3,LDP_MSG_DISP_IDLE=0,LDP_MSG_DISP_DIRTY=2,LDP_MSG_DISP_TEMP_NA=1,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 eALDWMode_t                /* Daimler ALDW Mode @min: 0 @max:3 @values: enum { eALDWMode_aldwlight=2,eALDWMode_off=0,eALDWMode_aldw=3,eALDWMode_ldw=1,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 eALDWOpMode_t              /* Daimler ALDW operational mode @min: 0 @max:10 @values: enum { eALDWOpMode_undefined=5,eALDWOpMode_diag003=8,eALDWOpMode_diag002=7,eALDWOpMode_diag001=6,eALDWOpMode_running=0,eALDWOpMode_secureshutdown=4,eALDWOpMode_stop=2,eALDWOpMode_diag005=10,eALDWOpMode_diag004=9,eALDWOpMode_inhibit=1,eALDWOpMode_shutdown=3,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 eLkaMotorStatus_t          /* Daimler Steering Wheel
Vibration Motor Status @min: 0 @max:8 @values: enum { eLkaMotorStatus_SHRT=3,eLkaMotorStatus_LIN=7,eLkaMotorStatus_OFF=1,eLkaMotorStatus_ON=2,eLkaMotorStatus_BLOCK=4,eLkaMotorStatus_SNA=8,eLkaMotorStatus_CONT=6,eLkaMotorStatus_OPN=5,eLkaMotorStatuse_NOT_AVL=0,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 eLaneMarkerType            /* set either to Lane_mark_type_broken or Lane_mark_type_solid, or in case of an invalid marker at the left side - use Lane_mark_type_virtual @min: 0 @max:3 @values: enum { eLaneMarkerType_Solid=2,eLaneMarkerType_Unknown=0,eLaneMarkerType_Virtual=3,eLaneMarkerType_Broken=1,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 eSpeedUnit_t               /* @min: 0 @max:1 @values: enum { eSpeedUnit_mph=1,eSpeedUnit_kmh=0,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 ALDWBrkMsgDispRq_t         /* Access to ALDW break message display request @min: 0 @max:3 @values: enum { ALDW_BRK_MSG_DISP_BRK_LT=1,ALDW_BRK_MSG_DISP_BRK_RT=2,ALDW_BRK_MSG_DISP_SNA=3,ALDW_BRK_MSG_DISP_BRK_IDLE=0,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 ALDWDrvActvLDP_t           /* Access to ALDW driver activity @min: 0 @max:2 @values: enum { ALDW_NO_DRV_ACTIVITY=0,ALDW_DRV_ACTIVITY=1,ALDW_NOT_DEFINED=2,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 ALDWIndLmpOnRq_t           /* Access to ALDW indication lamp on request @min: 0 @max:3 @values: enum { ALDW_IND_LAMP_OFF=0,ALDW_IND_LAMP_SNA=3,ALDW_IND_LAMP_READY=2,ALDW_IND_LAMP_IND_LAMP_ON=1,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 ALDWLaneChgStatLDP_t       /* Access to ALDW driver activity due to lane change @min: 0 @max:2 @values: enum { ALDW_LT=1,ALDW_RT=2,ALDW_IDLE=0,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 ALDWMsgDispRq_t            /* Access to ALDW message display request @min: 0 @max:7 @values: enum { ALDW_MSG_DISP_TEMP_NA=1,ALDW_MSG_DISP_LDP_ON=5,ALDW_MSG_DISP_IDLE=0,ALDW_MSG_DISP_LDP_TEMP_NA=3,ALDW_MSG_DISP_DIRTY=2,ALDW_MSG_DISP_LDP_OFF=6,ALDW_MSG_DISP_SNA=7,ALDW_MSG_DISP_LDP_DIRTY=4,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 ALDWPulseTmRq_t            /* Access to pulse time @min: 0 @max:3 @values: enum { ALDW_TM400=1,ALDW_TM500=0,ALDW_TM200=3,ALDW_TM300=2,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 ALDWWarnSuppStat_t         /* suppression status @min: 0 @max:9 @values: enum { ALDW_DRV_ACTV_DELAY=3,ALDW_DRV_DISTRACTION=4,ALDW_WARN=7,ALDW_SYS_ACTIV=9,ALDW_WARN_DELAY=8,ALDW_DRV_ACTV=2,ALDW_WARN_RDY=1,ALDW_OFF_SPD=0,ALDW_TURN=5,ALDW_TURN_DELAY=6,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 ALDWWrnMdRq_t              /* Access to ALDW warning mode request (pulse/continious) @min: 0 @max:1 @values: enum { ALDW_CONT=1,ALDW_PULSE=0,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 ALDWWrnRq_t                /* Access to ALDW warning request @min: 0 @max:2 @values: enum { ALDW_WARN_RT=2,ALDW_WARN_LT=1,ALDW_WARN_IDLE=0,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 eLDWState_t                /* activation state:
off - system is shut down
onpassive - system is activated but no warnings will be issued
onready - system is activated an ready to warn @min: 0 @max:2 @values: enum { eLDWState_onready=2,eLDWState_onpassive=1,eLDWState_off=0,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint32 InterfaceVersion           /* Interface version numbers */			/* [Satisfies_rte sws 1182] */;
typedef uint8 RTE_t_eLDSensorID          /* sensor ID @min: 0 @max:3 @values: enum { RTE_LD_SID_MT9V023_BGGR=1,RTE_LD_SID_AMIS=0,RTE_LD_SID_MI1000_REV2_GRBG_16x16=2,RTE_LD_SID_MI1000_REV2_GRBG_4x16=3,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint32 RTE_t_eLDEvent             /* @min: 0 @max:4294967295 @values: enum { RTE_LD_LE_CONSTRUCTION_START=5,RTE_LD_LE_IDLE=0,RTE_LD_LE_CONSTRUCTION_CLOSE=6,RTE_LD_LE_TO_KEEP_32_BIT=4294967295,RTE_LD_LE_FORK_EXIT=1,RTE_LD_LE_FORK_UNKNOWN_CLOSE=4,RTE_LD_LE_FORK_UNKNOWN_OPEN=3,RTE_LD_LE_FORK_ENTRY=2,} */			/* [Satisfies_rte sws 1182] */;
typedef uint32 RTE_t_eLDMarkerColor       /* @min: 0 @max:4294967295 @values: enum { RTE_LD_MC_RED=2,RTE_LD_MC_TO_KEEP_32_BIT=4294967295,RTE_LD_MC_BLUE=3,RTE_LD_MC_WHITE=0,RTE_LD_MC_YELLOW=1,RTE_LD_MC_UNKNOWN=4,} */			/* [Satisfies_rte sws 1182] */;
typedef uint32 RTE_t_eLDMarkerQualitiy    /* @min: 0 @max:4294967295 @values: enum { RTE_LD_MQ_PREDICTED=3,RTE_LD_MQ_GOOD=4,RTE_LD_MQ_VERYBAD=1,RTE_LD_MQ_TO_KEEP_32_BIT=4294967295,RTE_LD_MQ_BAD=2,RTE_LD_MQ_NOMARKER=0,} */			/* [Satisfies_rte sws 1182] */;
typedef uint32 RTE_t_eLDMarkerRel         /* @min: 0 @max:4294967295 @values: enum { RTE_LD_MR_TO_KEEP_32_BIT=4294967295,RTE_LD_MR_LEFT=1,RTE_LD_MR_RIGHT=2,RTE_LD_MR_INVALID=0,RTE_LD_MR_NO=3,} */			/* [Satisfies_rte sws 1182] */;
typedef uint32 RTE_t_eLDMarkerType        /* enum fo rmarker types left side @min: 0 @max:4294967295 @values: enum { RTE_LD_MT_DECORATION=7,RTE_LD_MT_CONTINUOUS=0,RTE_LD_MT_SEPARATING=8,RTE_LD_MT_RESERVED1=2,RTE_LD_MT_RESERVED2=3,RTE_LD_MT_NARROWDASHED=9,RTE_LD_MT_DASHED=1,RTE_LD_MT_UNCLASSIFIED=5,RTE_LD_MT_NOLINEDETECTED=4,RTE_LD_MT_DOTTED=6,RTE_LD_MT_TO_KEEP_32_BIT=4294967295,} */			/* [Satisfies_rte sws 1182] */;
typedef uint32 RTE_t_eLDRoadType          /* @min: 0 @max:4294967295 @values: enum { RTE_LD_RT_HIGHWAY=0,RTE_LD_RT_URBAN_ROAD=2,RTE_LD_RT_NDEF0=3,RTE_LD_RT_TO_KEEP_32_BIT=4294967295,RTE_LD_RT_COUNTRY_ROAD=1,} */			/* [Satisfies_rte sws 1182] */;
typedef uint8 RTE_t_eLDPlatform          /* select the desired optimized code @min: 0 @max:3 @values: enum { RTE_LD_OP_TMS320_DM64P=2,RTE_LD_OP_PPC5675K=3,RTE_LD_OP_Reference=0,RTE_LD_OP_PPC_MGT5200=1,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 RTE_t_MAPIFEffSpdLmtType   /* effective speed limit type @min: 0 @max:7 @values: enum { RTE_MAPIF_EFFSL_DAY=3,RTE_MAPIF_EFFSL_SNOW=6,RTE_MAPIF_EFFSL_UNKNOWN=7,RTE_MAPIF_EFFSL_TRAFFIC_SIGN=1,RTE_MAPIF_EFFSL_IMPLICIT=0,RTE_MAPIF_EFFSL_RAIN=5,RTE_MAPIF_EFFSL_NIGHT=2,RTE_MAPIF_EFFSL_TIME=4,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 RTE_t_MAPIFFormOfWaySeg    /* form of way @min: 0 @max:15 @values: enum { RTE_MAPIF_FOW_UNKNOWN=0,RTE_MAPIF_FOW_NA=15,RTE_MAPIF_FOW_SERVICE_ACCESS=13,RTE_MAPIF_FOW_PARALLEL_ROAD=8,RTE_MAPIF_FOW_SINGLE_CARRIAGEWAY=3,RTE_MAPIF_FOW_CONTROLLED_ACCESS=1,RTE_MAPIF_FOW_RAMP_CONTROLLED_ACCESS=9,RTE_MAPIF_FOW_PEDESTRIANS=14,RTE_MAPIF_FOW_ROUNDABOUT=4,RTE_MAPIF_FOW_SERVICE_ACCESS_PARKING=12,RTE_MAPIF_FOW_FRONTAGE_ROAD=11,RTE_MAPIF_FOW_STF=5,RTE_MAPIF_FOW_RAMP_NO_CONTROLLED_ACCESS=10,RTE_MAPIF_FOW_MULTIPLY_DIGITIZED=2,RTE_MAPIF_FOW_RESERVED_6=6,RTE_MAPIF_FOW_RESERVED_7=7,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 RTE_t_MAPIFFuncRoadClass   /* functional road class @min: 0 @max:7 @values: enum { RTE_MAPIF_FC_UNKONWN=0,RTE_MAPIF_FC_INVALID=7,RTE_MAPIF_FC_6=6,RTE_MAPIF_FC_4=4,RTE_MAPIF_FC_5=5,RTE_MAPIF_FC_2=2,RTE_MAPIF_FC_3=3,RTE_MAPIF_FC_1=1,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 RTE_t_MAPIFInMapProvider   /* map provider @min: 0 @max:7 @values: enum { RTE_MAPIF_MAPPROVIDER_TELEATLAS=2,RTE_MAPIF_MAPPROVIDER_UNKNOWN=0,RTE_MAPIF_MAPPROVIDER_INVALID=7,RTE_MAPIF_MAPPROVIDER_6=6,RTE_MAPIF_MAPPROVIDER_5=5,RTE_MAPIF_MAPPROVIDER_4=4,RTE_MAPIF_MAPPROVIDER_ZENRIN=3,RTE_MAPIF_MAPPROVIDER_NAVTEQ=1,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 RTE_t_MAPIFInputModeSelect  /* execution mode selection @min: 0 @max:7 @values: enum { RTE_MAPIF_INPUT_MODE_SEL_FIXED_OUTPUT=2,RTE_MAPIF_INPUT_MODE_SEL_MEAS_FREEZE=1,RTE_MAPIF_INPUT_MODE_SEL_RESERVED_4=4,RTE_MAPIF_INPUT_MODE_SEL_RESERVED_5=5,RTE_MAPIF_INPUT_MODE_SEL_RESERVED_6=6,RTE_MAPIF_INPUT_MODE_SEL_RESERVED_7=7,RTE_MAPIF_INPUT_MODE_SEL_RESERVED_3=3,RTE_MAPIF_INPUT_MODE_SEL_RUN_NORMAL=0,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 RTE_t_MAPIFInputSignalState  /* state of input @min: 0 @max:2 @values: enum { RTE_MAPIF_INPUT_SIGNAL_STATE_OK=1,RTE_MAPIF_INPUT_SIGNAL_STATE_NOT_OK=2,RTE_MAPIF_INPUT_SIGNAL_STATE_INIT=0,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 RTE_t_MAPIFLane            /* current lane @min: 0 @max:7 @values: enum { RTE_MAPIF_LANE_SINGLE=2,RTE_MAPIF_LANE_INVALID=0,RTE_MAPIF_LANE_LEFTMOST=3,RTE_MAPIF_LANE_RIGHTMOST=4,RTE_MAPIF_LANE_MIDDLE=5,RTE_MAPIF_LANE_EMERGENCY=1,RTE_MAPIF_LANE_RESERVED=6,RTE_MAPIF_LANE_UNKNOWN=7,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 RTE_t_MAPIFNumOfLanesDrivDir  /* number of lanes in driving direction @min: 0 @max:7 @values: enum { RTE_MAPIF_LANES_DRIVING_UNKNOWN=7,RTE_MAPIF_LANES_DRIVING_5=5,RTE_MAPIF_LANES_DRIVING_4=4,RTE_MAPIF_LANES_DRIVING_1=1,RTE_MAPIF_LANES_DRIVING_0=0,RTE_MAPIF_LANES_DRIVING_3=3,RTE_MAPIF_LANES_DRIVING_2=2,RTE_MAPIF_LANES_DRIVING_6_PLUS=6,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 RTE_t_MAPIFNumOfLanesOppDir  /* number of lanes in opposite direction @min: 0 @max:3 @values: enum { RTE_MAPIF_LANES_OPPOSITE_UNKNOWN=3,RTE_MAPIF_LANES_OPPOSITE_2_PLUS=2,RTE_MAPIF_LANES_OPPOSITE_0=0,RTE_MAPIF_LANES_OPPOSITE_1=1,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint64 RTE_t_MAPIFTriggerReference  /* #error workaround for missing configuration of data type size */;
typedef uint8 RTE_t_MAPIFVPState         /* vehicle positioning status @min: 0 @max:7 @values: enum { RTE_MAPIF_VPS_INVALID=0,RTE_MAPIF_VPS_NOT_ON_ROAD=2,RTE_MAPIF_VPS_RESERVED7=7,RTE_MAPIF_VPS_RESERVED6=6,RTE_MAPIF_VPS_RESERVED5=5,RTE_MAPIF_VPS_RESERVED4=4,RTE_MAPIF_VPS_NOT_IN_DIGITIZED_AREA=1,RTE_MAPIF_VPS_SYSTEM_NOT_CALIBRATED=3,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 RTE_t_MAPIFVehMotionState  /* vehicle motion state @min: 0 @max:3 @values: enum { RTE_MAPIF_VEH_MOTION_STAND_STILL=3,RTE_MAPIF_VEH_MOTION_UNKN=0,RTE_MAPIF_VEH_MOTION_ROLL_REV=2,RTE_MAPIF_VEH_MOTION_ROLL_FWD=1,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 RTE_t_MAPIFFuncRet         /* function return values @min: 0 @max:4 @values: enum { RTE_MAPIF_AV2_OUT_OF_MEMORY=3,RTE_MAPIF_AV2_OK=0,RTE_MAPIF_AV2_INTERNAL_ERROR=4,RTE_MAPIF_AV2_FAIL=1,RTE_MAPIF_AV2_NOT_SUPPORTED=2,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 RTE_eMAPIFErrorId          /* definition of external error ids @min: 0 @max:8 @values: enum { RTE_MAPIF_ERROR_BLOCKAGE=1,RTE_MAPIF_ERROR_SOFTWARE=6,RTE_MAPIF_ERROR_PARAMETER=0,RTE_MAPIF_ERROR_VEHICLE_DATA=2,RTE_MAPIF_ERROR_IMAGE_DATA=3,RTE_MAPIF_ERROR_INPUT=5,RTE_MAPIF_ERROR_MAP_DATA_TIMEOUT=8,RTE_MAPIF_ERROR_FATAL=7,RTE_MAPIF_ERROR_CALIBRATION=4,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 RTE_eMAPIFErrorStatus      /* status of error @min: 0 @max:2 @values: enum { RTE_MAPIF_ERROR_CHECK_DONE_AND_FAILED=2,RTE_MAPIF_ERROR_CHECK_DONE_AND_PASSED=1,RTE_MAPIF_ERROR_CHECK_NOT_DONE=0,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 RTE_eMAPIFOutputProcessState  /* standard system process state @min: 0 @max:5 @values: enum { RTE_MAPIF_STATE_TEMP_NOT_AVAILABLE=2,RTE_MAPIF_STATE_RUNNING=1,RTE_MAPIF_STATE_NOT_INITIALIZED=0,RTE_MAPIF_STATE_FAILURE=3,RTE_MAPIF_STATE_NOT_RUNNING=5,RTE_MAPIF_STATE_INITIALIZED=4,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 RTE_t_MAPIFBuildUpArea     /* current position is inside of a build up area @min: 0 @max:3 @values: enum { RTE_MAPIF_BUILD_UP_AREA_INSIDE=2,RTE_MAPIF_BUILD_UP_AREA_OUTSIDE=1,RTE_MAPIF_BUILD_UP_AREA_UNKNOWN=0,RTE_MAPIF_BUILD_UP_AREA_SNA=3,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 RTE_t_MAPIFContextChangeType  /* type of upcoming context change event                                                            a change type with zero or negative distance means that the type changed to is still valid, e.g. MAPIF_CONTEXT_CHANGE_OUTSIDE_TO_INSIDE with -2.5 meters means that we are inside the given context @min: 0 @max:3 @values: enum { RTE_MAPIF_CONTEXT_CHANGE_UNKNOWN=0,RTE_MAPIF_CONTEXT_CHANGE_OUTSIDE_TO_INSIDE=2,RTE_MAPIF_CONTEXT_CHANGE_INSIDE_TO_OUTSIDE=3,RTE_MAPIF_CONTEXT_CHANGE_NO_CHANGE_AHEAD=1,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 RTE_t_MAPIFFormOfWay       /* road type @min: 0 @max:15 @values: enum { RTE_MAPIF_FORM_OF_WAY_RESERVED_6=6,RTE_MAPIF_FORM_OF_WAY_SINGLE_CARRIAGEWAY=3,RTE_MAPIF_FORM_OF_WAY_RESERVED_7=7,RTE_MAPIF_FORM_OF_WAY_SERVICE_ACCESS_PARKING=12,RTE_MAPIF_FORM_OF_WAY_PARALLEL_ROAD=8,RTE_MAPIF_FORM_OF_WAY_PEDESTRIANS=14,RTE_MAPIF_FORM_OF_WAY_CONTROLLED_ACCESS=1,RTE_MAPIF_FORM_OF_WAY_RAMP_NO_CONTROLLED_ACCESS=10,RTE_MAPIF_FORM_OF_WAY_SNA=15,RTE_MAPIF_FORM_OF_WAY_RAMP_CONTROLLED_ACCESS=9,RTE_MAPIF_FORM_OF_WAY_STF=5,RTE_MAPIF_FORM_OF_WAY_MULTIPLY_DIGITIZED=2,RTE_MAPIF_FORM_OF_WAY_ROUNDABOUT=4,RTE_MAPIF_FORM_OF_WAY_FRONTAGE_ROAD=11,RTE_MAPIF_FORM_OF_WAY_UNKNOWN=0,RTE_MAPIF_FORM_OF_WAY_SERVICE_ACCESS=13,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 RTE_t_MAPIFFunctionalRoadClass  /* functional road class @min: 0 @max:7 @values: enum { RTE_MAPIF_FRC2=2,RTE_MAPIF_FRC3=3,RTE_MAPIF_FRC_UNKNOWN=0,RTE_MAPIF_FRC1=1,RTE_MAPIF_FRC_SNA=7,RTE_MAPIF_FRC6=6,RTE_MAPIF_FRC5=5,RTE_MAPIF_FRC4=4,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 RTE_t_MAPIFLocationType    /* current location type @min: 0 @max:15 @values: enum { RTE_MAPIF_LCT_LEFT_EXIT_RAMP=5,RTE_MAPIF_LCT_TUNNEL=1,RTE_MAPIF_LCT_INTERSECTION=2,RTE_MAPIF_LCT_RIGHT_ENTERING_RAMP=8,RTE_MAPIF_LCT_SNA=15,RTE_MAPIF_LCT_UNKNOWN=0,RTE_MAPIF_LCT_TOLLSTATION=4,RTE_MAPIF_LCT_RIGHT_EXIT_RAMP=6,RTE_MAPIF_LCT_LEFT_ENTERING_RAMP=7,RTE_MAPIF_LCT_ROUNDABOUT=3,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 RTE_t_MAPIFNumLanesDrivingDir  /* number of lanes in driving direction @min: 0 @max:15 @values: enum { RTE_MAPIF_NUM_LANES_DRIVING_6_PLUS=7,RTE_MAPIF_NUM_LANES_DRIVING_SNA=15,RTE_MAPIF_NUM_LANES_DRIVING_0=1,RTE_MAPIF_NUM_LANES_DRIVING_1=2,RTE_MAPIF_NUM_LANES_DRIVING_2=3,RTE_MAPIF_NUM_LANES_DRIVING_3=4,RTE_MAPIF_NUM_LANES_DRIVING_4=5,RTE_MAPIF_NUM_LANES_DRIVING_5=6,RTE_MAPIF_NUM_LANES_DRIVING_UNKNOWN=0,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 RTE_t_MAPIFNumLanesOppositeDir  /* number of lanes in opposite direction @min: 0 @max:7 @values: enum { RTE_MAPIF_NUM_LANES_OPPOSITE_SNA=7,RTE_MAPIF_NUM_LANES_OPPOSITE_1=2,RTE_MAPIF_NUM_LANES_OPPOSITE_0=1,RTE_MAPIF_NUM_LANES_OPPOSITE_2_PLUS=3,RTE_MAPIF_NUM_LANES_OPPOSITE_UNKNOWN=0,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 RTE_t_MAPIFOuputSignalState  /* signal state of output data @min: 0 @max:2 @values: enum { RTE_MAPIF_OUTPUT_SIGNAL_STATE_INIT=0,RTE_MAPIF_OUTPUT_SIGNAL_STATE_OK=1,RTE_MAPIF_OUTPUT_SIGNAL_STATE_NOT_OK=2,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 RTE_t_MAPIFProvider        /* map supplier @min: 0 @max:7 @values: enum { RTE_MAPIF_PROVIDER_NAVTEQ=2,RTE_MAPIF_PROVIDER_ZENRIN=3,RTE_MAPIF_PROVIDER_UNKNOWN=0,RTE_MAPIF_PROVIDER_SNA=7,RTE_MAPIF_PROVIDER_TELEATLAS=1,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 RTE_t_MAPIFRoadChangeType  /* next road change @min: 0 @max:7 @values: enum { RTE_MAPIF_RCT_UTURN=6,RTE_MAPIF_RCT_ROUNDABOUT=5,RTE_MAPIF_RCT_LEFT_LEAVE=3,RTE_MAPIF_RCT_RIGHT_LEAVE=4,RTE_MAPIF_RCT_UNKNOWN=0,RTE_MAPIF_RCT_SNA=7,RTE_MAPIF_RCT_RIGHT_TURN=2,RTE_MAPIF_RCT_LEFT_TURN=1,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 RTE_t_MAPIFSpeedLimitSide  /* speed limit sign is expected on this side of the road @min: 0 @max:3 @values: enum { RTE_MAPIF_SPD_LIMIT_SIDE_UNKNOWN=0,RTE_MAPIF_SPD_LIMIT_SIDE_LEFT=1,RTE_MAPIF_SPD_LIMIT_SIDE_SNA=3,RTE_MAPIF_SPD_LIMIT_SIDE_RIGHT=2,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 RTE_t_MAPIFSpeedLimitSignType  /* speed limit sign type @min: 0 @max:15 @values: enum { RTE_MAPIF_SPD_LMT_STYPE_NDEF0=1,RTE_MAPIF_SPD_LMT_STYPE_LIM=2,RTE_MAPIF_SPD_LMT_STYPE_NDEF6=7,RTE_MAPIF_SPD_LMT_STYPE_TMP=4,RTE_MAPIF_SPD_LMT_STYPE_IMPL=5,RTE_MAPIF_SPD_LMT_STYPE_UNLIM=3,RTE_MAPIF_SPD_LMT_STYPE_SNA=15,RTE_MAPIF_SPD_LMT_STYPE_CHNG=6,RTE_MAPIF_SPD_LMT_STYPE_UNKNOWN=0,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 RTE_t_MAPIFSpeedLimitValidity  /* speed limit sign validity @min: 0 @max:15 @values: enum { RTE_MAPIF_SPD_LMT_VLD_SNA=15,RTE_MAPIF_SPD_LMT_VLD_UNLIM=1,RTE_MAPIF_SPD_LMT_VLD_WET=2,RTE_MAPIF_SPD_LMT_VLD_WEIGHT=8,RTE_MAPIF_SPD_LMT_VLD_TMP_NA=6,RTE_MAPIF_SPD_LMT_VLD_TMP_A=7,RTE_MAPIF_SPD_LMT_VLD_TMP_UN=5,RTE_MAPIF_SPD_LMT_VLD_DAY=11,RTE_MAPIF_SPD_LMT_VLD_VEHICLE=9,RTE_MAPIF_SPD_LMT_VLD_ICY=3,RTE_MAPIF_SPD_LMT_VLD_DARK=10,RTE_MAPIF_SPD_LMT_VLD_UNKNOWN=0,RTE_MAPIF_SPD_LMT_VLD_FOG=4,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 RTE_t_MAPIFSpeedUnit       /* default speed unit in country/region @min: 0 @max:3 @values: enum { RTE_MAPIF_SPD_UNIT_MPH=2,RTE_MAPIF_SPD_UNIT_SNA=3,RTE_MAPIF_SPD_UNIT_UNKNOWN=0,RTE_MAPIF_SPD_UNIT_KMH=1,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 RTE_t_MAPIFTrafficStyle    /* driving side @min: 0 @max:3 @values: enum { RTE_MAPIF_TRAFFIC_STYLE_RIGHTHAND=1,RTE_MAPIF_TRAFFIC_STYLE_LEFTHAND=2,RTE_MAPIF_TRAFFIC_STYLE_SNA=3,RTE_MAPIF_TRAFFIC_STYLE_UNKNOWN=0,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint32 MTS_VirtAddrs              /* MTS virtual addresses */			/* [Satisfies_rte sws 1182] */;
typedef uint32 RTE_t_eSACSource           /* @min: 0 @max:4294967295 @values: enum { RTE_e_SAC_SRC_EOL_UPDATE_FAILED=63,RTE_e_SAC_SRC_EOL_UPDATE_FINISHED=62,RTE_e_SAC_SRC_EOL_UPDATE=60,RTE_e_SAC_SRC_EOL=30,RTE_e_SAC_SRC_AUTO_CAL_COARSE=40,RTE_e_SAC_SRC_EOL_UPDATE_RUNNING=61,RTE_e_SAC_SRC_INVALID=0,RTE_e_SAC_SRC_SELF_EVAL=70,RTE_e_SAC_SRC_TO_KEEP_32_BIT=4294967295,RTE_e_SAC_SRC_NVM=20,RTE_e_SAC_SRC_AUTO_CAL_FINE=50,} */			/* [Satisfies_rte sws 1182] */;
typedef uint16 AlgoCycleCounter_t         /* Algo cycle counter @min:0.0 @max:65535.0 */			/* [Satisfies_rte sws 1181] */;
typedef uint16 AlgoDataTimeStamp_t        /* Algo data time-stamp type @min:0.0 @max:65535.0 */			/* [Satisfies_rte sws 1181] */;
typedef uint8 FCTStateSig_t              /* Common functional status signal @min: 0 @max:2 @values: enum { eFCT_STATE_SIG_ACTIVE=1,eFCT_STATE_SIG_INVALID=2,eFCT_STATE_SIG_INACTIVE=0,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 SigState_t                 /* Signal status @min: 0 @max:1 @values: enum { SIGNAL_INVALID=0,SIGNAL_VALID=1,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 VDYCaliState_t             /* Calibration inhibition states @min: 0 @max:128 @values: enum { VDY_CAL_INIT=0,VDY_CAL_SWA_GRAD=64,VDY_CAL_YWR_OFFS_STST=1,VDY_CAL_YWR_OFFS_DYN=2,VDY_CAL_SWA_OFFS=16,VDY_CAL_WHS_OFFS=4,VDY_CAL_WHS_LOAD=128,VDY_CAL_LTA_OFFS=32,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 VDYCtrlState_t             /* Operating modes of vdy component @min: 0 @max:2 @values: enum { VDY_CTRL_STATE_INIT=1,VDY_CTRL_STATE_STARTUP=0,VDY_CTRL_STATE_RUNNING=2,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef sint16 acceleration_t             /* Integer acceleration type @min:-32.767 @max:32.767 @resolution:0.001 */	/* [Satisfies_rte sws 1178], [Satisfies_rte sws 1265] */;
typedef uint8 confidence_t               /* Integer confidence type @min:0.0 @max:100.0 @resolution:0.392156862745 */			/* [Satisfies_rte sws 1180] */;
typedef sint16 distance_t                 /* Integer distance type @min:-327.67 @max:327.67 @resolution:0.01 */	/* [Satisfies_rte sws 1178], [Satisfies_rte sws 1265] */;
typedef sint16 factor_t                   /* integer factor type @min:-32.768 @max:32.767 @resolution:0.001 */	/* [Satisfies_rte sws 1178] */;
typedef uint8 percentage_t               /* percentage @min:0.0 @max:100.0 @resolution:1.0 */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 quality_t                  /* quality 0 % ... 100 % @min:0.0 @max:100.0 @resolution:1.0 */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint16 times_t                    /* Integer time type @min:0.0 @max:65.535 @resolution:0.001 */			/* [Satisfies_rte sws 1181] */;
typedef uint8 ucConfidence_t             /* Trustiness of value, 0: no reliance, 100: full realiance @min:0.0 @max:100.0 */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint16 uiTime_t                   /* Period of time in ms @min:0.0 @max:62000.0 */			/* [Satisfies_rte sws 1181], [Satisfies_rte sws 1265] */;
typedef sint16 velocity_t                 /* Integer velocity type @min:-327.67 @max:327.67 @resolution:0.01 */	/* [Satisfies_rte sws 1178], [Satisfies_rte sws 1265] */;
typedef sint32 SymbolicConstants          /* Symbolic constants */	/* [Satisfies_rte sws 1179] */;
typedef uint8 RTE_t_IFDiagDataSrc        /* diagnosis data source request @min: 0 @max:2 @values: enum { RTE_TSAIF_DATASRC_SR_ONLY=1,RTE_TSAIF_DATASRC_NO_DIAG=0,RTE_TSAIF_DATASRC_MAP_ONLY=2,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 RTE_t_TSAIFBlockageState   /* blockage state @min: 0 @max:5 @values: enum { RTE_TSAIF_CONDENSATION=2,RTE_TSAIF_NO_BLOCKAGE=0,RTE_TSAIF_BLOCKAGE=5,RTE_TSAIF_TOLERATED_BLOCKAGE=1,RTE_TSAIF_PART_BLOCKAGE=3,RTE_TSAIF_LOW_VISIBILITY=4,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 RTE_t_TSAIFInputLRLaneChangeState  /* lane change state @min: 0 @max:2 @values: enum { RTE_TSAIF_LR_LANE_CHANGE_RIGHT=2,RTE_TSAIF_LR_LANE_CHANGE_IDLE=0,RTE_TSAIF_LR_LANE_CHANGE_LEFT=1,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 RTE_t_TSAIFInputLRMarkState  /* lane mark state left @min: 0 @max:1 @values: enum { RTE_TSAIF_LR_MARK_STATE_NOT_AVAIL=0,RTE_TSAIF_LR_MARK_STATE_AVAIL=1,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 RTE_t_TSAIFInputLRMarkType  /* lane mark type left @min: 0 @max:10 @values: enum { RTE_TSAIF_LR_MARK_TYPE_RESERVED2=4,RTE_TSAIF_LR_MARK_TYPE_CONTINUOUS=1,RTE_TSAIF_LR_MARK_TYPE_RESERVED1=3,RTE_TSAIF_LR_MARK_TYPE_NOLINEDETECTED=5,RTE_TSAIF_LR_MARK_TYPE_NARROWDASHED=10,RTE_TSAIF_LR_MARK_TYPE_DOTTED=7,RTE_TSAIF_LR_MARK_TYPE_DECORATION=8,RTE_TSAIF_LR_MARK_TYPE_DASHED=2,RTE_TSAIF_LR_MARK_TYPE_UNCLASSIFIED=6,RTE_TSAIF_LR_MARK_TYPE_IDLE=0,RTE_TSAIF_LR_MARK_TYPE_SEPARATING=9,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 RTE_t_TSAIFInputLRMarkingColor  /* lane mark color left @min: 0 @max:3 @values: enum { RTE_TSAIF_LR_MARKING_COLOR_RED=3,RTE_TSAIF_LR_MARKING_COLOR_YELLOW=2,RTE_TSAIF_LR_MARKKING_COLOR_WHITE=1,RTE_TSAIF_LR_MARKKING_COLOR_IDLE=0,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 RTE_t_TSAIFInputLRSiteDtctStat  /* lane site detection state @min: 0 @max:2 @values: enum { RTE_TSAIF_LR_LANE_SITE_DETECT_IDLE=0,RTE_TSAIF_LR_LANE_SITE_DETECT_AMBIG=2,RTE_TSAIF_LR_LANE_SITE_DETECT_SITE=1,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 RTE_t_TSAIFInputSRCountrySpeedLimitUnitResult  /* the estimated speed unit @min: 0 @max:3 @values: enum { RTE_TSAIF_SR_RESULT_COUNTRY_UNIT_MPH_OR_KMH=3,RTE_TSAIF_SR_RESULT_COUNTRY_UNIT_UNKNOWN=0,RTE_TSAIF_SR_RESULT_COUNTRY_UNIT_KMH=1,RTE_TSAIF_SR_RESULT_COUNTRY_UNIT_MPH=2,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 RTE_t_TSAIFInputSRCountryTrafficStyleResult  /* the estimated traffic style @min: 0 @max:2 @values: enum { RTE_TSAIF_SR_RESULT_COUNTRY_TRAFFIC_STYLE_UNKNOWN=0,RTE_TSAIF_SR_RESULT_COUNTRY_LEFT_HAND_TRAFFIC=1,RTE_TSAIF_SR_RESULT_COUNTRY_RIGHT_HAND_TRAFFIC=2,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint32 RTE_t_TSAIFInputSRFunctionalSignClassId  /* id of the sign type @min: 0 @max:999990 @values: enum { RTE_TSA_SIGN_CLASS_MAIN_GARBAGE_END=278990,RTE_TSA_SIGN_CLASS_SUPPL_GARBAGE=100990,RTE_TSA_SIGN_CLASS_MAIN_BUNDLE_TWO_DIGIT_END_ACTIVE=278201,RTE_TSA_SIGN_CLASS_SUPPL_WEIGHT=105235,RTE_TSA_SIGN_CLASS_MAIN_SL_040=274540,RTE_TSA_SIGN_CLASS_MAIN_BUNDLE_THREE_DIGIT_END_ACTIVE=278301,RTE_TSA_SIGN_CLASS_SUPPL_MOTORCYCLE=104610,RTE_TSA_SIGN_CLASS_SUPPL_WET=105236,RTE_TSA_SIGN_CLASS_SUPPL_ONLY_INFORMATION_TEXT_ONE_ROW=100601,RTE_TSA_SIGN_CLASS_SUPPL_PASSENGER_CAR=104810,RTE_TSA_SIGN_CLASS_CLUSTER_GARBAGE=999990,RTE_TSA_SIGN_CLASS_SUPPL_WORKDAYS_AND_TIME=104231,RTE_TSA_SIGN_CLASS_SUPPL_TRUCK_BUS_CAR_TRAILER=104913,RTE_TSA_SIGN_CLASS_MAIN_DIR_ARROW_STRAIGHT=209300,RTE_TSA_SIGN_CLASS_MAIN_PLAY_STREET_END=326000,RTE_TSA_SIGN_CLASS_MAIN_SL_070_ACTIVE=274571,RTE_TSA_SIGN_CLASS_MAIN_NO_ENTRY=267000,RTE_TSA_SIGN_CLASS_SUPPL_RESTRICTED=100000,RTE_TSA_SIGN_CLASS_MAIN_DIR_ARROW_PASS_RIGHT=222200,RTE_TSA_SIGN_CLASS_MAIN_SL_100_ACTIVE=274601,RTE_TSA_SIGN_CLASS_SUPPL_ONLY_INFORMATION_PICT=100600,RTE_TSA_SIGN_CLASS_MAIN_PLAY_STREET_BEGIN=325000,RTE_TSA_SIGN_CLASS_MAIN_SL_080=274580,RTE_TSA_SIGN_CLASS_MAIN_GENERAL_END_ACTIVE=282001,RTE_TSA_SIGN_CLASS_MAIN_SL_130_ACTIVE=274631,RTE_TSA_SIGN_CLASS_MAIN_BUNDLE_NO_PASSING_END_ACTIVE=280101,RTE_TSA_SIGN_CLASS_MAIN_SL_110_ACTIVE=274611,RTE_TSA_SIGN_CLASS_MAIN_DIR_ARROW_SIDE_RIGHT=211200,RTE_TSA_SIGN_CLASS_MAIN_ROUNDABOUT=215000,RTE_TSA_SIGN_CLASS_MAIN_BUNDLE_THREE_DIGIT_END=278300,RTE_TSA_SIGN_CLASS_MAIN_BUNDLE_NO_PASSING_END=280100,RTE_TSA_SIGN_CLASS_MAIN_CITY_LIMIT_BEGIN=310000,RTE_TSA_SIGN_CLASS_SUPPL_PASSENGER_CAR_TRAILER=104811,RTE_TSA_SIGN_CLASS_MAIN_DIR_ARROW_STRAIGHT_AND_TURN_LEFT=214100,RTE_TSA_SIGN_CLASS_MAIN_TRUCK_NO_PASSING=277000,RTE_TSA_SIGN_CLASS_MAIN_SL_045=274545,RTE_TSA_SIGN_CLASS_MAIN_SL_020=274520,RTE_TSA_SIGN_CLASS_MAIN_SL_040_ACTIVE=274541,RTE_TSA_SIGN_CLASS_SUPPL_ICY=105238,RTE_TSA_SIGN_CLASS_SUPPL_ARROW_LEFT=100010,RTE_TSA_SIGN_CLASS_MAIN_BUNDLE_TWO_DIGIT_END=278200,RTE_TSA_SIGN_CLASS_MAIN_SL_120=274620,RTE_TSA_SIGN_CLASS_UNKNOWN=0,RTE_TSA_SIGN_CLASS_SUPPL_TIME_RESTRICTION=104030,RTE_TSA_SIGN_CLASS_MAIN_SL_100=274600,RTE_TSA_SIGN_CLASS_MAIN_SL_070=274570,RTE_TSA_SIGN_CLASS_MAIN_SL_090=274590,RTE_TSA_SIGN_CLASS_MAIN_GARBAGE_DIR_ARROW=209990,RTE_TSA_SIGN_CLASS_MAIN_SL_060=274560,RTE_TSA_SIGN_CLASS_SUPPL_VALID_FOR_DISTANCE=100100,RTE_TSA_SIGN_CLASS_SUPPL_ARROW_RIGHT=100020,RTE_TSA_SIGN_CLASS_SUPPL_MON2FRI_AND_TIME=104233,RTE_TSA_SIGN_CLASS_MAIN_TRUCK_NO_PASSING_ACTIVE=277001,RTE_TSA_SIGN_CLASS_MAIN_GARBAGE=274990,RTE_TSA_SIGN_CLASS_MAIN_DIR_ARROW_STRAIGHT_AND_TURN_RIGHT=214200,RTE_TSA_SIGN_CLASS_MAIN_DIR_ARROW_PASS_LEFT=222100,RTE_TSA_SIGN_CLASS_MAIN_ENVIRONMENTAL_ZONE_END=270200,RTE_TSA_SIGN_CLASS_SUPPL_FOGGY=105237,RTE_TSA_SIGN_CLASS_SUPPL_VALID_IN_DISTANCE=100400,RTE_TSA_SIGN_CLASS_MAIN_CAR_NO_PASSING_ACTIVE=276001,RTE_TSA_SIGN_CLASS_MAIN_SL_030_ACTIVE=274531,RTE_TSA_SIGN_CLASS_MAIN_SL_090_ACTIVE=274591,RTE_TSA_SIGN_CLASS_SUPPL_TRUCK_BUS=104812,RTE_TSA_SIGN_CLASS_MAIN_CITY_LIMIT_END=311000,RTE_TSA_SIGN_CLASS_SUPPL_WORKDAYS=104230,RTE_TSA_SIGN_CLASS_MAIN_GARBAGE_END_ACTIVE=278991,RTE_TSA_SIGN_CLASS_MAIN_GENERAL_END=282000,RTE_TSA_SIGN_CLASS_MAIN_DIR_ARROW_SIDE_LEFT=211100,RTE_TSA_SIGN_CLASS_MAIN_SL_080_ACTIVE=274581,RTE_TSA_SIGN_CLASS_MAIN_SL_050=274550,RTE_TSA_SIGN_CLASS_MAIN_SL_060_ACTIVE=274561,RTE_TSA_SIGN_CLASS_MAIN_GARBAGE_ACTIVE=274991,RTE_TSA_SIGN_CLASS_MAIN_DIR_ARROW_TURN_LEFT=209100,RTE_TSA_SIGN_CLASS_MAIN_CAR_NO_PASSING=276000,RTE_TSA_SIGN_CLASS_MAIN_SL_030=274530,RTE_TSA_SIGN_CLASS_MAIN_SL_110=274610,RTE_TSA_SIGN_CLASS_MAIN_SL_120_ACTIVE=274621,RTE_TSA_SIGN_CLASS_MAIN_DIR_ARROW_TURN_RIGHT=209200,RTE_TSA_SIGN_CLASS_MAIN_SL_010=274510,RTE_TSA_SIGN_CLASS_MAIN_SL_130=274630,RTE_TSA_SIGN_CLASS_MAIN_SL_050_ACTIVE=274551,} */			/* [Satisfies_rte sws 1182], [Satisfies_rte sws 1265] */;
typedef uint8 RTE_t_TSAIFInputSRProcessState  /* current state of sign recognition process, see defines above @min: 0 @max:7 @values: enum { RTE_TSAIF_SR_PROCESS_STATE_BLOCKAGE=4,RTE_TSAIF_SR_PROCESS_STATE_INIT=2,RTE_TSAIF_SR_PROCESS_STATE_RUNNING_OVERLOADED=6,RTE_TSAIF_SR_PROCESS_STATE_NO_COMPETENCE=3,RTE_TSAIF_SR_PROCESS_STATE_ERROR=1,RTE_TSAIF_SR_PROCESS_STATE_TEMP_ERROR=7,RTE_TSAIF_SR_PROCESS_STATE_NOT_RUNNING=0,RTE_TSAIF_SR_PROCESS_STATE_RUNNING=5,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 RTE_t_TSAIFInputSRResultTrackState  /* track status @min: 0 @max:3 @values: enum { RTE_TSAIF_SR_RESULT_TRACK_STATE_PASSED=2,RTE_TSAIF_SR_RESULT_TRACK_STATE_ACTIVE=0,RTE_TSAIF_SR_RESULT_TRACK_STATE_ENDED=1,RTE_TSAIF_SR_RESULT_TRACK_STATE_FINISHED=3,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 RTE_t_TSAIFInputSignalState  /* state of input @min: 0 @max:2 @values: enum { RTE_TSAIF_INPUT_SIGNAL_STATE_INIT=0,RTE_TSAIF_INPUT_SIGNAL_STATE_OK=1,RTE_TSAIF_INPUT_SIGNAL_STATE_NOT_OK=2,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 RTE_t_TSAIFMapBuildUpArea  /* current position is inside of a build up area @min: 0 @max:3 @values: enum { RTE_TSAIF_MAP_BUILD_UP_AREA_UNKNOWN=0,RTE_TSAIF_MAP_BUILD_UP_AREA_OUTSIDE=1,RTE_TSAIF_MAP_BUILD_UP_AREA_INSIDE=2,RTE_TSAIF_MAP_BUILD_UP_AREA_SNA=3,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 RTE_t_TSAIFMapContextChangeType  /* type of upcoming context change event                                                            a change type with zero or negative distance means that the type changed to is still valid, e.g. TSAIF_MAP_CONTEXT_CHANGE_OUTSIDE_TO_INSIDE with -2.5 meters means that we are inside the given context @min: 0 @max:3 @values: enum { RTE_TSAIF_MAP_CONTEXT_CHANGE_UNKNOWN=0,RTE_TSAIF_MAP_CONTEXT_CHANGE_INSIDE_TO_OUTSIDE=3,RTE_TSAIF_MAP_CONTEXT_CHANGE_OUTSIDE_TO_INSIDE=2,RTE_TSAF_MAP_CONTEXT_CHANGE_NO_CHANGE_AHEAD=1,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 RTE_t_TSAIFMapFormOfWay    /* road type @min: 0 @max:15 @values: enum { RTE_TSAIF_MAP_FORM_OF_WAY_PEDESTRIANS=14,RTE_TSAIF_MAP_FORM_OF_WAY_FRONTAGE_ROAD=11,RTE_TSAIF_MAP_FORM_OF_WAY_MULTIPLY_DIGITIZED=2,RTE_TSAIF_MAP_FORM_OF_WAY_RAMP_CONTROLLED_ACCESS=9,RTE_TSAIF_MAP_FORM_OF_WAY_ROUNDABOUT=4,RTE_TSAIF_MAP_FORM_OF_WAY_RESERVED_7=7,RTE_TSAIF_MAP_FORM_OF_WAY_PARALLEL_ROAD=8,RTE_TSAIF_MAP_FORM_OF_WAY_SERVICE_ACCESS=13,RTE_TSAIF_MAP_FORM_OF_WAY_UNKNOWN=0,RTE_TSAIF_MAP_FORM_OF_WAY_CONTROLLED_ACCESS=1,RTE_TSAIF_MAP_FORM_OF_WAY_RAMP_NO_CONTROLLED_ACCESS=10,RTE_TSAIF_MAP_FORM_OF_WAY_STF=5,RTE_TSAIF_MAP_FORM_OF_WAY_SNA=15,RTE_TSAIF_MAP_FORM_OF_WAY_SINGLE_CARRIAGEWAY=3,RTE_TSAIF_MAP_FORM_OF_WAY_RESERVED_6=6,RTE_TSAIF_MAP_FORM_OF_WAY_SERVICE_ACCESS_PARKING=12,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 RTE_t_TSAIFMapFunctionalRoadClass  /* functional road class @min: 0 @max:7 @values: enum { RTE_TSAIF_MAP_FRC_SNA=7,RTE_TSAIF_MAP_FRC1=1,RTE_TSAIF_MAP_FRC2=2,RTE_TSAIF_MAP_FRC3=3,RTE_TSAIF_MAP_FRC4=4,RTE_TSAIF_MAP_FRC5=5,RTE_TSAIF_MAP_FRC6=6,RTE_TSAIF_MAP_FRC_UNKNOWN=0,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 RTE_t_TSAIFMapLocationType  /* current location type @min: 0 @max:15 @values: enum { RTE_TSAIF_MAP_LCT_LEFT_ENTERING_RAMP=7,RTE_TSAIF_MAP_LCT_SNA=15,RTE_TSAIF_MAP_LCT_ROUNDABOUT=3,RTE_TSAIF_MAP_LCT_TUNNEL=1,RTE_TSAIF_MAP_LCT_RIGHT_EXIT_RAMP=6,RTE_TSAIF_MAP_LCT_TOLLSTATION=4,RTE_TSAIF_MAP_LCT_LEFT_EXIT_RAMP=5,RTE_TSAIF_MAP_LCT_INTERSECTION=2,RTE_TSAIF_MAP_LCT_UNKNOWN=0,RTE_TSAIF_MAP_LCT_RIGHT_ENTERING_RAMP=8,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 RTE_t_TSAIFMapNumLanesDrivingDir  /* number of lanes in driving direction @min: 0 @max:15 @values: enum { RTE_TSAIF_MAP_NUM_LANES_DRIVING_SNA=15,RTE_TSAIF_MAP_NUM_LANES_DRIVING_UNKNOWN=0,RTE_TSAIF_MAP_NUM_LANES_DRIVING_6_PLUS=7,RTE_TSAIF_MAP_NUM_LANES_DRIVING_1=2,RTE_TSAIF_MAP_NUM_LANES_DRIVING_0=1,RTE_TSAIF_MAP_NUM_LANES_DRIVING_3=4,RTE_TSAIF_MAP_NUM_LANES_DRIVING_2=3,RTE_TSAIF_MAP_NUM_LANES_DRIVING_5=6,RTE_TSAIF_MAP_NUM_LANES_DRIVING_4=5,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 RTE_t_TSAIFMapNumLanesOppositeDir  /* number of lanes in opposite direction @min: 0 @max:7 @values: enum { RTE_TSAIF_MAP_NUM_LANES_OPPOSITE_UNKNOWN=0,RTE_TSAIF_MAP_NUM_LANES_OPPOSITE_0=1,RTE_TSAIF_MAP_NUM_LANES_OPPOSITE_SNA=7,RTE_TSAIF_MAP_NUM_LANES_OPPOSITE_2_PLUS=3,RTE_TSAIF_MAP_NUM_LANES_OPPOSITE_1=2,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 RTE_t_TSAIFMapProvider     /* map supplier @min: 0 @max:7 @values: enum { RTE_TSAIF_MAP_PROVIDER_ZENRIN=3,RTE_TSAIF_MAP_PROVIDER_NAVTEQ=2,RTE_TSAIF_MAP_PROVIDER_TELEATLAS=1,RTE_TSAIF_MAP_PROVIDER_UNKNOWN=0,RTE_TSAIF_MAP_PROVIDER_SNA=7,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 RTE_t_TSAIFMapRoadChangeType  /* next road change @min: 0 @max:7 @values: enum { RTE_TSAIF_MAP_RCT_RIGHT_TURN=2,RTE_TSAIF_MAP_RCT_LEFT_LEAVE=3,RTE_TSAIF_MAP_RCT_ROUNDABOUT=5,RTE_TSAIF_MAP_RCT_SNA=7,RTE_TSAIF_MAP_RCT_RIGHT_LEAVE=4,RTE_TSAIF_MAP_RCT_UNKNOWN=0,RTE_TSAIF_MAP_RCT_UTURN=6,RTE_TSAIF_MAP_RCT_LEFT_TURN=1,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 RTE_t_TSAIFMapSpeedLimitSide  /* speed limit sign is expected on this side of the road @min: 0 @max:3 @values: enum { RTE_TSAIF_MAP_SPD_LIMIT_SIDE_RIGHT=2,RTE_TSAIF_MAP_SPD_LIMIT_SIDE_UNKNOWN=0,RTE_TSAIF_MAP_SPD_LIMIT_SIDE_LEFT=1,RTE_TSAIF_MAP_SPD_LIMIT_SIDE_SNA=3,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 RTE_t_TSAIFMapSpeedLimitSignType  /* speed limit sign type @min: 0 @max:15 @values: enum { RTE_TSAIF_MAP_SPD_LMT_STYPE_IMPL=5,RTE_TSAIF_MAP_SPD_LMT_STYPE_UNLIM=3,RTE_TSAIF_MAP_SPD_LMT_STYPE_SNA=15,RTE_TSAIF_MAP_SPD_LMT_STYPE_LIM=2,RTE_TSAIF_MAP_SPD_LMT_STYPE_NDEF0=1,RTE_TSAIF_MAP_SPD_LMT_STYPE_NDEF6=7,RTE_TSAIF_MAP_SPD_LMT_STYPE_CHNG=6,RTE_TSAIF_MAP_SPD_LMT_STYPE_TMP=4,RTE_TSAIF_MAP_SPD_LMT_STYPE_UNKNOWN=0,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 RTE_t_TSAIFMapSpeedLimitValidity  /* speed limit sign validity @min: 0 @max:15 @values: enum { RTE_TSAIF_MAP_SPD_LMT_VLD_UNKNOWN=0,RTE_TSAIF_MAP_SPD_LMT_VLD_FOG=4,RTE_TSAIF_MAP_SPD_LMT_VLD_DARK=10,RTE_TSAIF_MAP_SPD_LMT_VLD_SNA=15,RTE_TSAIF_MAP_SPD_LMT_VLD_UNLIM=1,RTE_TSAIF_MAP_SPD_LMT_VLD_ICY=3,RTE_TSAIF_MAP_SPD_LMT_VLD_TMP_NA=6,RTE_TSAIF_MAP_SPD_LMT_VLD_TMP_A=7,RTE_TSAIF_MAP_SPD_LMT_VLD_WET=2,RTE_TSAIF_MAP_SPD_LMT_VLD_TMP_UN=5,RTE_TSAIF_MAP_SPD_LMT_VLD_VEHICLE=9,RTE_TSAIF_MAP_SPD_LMT_VLD_WEIGHT=8,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 RTE_t_TSAIFMapSpeedUnit    /* default speed unit in country/region @min: 0 @max:3 @values: enum { RTE_TSAIF_MAP_SPD_UNIT_SNA=3,RTE_TSAIF_MAP_SPD_UNIT_MPH=2,RTE_TSAIF_MAP_SPD_UNIT_UNKNOWN=0,RTE_TSAIF_MAP_SPD_UNIT_KMH=1,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 RTE_t_TSAIFMapTrafficStyle  /* driving side @min: 0 @max:3 @values: enum { RTE_TSAIF_MAP_TRAFFIC_STYLE_UNKNOWN=0,RTE_TSAIF_MAP_TRAFFIC_STYLE_SNA=3,RTE_TSAIF_MAP_TRAFFIC_STYLE_RIGHTHAND=1,RTE_TSAIF_MAP_TRAFFIC_STYLE_LEFTHAND=2,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 RTE_t_TSAIFModeRequest     /* driver mode request for submodule SLA @min: 0 @max:2 @values: enum { RTE_TSAIF_MDRQ_OFF=0,RTE_TSAIF_MDRQ_ON_NO_WARN=1,RTE_TSAIF_MDRQ_ON_WARN=2,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 RTE_t_TSAIFModeSelect      /* mode selection @min: 0 @max:7 @values: enum { RTE_TSAIF_MODE_SEL_RUN_NORMAL=0,RTE_TSAIF_MODE_SEL_MEAS_FREEZE=1,RTE_TSAIF_MODE_SEL_RESERVED_5=5,RTE_TSAIF_MODE_SEL_RESERVED_4=4,RTE_TSAIF_MODE_SEL_RESERVED_7=7,RTE_TSAIF_MODE_SEL_RESERVED_6=6,RTE_TSAIF_MODE_SEL_FIXED_OUTPUT=2,RTE_TSAIF_MODE_SEL_RESERVED_3=3,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 RTE_t_TSAIFObjEdgeFlag     /* edge flag left @min: 0 @max:2 @values: enum { RTE_TSAIF_OBJ_EDGE_TRUE=1,RTE_TSAIF_OBJ_EDGE_SNA=2,RTE_TSAIF_OBJ_EDGE_FALSE=0,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 RTE_t_TSAIFSpdOffsetUnit   /* speed offset unit @min: 0 @max:1 @values: enum { RTE_TSAIF_SPD_OFFSET_UNIT_KMH=0,RTE_TSAIF_SPD_OFFSET_UNIT_MPH=1,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 RTE_t_TSAIFVehIgnSwState   /* ignition switch state @min: 0 @max:4 @values: enum { RTE_TSAIF_VEH_IGN_ON=3,RTE_TSAIF_VEH_IGN_ACC=2,RTE_TSAIF_VEH_IGN_LOCK=0,RTE_TSAIF_VEH_IGN_START=4,RTE_TSAIF_VEH_IGN_OFF=1,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 RTE_t_TSAIFVehMotionState  /* vehicle motion state @min: 0 @max:3 @values: enum { RTE_TSAIF_VEH_MOTION_ROLL_FWD=1,RTE_TSAIF_VEH_MOTION_STAND_STILL=3,RTE_TSAIF_VEH_MOTION_UNKN=0,RTE_TSAIF_VEH_MOTION_ROLL_REV=2,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 RTE_t_TSAIFVehTrailerState  /* trailer state @min: 0 @max:3 @values: enum { RTE_TSAIF_VEH_TRLR_NDEF2=2,RTE_TSAIF_VEH_TRLR_SNA=3,RTE_TSAIF_VEH_TRLR_OK=1,RTE_TSAIF_VEH_TRLR_NO_DETECT=0,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 RTE_t_TSAIFVehTrnIndState  /* turn indicator state @min: 0 @max:3 @values: enum { RTE_TSAIF_VEH_TI_LEFT=1,RTE_TSAIF_VEH_TI_OFF=0,RTE_TSAIF_VEH_TI_BOTH=3,RTE_TSAIF_VEH_TI_RIGHT=2,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 RTE_eTSACustomSpdWarnIconDisp  /* SLA icon @min: 0 @max:2 @values: enum { RTE_TSAIF_TSA_SLA_ICON_DISP_NORM_ICON=1,RTE_TSAIF_TSA_SLA_ICON_DISP_INVRT_ICON=2,RTE_TSAIF_TSA_SLA_ICON_DISP_IDLE=0,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 RTE_eTSAIFErrorId          /* definition of external error ids @min: 0 @max:8 @values: enum { RTE_TSAIF_ERROR_VEHICLE_DATA=2,RTE_TSAIF_ERROR_BLOCKAGE=1,RTE_TSAIF_ERROR_COUNTRY_CODE=8,RTE_TSAIF_ERROR_CALIBRATION=4,RTE_TSAIF_ERROR_INPUT=5,RTE_TSAIF_ERROR_IMAGE_DATA=3,RTE_TSAIF_ERROR_FATAL=7,RTE_TSAIF_ERROR_SOFTWARE=6,RTE_TSAIF_ERROR_PARAMETER=0,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 RTE_eTSAIFErrorStatus      /* status of error @min: 0 @max:2 @values: enum { RTE_TSAIF_ERROR_CHECK_DONE_AND_PASSED=1,RTE_TSAIF_ERROR_CHECK_DONE_AND_FAILED=2,RTE_TSAIF_ERROR_CHECK_NOT_DONE=0,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 RTE_eTSAIFHmiNPANoPassWarnReq  /* npa no passing warning @min: 0 @max:2 @values: enum { RTE_TSAIF_HMI_NPA_WARN_NO_PASS=1,RTE_TSAIF_HMI_NPA_WARN_NO_PASS_IDLE=0,RTE_TSAIF_HMI_NPA_WARN_PASS=2,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 RTE_eTSAIFHmiNPAWarnReq    /* npa warning @min: 0 @max:2 @values: enum { RTE_TSAIF_HMI_NPA_WARN_IDLE=0,RTE_TSAIF_HMI_NPA_WARN_IND_ALERT=2,RTE_TSAIF_HMI_NPA_WARN_LANE_CHNG_ALERT=1,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 RTE_eTSAIFHmiRWFWarnReq    /* rwf warning @min: 0 @max:2 @values: enum { RTE_TSAIF_HMI_RWF_WARN_ROAD_WORK=2,RTE_TSAIF_HMI_RWF_WARN_NO_ROAD_WORK=1,RTE_TSAIF_HMI_RWF_WARN_IDLE=0,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 RTE_eTSAIFHmiSLAWarnReq    /* sla warning @min: 0 @max:2 @values: enum { RTE_TSAIF_HMI_SLA_WARN_SPD_OK=1,RTE_TSAIF_HMI_SLA_WARN_SPD_EXCD=2,RTE_TSAIF_HMI_SLA_WARN_IDLE=0,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 RTE_eTSAIFHmiSpdWarnDispType  /* speed warning display type @min: 0 @max:1 @values: enum { RTE_TSAIF_HMI_SPD_WARN_DISP_IDLE=0,RTE_TSAIF_HMI_SPD_WARN_DISP_RED=1,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 RTE_eTSAIFHmiSpdWarnType   /* speed warning type @min: 0 @max:3 @values: enum { RTE_TSAIF_HMI_SPD_WARN_TYPE_NDEF3=3,RTE_TSAIF_HMI_SPD_WARN_TYPE_OFF=0,RTE_TSAIF_HMI_SPD_WARN_TYPE_FLASH=1,RTE_TSAIF_HMI_SPD_WARN_TYPE_STEADY=2,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 RTE_eTSAIFHmiSpdWarnUnit   /* speed warning unit @min: 0 @max:1 @values: enum { RTE_TSAIF_HMI_SPD_WARN_UNIT_KMH=0,RTE_TSAIF_HMI_SPD_WARN_UNIT_MPH=1,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 RTE_eTSAIFHmiTSAState      /* tsa state @min: 0 @max:7 @values: enum { RTE_TSAIF_HMI_TSA_STATE_TSA_NA=2,RTE_TSAIF_HMI_TSA_STATE_TSA_NA_COUNTRY=4,RTE_TSAIF_HMI_TSA_STATE_NDEF6=6,RTE_TSAIF_HMI_TSA_STATE_NDEF7=7,RTE_TSAIF_HMI_TSA_STATE_NDEF5=5,RTE_TSAIF_HMI_TSA_STATE_TSA_TNA=3,RTE_TSAIF_HMI_TSA_STATE_READY=0,RTE_TSAIF_HMI_TSA_STATE_READY_POPUP=1,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 RTE_eTSAIFHmiWWAWarnReq    /* wwa warning @min: 0 @max:2 @values: enum { RTE_TSAIF_HMI_WWA_WARN_IDLE=0,RTE_TSAIF_HMI_WWA_WARN_WRONG_WAY=1,RTE_TSAIF_HMI_WWA_WARN_FORBID_CONT=2,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 RTE_eTSAIFOutputProcessState  /* standard system process state @min: 0 @max:5 @values: enum { RTE_TSAIF_STATE_NOT_INITIALIZED=0,RTE_TSAIF_STATE_TEMP_NOT_AVAILABLE=2,RTE_TSAIF_STATE_FAILURE=3,RTE_TSAIF_STATE_RUNNING=1,RTE_TSAIF_STATE_NOT_RUNNING=5,RTE_TSAIF_STATE_INITIALIZED=4,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 RTE_eTSAIFRWFStatus        /* status of road works @min: 0 @max:2 @values: enum { RTE_TSAIF_RWF_STATUS_UNKNOWN=0,RTE_TSAIF_RWF_STATUS_YES=2,RTE_TSAIF_RWF_STATUS_NO=1,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint64 RTE_t_TSAIFDiagOutput      /* #error workaround for missing configuration of data type size */;
typedef uint8 RTE_t_TSAIFOutputSignalState  /* signal state of output data @min: 0 @max:2 @values: enum { RTE_TSAIF_OUTPUT_SIGNAL_STATE_NOT_OK=2,RTE_TSAIF_OUTPUT_SIGNAL_STATE_INIT=0,RTE_TSAIF_OUTPUT_SIGNAL_STATE_OK=1,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 VDYErrState_t              /* the vdy error state type @min: 0 @max:2 @values: enum { VDY_ERR_STATE_INACTIVE=2,VDY_ERR_STATE_ACTIVE=1,VDY_ERR_STATE_UNKNOWN=0,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 MotState_t                 /* Moving (forward or reverse)
Moving forward
Moving reverse
Stand still @min: 0 @max:3 @values: enum { VDY_LONG_MOT_STATE_MOVE_RWD=2,VDY_LONG_MOT_STATE_STDST=3,VDY_LONG_MOT_STATE_MOVE_FWD=1,VDY_LONG_MOT_STATE_MOVE=0,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 Orientation_t              /* Angular displacement about sensor longitudinal axis @min: 0 @max:1 @values: enum { SENSOR_OR_NORMAL=0,SENSOR_OR_ROTATED=1,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint32 VehParAddState_t           /* @min: 0 @max:1000000 @values: enum { VEH_PAR_ADD_OVERHANG_FRONT=6,VEH_PAR_ADD_CURB_WEIGHT=4,VEH_PAR_ADD_VEHICLE_WIDTH=0,VEH_PAR_ADD_VEHICLE_LENGTH=2,VEH_PAR_ADD_DUMMY=1000000,} */			/* [Satisfies_rte sws 1182], [Satisfies_rte sws 1265] */;
typedef uint32 VehParSenorMountingState_t  /* @min: 0 @max:1000000 @values: enum { VEH_PAR_SEN_MOUNT_LAT_POS=0,VEH_PAR_SEN_MOUNT_DUMMY=1000000,VEH_PAR_SEN_MOUNT_PITCH_ANGLE=8,VEH_PAR_SEN_MOUNT_LONG_POS=2,VEH_PAR_SEN_MOUNT_LONGPOS_TO_COG=6,VEH_PAR_SEN_MOUNT_YAW_ANGLE=12,VEH_PAR_SEN_MOUNT_ORIENTATION=10,VEH_PAR_SEN_MOUNT_VERT_POS=4,} */			/* [Satisfies_rte sws 1182], [Satisfies_rte sws 1265] */;
typedef uint32 VehParSenorState_t         /* @min: 0 @max:1000000 @values: enum { VEH_PAR_SENSOR_LOBE_ANGLE=4,VEH_PAR_SENSOR_COVER_DAMPING=0,VEH_PAR_SENSOR_COVERAGE_ANGLE=2,VEH_PAR_SENSOR_CYCLE_TIME=6,VEH_PAR_SENSOR_NO_OF_SCANS=8,VEH_PAR_SENSOR_DUMMY=1000000,} */			/* [Satisfies_rte sws 1182], [Satisfies_rte sws 1265] */;
typedef uint8 ActGearPos_t               /* VDY_SIN_POS_GEAR @min: 0 @max:3 @values: enum { ACT_GEAR_POS_NEUTRAL=0,ACT_GEAR_POS_FORWARD=2,ACT_GEAR_POS_PARKING=1,ACT_GEAR_POS_REVERSE=3,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 LongDirState_t             /* @min: 0 @max:2 @values: enum { VDY_LONG_DIR_RWD=2,VDY_LONG_DIR_VOID=0,VDY_LONG_DIR_FWD=1,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 ParkBrakeState_t           /* VDY_SIN_POS_PBRK @min: 0 @max:1 @values: enum { STAT_ACTIVE=1,STAT_INACTIVE=0,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 TransmissionGear_t         /* Indicates current used gear position @min: 0 @max:10 @values: enum { DYN_GEAR_PARK_GEAR=10,DYN_GEAR_SIXTH_GEAR=6,DYN_GEAR_FIRST_GEAR=1,DYN_GEAR_FIFTH_GEAR=5,DYN_GEAR_SECOND_GEAR=2,DYN_GEAR_EIGHTH_GEAR=8,DYN_GEAR_NEUTRAL_GEAR=0,DYN_GEAR_THIRD_GEAR=3,DYN_GEAR_REVERSE_GEAR=9,DYN_GEAR_SEVENTH_GEAR=7,DYN_GEAR_FOURTH_GEAR=4,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 TurnSignal_t               /* Turn signal switch state @min: 0 @max:3 @values: enum { TURN_SIG_UNKNOWN=3,TURN_SIG_RIGHT=1,TURN_SIG_NEUTRAL=2,TURN_SIG_LEFT=0,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 VehLongMotStateExt_t       /* VDY_SIN_POS_VMOT @min: 0 @max:2 @values: enum { VDY_VEH_MOT_STATE_ROLLING=0,VDY_VEH_MOT_STATE_SECURE_STST=2,VDY_VEH_MOT_STATE_FAST_STST=1,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 RTE_CALI_t_eCALIMode       /* calibration mode signal @min: 0 @max:1 @values: enum { RTE_CALI_e_MODE_DEV=0,RTE_CALI_e_MODE_EOL=1,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint32 RTE_CALI_t_eStatus         /* calibration status @min: 0 @max:1073741824 @values: enum { RTE_CALI_e_NOT_STARTED=0,RTE_CALI_e_WARN_CONTRAST_BELOW_RANGE=128,RTE_CALI_e_ERR_INTENSITY_BELOW_RANGE=262144,RTE_CALI_e_WARN_CONTRAST_ABOVE_RANGE=256,RTE_CALI_e_ERR_PARAMETER_FALSE=65536,RTE_CALI_e_ERR_SYSTEM_NOT_CALIBRATED=2048,RTE_CALI_e_SUCCESS=2,RTE_CALI_e_ERR_CONTRAST_ABOVE_RANGE=2097152,RTE_CALI_e_ERR_INTENSITY_INHOMOGEN=131072,RTE_CALI_e_ERR_PATTERN_ECU_MOVING=67108864,RTE_CALI_e_ERR_UNKNOWN_CALI_MODE=8192,RTE_CALI_e_ERR_INIT_DATA_FAILED=32768,RTE_CALI_e_ERR_UNCORRESPONDING_MARKERS=33554432,RTE_CALI_e_ERR_PATTERN_POSITION_INVALID=134217728,RTE_CALI_e_ERR_OTHER=1073741824,RTE_CALI_e_ERR_INTENSITY_ABOVE_RANGE=524288,RTE_CALI_e_WARN_OTHER=512,RTE_CALI_e_ERR_NUMERICAL_PROBLEM=268435456,RTE_CALI_e_ERR_UNKNOWN_PATTERN_TYPE=16384,RTE_CALI_e_RUNNING=1,RTE_CALI_e_ERR_VIN_INVALID=4096,RTE_CALI_e_ERR_NOT_ENOUGH_MARKERS=8388608,RTE_CALI_e_WARN_INTENSITY_BELOW_RANGE=32,RTE_CALI_e_WARN_INTENSITY_INHOMOGEN=16,RTE_CALI_e_ERR_CONTRAST_BELOW_RANGE=1048576,RTE_CALI_e_ERROR=4,RTE_CALI_e_ERR_RESULT_OUT_OF_RANGE=536870912,RTE_CALI_e_WARN_INTENSITY_ABOVE_RANGE=64,RTE_CALI_e_ERR_NO_MARKERS=4194304,RTE_CALI_e_ERR_TOO_MANY_MARKERS=16777216,} */			/* [Satisfies_rte sws 1182], [Satisfies_rte sws 1265] */;
typedef uint8 RTE_CALI_t_eBayerPatType   /* Bayer Pattern type @min: 0 @max:3 @values: enum { RTE_CALI_e_BAYERPATTERN_GRBG=1,RTE_CALI_e_BAYERPATTERN_GBRG=2,RTE_CALI_e_BAYERPATTERN_RGGB=0,RTE_CALI_e_BAYERPATTERN_BGGR=3,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 RTE_CALI_t_eExit           /* access last calibration exit reason @min: 0 @max:3 @values: enum { RTE_CALI_EXITTYPE_MAIN_TIMEOUT=2,RTE_CALI_EXITTYPE_NONE=0,RTE_CALI_EXITTYPE_EXTERNAL_REASON=3,RTE_CALI_EXITTYPE_SAMPLING_ABORTED=1,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 RTE_CALI_t_eSigStatus      /* signal quality of sensor socket data @min: 0 @max:5 @values: enum { RTE_CALI_e_SIG_TIMEOUT=3,RTE_CALI_e_SIG_NOT_OK=2,RTE_CALI_e_SIG_OUT_OF_RANGE=5,RTE_CALI_e_SIG_INIT=0,RTE_CALI_e_SIG_OK_BUT_SENSOR_NOT_INIT=4,RTE_CALI_e_SIG_OK=1,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 FCT_OP_MODE_t              /* @min: 0 @max:7 @values: enum { FCT_MOD_STARTUP=0,FCT_MOD_END_OF_LINE=5,FCT_MOD_MON_INPUT_ACC=6,FCT_MOD_RUNNING=2,FCT_MOD_REDUCED_FUNC=7,FCT_MOD_INIT=1,FCT_MOD_SERVICEALIGNMENT=4,FCT_MOD_SHUTDOWN=3,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 RTE_GB_t_eBayerPatternType  /* Bayer pattern type @min: 1 @max:4 @values: enum { RTE_GB_BAYERPATTERN_RGGB=1,RTE_GB_BAYERPATTERN_GBRG=3,RTE_GB_BAYERPATTERN_GRBG=2,RTE_GB_BAYERPATTERN_BGGR=4,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 RTE_GB_t_eBlockageStatus   /* Blockage status for current MPC function initialisation @min: 0 @max:6 @values: enum { RTE_GB_PART_BLOCKAGE=4,RTE_GB_BLOCKAGE=6,RTE_GB_NO_BLOCKAGE=1,RTE_GB_CONDENSATION=3,RTE_GB_UNKNOWN_STATUS=0,RTE_GB_LOW_VISIBILITY=5,RTE_GB_TOLERATED_BLOCKAGE=2,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 RTE_GB_t_eFctId            /* MPC function identifier @min: 0 @max:6 @values: enum { RTE_GB_HLA_FCT_ID=0,RTE_GB_TSA_FCT_ID=1,RTE_GB_SOD_L_FCT_ID=4,RTE_GB_SOD_FCT_ID=5,RTE_GB_UNKNOWN_FCT_ID=6,RTE_GB_LDW_FCT_ID=2,RTE_GB_SOD_R_FCT_ID=3,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 RTE_GB_t_eHighBeamState    /* @min: 0 @max:3 @values: enum { RTE_GB_HB_PARTIAL=2,RTE_GB_HB_FULL_ON=1,RTE_GB_HB_OFF=0,RTE_GB_HB_SPOT=3,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 RTE_GB_t_eLightStyle       /* @min: 0 @max:4 @values: enum { RTE_GB_LT_MOTORWAY=2,RTE_GB_LT_COUNTRY=1,RTE_GB_LT_FULL_HIBM=4,RTE_GB_LT_PART_HIBM=3,RTE_GB_LT_SYMM=0,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 RTE_GB_t_eMovementState    /* movement state @min: 0 @max:3 @values: enum { RTE_GB_MOVE_IDLE=0,RTE_GB_STAND_STILL=3,RTE_GB_MOVE_REV=2,RTE_GB_MOVE_FWD=1,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 b_FogLampFront             					/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 b_FogLampRear              					/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 RTE_HLAF_t_eNightViewObjectType  /* object type @min: 0 @max:3 @values: enum { RTE_HLAF_NV_OBJ_ANIMAL_BIG=3,RTE_HLAF_NV_OBJ_ANIMAL_SMALL=2,RTE_HLAF_NV_OBJ_IDLE=0,RTE_HLAF_NV_OBJ_PEDESTRIAN=1,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 RTE_HLAF_t_eNightViewSpot  /* spot light request @min: 0 @max:3 @values: enum { RTE_HLAF_NV_SPOT_BLINK=1,RTE_HLAF_NV_SPOT_CONT=2,RTE_HLAF_NV_SPOT_ABORT=3,RTE_HLAF_NV_SPOT_OFF=0,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 RTE_HLAR_t_eDebugSwitch    /* HLAR debug switch @min: 0 @max:35 @values: enum { RTE_HLAR_DEBUG_MODE_7=27,RTE_HLAR_DEBUG_MODE_NORMAL=0,RTE_HLAR_DEBUG_MODE_5=25,RTE_HLAR_DEBUG_MODE_4=24,RTE_HLAR_DEBUG_MEASFREEZE_ONLY=2,RTE_HLAR_DEBUG_MODE_2=22,RTE_HLAR_DEBUG_MODE_1=21,RTE_HLAR_DEBUG_MODE_0=20,RTE_HLAR_DEBUG_MODE_9=29,RTE_HLAR_DEBUG_MODE_DEMO=1,RTE_HLAR_DEBUG_HB_ON=3,RTE_HLAR_DEBUG_MODE_14=34,RTE_HLAR_DEBUG_MODE_6=26,RTE_HLAR_DEBUG_HB_OFF=4,RTE_HLAR_DEBUG_MODE_3=23,RTE_HLAR_DEBUG_MODE_15=35,RTE_HLAR_DEBUG_MODE_8=28,RTE_HLAR_DEBUG_MODE_13=33,RTE_HLAR_DEBUG_MODE_12=32,RTE_HLAR_DEBUG_MODE_11=31,RTE_HLAR_DEBUG_MODE_10=30,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 RTE_HLA_t_eActCharac       /* Access to active characteristic of illumination control @min: 0 @max:1 @values: enum { RTE_HLA_EXP_NIGHT=1,RTE_HLA_EXP_DAY=0,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 RTE_HLA_t_eBayerPatternType  /* Bayer Pattern type @min: 0 @max:3 @values: enum { RTE_HLA_BAYERPATTERN_BGGR=3,RTE_HLA_BAYERPATTERN_GRBG=1,RTE_HLA_BAYERPATTERN_RGGB=0,RTE_HLA_BAYERPATTERN_GBRG=2,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint32 RTE_HLA_t_eBrightnessState  /* Access to HLA signal "Outside Brightness State" @min: 0 @max:4294967295 @values: enum { RTE_HLA_BRT_NIGHT=5,RTE_HLA_BRT_32BIT=4294967295,RTE_HLA_BRT_TWLGT_1=2,RTE_HLA_BRT_TWLGT_3=4,RTE_HLA_BRT_TWLGT_2=3,RTE_HLA_BRT_CLEARANCE=249,RTE_HLA_BRT_BLOCKAGE=250,RTE_HLA_BRT_IDLE=0,RTE_HLA_BRT_DAY=1,} */			/* [Satisfies_rte sws 1182] */;
typedef uint32 RTE_HLA_t_eCityState       /* Access to HLA city detection @min: 0 @max:4294967295 @values: enum { RTE_HLA_CITY_MAYBE=2,RTE_HLA_CITY_DETECTED=1,RTE_HLA_CITY_IDLE=0,RTE_HLA_CITY_32BIT=4294967295,} */			/* [Satisfies_rte sws 1182] */;
typedef uint8 RTE_HLA_t_eDrivingDirection  /* Access to HLA driving direction @min: 0 @max:2 @values: enum { RTE_HLA_DRVDIR_LEADING=2,RTE_HLA_DRVDIR_IDLE=0,RTE_HLA_DRVDIR_ONCOMING=1,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 RTE_HLA_t_eExit            /* @min: 0 @max:3 @values: enum { RTE_HLA_EXITTYPE_EXTERNAL_REASON=3,RTE_HLA_EXITTYPE_NONE=0,RTE_HLA_EXITTYPE_MAIN_TIMEOUT=2,RTE_HLA_EXITTYPE_SAMPLING_ABORTED=1,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 RTE_HLA_t_eExpCRTLState    /* Access to current illumination control state @min: 0 @max:2 @values: enum { RTE_HLA_IC_ALGO_CTRL=1,RTE_HLA_IC_AUTO_CTRL=0,RTE_HLA_IC_FIXED_EXP_TIME=2,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 RTE_HLA_t_eGlareReductionState  /* @min: 0 @max:2 @values: enum { RTE_HLA_GR_ACTIVE=1,RTE_HLA_GR_INACTIVE=0,RTE_HLA_GR_NDEF2=2,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 RTE_HLA_t_eHeadLightMechanics  /* head light mechanics (roller, aperture, none = pixel light) @min: 0 @max:3 @values: enum { RTE_HLA_LMECH_NONE=3,RTE_HLA_LMECH_UNKNOWN=0,RTE_HLA_LMECH_ROLLER=1,RTE_HLA_LMECH_APERTURE=2,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 RTE_HLA_t_eHeadLightMode   /* head light mode (light, standard, plus, standard and plus) @min: 0 @max:4 @values: enum { RTE_HLA_LMODE_UNKNOWN=0,RTE_HLA_LMODE_STANDARD=1,RTE_HLA_LMODE_PLUS=3,RTE_HLA_LMODE_LIGHT=4,RTE_HLA_LMODE_STANDARD_PLUS=2,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 RTE_HLA_t_eHeadLightType   /* head light type @min: 0 @max:4 @values: enum { RTE_HLA_LTYPE_PIXEL=3,RTE_HLA_LTYPE_HALOGENE=4,RTE_HLA_LTYPE_UNKNOWN=0,RTE_HLA_LTYPE_LED=1,RTE_HLA_LTYPE_XENON=2,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 RTE_HLA_t_eHighBeamState   /* @min: 0 @max:3 @values: enum { RTE_HLA_HB_OFF=0,RTE_HLA_HB_SPOT=3,RTE_HLA_HB_PARTIAL=2,RTE_HLA_HB_FULL_ON=1,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint32 RTE_HLA_t_eHighwayDetectionState  /* @min: 0 @max:4294967295 @values: enum { RTE_HLA_HIGHWAY_LOW_SPEED=3,RTE_HLA_HIGHWAY_32BIT=4294967295,RTE_HLA_HIGHWAY_IDLE=0,RTE_HLA_NOT_HIGHWAY_DTCD=1,RTE_HLA_HIGHWAY_DTCD=2,} */			/* [Satisfies_rte sws 1182] */;
typedef uint32 RTE_HLA_t_eHighwayOcclusionState  /* @min: 0 @max:4294967295 @values: enum { RTE_HLA_NO_OCCL_DTCD=1,RTE_HLA_OCCL_DTCD=2,RTE_HLA_OCCL_32BIT=4294967295,RTE_HLA_OCCL_IDLE=0,} */			/* [Satisfies_rte sws 1182] */;
typedef uint32 RTE_HLA_t_eHighwayRoadwayType  /* @min: 0 @max:4294967295 @values: enum { RTE_HLA_DIVIDED_RDWAY=2,RTE_HLA_NORMAL_RDWAY=1,RTE_HLA_RDWAY_IDLE=0,RTE_HLA_RDWAY_32BIT=4294967295,} */			/* [Satisfies_rte sws 1182] */;
typedef uint8 RTE_HLA_t_eICDefectType    /* Access to defect type of the pixel. @min: 0 @max:7 @values: enum { RTE_HLA_IC_PIX_OK=0,RTE_HLA_IC_HOT_PIX=4,RTE_HLA_IC_BRT_PIX=5,RTE_HLA_IC_VERY_HOT_PIX=1,RTE_HLA_IC_VERY_BRT_PIX=2,RTE_HLA_IC_VERY_DRK_PIX=3,RTE_HLA_IC_DRK_PIX=6,RTE_HLA_IC_DYN_HOT_PIX=7,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 RTE_HLA_t_eLevelState      /* Access to HLA optical headlight leveling state @min: 0 @max:1 @values: enum { RTE_HLA_OPTL_OFF=0,RTE_HLA_OPTL_ON=1,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 RTE_HLA_t_eLightModuleState  /* @min: 0 @max:3 @values: enum { RTE_HLA_LTM_DEACT=3,RTE_HLA_LTM_FAULT=2,RTE_HLA_LTM_IDLE=1,RTE_HLA_LTM_NAVL=0,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 RTE_HLA_t_eLightOutput     /* Access to HLA plus signal "headlamp left light output" @min: 0 @max:2 @values: enum { RTE_HLA_LIGHT_OUT_MAX=2,RTE_HLA_LIGHT_OUT_STD=0,RTE_HLA_LIGHT_OUT_MIN=1,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 RTE_HLA_t_eLightStyle      /* @min: 0 @max:4 @values: enum { RTE_HLA_LT_SYMM=0,RTE_HLA_LT_COUNTRY=1,RTE_HLA_LT_FULL_HIBM=4,RTE_HLA_LT_MOTORWAY=2,RTE_HLA_LT_PART_HIBM=3,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 RTE_HLA_t_eMotorwayState   /* Access to HLA motorway detection @min: 0 @max:2 @values: enum { RTE_HLA_MTWY_MOTORWAY=2,RTE_HLA_MTWY_IDLE=0,RTE_HLA_MTWY_COUNTRY=1,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 RTE_HLA_t_eMovementState   /* vehicle motion state e.g. DYN_VHEMOT_STAND_STILL, DYN_VHEMOT_ROLL_FWD,... @min: 0 @max:3 @values: enum { RTE_HLA_MOVE_REV=2,RTE_HLA_STAND_STILL=3,RTE_HLA_MOVE_IDLE=0,RTE_HLA_MOVE_FWD=1,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint32 RTE_HLA_t_eRedReflectorArea  /* @min: 0 @max:4294967295 @values: enum { RTE_HLA_RED_REFLECTOR_AREA_IDLE=0,RTE_HLA_RED_REFLECTOR_AREA=1,RTE_HLA_RED_REFLECTOR_AREA_32BIT=4294967295,} */			/* [Satisfies_rte sws 1182] */;
typedef uint8 RTE_HLA_t_eSigStatus_t     /* @min: 0 @max:5 @values: enum { RTE_HLA_SIG_OK=1,RTE_HLA_SIG_OK_BUT_SENSOR_NOT_INIT=4,RTE_HLA_SIG_TIMEOUT=3,RTE_HLA_SIG_NOT_OK=2,RTE_HLA_SIG_OUT_OF_RANGE=5,RTE_HLA_SIG_INIT=0,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 RTE_HLA_t_eSpotLight       /* spot light installed (avl, not avl) @min: 0 @max:2 @values: enum { RTE_HLA_SPOTLIGHT_NAVL=2,RTE_HLA_SPOTLIGHT_UNKNOWN=0,RTE_HLA_SPOTLIGHT_AVL=1,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 RTE_HLA_t_eState           /* Access to HLA State @min: 0 @max:3 @values: enum { RTE_HLA_ACTV=2,RTE_HLA_FAULT=3,RTE_HLA_IDLE=1,RTE_HLA_NAVL=0,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint32 RTE_HLA_t_eTrafficStyle    /* local traffic style @min: 0 @max:4294967295 @values: enum { RTE_HLA_TRAFFIC_RHD=1,RTE_HLA_TRAFFIC_32BIT=4294967295,RTE_HLA_TRAFFIC_STYLE_IDLE=0,RTE_HLA_TRAFFIC_LHD=2,} */			/* [Satisfies_rte sws 1182] */;
typedef uint32 RTE_HLA_t_eTrafficStyleState  /* @min: 0 @max:4294967295 @values: enum { RTE_HLA_TRAFFICSTYLE_SCN=1,RTE_HLA_TRAFFICSTYLE_LAST_LEARNED=3,RTE_HLA_TRAFFICSTYLE_32BIT=4294967295,RTE_HLA_TRAFFICSTYLE_INIT=0,RTE_HLA_TRAFFICSTYLE_LEARN=2,} */			/* [Satisfies_rte sws 1182] */;
typedef uint32 RTE_HLA_t_eTunnel          /* Access to HLA tunnel detection @min: 0 @max:4294967295 @values: enum { RTE_HLA_TUNNEL_IDLE=0,RTE_HLA_TUNNEL_UPFRONT=1,RTE_HLA_TUNNEL_INSIDE=2,RTE_HLA_TUNNEL_32BIT=4294967295,} */			/* [Satisfies_rte sws 1182] */;
typedef uint8 RTE_HLA_t_eType            /* Access to signal HLA availability. @min: 0 @max:3 @values: enum { RTE_HLA_TYPE_NAVL=0,RTE_HLA_TYPE_STANDARD=2,RTE_HLA_TYPE_PLUS=3,RTE_HLA_TYPE_BINARY=1,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint32 RTE_HLA_t_eWeatherState    /* Access to HLA weather detection @min: 0 @max:4294967295 @values: enum { RTE_HLA_WEATHER_BAD=1,RTE_HLA_WEATHER_32BIT=4294967295,RTE_HLA_WEATHER_IDLE=0,} */			/* [Satisfies_rte sws 1182] */;
typedef uint8 RTE_HLA_t_eWindshieldType  /* wind shield type @min: 0 @max:4 @values: enum { RTE_HLA_WTYPE_BLUE=4,RTE_HLA_WTYPE_CLEAR2=2,RTE_HLA_WTYPE_CLEAR1=1,RTE_HLA_WTYPE_GREEN=3,RTE_HLA_WTYPE_UNKNOWN=0,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 RTE_HLA_t_eWiperStage      /* wiper switch position @min: 0 @max:6 @values: enum { RTE_HLA_WIPER_OFF=0,RTE_HLA_WIPER_INTERVAL1=1,RTE_HLA_WIPER_INTERVAL2=2,RTE_HLA_WIPER_INTERVAL3=3,RTE_HLA_WIPER_INTERVAL4=4,RTE_HLA_WIPER_STAGE1=5,RTE_HLA_WIPER_STAGE2=6,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 RTE_HLA_t_eWiperWasherState  /* tip-wipe / washer state @min: 0 @max:2 @values: enum { RTE_HLA_WWS_IDLE=0,RTE_HLA_WWS_WASH=2,RTE_HLA_WWS_TIPWIPE=1,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 Dem_DTCKindType            /* @min: 1 @max:2 @values: enum { DEM_DTC_KIND_ALL_DTCS=1,DEM_DTC_KIND_EMISSION_REL_DTCS=2,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 Dem_DTCStatusMaskType      /* @min:0.0 @max:255.0 @resolution:1.0 */			/* [Satisfies_rte sws 1180] */;
typedef uint32 Dem_DTCType                /* @min:0.0 @max:4294967295.0 @resolution:1.0 */			/* [Satisfies_rte sws 1182] */;
typedef uint16 Dem_EventIdType            /* @min:0.0 @max:65535.0 @resolution:1.0 */			/* [Satisfies_rte sws 1181] */;
typedef uint8 Dem_EventStatusExtendedType  /* @min:0.0 @max:255.0 @resolution:1.0 */			/* [Satisfies_rte sws 1180] */;
typedef uint8 Dem_EventStatusType        /* @min: 0 @max:3 @values: enum { DEM_EVENT_STATUS_PREPASSED=2,DEM_EVENT_STATUS_FAILED=1,DEM_EVENT_STATUS_PASSED=0,DEM_EVENT_STATUS_PREFAILED=3,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef sint8 Dem_FaultDetectionCounterType  /* @min:-128.0 @max:127.0 @resolution:1.0 */	/* [Satisfies_rte sws 1177] */;
typedef uint8 Dem_IndicatorStatusType    /* @min: 0 @max:3 @values: enum { DEM_INDICATOR_CONTINUOUS=1,DEM_INDICATOR_OFF=0,DEM_INDICATOR_BLINK_CONT=3,DEM_INDICATOR_BLINKING=2,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 Dem_OperationCycleIdType   /* @min:0.0 @max:255.0 @resolution:1.0 */			/* [Satisfies_rte sws 1180] */;
typedef uint8 Dem_OperationCycleStateType  /* @min: 1 @max:2 @values: enum { DEM_CYCLE_STATE_END=2,DEM_CYCLE_STATE_START=1,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 RTE_t_CalibPatternType     /* @min: 0 @max:1 @values: enum { RTE_CALIB_PATTERN_NIGHTVIEW=0,RTE_CALIB_PATTERN_NIGHTVIEW_BIG=1,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 RTE_t_DiagHeatRq           /* Diagnostic requests from Diag to Heat @min: 0 @max:2 @values: enum { HEAT_SWITCH_OFF=0,HEAT_SWITCH_AUTOMATIC=2,HEAT_SWITCH_ON=1,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 RTE_t_eALDWVibMotRq        /* @min: 0 @max:1 @values: enum { RTE_ALDW_VIB_MOT_RIGHT=1,RTE_ALDW_VIB_MOT_LEFT=0,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 RTE_t_eAlgoDebugMode       /* @min: 0 @max:1 @values: enum { RTE_ALGO_MODE_DEBUG=1,RTE_ALGO_MODE_NORMAL=0,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 RTE_t_eTSADispTest         /* @min: 0 @max:255 @values: enum { RTE_TSA_DISP_TEST_ON_ALL_SIGNS=0,RTE_TSA_DISP_TEST_OFF=255,} */			/* [Satisfies_rte sws 1180] */;
typedef uint8 e_CaliMode                 /* calibration mode signal @min: 0 @max:1 @values: enum { e_MODE_EOL=1,e_MODE_DEV=0,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 e_OffOnRequest             /* Requested state of the heat signal/pin @min: 0 @max:1 @values: enum { HEAT_RQ_ON=1,HEAT_RQ_OFF=0,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 RTE_ICA_E_FRAME_TYPE       /* Frame-type this data belongs to @min: 0 @max:1 @values: enum { RTE_E_FRAME_TYPE_ODD=1,RTE_E_FRAME_TYPE_EVEN=0,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 RTE_ICA_E_IMAGER_CFA       /* Imager color filter array @min: 0 @max:9 @values: enum { RTE_E_IMAGER_CFA_CCCC=1,RTE_E_IMAGER_CFA_GRBG=4,RTE_E_IMAGER_CFA_UNKNOWN=0,RTE_E_IMAGER_CFA_GBRC=7,RTE_E_IMAGER_CFA_GBRG=5,RTE_E_IMAGER_CFA_CRBG=8,RTE_E_IMAGER_CFA_BGGR=3,RTE_E_IMAGER_CFA_BGCR=9,RTE_E_IMAGER_CFA_RGGB=2,RTE_E_IMAGER_CFA_RCGB=6,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 RTE_ICA_E_IMAGER_CONTROL_SCHEMA  /* Imager control schema @min: 0 @max:3 @values: enum { RTE_E_IC_SCHEMA_DOUBLE_AT_DAY=2,RTE_E_IC_SCHEMA_DOUBLE_AT_UNKNOWN=3,RTE_E_IC_SCHEMA_DOUBLE_AT_NIGHT=1,RTE_E_IC_SCHEMA_SINGLE_FRAME=0,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 RTE_ICA_E_IMAGER_TYPE      /* @min: 0 @max:1 @values: enum { RTE_ICA_e_IMAGER_TYPE_LEFT=1,RTE_ICA_e_IMAGER_TYPE_RIGHT=0,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 RTE_IC_E_DCG_STATE         /* State of the dual conversion gain (DCG) @min: 0 @max:1 @values: enum { RTE_IC_e_DCG_HIGH=1,RTE_IC_e_DCG_LOW=0,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 RTE_IC_E_INTRADAY_STATE    /* Flag for day or night mode @min: 0 @max:1 @values: enum { RTE_IC_e_INTRADAY_STATE_DAY=1,RTE_IC_e_INTRADAY_STATE_NIGHT=0,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 NORM_t_eIgnState           /* @min: 0 @max:5 @values: enum { IGN_ON=4,IGN_START=5,IGN_ACC=2,IGN_LOCK=0,IGN_OFF=1,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 RTE_t_eLCLaneDscrbSide     /* @min: 0 @max:3 @values: enum { RTE_NONE=0,RTE_RIGHT=2,RTE_BOTH=3,RTE_LEFT=1,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 RTE_t_eLCLaneValid         /* Lane valid state @min: 0 @max:2 @values: enum { RTE_LANESTAT_INVLD=0,RTE_VLD_MARK_DIFF=1,RTE_VLD_MARK_SAME=2,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 RTE_t_eLCYawValid          /* Yaw angle valid @min: 0 @max:3 @values: enum { RTE_YAWSTAT_INVLD=0,RTE_VLD_MULTI_LINE=3,RTE_VLD_ONLY_SAME_SIDE=1,RTE_VLD_ONLY_DIFF_SIDE=2,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint32 NvM_ui32_HeatOnTime        /* Heat request time since last clear @min:0.0 @max:4294967295.0 */			/* [Satisfies_rte sws 1182] */;
typedef uint8 Nvm_t_NMDeactivationSwitch  /* Switch to deactivate networkmanagement (avoid go to sleep) @min: 0 @max:1 @values: enum { NM_DEACTIVATION_ACTIVE=0,NM_DEACTIVATION_OFF=1,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 RTE_t_SYSMultiRunTaskState  /* @min: 0 @max:12 @values: enum { SYS_OS_TASK_IDLE=0,SYS_OS_TSK_RE_12=12,SYS_OS_TSK_RE_9=9,SYS_OS_TSK_RE_8=8,SYS_OS_TSK_RE_11=11,SYS_OS_TSK_RE_3=3,SYS_OS_TSK_RE_2=2,SYS_OS_TSK_RE_1=1,SYS_OS_TSK_RE_10=10,SYS_OS_TSK_RE_7=7,SYS_OS_TSK_RE_6=6,SYS_OS_TSK_RE_5=5,SYS_OS_TSK_RE_4=4,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 DC_BOOL                    					/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint16 SwcDemSc_DebTimType        /* @min:0.0 @max:65535.0 @resolution:1.0 */			/* [Satisfies_rte sws 1181] */;
typedef uint8 SwcDemSc_FlReportType      /* @min: 0 @max:255 @values: enum { SWCDEMSC_STAT_FL_REPORT_INVALID=255,SWCDEMSC_STAT_FL_REPORT_CYCLIC=0,SWCDEMSC_STAT_FL_REPORT_EVENT=1,} */			/* [Satisfies_rte sws 1180] */;
typedef uint8 SwcDemSc_ScStatusType      					/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 SwcDemSc_StdReturnType     /* @min: 0 @max:255 @values: enum { SWCDEMSC_E_OK=0,SWCDEMSC_E_INVALID=255,SWCDEMSC_E_NOT_OK=1,} */			/* [Satisfies_rte sws 1180] */;
typedef uint8 SwcDemSc_glbScSigIndType   /* @min:0.0 @max:255.0 @resolution:1.0 */			/* [Satisfies_rte sws 1180] */;
typedef uint8 c02_TransMd_Stat           /* @min: 0 @max:3 @values: enum { I_C02_TRANSMD_STAT_ACTV=2,I_C02_TRANSMD_STAT_TEMP_OFF=1,I_C02_TRANSMD_STAT_SNA=3,I_C02_TRANSMD_STAT_OFF=0,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 c03_EngRun_Stat            /* @min: 0 @max:7 @values: enum { I_C03_ENGRUN_STAT_UNLIMITED=4,I_C03_ENGRUN_STAT_IDLE_UNSTBL=2,I_C03_ENGRUN_STAT_NDEF6=6,I_C03_ENGRUN_STAT_SNA=7,I_C03_ENGRUN_STAT_LIMITED=5,I_C03_ENGRUN_STAT_IDLE_STBL=3,I_C03_ENGRUN_STAT_START=1,I_C03_ENGRUN_STAT_STOP=0,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 c03_ISw_Stat               /* @min: 0 @max:7 @values: enum { I_C03_ISW_STAT_IGN_LOCK=0,I_C03_ISW_STAT_IGN_ON=4,I_C03_ISW_STAT_SNA=7,I_C03_ISW_STAT_IGN_ACC=2,I_C03_ISW_STAT_IGN_OFF=1,I_C03_ISW_STAT_IGN_START=5,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 c08_V_0_25k4_0k1           /* @min:0.0 @max:255.0 @resolution:1.0 */			/* [Satisfies_rte sws 1180] */;
typedef uint32 c24_km_0_999999k9_0k1      /* @min:0.0 @max:16777215.0 @resolution:1.0 */			/* [Satisfies_rte sws 1182], [Satisfies_rte sws 1265] */;
typedef uint8 EngRunState                /* Engine running state @min: 0 @max:7 @values: enum { ENGRUN_NDEF=6,ENGRUN_SNA=7,ENGRUN_IDLE_UNSTABLE=2,ENGRUN_START=1,ENGRUN_STOP=0,ENGRUN_LIMITED=5,ENGRUN_UNLIMITED=4,ENGRUN_IDLE_STABLE=3,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 RTE_b_RollTestMd           					/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 e_SigStatus                /* signal quality of height car body @min: 0 @max:5 @values: enum { RTE_SIG_TIMEOUT=3,RTE_SIG_INIT=0,RTE_SIG_OK=1,RTE_SIG_OUT_OF_RANGE=5,RTE_SIG_NOT_OK=2,RTE_SIG_OK_BUT_SENSOR_NOT_INIT=4,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 e_WiperSw6Posn             /* @min: 0 @max:7 @values: enum { WPRSW6POSN_INTERVAL4=4,WPRSW6POSN_INTERVAL3=3,WPRSW6POSN_INTERVAL2=2,WPRSW6POSN_INTERVAL1=1,WPRSW6POSN_SNA=7,WPRSW6POSN_OFF=0,WPRSW6POSN_STAGE1=5,WPRSW6POSN_STAGE2=6,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 e_WiperWasherSw            /* @min: 0 @max:2 @values: enum { WASH=2,NOT_PRESSED=0,TIPWIPE=1,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 RTE_eTrueFalseNt           /* True false and not tested enumeration @min: 0 @max:2 @values: enum { RTE_NOT_TESTED=2,RTE_FALSE=0,RTE_TRUE=1,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 RTE_t_eAlgoId              /* algo ID @min: 0 @max:22 @values: enum { RTE_MCU_ALGO_VERSION_IC=9,RTE_DSPSTEREO_ALGO_VERSION_POD=16,RTE_DSPSTEREO_ALGO_VERSION_SAC=14,RTE_DSPSTEREO_SW_VERSION=13,RTE_DSPSTEREO_ALGO_VERSION_PED_PRE=19,RTE_FPGA_SW_VERSION=22,RTE_MCU_ALGO_VERSION_ALDW=3,RTE_DSPSTEREO_ALGO_VERSION_SCB=21,RTE_MCU_ALGO_VERSION_CB=4,RTE_DSPMONO_ALGO_VERSION_LR=11,RTE_MCU_ALGO_VERSION_TSA=6,RTE_MCU_ALGO_VERSION_LD=1,RTE_DSPSTEREO_ALGO_VERSION_FOD=15,RTE_MCU_ALGO_VERSION_VDY=5,RTE_MCU_ALGO_VERSION_NVM=8,RTE_DSPSTEREO_ALGO_VERSION_PED_POST=20,RTE_DSPSTEREO_ALGO_VERSION_PV=17,RTE_DSPMONO_ALGO_VERSION_SR=12,RTE_MCU_ALGO_VERSION_MAP=7,RTE_MCU_ALGO_VERSION_HLA=0,RTE_DSPMONO_SW_VERSION=10,RTE_DSPSTEREO_ALGO_VERSION_STEREOLANE=18,RTE_MCU_ALGO_VERSION_VLN=2,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 RTE_t_eDataValid           /* Flag for data validity @min: 0 @max:1 @values: enum { RTE_DATA_OK=1,RTE_DATA_NOT_OK=0,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 c08_0_255_1_SNA_na         					/* [Satisfies_rte sws 1180] */;
typedef uint32 c24_0_16777215_1_SNA_na    					/* [Satisfies_rte sws 1182], [Satisfies_rte sws 1265] */;
typedef uint32 c32_0_4294967295_1_SNA_na  					/* [Satisfies_rte sws 1182] */;
typedef uint8 E_ALGO_SIGNAL_STATE        /* @min: 0 @max:2 @values: enum { e_AL_SIG_STATE_OK=1,e_AL_SIG_STATE_INVALID=2,e_AL_SIG_STATE_INIT=0,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 E_EGO_LOGGING_SIGNAL_ID    /* @min: 0 @max:33 @values: enum { e_WHEEL_CIRCUMFENCE_FL=14,e_WHEEL_COUNTER_RL=4,e_SIGTYPE_ACCEL_Y_OFFSET=25,e_SIGTYPE_VEH_ACCEL_PITCH=30,e_WHEEL_CIRCUMFENCE_FR=15,e_SIGTYPE_ACCEL_X_OFFSET=23,e_MAX_NO_SIGNALS=33,e_SIGTYPE_VEH_SIDE_SLIP_ANGLE_GRADIENT=32,e_SIGTYPE_TACHO_SPEED=1,e_WHEEL_DIR_RR=13,e_SIGTYPE_FRONT_WHEEL_ANGLE_OFFSET=19,e_WHEEL_FREQ_RR=9,e_SIGTYPE_VEH_ACCEL_ROLL=31,e_WHEEL_FREQ_RL=8,e_WHEEL_COUNTER_RR=5,e_WHEEL_DIR_RL=12,e_YAWRATE_OFFSET=21,e_WHEEL_COUNTER_FR=3,e_SIGTYPE_ACCEL_X=22,e_SIGTYPE_ACCEL_Y=24,e_STEERING_WHEEL_ANGLE_OFFSET=28,e_SIGTYPE_VEH_ACCEL_VERT=29,e_WHEEL_FREQ_FL=6,e_SIGTYPE_FRONT_WHEEL_ANGLE=18,e_STEERING_WHEEL_ANGLE_VELOCITY=27,e_WHEEL_COUNTER_FL=2,e_YAWRATE_RAW=20,e_WHEEL_DIR_FR=11,e_WHEEL_FREQ_FR=7,e_WHEEL_CIRCUMFENCE_RR=17,e_INVALID=0,e_WHEEL_CIRCUMFENCE_RL=16,e_STEERING_WHEEL_ANGLE=26,e_WHEEL_DIR_FL=10,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 E_EGO_LOGGING_SIGNAL_STATE  /* @min: 0 @max:1 @values: enum { e_EGO_LOG_SIGNAL_STATE_INVALID=0,e_EGO_LOG_SIGNAL_STATE_VALID=1,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint32 E_FUSI_TEST_CHECK          /* ENABLE 0x5A5A5A5A
Test for the Stereo DSP 0x00 XX XX XX:
- FATAL_ERROR_STEREO  0x00000001
- STEREO_CLOCK_MONITORING  0x00000002
- SKIP_DEBAYER_TEST  0x00000003
- STEREO_IPC_CRC_FAILURE 0x00000004
- STEREO_IPC_UPDATE_FAILURE 0x00000005
Test for the FPGA 0x01 XX XX XX:
- FATAL_ERROR_FPGA  0x01000001
Test for the Mono DSP 0x02 XX XX XX:
- MONO_FATAL_ERROR  0x02000001
- MONO_CLOCK_MONITORING  0x02000002
- MONO_IPC_CRC_FAILURE 0x02000004
- MONO_IPC_UPDATE_FAILURE 0x02000005 @min: 0 @max:1515870810 @values: enum { e_FUSI_TEST_CHECK_MONO_IPC_UPDATE=33554437,e_FUSI_TEST_CHECK_ENABLE=1515870810,e_FUSI_TEST_CHECK_STEREO_IPC_UPDATE=5,e_HILL_SKIP_DEBAYER_TEST=3,e_FUSI_TEST_CHECK_MONO_CLOCK_MONITORING=33554434,e_FUSI_TEST_CHECK_STEREO_IPC_CRC=4,e_FUSI_TEST_CHECK_STEREO_CLOCK_MONITORING=2,e_FUSI_TEST_CHECK_FATAL_ERROR_FPGA=16777217,e_FUSI_TEST_CHECK_MONO_IPC_CRC=33554436,e_FUSI_TEST_CHECK_FATAL_ERROR_MONO=33554433,e_FUSI_TEST_CHECK_DISABLE=0,e_FUSI_TEST_CHECK_FATAL_ERROR_STEREO=1,e_NO_FUSI_TEST_CHECK=0,} */			/* [Satisfies_rte sws 1182], [Satisfies_rte sws 1265] */;
typedef uint8 E_IMAGE_REGISTER_CODE      /* @min: 0 @max:3 @values: enum { e_IMGREGRESP_INVALID_ADDR=2,e_IMGREGRESP_OK=0,e_IMGREGRESP_INVALID_TAG=1,e_IMGREGRESP_SYSTEM_ERROR=3,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 E_MODE_MONO_DSP            /* @min: 0 @max:3 @values: enum { e_MODE_MONO_INIT=0,e_MODE_MONO_DEGRAD=2,e_MODE_MONO_ERROR=3,e_MODE_MONO_NORMAL=1,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 E_MODE_STEREO_DSP          /* @min: 0 @max:9 @values: enum { e_MODE_STEREO_PARALLEL=1,e_MODE_STEREO_SEND_IMAGE=5,e_MODE_STEREO_ERROR=8,e_MODE_STEREO_TEST_PATTERN_READY=6,e_MODE_STEREO_STANDALONE=3,e_MODE_STEREO_SAC_DIST_TEST=9,e_MODE_STEREO_IMAGE_OVER_BUS=4,e_MODE_STEREO_SHUTDOWN=7,e_MODE_STEREO_INIT=0,e_MODE_STEREO_SAC_EOL_CALIB=2,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;
typedef uint8 E_SAC_SOURCE_VALID_MODE    /* @min: 0 @max:80 @values: enum { e_SAC_SRC_EOL_UPDATE=60,e_SAC_SRC_AUTO_CAL_COARSE=40,e_SAC_SRC_TEMP_MODEL=80,e_SAC_SRC_EOL_UPDATE_FINISHED=62,e_SAC_SRC_EOL_UPDATE_FAILED=63,e_SAC_SRC_INVALID=0,e_SAC_SRC_EOL_UPDATE_RUNNING=61,e_SAC_SRC_NVM=20,e_SAC_SRC_SELF_EVAL=70,e_SAC_SRC_EOL=30,e_SAC_SRC_AUTO_CAL_FINE=50,} */			/* [Satisfies_rte sws 1180], [Satisfies_rte sws 1265] */;

/* Boolean types */
typedef boolean Boolean                    /* Boolean has the  value space  required to support the mathematical concept of binary-valued logic: {TRUE, FALSE}. */	/* [Satisfies_rte sws 1188] */;

/* Char types */
typedef uint16 Char16                     /* A Char16 is an atomic unit of text which can be expressed by 16 bits */	/* [Satisfies_rte sws 1188] */;
typedef uint8  Char8                      /* A Char8 is an atomic unit of text which can be expressed by 8 bits */	/* [Satisfies_rte sws 1188] */;

/* Real types */
typedef float32 Flt32                      			/* [Satisfies_rte sws 1188] */;
typedef float32 fAccelAbs_t                /* Magnitude of translatory acceleration, time-derivative of translatory velocity without sign, increase of velocity: positive, decrease of velocity: negative @min:-18.0 @max:18.0 */	/* [Satisfies_rte sws 1188] */;
typedef float32 fAccel_t                   /* Translatory acceleration, time-derivative of translatory velocity with sign @min:-18.0 @max:18.0 */	/* [Satisfies_rte sws 1188] */;
typedef float32 fAngleDeg_t                /* Measure of rotation, counterclockwise direction: positive, clockwise direction: negative. Reference is x-axis if not stated otherwise @min:-360.0 @max:360.0 */	/* [Satisfies_rte sws 1188] */;
typedef float32 fAngle_t                   /* Measure of rotation, counterclockwise direction: positive, clockwise direction: negative. Reference is x-axis if not stated otherwise */	/* [Satisfies_rte sws 1188] */;
typedef float32 fConfidence_t              /* Trustiness of value, 0.0: no reliance, 1.0: full realiance @min:0.0 @max:1.0 */	/* [Satisfies_rte sws 1188] */;
typedef float32 fCurve_t                   /* Curvature (inverse radius) of trajectory, left direction: positive, right direction negative @min:-1.0 @max:1.0 */	/* [Satisfies_rte sws 1188] */;
typedef float32 fDistance_t                /* Straight stretch between points or objects @min:-500.0 @max:500.0 */	/* [Satisfies_rte sws 1188] */;
typedef float32 fGradient_t                /* Gradient of a value */	/* [Satisfies_rte sws 1188] */;
typedef float32 fProbability_t             /* Propbability of a hypothesis, 0: no probability, 1: full probability @min:0.0 @max:1.0 */	/* [Satisfies_rte sws 1188] */;
typedef float32 fQuality_t                 /* Characteristic of a variable, 0: worst quality, 1.0 best quality @min:0.0 @max:1.0 */	/* [Satisfies_rte sws 1188] */;
typedef float32 fRadius_t                  /* Radius of trajectory, left direction: positive, right direction negative @min:-100000.0 @max:100000.0 */	/* [Satisfies_rte sws 1188] */;
typedef float32 fRatio_t                   /* Ratio of a value @min:0.0 @max:10000.0 */	/* [Satisfies_rte sws 1188] */;
typedef float32 fStiffness_t               /* Stiffness of a value @min:0.0 @max:10000.0 */	/* [Satisfies_rte sws 1188] */;
typedef float32 fTemperature_t             /* Thermal state @min:-300.0 @max:300.0 */	/* [Satisfies_rte sws 1188] */;
typedef float32 fTime_t                    /* Period of time @min:0.0 */	/* [Satisfies_rte sws 1188] */;
typedef float32 fUncertainty_t             /* Uncertainty of value, 0.0: no reliance, 1.0: full realiance @min:0.0 @max:1.0 */	/* [Satisfies_rte sws 1188] */;
typedef float32 fVariance_t                /* The variance of a value @min:-100000.0 @max:100000.0 */	/* [Satisfies_rte sws 1188] */;
typedef float32 fVelocityAbs_t             /* Magnitude of translatory velocity, time-derivative of distance without sign @min:0.0 @max:100.0 */	/* [Satisfies_rte sws 1188] */;
typedef float32 fVelocity_t                /* Translatory velocity, time-derivative of distance with sign, forward direction positive, reverse direction negative @min:-100.0 @max:100.0 */	/* [Satisfies_rte sws 1188] */;
typedef float32 fWeight_t                  /* Gravity load in unit of mass @min:0.0 @max:50000.0 */	/* [Satisfies_rte sws 1188] */;
typedef float32 fYawRate_t                 /* Measure of yaw rate, counterclockwise direction: positive, clockwise direction: negative. Reference is x-axis if not stated otherwise */	/* [Satisfies_rte sws 1188] */;
typedef float32 f32_CurveLightRotAngleCutoff_Lt  			/* [Satisfies_rte sws 1188] */;
typedef float32 f32_CurveLightRotAngleCutoff_Rt  			/* [Satisfies_rte sws 1188] */;
typedef float32 f32_CurveLightRotAngle_Lt  			/* [Satisfies_rte sws 1188] */;
typedef float32 f32_CurveLightRotAngle_Rt  			/* [Satisfies_rte sws 1188] */;
typedef float32 f32_LightDistance          			/* [Satisfies_rte sws 1188] */;
typedef float32 f32_LightOutput            			/* [Satisfies_rte sws 1188] */;
typedef float32 RTE_f32_AirTempOutsd       /* Temperature outside the vehicle */	/* [Satisfies_rte sws 1188] */;

/* Opaque types */

/* String types */



/* Enum types */

	#ifndef   NvM_REQ_OK
	  #define NvM_REQ_OK	(0U)
	#endif
	#ifndef   NvM_REQ_NOT_OK
	  #define NvM_REQ_NOT_OK	(1U)
	#endif
	#ifndef   NvM_REQ_PENDING
	  #define NvM_REQ_PENDING	(2U)
	#endif
	#ifndef   NvM_INTEGRITY_FAILED
	  #define NvM_INTEGRITY_FAILED	(3U)
	#endif
	#ifndef   NvM_REQ_BLOCK_SKIPPED
	  #define NvM_REQ_BLOCK_SKIPPED	(4U)
	#endif
	#ifndef   NvM_REQ_NV_INVALIDATED
	  #define NvM_REQ_NV_INVALIDATED	(5U)
	#endif

	#ifndef   ALN_YAW_RATE_FULL_STAND_STILL
	  #define ALN_YAW_RATE_FULL_STAND_STILL	(0U)
	#endif
	#ifndef   ALN_YAW_RATE_SHORT_STAND_STILL
	  #define ALN_YAW_RATE_SHORT_STAND_STILL	(1U)
	#endif
	#ifndef   ALN_YAW_RATE_NO_STAND_STILL
	  #define ALN_YAW_RATE_NO_STAND_STILL	(2U)
	#endif
	#ifndef   ALN_YAW_RATE_NO_EEPROM
	  #define ALN_YAW_RATE_NO_EEPROM	(3U)
	#endif
	#ifndef   ALN_YAW_RATE_PROCESS_STAND_STILL
	  #define ALN_YAW_RATE_PROCESS_STAND_STILL	(4U)
	#endif

	#ifndef   LDP_BRK_MSG_DISP_BRK_IDLE
	  #define LDP_BRK_MSG_DISP_BRK_IDLE	(0U)
	#endif
	#ifndef   LDP_BRK_MSG_DISP_BRK_LT
	  #define LDP_BRK_MSG_DISP_BRK_LT	(1U)
	#endif
	#ifndef   LDP_BRK_MSG_DISP_BRK_RT
	  #define LDP_BRK_MSG_DISP_BRK_RT	(2U)
	#endif
	#ifndef   LDP_BRK_MSG_DISP_SNA
	  #define LDP_BRK_MSG_DISP_SNA	(3U)
	#endif

	#ifndef   LDP_IND_LAMP_OFF
	  #define LDP_IND_LAMP_OFF	(0U)
	#endif
	#ifndef   LDP_IND_LAMP_IND_LAMP_ON
	  #define LDP_IND_LAMP_IND_LAMP_ON	(1U)
	#endif
	#ifndef   LDP_IND_LAMP_READY
	  #define LDP_IND_LAMP_READY	(2U)
	#endif
	#ifndef   LDP_IND_LAMP_SNA
	  #define LDP_IND_LAMP_SNA	(3U)
	#endif

	#ifndef   LDP_MSG_DISP_IDLE
	  #define LDP_MSG_DISP_IDLE	(0U)
	#endif
	#ifndef   LDP_MSG_DISP_TEMP_NA
	  #define LDP_MSG_DISP_TEMP_NA	(1U)
	#endif
	#ifndef   LDP_MSG_DISP_DIRTY
	  #define LDP_MSG_DISP_DIRTY	(2U)
	#endif
	#ifndef   LDP_MSG_DISP_SNA
	  #define LDP_MSG_DISP_SNA	(3U)
	#endif

	#ifndef   eALDWMode_off
	  #define eALDWMode_off	(0U)
	#endif
	#ifndef   eALDWMode_ldw
	  #define eALDWMode_ldw	(1U)
	#endif
	#ifndef   eALDWMode_aldwlight
	  #define eALDWMode_aldwlight	(2U)
	#endif
	#ifndef   eALDWMode_aldw
	  #define eALDWMode_aldw	(3U)
	#endif

	#ifndef   eALDWOpMode_running
	  #define eALDWOpMode_running	(0U)
	#endif
	#ifndef   eALDWOpMode_inhibit
	  #define eALDWOpMode_inhibit	(1U)
	#endif
	#ifndef   eALDWOpMode_stop
	  #define eALDWOpMode_stop	(2U)
	#endif
	#ifndef   eALDWOpMode_shutdown
	  #define eALDWOpMode_shutdown	(3U)
	#endif
	#ifndef   eALDWOpMode_secureshutdown
	  #define eALDWOpMode_secureshutdown	(4U)
	#endif
	#ifndef   eALDWOpMode_undefined
	  #define eALDWOpMode_undefined	(5U)
	#endif
	#ifndef   eALDWOpMode_diag001
	  #define eALDWOpMode_diag001	(6U)
	#endif
	#ifndef   eALDWOpMode_diag002
	  #define eALDWOpMode_diag002	(7U)
	#endif
	#ifndef   eALDWOpMode_diag003
	  #define eALDWOpMode_diag003	(8U)
	#endif
	#ifndef   eALDWOpMode_diag004
	  #define eALDWOpMode_diag004	(9U)
	#endif
	#ifndef   eALDWOpMode_diag005
	  #define eALDWOpMode_diag005	(10U)
	#endif

	#ifndef   eLkaMotorStatuse_NOT_AVL
	  #define eLkaMotorStatuse_NOT_AVL	(0U)
	#endif
	#ifndef   eLkaMotorStatus_OFF
	  #define eLkaMotorStatus_OFF	(1U)
	#endif
	#ifndef   eLkaMotorStatus_ON
	  #define eLkaMotorStatus_ON	(2U)
	#endif
	#ifndef   eLkaMotorStatus_SHRT
	  #define eLkaMotorStatus_SHRT	(3U)
	#endif
	#ifndef   eLkaMotorStatus_BLOCK
	  #define eLkaMotorStatus_BLOCK	(4U)
	#endif
	#ifndef   eLkaMotorStatus_OPN
	  #define eLkaMotorStatus_OPN	(5U)
	#endif
	#ifndef   eLkaMotorStatus_CONT
	  #define eLkaMotorStatus_CONT	(6U)
	#endif
	#ifndef   eLkaMotorStatus_LIN
	  #define eLkaMotorStatus_LIN	(7U)
	#endif
	#ifndef   eLkaMotorStatus_SNA
	  #define eLkaMotorStatus_SNA	(8U)
	#endif

	#ifndef   eLaneMarkerType_Unknown
	  #define eLaneMarkerType_Unknown	(0U)
	#endif
	#ifndef   eLaneMarkerType_Broken
	  #define eLaneMarkerType_Broken	(1U)
	#endif
	#ifndef   eLaneMarkerType_Solid
	  #define eLaneMarkerType_Solid	(2U)
	#endif
	#ifndef   eLaneMarkerType_Virtual
	  #define eLaneMarkerType_Virtual	(3U)
	#endif

	#ifndef   eSpeedUnit_kmh
	  #define eSpeedUnit_kmh	(0U)
	#endif
	#ifndef   eSpeedUnit_mph
	  #define eSpeedUnit_mph	(1U)
	#endif

	#ifndef   ALDW_BRK_MSG_DISP_BRK_IDLE
	  #define ALDW_BRK_MSG_DISP_BRK_IDLE	(0U)
	#endif
	#ifndef   ALDW_BRK_MSG_DISP_BRK_LT
	  #define ALDW_BRK_MSG_DISP_BRK_LT	(1U)
	#endif
	#ifndef   ALDW_BRK_MSG_DISP_BRK_RT
	  #define ALDW_BRK_MSG_DISP_BRK_RT	(2U)
	#endif
	#ifndef   ALDW_BRK_MSG_DISP_SNA
	  #define ALDW_BRK_MSG_DISP_SNA	(3U)
	#endif

	#ifndef   ALDW_NO_DRV_ACTIVITY
	  #define ALDW_NO_DRV_ACTIVITY	(0U)
	#endif
	#ifndef   ALDW_DRV_ACTIVITY
	  #define ALDW_DRV_ACTIVITY	(1U)
	#endif
	#ifndef   ALDW_NOT_DEFINED
	  #define ALDW_NOT_DEFINED	(2U)
	#endif

	#ifndef   ALDW_IND_LAMP_OFF
	  #define ALDW_IND_LAMP_OFF	(0U)
	#endif
	#ifndef   ALDW_IND_LAMP_IND_LAMP_ON
	  #define ALDW_IND_LAMP_IND_LAMP_ON	(1U)
	#endif
	#ifndef   ALDW_IND_LAMP_READY
	  #define ALDW_IND_LAMP_READY	(2U)
	#endif
	#ifndef   ALDW_IND_LAMP_SNA
	  #define ALDW_IND_LAMP_SNA	(3U)
	#endif

	#ifndef   ALDW_IDLE
	  #define ALDW_IDLE	(0U)
	#endif
	#ifndef   ALDW_LT
	  #define ALDW_LT	(1U)
	#endif
	#ifndef   ALDW_RT
	  #define ALDW_RT	(2U)
	#endif

	#ifndef   ALDW_MSG_DISP_IDLE
	  #define ALDW_MSG_DISP_IDLE	(0U)
	#endif
	#ifndef   ALDW_MSG_DISP_TEMP_NA
	  #define ALDW_MSG_DISP_TEMP_NA	(1U)
	#endif
	#ifndef   ALDW_MSG_DISP_DIRTY
	  #define ALDW_MSG_DISP_DIRTY	(2U)
	#endif
	#ifndef   ALDW_MSG_DISP_LDP_TEMP_NA
	  #define ALDW_MSG_DISP_LDP_TEMP_NA	(3U)
	#endif
	#ifndef   ALDW_MSG_DISP_LDP_DIRTY
	  #define ALDW_MSG_DISP_LDP_DIRTY	(4U)
	#endif
	#ifndef   ALDW_MSG_DISP_LDP_ON
	  #define ALDW_MSG_DISP_LDP_ON	(5U)
	#endif
	#ifndef   ALDW_MSG_DISP_LDP_OFF
	  #define ALDW_MSG_DISP_LDP_OFF	(6U)
	#endif
	#ifndef   ALDW_MSG_DISP_SNA
	  #define ALDW_MSG_DISP_SNA	(7U)
	#endif

	#ifndef   ALDW_TM500
	  #define ALDW_TM500	(0U)
	#endif
	#ifndef   ALDW_TM400
	  #define ALDW_TM400	(1U)
	#endif
	#ifndef   ALDW_TM300
	  #define ALDW_TM300	(2U)
	#endif
	#ifndef   ALDW_TM200
	  #define ALDW_TM200	(3U)
	#endif

	#ifndef   ALDW_OFF_SPD
	  #define ALDW_OFF_SPD	(0U)
	#endif
	#ifndef   ALDW_WARN_RDY
	  #define ALDW_WARN_RDY	(1U)
	#endif
	#ifndef   ALDW_DRV_ACTV
	  #define ALDW_DRV_ACTV	(2U)
	#endif
	#ifndef   ALDW_DRV_ACTV_DELAY
	  #define ALDW_DRV_ACTV_DELAY	(3U)
	#endif
	#ifndef   ALDW_DRV_DISTRACTION
	  #define ALDW_DRV_DISTRACTION	(4U)
	#endif
	#ifndef   ALDW_TURN
	  #define ALDW_TURN	(5U)
	#endif
	#ifndef   ALDW_TURN_DELAY
	  #define ALDW_TURN_DELAY	(6U)
	#endif
	#ifndef   ALDW_WARN
	  #define ALDW_WARN	(7U)
	#endif
	#ifndef   ALDW_WARN_DELAY
	  #define ALDW_WARN_DELAY	(8U)
	#endif
	#ifndef   ALDW_SYS_ACTIV
	  #define ALDW_SYS_ACTIV	(9U)
	#endif

	#ifndef   ALDW_PULSE
	  #define ALDW_PULSE	(0U)
	#endif
	#ifndef   ALDW_CONT
	  #define ALDW_CONT	(1U)
	#endif

	#ifndef   ALDW_WARN_IDLE
	  #define ALDW_WARN_IDLE	(0U)
	#endif
	#ifndef   ALDW_WARN_LT
	  #define ALDW_WARN_LT	(1U)
	#endif
	#ifndef   ALDW_WARN_RT
	  #define ALDW_WARN_RT	(2U)
	#endif

	#ifndef   eLDWState_off
	  #define eLDWState_off	(0U)
	#endif
	#ifndef   eLDWState_onpassive
	  #define eLDWState_onpassive	(1U)
	#endif
	#ifndef   eLDWState_onready
	  #define eLDWState_onready	(2U)
	#endif

	#ifndef   VDY_EST_CURVES_INTFVER
	  #define VDY_EST_CURVES_INTFVER	(1U)
	#endif
	#ifndef   VDY_LONGLONG_TIMESAMPT_INTFVER
	  #define VDY_LONGLONG_TIMESAMPT_INTFVER	(1U)
	#endif
	#ifndef   FCT_LKA_OUTPUT_GENERIC_INTFVER
	  #define FCT_LKA_OUTPUT_GENERIC_INTFVER	(1U)
	#endif
	#ifndef   VDY_OFFSETS_INTFVER
	  #define VDY_OFFSETS_INTFVER	(1U)
	#endif
	#ifndef   FCT_LKA_INPUT_GENERIC_INTFVER
	  #define FCT_LKA_INPUT_GENERIC_INTFVER	(1U)
	#endif
	#ifndef   VDY_ALN_YAW_RATE_INTFVER
	  #define VDY_ALN_YAW_RATE_INTFVER	(1U)
	#endif
	#ifndef   FCT_LKA_OUTPUT_CUSTOM_INTFVER
	  #define FCT_LKA_OUTPUT_CUSTOM_INTFVER	(1U)
	#endif
	#ifndef   FCT_LKA_INPUT_CUSTOM_INTFVER
	  #define FCT_LKA_INPUT_CUSTOM_INTFVER	(1U)
	#endif
	#ifndef   VDY_NVM_IO_DATA_INTFVER
	  #define VDY_NVM_IO_DATA_INTFVER	(1U)
	#endif
	#ifndef   BSW_VEH_SIG_INTFVER
	  #define BSW_VEH_SIG_INTFVER	(2U)
	#endif
	#ifndef   BSW_VDY_CTRL_DATA_INTFVER
	  #define BSW_VDY_CTRL_DATA_INTFVER	(2U)
	#endif
	#ifndef   VDY_VEH_DYN_INTFVER
	  #define VDY_VEH_DYN_INTFVER	(2U)
	#endif
	#ifndef   VDY_ERRORS_INTFVER
	  #define VDY_ERRORS_INTFVER	(2U)
	#endif
	#ifndef   BSW_VEH_PAR_INTFVER
	  #define BSW_VEH_PAR_INTFVER	(4U)
	#endif
	#ifndef   FCT_SEN_ERROR_OUT_INTFVER
	  #define FCT_SEN_ERROR_OUT_INTFVER	(5U)
	#endif

	#ifndef   RTE_LD_SID_AMIS
	  #define RTE_LD_SID_AMIS	(0U)
	#endif
	#ifndef   RTE_LD_SID_MT9V023_BGGR
	  #define RTE_LD_SID_MT9V023_BGGR	(1U)
	#endif
	#ifndef   RTE_LD_SID_MI1000_REV2_GRBG_16x16
	  #define RTE_LD_SID_MI1000_REV2_GRBG_16x16	(2U)
	#endif
	#ifndef   RTE_LD_SID_MI1000_REV2_GRBG_4x16
	  #define RTE_LD_SID_MI1000_REV2_GRBG_4x16	(3U)
	#endif

	#ifndef   RTE_LD_LE_IDLE
	  #define RTE_LD_LE_IDLE	(0U)
	#endif
	#ifndef   RTE_LD_LE_FORK_EXIT
	  #define RTE_LD_LE_FORK_EXIT	(1U)
	#endif
	#ifndef   RTE_LD_LE_FORK_ENTRY
	  #define RTE_LD_LE_FORK_ENTRY	(2U)
	#endif
	#ifndef   RTE_LD_LE_FORK_UNKNOWN_OPEN
	  #define RTE_LD_LE_FORK_UNKNOWN_OPEN	(3U)
	#endif
	#ifndef   RTE_LD_LE_FORK_UNKNOWN_CLOSE
	  #define RTE_LD_LE_FORK_UNKNOWN_CLOSE	(4U)
	#endif
	#ifndef   RTE_LD_LE_CONSTRUCTION_START
	  #define RTE_LD_LE_CONSTRUCTION_START	(5U)
	#endif
	#ifndef   RTE_LD_LE_CONSTRUCTION_CLOSE
	  #define RTE_LD_LE_CONSTRUCTION_CLOSE	(6U)
	#endif
	#ifndef   RTE_LD_LE_TO_KEEP_32_BIT
	  #define RTE_LD_LE_TO_KEEP_32_BIT	(2147483647U)
	#endif

	#ifndef   RTE_LD_MC_WHITE
	  #define RTE_LD_MC_WHITE	(0U)
	#endif
	#ifndef   RTE_LD_MC_YELLOW
	  #define RTE_LD_MC_YELLOW	(1U)
	#endif
	#ifndef   RTE_LD_MC_RED
	  #define RTE_LD_MC_RED	(2U)
	#endif
	#ifndef   RTE_LD_MC_BLUE
	  #define RTE_LD_MC_BLUE	(3U)
	#endif
	#ifndef   RTE_LD_MC_UNKNOWN
	  #define RTE_LD_MC_UNKNOWN	(4U)
	#endif
	#ifndef   RTE_LD_MC_TO_KEEP_32_BIT
	  #define RTE_LD_MC_TO_KEEP_32_BIT	(2147483647U)
	#endif

	#ifndef   RTE_LD_MQ_NOMARKER
	  #define RTE_LD_MQ_NOMARKER	(0U)
	#endif
	#ifndef   RTE_LD_MQ_VERYBAD
	  #define RTE_LD_MQ_VERYBAD	(1U)
	#endif
	#ifndef   RTE_LD_MQ_BAD
	  #define RTE_LD_MQ_BAD	(2U)
	#endif
	#ifndef   RTE_LD_MQ_PREDICTED
	  #define RTE_LD_MQ_PREDICTED	(3U)
	#endif
	#ifndef   RTE_LD_MQ_GOOD
	  #define RTE_LD_MQ_GOOD	(4U)
	#endif
	#ifndef   RTE_LD_MQ_TO_KEEP_32_BIT
	  #define RTE_LD_MQ_TO_KEEP_32_BIT	(2147483647U)
	#endif

	#ifndef   RTE_LD_MR_INVALID
	  #define RTE_LD_MR_INVALID	(0U)
	#endif
	#ifndef   RTE_LD_MR_LEFT
	  #define RTE_LD_MR_LEFT	(1U)
	#endif
	#ifndef   RTE_LD_MR_RIGHT
	  #define RTE_LD_MR_RIGHT	(2U)
	#endif
	#ifndef   RTE_LD_MR_NO
	  #define RTE_LD_MR_NO	(3U)
	#endif
	#ifndef   RTE_LD_MR_TO_KEEP_32_BIT
	  #define RTE_LD_MR_TO_KEEP_32_BIT	(2147483647U)
	#endif

	#ifndef   RTE_LD_MT_CONTINUOUS
	  #define RTE_LD_MT_CONTINUOUS	(0U)
	#endif
	#ifndef   RTE_LD_MT_DASHED
	  #define RTE_LD_MT_DASHED	(1U)
	#endif
	#ifndef   RTE_LD_MT_RESERVED1
	  #define RTE_LD_MT_RESERVED1	(2U)
	#endif
	#ifndef   RTE_LD_MT_RESERVED2
	  #define RTE_LD_MT_RESERVED2	(3U)
	#endif
	#ifndef   RTE_LD_MT_NOLINEDETECTED
	  #define RTE_LD_MT_NOLINEDETECTED	(4U)
	#endif
	#ifndef   RTE_LD_MT_UNCLASSIFIED
	  #define RTE_LD_MT_UNCLASSIFIED	(5U)
	#endif
	#ifndef   RTE_LD_MT_DOTTED
	  #define RTE_LD_MT_DOTTED	(6U)
	#endif
	#ifndef   RTE_LD_MT_DECORATION
	  #define RTE_LD_MT_DECORATION	(7U)
	#endif
	#ifndef   RTE_LD_MT_SEPARATING
	  #define RTE_LD_MT_SEPARATING	(8U)
	#endif
	#ifndef   RTE_LD_MT_NARROWDASHED
	  #define RTE_LD_MT_NARROWDASHED	(9U)
	#endif
	#ifndef   RTE_LD_MT_TO_KEEP_32_BIT
	  #define RTE_LD_MT_TO_KEEP_32_BIT	(2147483647U)
	#endif

	#ifndef   RTE_LD_RT_HIGHWAY
	  #define RTE_LD_RT_HIGHWAY	(0U)
	#endif
	#ifndef   RTE_LD_RT_COUNTRY_ROAD
	  #define RTE_LD_RT_COUNTRY_ROAD	(1U)
	#endif
	#ifndef   RTE_LD_RT_URBAN_ROAD
	  #define RTE_LD_RT_URBAN_ROAD	(2U)
	#endif
	#ifndef   RTE_LD_RT_NDEF0
	  #define RTE_LD_RT_NDEF0	(3U)
	#endif
	#ifndef   RTE_LD_RT_TO_KEEP_32_BIT
	  #define RTE_LD_RT_TO_KEEP_32_BIT	(2147483647U)
	#endif

	#ifndef   RTE_LD_OP_Reference
	  #define RTE_LD_OP_Reference	(0U)
	#endif
	#ifndef   RTE_LD_OP_PPC_MGT5200
	  #define RTE_LD_OP_PPC_MGT5200	(1U)
	#endif
	#ifndef   RTE_LD_OP_TMS320_DM64P
	  #define RTE_LD_OP_TMS320_DM64P	(2U)
	#endif
	#ifndef   RTE_LD_OP_PPC5675K
	  #define RTE_LD_OP_PPC5675K	(3U)
	#endif

	#ifndef   RTE_MAPIF_EFFSL_IMPLICIT
	  #define RTE_MAPIF_EFFSL_IMPLICIT	(0U)
	#endif
	#ifndef   RTE_MAPIF_EFFSL_TRAFFIC_SIGN
	  #define RTE_MAPIF_EFFSL_TRAFFIC_SIGN	(1U)
	#endif
	#ifndef   RTE_MAPIF_EFFSL_NIGHT
	  #define RTE_MAPIF_EFFSL_NIGHT	(2U)
	#endif
	#ifndef   RTE_MAPIF_EFFSL_DAY
	  #define RTE_MAPIF_EFFSL_DAY	(3U)
	#endif
	#ifndef   RTE_MAPIF_EFFSL_TIME
	  #define RTE_MAPIF_EFFSL_TIME	(4U)
	#endif
	#ifndef   RTE_MAPIF_EFFSL_RAIN
	  #define RTE_MAPIF_EFFSL_RAIN	(5U)
	#endif
	#ifndef   RTE_MAPIF_EFFSL_SNOW
	  #define RTE_MAPIF_EFFSL_SNOW	(6U)
	#endif
	#ifndef   RTE_MAPIF_EFFSL_UNKNOWN
	  #define RTE_MAPIF_EFFSL_UNKNOWN	(7U)
	#endif

	#ifndef   RTE_MAPIF_FOW_UNKNOWN
	  #define RTE_MAPIF_FOW_UNKNOWN	(0U)
	#endif
	#ifndef   RTE_MAPIF_FOW_CONTROLLED_ACCESS
	  #define RTE_MAPIF_FOW_CONTROLLED_ACCESS	(1U)
	#endif
	#ifndef   RTE_MAPIF_FOW_MULTIPLY_DIGITIZED
	  #define RTE_MAPIF_FOW_MULTIPLY_DIGITIZED	(2U)
	#endif
	#ifndef   RTE_MAPIF_FOW_SINGLE_CARRIAGEWAY
	  #define RTE_MAPIF_FOW_SINGLE_CARRIAGEWAY	(3U)
	#endif
	#ifndef   RTE_MAPIF_FOW_ROUNDABOUT
	  #define RTE_MAPIF_FOW_ROUNDABOUT	(4U)
	#endif
	#ifndef   RTE_MAPIF_FOW_STF
	  #define RTE_MAPIF_FOW_STF	(5U)
	#endif
	#ifndef   RTE_MAPIF_FOW_RESERVED_6
	  #define RTE_MAPIF_FOW_RESERVED_6	(6U)
	#endif
	#ifndef   RTE_MAPIF_FOW_RESERVED_7
	  #define RTE_MAPIF_FOW_RESERVED_7	(7U)
	#endif
	#ifndef   RTE_MAPIF_FOW_PARALLEL_ROAD
	  #define RTE_MAPIF_FOW_PARALLEL_ROAD	(8U)
	#endif
	#ifndef   RTE_MAPIF_FOW_RAMP_CONTROLLED_ACCESS
	  #define RTE_MAPIF_FOW_RAMP_CONTROLLED_ACCESS	(9U)
	#endif
	#ifndef   RTE_MAPIF_FOW_RAMP_NO_CONTROLLED_ACCESS
	  #define RTE_MAPIF_FOW_RAMP_NO_CONTROLLED_ACCESS	(10U)
	#endif
	#ifndef   RTE_MAPIF_FOW_FRONTAGE_ROAD
	  #define RTE_MAPIF_FOW_FRONTAGE_ROAD	(11U)
	#endif
	#ifndef   RTE_MAPIF_FOW_SERVICE_ACCESS_PARKING
	  #define RTE_MAPIF_FOW_SERVICE_ACCESS_PARKING	(12U)
	#endif
	#ifndef   RTE_MAPIF_FOW_SERVICE_ACCESS
	  #define RTE_MAPIF_FOW_SERVICE_ACCESS	(13U)
	#endif
	#ifndef   RTE_MAPIF_FOW_PEDESTRIANS
	  #define RTE_MAPIF_FOW_PEDESTRIANS	(14U)
	#endif
	#ifndef   RTE_MAPIF_FOW_NA
	  #define RTE_MAPIF_FOW_NA	(15U)
	#endif

	#ifndef   RTE_MAPIF_FC_UNKONWN
	  #define RTE_MAPIF_FC_UNKONWN	(0U)
	#endif
	#ifndef   RTE_MAPIF_FC_1
	  #define RTE_MAPIF_FC_1	(1U)
	#endif
	#ifndef   RTE_MAPIF_FC_2
	  #define RTE_MAPIF_FC_2	(2U)
	#endif
	#ifndef   RTE_MAPIF_FC_3
	  #define RTE_MAPIF_FC_3	(3U)
	#endif
	#ifndef   RTE_MAPIF_FC_4
	  #define RTE_MAPIF_FC_4	(4U)
	#endif
	#ifndef   RTE_MAPIF_FC_5
	  #define RTE_MAPIF_FC_5	(5U)
	#endif
	#ifndef   RTE_MAPIF_FC_6
	  #define RTE_MAPIF_FC_6	(6U)
	#endif
	#ifndef   RTE_MAPIF_FC_INVALID
	  #define RTE_MAPIF_FC_INVALID	(7U)
	#endif

	#ifndef   RTE_MAPIF_MAPPROVIDER_UNKNOWN
	  #define RTE_MAPIF_MAPPROVIDER_UNKNOWN	(0U)
	#endif
	#ifndef   RTE_MAPIF_MAPPROVIDER_NAVTEQ
	  #define RTE_MAPIF_MAPPROVIDER_NAVTEQ	(1U)
	#endif
	#ifndef   RTE_MAPIF_MAPPROVIDER_TELEATLAS
	  #define RTE_MAPIF_MAPPROVIDER_TELEATLAS	(2U)
	#endif
	#ifndef   RTE_MAPIF_MAPPROVIDER_ZENRIN
	  #define RTE_MAPIF_MAPPROVIDER_ZENRIN	(3U)
	#endif
	#ifndef   RTE_MAPIF_MAPPROVIDER_4
	  #define RTE_MAPIF_MAPPROVIDER_4	(4U)
	#endif
	#ifndef   RTE_MAPIF_MAPPROVIDER_5
	  #define RTE_MAPIF_MAPPROVIDER_5	(5U)
	#endif
	#ifndef   RTE_MAPIF_MAPPROVIDER_6
	  #define RTE_MAPIF_MAPPROVIDER_6	(6U)
	#endif
	#ifndef   RTE_MAPIF_MAPPROVIDER_INVALID
	  #define RTE_MAPIF_MAPPROVIDER_INVALID	(7U)
	#endif

	#ifndef   RTE_MAPIF_INPUT_MODE_SEL_RUN_NORMAL
	  #define RTE_MAPIF_INPUT_MODE_SEL_RUN_NORMAL	(0U)
	#endif
	#ifndef   RTE_MAPIF_INPUT_MODE_SEL_MEAS_FREEZE
	  #define RTE_MAPIF_INPUT_MODE_SEL_MEAS_FREEZE	(1U)
	#endif
	#ifndef   RTE_MAPIF_INPUT_MODE_SEL_FIXED_OUTPUT
	  #define RTE_MAPIF_INPUT_MODE_SEL_FIXED_OUTPUT	(2U)
	#endif
	#ifndef   RTE_MAPIF_INPUT_MODE_SEL_RESERVED_3
	  #define RTE_MAPIF_INPUT_MODE_SEL_RESERVED_3	(3U)
	#endif
	#ifndef   RTE_MAPIF_INPUT_MODE_SEL_RESERVED_4
	  #define RTE_MAPIF_INPUT_MODE_SEL_RESERVED_4	(4U)
	#endif
	#ifndef   RTE_MAPIF_INPUT_MODE_SEL_RESERVED_5
	  #define RTE_MAPIF_INPUT_MODE_SEL_RESERVED_5	(5U)
	#endif
	#ifndef   RTE_MAPIF_INPUT_MODE_SEL_RESERVED_6
	  #define RTE_MAPIF_INPUT_MODE_SEL_RESERVED_6	(6U)
	#endif
	#ifndef   RTE_MAPIF_INPUT_MODE_SEL_RESERVED_7
	  #define RTE_MAPIF_INPUT_MODE_SEL_RESERVED_7	(7U)
	#endif

	#ifndef   RTE_MAPIF_INPUT_SIGNAL_STATE_INIT
	  #define RTE_MAPIF_INPUT_SIGNAL_STATE_INIT	(0U)
	#endif
	#ifndef   RTE_MAPIF_INPUT_SIGNAL_STATE_OK
	  #define RTE_MAPIF_INPUT_SIGNAL_STATE_OK	(1U)
	#endif
	#ifndef   RTE_MAPIF_INPUT_SIGNAL_STATE_NOT_OK
	  #define RTE_MAPIF_INPUT_SIGNAL_STATE_NOT_OK	(2U)
	#endif

	#ifndef   RTE_MAPIF_LANE_INVALID
	  #define RTE_MAPIF_LANE_INVALID	(0U)
	#endif
	#ifndef   RTE_MAPIF_LANE_EMERGENCY
	  #define RTE_MAPIF_LANE_EMERGENCY	(1U)
	#endif
	#ifndef   RTE_MAPIF_LANE_SINGLE
	  #define RTE_MAPIF_LANE_SINGLE	(2U)
	#endif
	#ifndef   RTE_MAPIF_LANE_LEFTMOST
	  #define RTE_MAPIF_LANE_LEFTMOST	(3U)
	#endif
	#ifndef   RTE_MAPIF_LANE_RIGHTMOST
	  #define RTE_MAPIF_LANE_RIGHTMOST	(4U)
	#endif
	#ifndef   RTE_MAPIF_LANE_MIDDLE
	  #define RTE_MAPIF_LANE_MIDDLE	(5U)
	#endif
	#ifndef   RTE_MAPIF_LANE_RESERVED
	  #define RTE_MAPIF_LANE_RESERVED	(6U)
	#endif
	#ifndef   RTE_MAPIF_LANE_UNKNOWN
	  #define RTE_MAPIF_LANE_UNKNOWN	(7U)
	#endif

	#ifndef   RTE_MAPIF_LANES_DRIVING_0
	  #define RTE_MAPIF_LANES_DRIVING_0	(0U)
	#endif
	#ifndef   RTE_MAPIF_LANES_DRIVING_1
	  #define RTE_MAPIF_LANES_DRIVING_1	(1U)
	#endif
	#ifndef   RTE_MAPIF_LANES_DRIVING_2
	  #define RTE_MAPIF_LANES_DRIVING_2	(2U)
	#endif
	#ifndef   RTE_MAPIF_LANES_DRIVING_3
	  #define RTE_MAPIF_LANES_DRIVING_3	(3U)
	#endif
	#ifndef   RTE_MAPIF_LANES_DRIVING_4
	  #define RTE_MAPIF_LANES_DRIVING_4	(4U)
	#endif
	#ifndef   RTE_MAPIF_LANES_DRIVING_5
	  #define RTE_MAPIF_LANES_DRIVING_5	(5U)
	#endif
	#ifndef   RTE_MAPIF_LANES_DRIVING_6_PLUS
	  #define RTE_MAPIF_LANES_DRIVING_6_PLUS	(6U)
	#endif
	#ifndef   RTE_MAPIF_LANES_DRIVING_UNKNOWN
	  #define RTE_MAPIF_LANES_DRIVING_UNKNOWN	(7U)
	#endif

	#ifndef   RTE_MAPIF_LANES_OPPOSITE_0
	  #define RTE_MAPIF_LANES_OPPOSITE_0	(0U)
	#endif
	#ifndef   RTE_MAPIF_LANES_OPPOSITE_1
	  #define RTE_MAPIF_LANES_OPPOSITE_1	(1U)
	#endif
	#ifndef   RTE_MAPIF_LANES_OPPOSITE_2_PLUS
	  #define RTE_MAPIF_LANES_OPPOSITE_2_PLUS	(2U)
	#endif
	#ifndef   RTE_MAPIF_LANES_OPPOSITE_UNKNOWN
	  #define RTE_MAPIF_LANES_OPPOSITE_UNKNOWN	(3U)
	#endif

	#ifndef   RTE_MAPIF_VPS_INVALID
	  #define RTE_MAPIF_VPS_INVALID	(0U)
	#endif
	#ifndef   RTE_MAPIF_VPS_NOT_IN_DIGITIZED_AREA
	  #define RTE_MAPIF_VPS_NOT_IN_DIGITIZED_AREA	(1U)
	#endif
	#ifndef   RTE_MAPIF_VPS_NOT_ON_ROAD
	  #define RTE_MAPIF_VPS_NOT_ON_ROAD	(2U)
	#endif
	#ifndef   RTE_MAPIF_VPS_SYSTEM_NOT_CALIBRATED
	  #define RTE_MAPIF_VPS_SYSTEM_NOT_CALIBRATED	(3U)
	#endif
	#ifndef   RTE_MAPIF_VPS_RESERVED4
	  #define RTE_MAPIF_VPS_RESERVED4	(4U)
	#endif
	#ifndef   RTE_MAPIF_VPS_RESERVED5
	  #define RTE_MAPIF_VPS_RESERVED5	(5U)
	#endif
	#ifndef   RTE_MAPIF_VPS_RESERVED6
	  #define RTE_MAPIF_VPS_RESERVED6	(6U)
	#endif
	#ifndef   RTE_MAPIF_VPS_RESERVED7
	  #define RTE_MAPIF_VPS_RESERVED7	(7U)
	#endif

	#ifndef   RTE_MAPIF_VEH_MOTION_UNKN
	  #define RTE_MAPIF_VEH_MOTION_UNKN	(0U)
	#endif
	#ifndef   RTE_MAPIF_VEH_MOTION_ROLL_FWD
	  #define RTE_MAPIF_VEH_MOTION_ROLL_FWD	(1U)
	#endif
	#ifndef   RTE_MAPIF_VEH_MOTION_ROLL_REV
	  #define RTE_MAPIF_VEH_MOTION_ROLL_REV	(2U)
	#endif
	#ifndef   RTE_MAPIF_VEH_MOTION_STAND_STILL
	  #define RTE_MAPIF_VEH_MOTION_STAND_STILL	(3U)
	#endif

	#ifndef   RTE_MAPIF_AV2_OK
	  #define RTE_MAPIF_AV2_OK	(0U)
	#endif
	#ifndef   RTE_MAPIF_AV2_FAIL
	  #define RTE_MAPIF_AV2_FAIL	(1U)
	#endif
	#ifndef   RTE_MAPIF_AV2_NOT_SUPPORTED
	  #define RTE_MAPIF_AV2_NOT_SUPPORTED	(2U)
	#endif
	#ifndef   RTE_MAPIF_AV2_OUT_OF_MEMORY
	  #define RTE_MAPIF_AV2_OUT_OF_MEMORY	(3U)
	#endif
	#ifndef   RTE_MAPIF_AV2_INTERNAL_ERROR
	  #define RTE_MAPIF_AV2_INTERNAL_ERROR	(4U)
	#endif

	#ifndef   RTE_MAPIF_ERROR_PARAMETER
	  #define RTE_MAPIF_ERROR_PARAMETER	(0U)
	#endif
	#ifndef   RTE_MAPIF_ERROR_BLOCKAGE
	  #define RTE_MAPIF_ERROR_BLOCKAGE	(1U)
	#endif
	#ifndef   RTE_MAPIF_ERROR_VEHICLE_DATA
	  #define RTE_MAPIF_ERROR_VEHICLE_DATA	(2U)
	#endif
	#ifndef   RTE_MAPIF_ERROR_IMAGE_DATA
	  #define RTE_MAPIF_ERROR_IMAGE_DATA	(3U)
	#endif
	#ifndef   RTE_MAPIF_ERROR_CALIBRATION
	  #define RTE_MAPIF_ERROR_CALIBRATION	(4U)
	#endif
	#ifndef   RTE_MAPIF_ERROR_INPUT
	  #define RTE_MAPIF_ERROR_INPUT	(5U)
	#endif
	#ifndef   RTE_MAPIF_ERROR_SOFTWARE
	  #define RTE_MAPIF_ERROR_SOFTWARE	(6U)
	#endif
	#ifndef   RTE_MAPIF_ERROR_FATAL
	  #define RTE_MAPIF_ERROR_FATAL	(7U)
	#endif
	#ifndef   RTE_MAPIF_ERROR_MAP_DATA_TIMEOUT
	  #define RTE_MAPIF_ERROR_MAP_DATA_TIMEOUT	(8U)
	#endif

	#ifndef   RTE_MAPIF_ERROR_CHECK_NOT_DONE
	  #define RTE_MAPIF_ERROR_CHECK_NOT_DONE	(0U)
	#endif
	#ifndef   RTE_MAPIF_ERROR_CHECK_DONE_AND_PASSED
	  #define RTE_MAPIF_ERROR_CHECK_DONE_AND_PASSED	(1U)
	#endif
	#ifndef   RTE_MAPIF_ERROR_CHECK_DONE_AND_FAILED
	  #define RTE_MAPIF_ERROR_CHECK_DONE_AND_FAILED	(2U)
	#endif

	#ifndef   RTE_MAPIF_STATE_NOT_INITIALIZED
	  #define RTE_MAPIF_STATE_NOT_INITIALIZED	(0U)
	#endif
	#ifndef   RTE_MAPIF_STATE_RUNNING
	  #define RTE_MAPIF_STATE_RUNNING	(1U)
	#endif
	#ifndef   RTE_MAPIF_STATE_TEMP_NOT_AVAILABLE
	  #define RTE_MAPIF_STATE_TEMP_NOT_AVAILABLE	(2U)
	#endif
	#ifndef   RTE_MAPIF_STATE_FAILURE
	  #define RTE_MAPIF_STATE_FAILURE	(3U)
	#endif
	#ifndef   RTE_MAPIF_STATE_INITIALIZED
	  #define RTE_MAPIF_STATE_INITIALIZED	(4U)
	#endif
	#ifndef   RTE_MAPIF_STATE_NOT_RUNNING
	  #define RTE_MAPIF_STATE_NOT_RUNNING	(5U)
	#endif

	#ifndef   RTE_MAPIF_BUILD_UP_AREA_UNKNOWN
	  #define RTE_MAPIF_BUILD_UP_AREA_UNKNOWN	(0U)
	#endif
	#ifndef   RTE_MAPIF_BUILD_UP_AREA_OUTSIDE
	  #define RTE_MAPIF_BUILD_UP_AREA_OUTSIDE	(1U)
	#endif
	#ifndef   RTE_MAPIF_BUILD_UP_AREA_INSIDE
	  #define RTE_MAPIF_BUILD_UP_AREA_INSIDE	(2U)
	#endif
	#ifndef   RTE_MAPIF_BUILD_UP_AREA_SNA
	  #define RTE_MAPIF_BUILD_UP_AREA_SNA	(3U)
	#endif

	#ifndef   RTE_MAPIF_CONTEXT_CHANGE_UNKNOWN
	  #define RTE_MAPIF_CONTEXT_CHANGE_UNKNOWN	(0U)
	#endif
	#ifndef   RTE_MAPIF_CONTEXT_CHANGE_NO_CHANGE_AHEAD
	  #define RTE_MAPIF_CONTEXT_CHANGE_NO_CHANGE_AHEAD	(1U)
	#endif
	#ifndef   RTE_MAPIF_CONTEXT_CHANGE_OUTSIDE_TO_INSIDE
	  #define RTE_MAPIF_CONTEXT_CHANGE_OUTSIDE_TO_INSIDE	(2U)
	#endif
	#ifndef   RTE_MAPIF_CONTEXT_CHANGE_INSIDE_TO_OUTSIDE
	  #define RTE_MAPIF_CONTEXT_CHANGE_INSIDE_TO_OUTSIDE	(3U)
	#endif

	#ifndef   RTE_MAPIF_FORM_OF_WAY_UNKNOWN
	  #define RTE_MAPIF_FORM_OF_WAY_UNKNOWN	(0U)
	#endif
	#ifndef   RTE_MAPIF_FORM_OF_WAY_CONTROLLED_ACCESS
	  #define RTE_MAPIF_FORM_OF_WAY_CONTROLLED_ACCESS	(1U)
	#endif
	#ifndef   RTE_MAPIF_FORM_OF_WAY_MULTIPLY_DIGITIZED
	  #define RTE_MAPIF_FORM_OF_WAY_MULTIPLY_DIGITIZED	(2U)
	#endif
	#ifndef   RTE_MAPIF_FORM_OF_WAY_SINGLE_CARRIAGEWAY
	  #define RTE_MAPIF_FORM_OF_WAY_SINGLE_CARRIAGEWAY	(3U)
	#endif
	#ifndef   RTE_MAPIF_FORM_OF_WAY_ROUNDABOUT
	  #define RTE_MAPIF_FORM_OF_WAY_ROUNDABOUT	(4U)
	#endif
	#ifndef   RTE_MAPIF_FORM_OF_WAY_STF
	  #define RTE_MAPIF_FORM_OF_WAY_STF	(5U)
	#endif
	#ifndef   RTE_MAPIF_FORM_OF_WAY_RESERVED_6
	  #define RTE_MAPIF_FORM_OF_WAY_RESERVED_6	(6U)
	#endif
	#ifndef   RTE_MAPIF_FORM_OF_WAY_RESERVED_7
	  #define RTE_MAPIF_FORM_OF_WAY_RESERVED_7	(7U)
	#endif
	#ifndef   RTE_MAPIF_FORM_OF_WAY_PARALLEL_ROAD
	  #define RTE_MAPIF_FORM_OF_WAY_PARALLEL_ROAD	(8U)
	#endif
	#ifndef   RTE_MAPIF_FORM_OF_WAY_RAMP_CONTROLLED_ACCESS
	  #define RTE_MAPIF_FORM_OF_WAY_RAMP_CONTROLLED_ACCESS	(9U)
	#endif
	#ifndef   RTE_MAPIF_FORM_OF_WAY_RAMP_NO_CONTROLLED_ACCESS
	  #define RTE_MAPIF_FORM_OF_WAY_RAMP_NO_CONTROLLED_ACCESS	(10U)
	#endif
	#ifndef   RTE_MAPIF_FORM_OF_WAY_FRONTAGE_ROAD
	  #define RTE_MAPIF_FORM_OF_WAY_FRONTAGE_ROAD	(11U)
	#endif
	#ifndef   RTE_MAPIF_FORM_OF_WAY_SERVICE_ACCESS_PARKING
	  #define RTE_MAPIF_FORM_OF_WAY_SERVICE_ACCESS_PARKING	(12U)
	#endif
	#ifndef   RTE_MAPIF_FORM_OF_WAY_SERVICE_ACCESS
	  #define RTE_MAPIF_FORM_OF_WAY_SERVICE_ACCESS	(13U)
	#endif
	#ifndef   RTE_MAPIF_FORM_OF_WAY_PEDESTRIANS
	  #define RTE_MAPIF_FORM_OF_WAY_PEDESTRIANS	(14U)
	#endif
	#ifndef   RTE_MAPIF_FORM_OF_WAY_SNA
	  #define RTE_MAPIF_FORM_OF_WAY_SNA	(15U)
	#endif

	#ifndef   RTE_MAPIF_FRC_UNKNOWN
	  #define RTE_MAPIF_FRC_UNKNOWN	(0U)
	#endif
	#ifndef   RTE_MAPIF_FRC1
	  #define RTE_MAPIF_FRC1	(1U)
	#endif
	#ifndef   RTE_MAPIF_FRC2
	  #define RTE_MAPIF_FRC2	(2U)
	#endif
	#ifndef   RTE_MAPIF_FRC3
	  #define RTE_MAPIF_FRC3	(3U)
	#endif
	#ifndef   RTE_MAPIF_FRC4
	  #define RTE_MAPIF_FRC4	(4U)
	#endif
	#ifndef   RTE_MAPIF_FRC5
	  #define RTE_MAPIF_FRC5	(5U)
	#endif
	#ifndef   RTE_MAPIF_FRC6
	  #define RTE_MAPIF_FRC6	(6U)
	#endif
	#ifndef   RTE_MAPIF_FRC_SNA
	  #define RTE_MAPIF_FRC_SNA	(7U)
	#endif

	#ifndef   RTE_MAPIF_LCT_UNKNOWN
	  #define RTE_MAPIF_LCT_UNKNOWN	(0U)
	#endif
	#ifndef   RTE_MAPIF_LCT_TUNNEL
	  #define RTE_MAPIF_LCT_TUNNEL	(1U)
	#endif
	#ifndef   RTE_MAPIF_LCT_INTERSECTION
	  #define RTE_MAPIF_LCT_INTERSECTION	(2U)
	#endif
	#ifndef   RTE_MAPIF_LCT_ROUNDABOUT
	  #define RTE_MAPIF_LCT_ROUNDABOUT	(3U)
	#endif
	#ifndef   RTE_MAPIF_LCT_TOLLSTATION
	  #define RTE_MAPIF_LCT_TOLLSTATION	(4U)
	#endif
	#ifndef   RTE_MAPIF_LCT_LEFT_EXIT_RAMP
	  #define RTE_MAPIF_LCT_LEFT_EXIT_RAMP	(5U)
	#endif
	#ifndef   RTE_MAPIF_LCT_RIGHT_EXIT_RAMP
	  #define RTE_MAPIF_LCT_RIGHT_EXIT_RAMP	(6U)
	#endif
	#ifndef   RTE_MAPIF_LCT_LEFT_ENTERING_RAMP
	  #define RTE_MAPIF_LCT_LEFT_ENTERING_RAMP	(7U)
	#endif
	#ifndef   RTE_MAPIF_LCT_RIGHT_ENTERING_RAMP
	  #define RTE_MAPIF_LCT_RIGHT_ENTERING_RAMP	(8U)
	#endif
	#ifndef   RTE_MAPIF_LCT_SNA
	  #define RTE_MAPIF_LCT_SNA	(15U)
	#endif

	#ifndef   RTE_MAPIF_NUM_LANES_DRIVING_UNKNOWN
	  #define RTE_MAPIF_NUM_LANES_DRIVING_UNKNOWN	(0U)
	#endif
	#ifndef   RTE_MAPIF_NUM_LANES_DRIVING_0
	  #define RTE_MAPIF_NUM_LANES_DRIVING_0	(1U)
	#endif
	#ifndef   RTE_MAPIF_NUM_LANES_DRIVING_1
	  #define RTE_MAPIF_NUM_LANES_DRIVING_1	(2U)
	#endif
	#ifndef   RTE_MAPIF_NUM_LANES_DRIVING_2
	  #define RTE_MAPIF_NUM_LANES_DRIVING_2	(3U)
	#endif
	#ifndef   RTE_MAPIF_NUM_LANES_DRIVING_3
	  #define RTE_MAPIF_NUM_LANES_DRIVING_3	(4U)
	#endif
	#ifndef   RTE_MAPIF_NUM_LANES_DRIVING_4
	  #define RTE_MAPIF_NUM_LANES_DRIVING_4	(5U)
	#endif
	#ifndef   RTE_MAPIF_NUM_LANES_DRIVING_5
	  #define RTE_MAPIF_NUM_LANES_DRIVING_5	(6U)
	#endif
	#ifndef   RTE_MAPIF_NUM_LANES_DRIVING_6_PLUS
	  #define RTE_MAPIF_NUM_LANES_DRIVING_6_PLUS	(7U)
	#endif
	#ifndef   RTE_MAPIF_NUM_LANES_DRIVING_SNA
	  #define RTE_MAPIF_NUM_LANES_DRIVING_SNA	(15U)
	#endif

	#ifndef   RTE_MAPIF_NUM_LANES_OPPOSITE_UNKNOWN
	  #define RTE_MAPIF_NUM_LANES_OPPOSITE_UNKNOWN	(0U)
	#endif
	#ifndef   RTE_MAPIF_NUM_LANES_OPPOSITE_0
	  #define RTE_MAPIF_NUM_LANES_OPPOSITE_0	(1U)
	#endif
	#ifndef   RTE_MAPIF_NUM_LANES_OPPOSITE_1
	  #define RTE_MAPIF_NUM_LANES_OPPOSITE_1	(2U)
	#endif
	#ifndef   RTE_MAPIF_NUM_LANES_OPPOSITE_2_PLUS
	  #define RTE_MAPIF_NUM_LANES_OPPOSITE_2_PLUS	(3U)
	#endif
	#ifndef   RTE_MAPIF_NUM_LANES_OPPOSITE_SNA
	  #define RTE_MAPIF_NUM_LANES_OPPOSITE_SNA	(7U)
	#endif

	#ifndef   RTE_MAPIF_OUTPUT_SIGNAL_STATE_INIT
	  #define RTE_MAPIF_OUTPUT_SIGNAL_STATE_INIT	(0U)
	#endif
	#ifndef   RTE_MAPIF_OUTPUT_SIGNAL_STATE_OK
	  #define RTE_MAPIF_OUTPUT_SIGNAL_STATE_OK	(1U)
	#endif
	#ifndef   RTE_MAPIF_OUTPUT_SIGNAL_STATE_NOT_OK
	  #define RTE_MAPIF_OUTPUT_SIGNAL_STATE_NOT_OK	(2U)
	#endif

	#ifndef   RTE_MAPIF_PROVIDER_UNKNOWN
	  #define RTE_MAPIF_PROVIDER_UNKNOWN	(0U)
	#endif
	#ifndef   RTE_MAPIF_PROVIDER_TELEATLAS
	  #define RTE_MAPIF_PROVIDER_TELEATLAS	(1U)
	#endif
	#ifndef   RTE_MAPIF_PROVIDER_NAVTEQ
	  #define RTE_MAPIF_PROVIDER_NAVTEQ	(2U)
	#endif
	#ifndef   RTE_MAPIF_PROVIDER_ZENRIN
	  #define RTE_MAPIF_PROVIDER_ZENRIN	(3U)
	#endif
	#ifndef   RTE_MAPIF_PROVIDER_SNA
	  #define RTE_MAPIF_PROVIDER_SNA	(7U)
	#endif

	#ifndef   RTE_MAPIF_RCT_UNKNOWN
	  #define RTE_MAPIF_RCT_UNKNOWN	(0U)
	#endif
	#ifndef   RTE_MAPIF_RCT_LEFT_TURN
	  #define RTE_MAPIF_RCT_LEFT_TURN	(1U)
	#endif
	#ifndef   RTE_MAPIF_RCT_RIGHT_TURN
	  #define RTE_MAPIF_RCT_RIGHT_TURN	(2U)
	#endif
	#ifndef   RTE_MAPIF_RCT_LEFT_LEAVE
	  #define RTE_MAPIF_RCT_LEFT_LEAVE	(3U)
	#endif
	#ifndef   RTE_MAPIF_RCT_RIGHT_LEAVE
	  #define RTE_MAPIF_RCT_RIGHT_LEAVE	(4U)
	#endif
	#ifndef   RTE_MAPIF_RCT_ROUNDABOUT
	  #define RTE_MAPIF_RCT_ROUNDABOUT	(5U)
	#endif
	#ifndef   RTE_MAPIF_RCT_UTURN
	  #define RTE_MAPIF_RCT_UTURN	(6U)
	#endif
	#ifndef   RTE_MAPIF_RCT_SNA
	  #define RTE_MAPIF_RCT_SNA	(7U)
	#endif

	#ifndef   RTE_MAPIF_SPD_LIMIT_SIDE_UNKNOWN
	  #define RTE_MAPIF_SPD_LIMIT_SIDE_UNKNOWN	(0U)
	#endif
	#ifndef   RTE_MAPIF_SPD_LIMIT_SIDE_LEFT
	  #define RTE_MAPIF_SPD_LIMIT_SIDE_LEFT	(1U)
	#endif
	#ifndef   RTE_MAPIF_SPD_LIMIT_SIDE_RIGHT
	  #define RTE_MAPIF_SPD_LIMIT_SIDE_RIGHT	(2U)
	#endif
	#ifndef   RTE_MAPIF_SPD_LIMIT_SIDE_SNA
	  #define RTE_MAPIF_SPD_LIMIT_SIDE_SNA	(3U)
	#endif

	#ifndef   RTE_MAPIF_SPD_LMT_STYPE_UNKNOWN
	  #define RTE_MAPIF_SPD_LMT_STYPE_UNKNOWN	(0U)
	#endif
	#ifndef   RTE_MAPIF_SPD_LMT_STYPE_NDEF0
	  #define RTE_MAPIF_SPD_LMT_STYPE_NDEF0	(1U)
	#endif
	#ifndef   RTE_MAPIF_SPD_LMT_STYPE_LIM
	  #define RTE_MAPIF_SPD_LMT_STYPE_LIM	(2U)
	#endif
	#ifndef   RTE_MAPIF_SPD_LMT_STYPE_UNLIM
	  #define RTE_MAPIF_SPD_LMT_STYPE_UNLIM	(3U)
	#endif
	#ifndef   RTE_MAPIF_SPD_LMT_STYPE_TMP
	  #define RTE_MAPIF_SPD_LMT_STYPE_TMP	(4U)
	#endif
	#ifndef   RTE_MAPIF_SPD_LMT_STYPE_IMPL
	  #define RTE_MAPIF_SPD_LMT_STYPE_IMPL	(5U)
	#endif
	#ifndef   RTE_MAPIF_SPD_LMT_STYPE_CHNG
	  #define RTE_MAPIF_SPD_LMT_STYPE_CHNG	(6U)
	#endif
	#ifndef   RTE_MAPIF_SPD_LMT_STYPE_NDEF6
	  #define RTE_MAPIF_SPD_LMT_STYPE_NDEF6	(7U)
	#endif
	#ifndef   RTE_MAPIF_SPD_LMT_STYPE_SNA
	  #define RTE_MAPIF_SPD_LMT_STYPE_SNA	(15U)
	#endif

	#ifndef   RTE_MAPIF_SPD_LMT_VLD_UNKNOWN
	  #define RTE_MAPIF_SPD_LMT_VLD_UNKNOWN	(0U)
	#endif
	#ifndef   RTE_MAPIF_SPD_LMT_VLD_UNLIM
	  #define RTE_MAPIF_SPD_LMT_VLD_UNLIM	(1U)
	#endif
	#ifndef   RTE_MAPIF_SPD_LMT_VLD_WET
	  #define RTE_MAPIF_SPD_LMT_VLD_WET	(2U)
	#endif
	#ifndef   RTE_MAPIF_SPD_LMT_VLD_ICY
	  #define RTE_MAPIF_SPD_LMT_VLD_ICY	(3U)
	#endif
	#ifndef   RTE_MAPIF_SPD_LMT_VLD_FOG
	  #define RTE_MAPIF_SPD_LMT_VLD_FOG	(4U)
	#endif
	#ifndef   RTE_MAPIF_SPD_LMT_VLD_TMP_UN
	  #define RTE_MAPIF_SPD_LMT_VLD_TMP_UN	(5U)
	#endif
	#ifndef   RTE_MAPIF_SPD_LMT_VLD_TMP_NA
	  #define RTE_MAPIF_SPD_LMT_VLD_TMP_NA	(6U)
	#endif
	#ifndef   RTE_MAPIF_SPD_LMT_VLD_TMP_A
	  #define RTE_MAPIF_SPD_LMT_VLD_TMP_A	(7U)
	#endif
	#ifndef   RTE_MAPIF_SPD_LMT_VLD_WEIGHT
	  #define RTE_MAPIF_SPD_LMT_VLD_WEIGHT	(8U)
	#endif
	#ifndef   RTE_MAPIF_SPD_LMT_VLD_VEHICLE
	  #define RTE_MAPIF_SPD_LMT_VLD_VEHICLE	(9U)
	#endif
	#ifndef   RTE_MAPIF_SPD_LMT_VLD_DARK
	  #define RTE_MAPIF_SPD_LMT_VLD_DARK	(10U)
	#endif
	#ifndef   RTE_MAPIF_SPD_LMT_VLD_DAY
	  #define RTE_MAPIF_SPD_LMT_VLD_DAY	(11U)
	#endif
	#ifndef   RTE_MAPIF_SPD_LMT_VLD_SNA
	  #define RTE_MAPIF_SPD_LMT_VLD_SNA	(15U)
	#endif

	#ifndef   RTE_MAPIF_SPD_UNIT_UNKNOWN
	  #define RTE_MAPIF_SPD_UNIT_UNKNOWN	(0U)
	#endif
	#ifndef   RTE_MAPIF_SPD_UNIT_KMH
	  #define RTE_MAPIF_SPD_UNIT_KMH	(1U)
	#endif
	#ifndef   RTE_MAPIF_SPD_UNIT_MPH
	  #define RTE_MAPIF_SPD_UNIT_MPH	(2U)
	#endif
	#ifndef   RTE_MAPIF_SPD_UNIT_SNA
	  #define RTE_MAPIF_SPD_UNIT_SNA	(3U)
	#endif

	#ifndef   RTE_MAPIF_TRAFFIC_STYLE_UNKNOWN
	  #define RTE_MAPIF_TRAFFIC_STYLE_UNKNOWN	(0U)
	#endif
	#ifndef   RTE_MAPIF_TRAFFIC_STYLE_RIGHTHAND
	  #define RTE_MAPIF_TRAFFIC_STYLE_RIGHTHAND	(1U)
	#endif
	#ifndef   RTE_MAPIF_TRAFFIC_STYLE_LEFTHAND
	  #define RTE_MAPIF_TRAFFIC_STYLE_LEFTHAND	(2U)
	#endif
	#ifndef   RTE_MAPIF_TRAFFIC_STYLE_SNA
	  #define RTE_MAPIF_TRAFFIC_STYLE_SNA	(3U)
	#endif

	#ifndef   RSP_MEAS_ID_VEH_PAR
	  #define RSP_MEAS_ID_VEH_PAR	(100773888U)
	#endif
	#ifndef   RSP_MEAS_ID_VEH_DYN
	  #define RSP_MEAS_ID_VEH_DYN	(100777984U)
	#endif
	#ifndef   EM_MEAS_ID_PERF_DEGR_EXT_INPUT
	  #define EM_MEAS_ID_PERF_DEGR_EXT_INPUT	(537919488U)
	#endif
	#ifndef   EM_MEAS_ID_SYS_PERF_MON_STATES
	  #define EM_MEAS_ID_SYS_PERF_MON_STATES	(537919504U)
	#endif
	#ifndef   EM_MEAS_ID_CTRLDATA
	  #define EM_MEAS_ID_CTRLDATA	(537919536U)
	#endif
	#ifndef   EM_MEAS_ID_ME_INPUT
	  #define EM_MEAS_ID_ME_INPUT	(537935872U)
	#endif
	#ifndef   EM_MEAS_ID_PUBLIC_OBJECT_LIST
	  #define EM_MEAS_ID_PUBLIC_OBJECT_LIST	(537985024U)
	#endif
	#ifndef   EM_MEAS_ID_PERF_DEG_OUT_DATA
	  #define EM_MEAS_ID_PERF_DEG_OUT_DATA	(537993728U)
	#endif
	#ifndef   MEAS_ID_MO_TRACES_GLOB_DATA
	  #define MEAS_ID_MO_TRACES_GLOB_DATA	(537993840U)
	#endif
	#ifndef   EM_MEAS_ID_EM_FCT_CYCLE_MODE
	  #define EM_MEAS_ID_EM_FCT_CYCLE_MODE	(537997824U)
	#endif
	#ifndef   EM_MEAS_ID_RHC_INPUT
	  #define EM_MEAS_ID_RHC_INPUT	(537997856U)
	#endif
	#ifndef   EM_MEAS_ID_EGO_OBJ_SYNC
	  #define EM_MEAS_ID_EGO_OBJ_SYNC	(537997888U)
	#endif
	#ifndef   EM_MEAS_ID_EGO_TGT_SYNC
	  #define EM_MEAS_ID_EGO_TGT_SYNC	(537998336U)
	#endif
	#ifndef   EM_MEAS_ID_VEL_STAT_OBJ
	  #define EM_MEAS_ID_VEL_STAT_OBJ	(537998592U)
	#endif
	#ifndef   EM_MEAS_ID_ME_OUTPUT
	  #define EM_MEAS_ID_ME_OUTPUT	(538001408U)
	#endif
	#ifndef   EM_MEAS_ID_OBJECT_TRACE_LIST
	  #define EM_MEAS_ID_OBJECT_TRACE_LIST	(538005504U)
	#endif
	#ifndef   EM_MEAS_ID_FUN_PRESEL_ACC_DATA
	  #define EM_MEAS_ID_FUN_PRESEL_ACC_DATA	(538185728U)
	#endif
	#ifndef   EM_MEAS_ID_FUN_PRESEL_CG_DATA
	  #define EM_MEAS_ID_FUN_PRESEL_CG_DATA	(538189824U)
	#endif
	#ifndef   EM_MEAS_ID_OD_PRIVATE_OBJECT_LIST
	  #define EM_MEAS_ID_OD_PRIVATE_OBJECT_LIST	(538443776U)
	#endif
	#ifndef   EM_MEAS_ID_OD_RCS_FREQUENCY
	  #define EM_MEAS_ID_OD_RCS_FREQUENCY	(538456065U)
	#endif
	#ifndef   EM_MEAS_ID_CUSTOM_OUTPUT
	  #define EM_MEAS_ID_CUSTOM_OUTPUT	(538959872U)
	#endif
	#ifndef   FCT_MEAS_ID_SEN_ERROR_OUT_VADDR
	  #define FCT_MEAS_ID_SEN_ERROR_OUT_VADDR	(539066368U)
	#endif
	#ifndef   VDY_MEAS_ID_CTRLDATA
	  #define VDY_MEAS_ID_CTRLDATA	(540016640U)
	#endif
	#ifndef   VDY_MEAS_ID_VEH_SIG
	  #define VDY_MEAS_ID_VEH_SIG	(540016720U)
	#endif
	#ifndef   VDY_MEAS_ID_VEH_PAR
	  #define VDY_MEAS_ID_VEH_PAR	(540017408U)
	#endif
	#ifndef   VDY_MEAS_ID_NVM_READ
	  #define VDY_MEAS_ID_NVM_READ	(540017664U)
	#endif
	#ifndef   VDY_MEAS_ID_YWRT_TEMP_TABPE
	  #define VDY_MEAS_ID_YWRT_TEMP_TABPE	(540017920U)
	#endif
	#ifndef   VDY_MEAS_ID_VEL_STAT_OBJ
	  #define VDY_MEAS_ID_VEL_STAT_OBJ	(540018688U)
	#endif
	#ifndef   VDY_MEAS_ID_ALN_EST_YAW_RATE
	  #define VDY_MEAS_ID_ALN_EST_YAW_RATE	(540018944U)
	#endif
	#ifndef   VDY_MEAS_ID_VEH_DYN
	  #define VDY_MEAS_ID_VEH_DYN	(540344320U)
	#endif
	#ifndef   VDY_MEAS_ID_OFFSETS
	  #define VDY_MEAS_ID_OFFSETS	(540344832U)
	#endif
	#ifndef   VDY_MEAS_ID_ERRORS
	  #define VDY_MEAS_ID_ERRORS	(540345088U)
	#endif
	#ifndef   VDY_MEAS_ID_NVM_WRITE
	  #define VDY_MEAS_ID_NVM_WRITE	(540345344U)
	#endif
	#ifndef   VDY_MEAS_ID_ALN_YAW_RATE
	  #define VDY_MEAS_ID_ALN_YAW_RATE	(540345600U)
	#endif
	#ifndef   VDY_MEAS_ID_LONGLONG_TIMESTAMP
	  #define VDY_MEAS_ID_LONGLONG_TIMESTAMP	(540345680U)
	#endif
	#ifndef   VDY_MEAS_ID_EST_CURVES
	  #define VDY_MEAS_ID_EST_CURVES	(540346112U)
	#endif
	#ifndef   ALN_MEAS_ID_BSW_INPUT
	  #define ALN_MEAS_ID_BSW_INPUT	(542113792U)
	#endif
	#ifndef   ALN_MEAS_ID_YAW_RATE
	  #define ALN_MEAS_ID_YAW_RATE	(542134272U)
	#endif
	#ifndef   ALN_MEAS_ID_BSW_OUTPUT
	  #define ALN_MEAS_ID_BSW_OUTPUT	(542179328U)
	#endif
	#ifndef   ALN_MEAS_ID_REQ_HW_CONFIG
	  #define ALN_MEAS_ID_REQ_HW_CONFIG	(542183424U)
	#endif
	#ifndef   ALN_MEAS_ID_MONITORING
	  #define ALN_MEAS_ID_MONITORING	(542187520U)
	#endif
	#ifndef   ALN_MEAS_ID_SIMINIT
	  #define ALN_MEAS_ID_SIMINIT	(542244864U)
	#endif
	#ifndef   ALN_MEAS_ID_SIMINIT_EOL
	  #define ALN_MEAS_ID_SIMINIT_EOL	(542248960U)
	#endif
	#ifndef   ALN_MEAS_ID_SIMINIT_MON
	  #define ALN_MEAS_ID_SIMINIT_MON	(542265344U)
	#endif
	#ifndef   ALN_MEAS_ID_INTERNAL
	  #define ALN_MEAS_ID_INTERNAL	(542310400U)
	#endif
	#ifndef   ALN_MEAS_ID_INTERNAL_EOL
	  #define ALN_MEAS_ID_INTERNAL_EOL	(542314496U)
	#endif
	#ifndef   ALN_MEAS_ID_INTERNAL_MON
	  #define ALN_MEAS_ID_INTERNAL_MON	(542322688U)
	#endif
	#ifndef   BSW_ALGOPARAMETERS_VADDR
	  #define BSW_ALGOPARAMETERS_VADDR	(546308096U)
	#endif

	#ifndef   RTE_e_SAC_SRC_INVALID
	  #define RTE_e_SAC_SRC_INVALID	(0U)
	#endif
	#ifndef   RTE_e_SAC_SRC_NVM
	  #define RTE_e_SAC_SRC_NVM	(20U)
	#endif
	#ifndef   RTE_e_SAC_SRC_EOL
	  #define RTE_e_SAC_SRC_EOL	(30U)
	#endif
	#ifndef   RTE_e_SAC_SRC_AUTO_CAL_COARSE
	  #define RTE_e_SAC_SRC_AUTO_CAL_COARSE	(40U)
	#endif
	#ifndef   RTE_e_SAC_SRC_AUTO_CAL_FINE
	  #define RTE_e_SAC_SRC_AUTO_CAL_FINE	(50U)
	#endif
	#ifndef   RTE_e_SAC_SRC_EOL_UPDATE
	  #define RTE_e_SAC_SRC_EOL_UPDATE	(60U)
	#endif
	#ifndef   RTE_e_SAC_SRC_EOL_UPDATE_RUNNING
	  #define RTE_e_SAC_SRC_EOL_UPDATE_RUNNING	(61U)
	#endif
	#ifndef   RTE_e_SAC_SRC_EOL_UPDATE_FINISHED
	  #define RTE_e_SAC_SRC_EOL_UPDATE_FINISHED	(62U)
	#endif
	#ifndef   RTE_e_SAC_SRC_EOL_UPDATE_FAILED
	  #define RTE_e_SAC_SRC_EOL_UPDATE_FAILED	(63U)
	#endif
	#ifndef   RTE_e_SAC_SRC_SELF_EVAL
	  #define RTE_e_SAC_SRC_SELF_EVAL	(70U)
	#endif
	#ifndef   RTE_e_SAC_SRC_TO_KEEP_32_BIT
	  #define RTE_e_SAC_SRC_TO_KEEP_32_BIT	(2147483647U)
	#endif

	#ifndef   eFCT_STATE_SIG_INACTIVE
	  #define eFCT_STATE_SIG_INACTIVE	(0U)
	#endif
	#ifndef   eFCT_STATE_SIG_ACTIVE
	  #define eFCT_STATE_SIG_ACTIVE	(1U)
	#endif
	#ifndef   eFCT_STATE_SIG_INVALID
	  #define eFCT_STATE_SIG_INVALID	(2U)
	#endif

	#ifndef   SIGNAL_INVALID
	  #define SIGNAL_INVALID	(0U)
	#endif
	#ifndef   SIGNAL_VALID
	  #define SIGNAL_VALID	(1U)
	#endif

	#ifndef   VDY_CAL_INIT
	  #define VDY_CAL_INIT	(0U)
	#endif
	#ifndef   VDY_CAL_YWR_OFFS_STST
	  #define VDY_CAL_YWR_OFFS_STST	(1U)
	#endif
	#ifndef   VDY_CAL_YWR_OFFS_DYN
	  #define VDY_CAL_YWR_OFFS_DYN	(2U)
	#endif
	#ifndef   VDY_CAL_WHS_OFFS
	  #define VDY_CAL_WHS_OFFS	(4U)
	#endif
	#ifndef   VDY_CAL_SWA_OFFS
	  #define VDY_CAL_SWA_OFFS	(16U)
	#endif
	#ifndef   VDY_CAL_LTA_OFFS
	  #define VDY_CAL_LTA_OFFS	(32U)
	#endif
	#ifndef   VDY_CAL_SWA_GRAD
	  #define VDY_CAL_SWA_GRAD	(64U)
	#endif
	#ifndef   VDY_CAL_WHS_LOAD
	  #define VDY_CAL_WHS_LOAD	(128U)
	#endif

	#ifndef   VDY_CTRL_STATE_STARTUP
	  #define VDY_CTRL_STATE_STARTUP	(0U)
	#endif
	#ifndef   VDY_CTRL_STATE_INIT
	  #define VDY_CTRL_STATE_INIT	(1U)
	#endif
	#ifndef   VDY_CTRL_STATE_RUNNING
	  #define VDY_CTRL_STATE_RUNNING	(2U)
	#endif

	#ifndef   VDY_SWA_RAT_NO_ANGL
	  #define VDY_SWA_RAT_NO_ANGL	(2)
	#endif
	#ifndef   VDY_SWA_RAT_NO_VELO
	  #define VDY_SWA_RAT_NO_VELO	(2)
	#endif

	#ifndef   RTE_TSAIF_DATASRC_NO_DIAG
	  #define RTE_TSAIF_DATASRC_NO_DIAG	(0U)
	#endif
	#ifndef   RTE_TSAIF_DATASRC_SR_ONLY
	  #define RTE_TSAIF_DATASRC_SR_ONLY	(1U)
	#endif
	#ifndef   RTE_TSAIF_DATASRC_MAP_ONLY
	  #define RTE_TSAIF_DATASRC_MAP_ONLY	(2U)
	#endif

	#ifndef   RTE_TSAIF_NO_BLOCKAGE
	  #define RTE_TSAIF_NO_BLOCKAGE	(0U)
	#endif
	#ifndef   RTE_TSAIF_TOLERATED_BLOCKAGE
	  #define RTE_TSAIF_TOLERATED_BLOCKAGE	(1U)
	#endif
	#ifndef   RTE_TSAIF_CONDENSATION
	  #define RTE_TSAIF_CONDENSATION	(2U)
	#endif
	#ifndef   RTE_TSAIF_PART_BLOCKAGE
	  #define RTE_TSAIF_PART_BLOCKAGE	(3U)
	#endif
	#ifndef   RTE_TSAIF_LOW_VISIBILITY
	  #define RTE_TSAIF_LOW_VISIBILITY	(4U)
	#endif
	#ifndef   RTE_TSAIF_BLOCKAGE
	  #define RTE_TSAIF_BLOCKAGE	(5U)
	#endif

	#ifndef   RTE_TSAIF_LR_LANE_CHANGE_IDLE
	  #define RTE_TSAIF_LR_LANE_CHANGE_IDLE	(0U)
	#endif
	#ifndef   RTE_TSAIF_LR_LANE_CHANGE_LEFT
	  #define RTE_TSAIF_LR_LANE_CHANGE_LEFT	(1U)
	#endif
	#ifndef   RTE_TSAIF_LR_LANE_CHANGE_RIGHT
	  #define RTE_TSAIF_LR_LANE_CHANGE_RIGHT	(2U)
	#endif

	#ifndef   RTE_TSAIF_LR_MARK_STATE_NOT_AVAIL
	  #define RTE_TSAIF_LR_MARK_STATE_NOT_AVAIL	(0U)
	#endif
	#ifndef   RTE_TSAIF_LR_MARK_STATE_AVAIL
	  #define RTE_TSAIF_LR_MARK_STATE_AVAIL	(1U)
	#endif

	#ifndef   RTE_TSAIF_LR_MARK_TYPE_IDLE
	  #define RTE_TSAIF_LR_MARK_TYPE_IDLE	(0U)
	#endif
	#ifndef   RTE_TSAIF_LR_MARK_TYPE_CONTINUOUS
	  #define RTE_TSAIF_LR_MARK_TYPE_CONTINUOUS	(1U)
	#endif
	#ifndef   RTE_TSAIF_LR_MARK_TYPE_DASHED
	  #define RTE_TSAIF_LR_MARK_TYPE_DASHED	(2U)
	#endif
	#ifndef   RTE_TSAIF_LR_MARK_TYPE_RESERVED1
	  #define RTE_TSAIF_LR_MARK_TYPE_RESERVED1	(3U)
	#endif
	#ifndef   RTE_TSAIF_LR_MARK_TYPE_RESERVED2
	  #define RTE_TSAIF_LR_MARK_TYPE_RESERVED2	(4U)
	#endif
	#ifndef   RTE_TSAIF_LR_MARK_TYPE_NOLINEDETECTED
	  #define RTE_TSAIF_LR_MARK_TYPE_NOLINEDETECTED	(5U)
	#endif
	#ifndef   RTE_TSAIF_LR_MARK_TYPE_UNCLASSIFIED
	  #define RTE_TSAIF_LR_MARK_TYPE_UNCLASSIFIED	(6U)
	#endif
	#ifndef   RTE_TSAIF_LR_MARK_TYPE_DOTTED
	  #define RTE_TSAIF_LR_MARK_TYPE_DOTTED	(7U)
	#endif
	#ifndef   RTE_TSAIF_LR_MARK_TYPE_DECORATION
	  #define RTE_TSAIF_LR_MARK_TYPE_DECORATION	(8U)
	#endif
	#ifndef   RTE_TSAIF_LR_MARK_TYPE_SEPARATING
	  #define RTE_TSAIF_LR_MARK_TYPE_SEPARATING	(9U)
	#endif
	#ifndef   RTE_TSAIF_LR_MARK_TYPE_NARROWDASHED
	  #define RTE_TSAIF_LR_MARK_TYPE_NARROWDASHED	(10U)
	#endif

	#ifndef   RTE_TSAIF_LR_MARKKING_COLOR_IDLE
	  #define RTE_TSAIF_LR_MARKKING_COLOR_IDLE	(0U)
	#endif
	#ifndef   RTE_TSAIF_LR_MARKKING_COLOR_WHITE
	  #define RTE_TSAIF_LR_MARKKING_COLOR_WHITE	(1U)
	#endif
	#ifndef   RTE_TSAIF_LR_MARKING_COLOR_YELLOW
	  #define RTE_TSAIF_LR_MARKING_COLOR_YELLOW	(2U)
	#endif
	#ifndef   RTE_TSAIF_LR_MARKING_COLOR_RED
	  #define RTE_TSAIF_LR_MARKING_COLOR_RED	(3U)
	#endif

	#ifndef   RTE_TSAIF_LR_LANE_SITE_DETECT_IDLE
	  #define RTE_TSAIF_LR_LANE_SITE_DETECT_IDLE	(0U)
	#endif
	#ifndef   RTE_TSAIF_LR_LANE_SITE_DETECT_SITE
	  #define RTE_TSAIF_LR_LANE_SITE_DETECT_SITE	(1U)
	#endif
	#ifndef   RTE_TSAIF_LR_LANE_SITE_DETECT_AMBIG
	  #define RTE_TSAIF_LR_LANE_SITE_DETECT_AMBIG	(2U)
	#endif

	#ifndef   RTE_TSAIF_SR_RESULT_COUNTRY_UNIT_UNKNOWN
	  #define RTE_TSAIF_SR_RESULT_COUNTRY_UNIT_UNKNOWN	(0U)
	#endif
	#ifndef   RTE_TSAIF_SR_RESULT_COUNTRY_UNIT_KMH
	  #define RTE_TSAIF_SR_RESULT_COUNTRY_UNIT_KMH	(1U)
	#endif
	#ifndef   RTE_TSAIF_SR_RESULT_COUNTRY_UNIT_MPH
	  #define RTE_TSAIF_SR_RESULT_COUNTRY_UNIT_MPH	(2U)
	#endif
	#ifndef   RTE_TSAIF_SR_RESULT_COUNTRY_UNIT_MPH_OR_KMH
	  #define RTE_TSAIF_SR_RESULT_COUNTRY_UNIT_MPH_OR_KMH	(3U)
	#endif

	#ifndef   RTE_TSAIF_SR_RESULT_COUNTRY_TRAFFIC_STYLE_UNKNOWN
	  #define RTE_TSAIF_SR_RESULT_COUNTRY_TRAFFIC_STYLE_UNKNOWN	(0U)
	#endif
	#ifndef   RTE_TSAIF_SR_RESULT_COUNTRY_LEFT_HAND_TRAFFIC
	  #define RTE_TSAIF_SR_RESULT_COUNTRY_LEFT_HAND_TRAFFIC	(1U)
	#endif
	#ifndef   RTE_TSAIF_SR_RESULT_COUNTRY_RIGHT_HAND_TRAFFIC
	  #define RTE_TSAIF_SR_RESULT_COUNTRY_RIGHT_HAND_TRAFFIC	(2U)
	#endif

	#ifndef   RTE_TSA_SIGN_CLASS_UNKNOWN
	  #define RTE_TSA_SIGN_CLASS_UNKNOWN	(0U)
	#endif
	#ifndef   RTE_TSA_SIGN_CLASS_SUPPL_RESTRICTED
	  #define RTE_TSA_SIGN_CLASS_SUPPL_RESTRICTED	(100000U)
	#endif
	#ifndef   RTE_TSA_SIGN_CLASS_SUPPL_ARROW_LEFT
	  #define RTE_TSA_SIGN_CLASS_SUPPL_ARROW_LEFT	(100010U)
	#endif
	#ifndef   RTE_TSA_SIGN_CLASS_SUPPL_ARROW_RIGHT
	  #define RTE_TSA_SIGN_CLASS_SUPPL_ARROW_RIGHT	(100020U)
	#endif
	#ifndef   RTE_TSA_SIGN_CLASS_SUPPL_VALID_FOR_DISTANCE
	  #define RTE_TSA_SIGN_CLASS_SUPPL_VALID_FOR_DISTANCE	(100100U)
	#endif
	#ifndef   RTE_TSA_SIGN_CLASS_SUPPL_VALID_IN_DISTANCE
	  #define RTE_TSA_SIGN_CLASS_SUPPL_VALID_IN_DISTANCE	(100400U)
	#endif
	#ifndef   RTE_TSA_SIGN_CLASS_SUPPL_ONLY_INFORMATION_PICT
	  #define RTE_TSA_SIGN_CLASS_SUPPL_ONLY_INFORMATION_PICT	(100600U)
	#endif
	#ifndef   RTE_TSA_SIGN_CLASS_SUPPL_ONLY_INFORMATION_TEXT_ONE_ROW
	  #define RTE_TSA_SIGN_CLASS_SUPPL_ONLY_INFORMATION_TEXT_ONE_ROW	(100601U)
	#endif
	#ifndef   RTE_TSA_SIGN_CLASS_SUPPL_GARBAGE
	  #define RTE_TSA_SIGN_CLASS_SUPPL_GARBAGE	(100990U)
	#endif
	#ifndef   RTE_TSA_SIGN_CLASS_SUPPL_TIME_RESTRICTION
	  #define RTE_TSA_SIGN_CLASS_SUPPL_TIME_RESTRICTION	(104030U)
	#endif
	#ifndef   RTE_TSA_SIGN_CLASS_SUPPL_WORKDAYS
	  #define RTE_TSA_SIGN_CLASS_SUPPL_WORKDAYS	(104230U)
	#endif
	#ifndef   RTE_TSA_SIGN_CLASS_SUPPL_WORKDAYS_AND_TIME
	  #define RTE_TSA_SIGN_CLASS_SUPPL_WORKDAYS_AND_TIME	(104231U)
	#endif
	#ifndef   RTE_TSA_SIGN_CLASS_SUPPL_MON2FRI_AND_TIME
	  #define RTE_TSA_SIGN_CLASS_SUPPL_MON2FRI_AND_TIME	(104233U)
	#endif
	#ifndef   RTE_TSA_SIGN_CLASS_SUPPL_MOTORCYCLE
	  #define RTE_TSA_SIGN_CLASS_SUPPL_MOTORCYCLE	(104610U)
	#endif
	#ifndef   RTE_TSA_SIGN_CLASS_SUPPL_PASSENGER_CAR
	  #define RTE_TSA_SIGN_CLASS_SUPPL_PASSENGER_CAR	(104810U)
	#endif
	#ifndef   RTE_TSA_SIGN_CLASS_SUPPL_PASSENGER_CAR_TRAILER
	  #define RTE_TSA_SIGN_CLASS_SUPPL_PASSENGER_CAR_TRAILER	(104811U)
	#endif
	#ifndef   RTE_TSA_SIGN_CLASS_SUPPL_TRUCK_BUS
	  #define RTE_TSA_SIGN_CLASS_SUPPL_TRUCK_BUS	(104812U)
	#endif
	#ifndef   RTE_TSA_SIGN_CLASS_SUPPL_TRUCK_BUS_CAR_TRAILER
	  #define RTE_TSA_SIGN_CLASS_SUPPL_TRUCK_BUS_CAR_TRAILER	(104913U)
	#endif
	#ifndef   RTE_TSA_SIGN_CLASS_SUPPL_WEIGHT
	  #define RTE_TSA_SIGN_CLASS_SUPPL_WEIGHT	(105235U)
	#endif
	#ifndef   RTE_TSA_SIGN_CLASS_SUPPL_WET
	  #define RTE_TSA_SIGN_CLASS_SUPPL_WET	(105236U)
	#endif
	#ifndef   RTE_TSA_SIGN_CLASS_SUPPL_FOGGY
	  #define RTE_TSA_SIGN_CLASS_SUPPL_FOGGY	(105237U)
	#endif
	#ifndef   RTE_TSA_SIGN_CLASS_SUPPL_ICY
	  #define RTE_TSA_SIGN_CLASS_SUPPL_ICY	(105238U)
	#endif
	#ifndef   RTE_TSA_SIGN_CLASS_MAIN_DIR_ARROW_TURN_LEFT
	  #define RTE_TSA_SIGN_CLASS_MAIN_DIR_ARROW_TURN_LEFT	(209100U)
	#endif
	#ifndef   RTE_TSA_SIGN_CLASS_MAIN_DIR_ARROW_TURN_RIGHT
	  #define RTE_TSA_SIGN_CLASS_MAIN_DIR_ARROW_TURN_RIGHT	(209200U)
	#endif
	#ifndef   RTE_TSA_SIGN_CLASS_MAIN_DIR_ARROW_STRAIGHT
	  #define RTE_TSA_SIGN_CLASS_MAIN_DIR_ARROW_STRAIGHT	(209300U)
	#endif
	#ifndef   RTE_TSA_SIGN_CLASS_MAIN_GARBAGE_DIR_ARROW
	  #define RTE_TSA_SIGN_CLASS_MAIN_GARBAGE_DIR_ARROW	(209990U)
	#endif
	#ifndef   RTE_TSA_SIGN_CLASS_MAIN_DIR_ARROW_SIDE_LEFT
	  #define RTE_TSA_SIGN_CLASS_MAIN_DIR_ARROW_SIDE_LEFT	(211100U)
	#endif
	#ifndef   RTE_TSA_SIGN_CLASS_MAIN_DIR_ARROW_SIDE_RIGHT
	  #define RTE_TSA_SIGN_CLASS_MAIN_DIR_ARROW_SIDE_RIGHT	(211200U)
	#endif
	#ifndef   RTE_TSA_SIGN_CLASS_MAIN_DIR_ARROW_STRAIGHT_AND_TURN_LEFT
	  #define RTE_TSA_SIGN_CLASS_MAIN_DIR_ARROW_STRAIGHT_AND_TURN_LEFT	(214100U)
	#endif
	#ifndef   RTE_TSA_SIGN_CLASS_MAIN_DIR_ARROW_STRAIGHT_AND_TURN_RIGHT
	  #define RTE_TSA_SIGN_CLASS_MAIN_DIR_ARROW_STRAIGHT_AND_TURN_RIGHT	(214200U)
	#endif
	#ifndef   RTE_TSA_SIGN_CLASS_MAIN_ROUNDABOUT
	  #define RTE_TSA_SIGN_CLASS_MAIN_ROUNDABOUT	(215000U)
	#endif
	#ifndef   RTE_TSA_SIGN_CLASS_MAIN_DIR_ARROW_PASS_LEFT
	  #define RTE_TSA_SIGN_CLASS_MAIN_DIR_ARROW_PASS_LEFT	(222100U)
	#endif
	#ifndef   RTE_TSA_SIGN_CLASS_MAIN_DIR_ARROW_PASS_RIGHT
	  #define RTE_TSA_SIGN_CLASS_MAIN_DIR_ARROW_PASS_RIGHT	(222200U)
	#endif
	#ifndef   RTE_TSA_SIGN_CLASS_MAIN_NO_ENTRY
	  #define RTE_TSA_SIGN_CLASS_MAIN_NO_ENTRY	(267000U)
	#endif
	#ifndef   RTE_TSA_SIGN_CLASS_MAIN_ENVIRONMENTAL_ZONE_END
	  #define RTE_TSA_SIGN_CLASS_MAIN_ENVIRONMENTAL_ZONE_END	(270200U)
	#endif
	#ifndef   RTE_TSA_SIGN_CLASS_MAIN_SL_010
	  #define RTE_TSA_SIGN_CLASS_MAIN_SL_010	(274510U)
	#endif
	#ifndef   RTE_TSA_SIGN_CLASS_MAIN_SL_020
	  #define RTE_TSA_SIGN_CLASS_MAIN_SL_020	(274520U)
	#endif
	#ifndef   RTE_TSA_SIGN_CLASS_MAIN_SL_030
	  #define RTE_TSA_SIGN_CLASS_MAIN_SL_030	(274530U)
	#endif
	#ifndef   RTE_TSA_SIGN_CLASS_MAIN_SL_030_ACTIVE
	  #define RTE_TSA_SIGN_CLASS_MAIN_SL_030_ACTIVE	(274531U)
	#endif
	#ifndef   RTE_TSA_SIGN_CLASS_MAIN_SL_040
	  #define RTE_TSA_SIGN_CLASS_MAIN_SL_040	(274540U)
	#endif
	#ifndef   RTE_TSA_SIGN_CLASS_MAIN_SL_040_ACTIVE
	  #define RTE_TSA_SIGN_CLASS_MAIN_SL_040_ACTIVE	(274541U)
	#endif
	#ifndef   RTE_TSA_SIGN_CLASS_MAIN_SL_045
	  #define RTE_TSA_SIGN_CLASS_MAIN_SL_045	(274545U)
	#endif
	#ifndef   RTE_TSA_SIGN_CLASS_MAIN_SL_050
	  #define RTE_TSA_SIGN_CLASS_MAIN_SL_050	(274550U)
	#endif
	#ifndef   RTE_TSA_SIGN_CLASS_MAIN_SL_050_ACTIVE
	  #define RTE_TSA_SIGN_CLASS_MAIN_SL_050_ACTIVE	(274551U)
	#endif
	#ifndef   RTE_TSA_SIGN_CLASS_MAIN_SL_060
	  #define RTE_TSA_SIGN_CLASS_MAIN_SL_060	(274560U)
	#endif
	#ifndef   RTE_TSA_SIGN_CLASS_MAIN_SL_060_ACTIVE
	  #define RTE_TSA_SIGN_CLASS_MAIN_SL_060_ACTIVE	(274561U)
	#endif
	#ifndef   RTE_TSA_SIGN_CLASS_MAIN_SL_070
	  #define RTE_TSA_SIGN_CLASS_MAIN_SL_070	(274570U)
	#endif
	#ifndef   RTE_TSA_SIGN_CLASS_MAIN_SL_070_ACTIVE
	  #define RTE_TSA_SIGN_CLASS_MAIN_SL_070_ACTIVE	(274571U)
	#endif
	#ifndef   RTE_TSA_SIGN_CLASS_MAIN_SL_080
	  #define RTE_TSA_SIGN_CLASS_MAIN_SL_080	(274580U)
	#endif
	#ifndef   RTE_TSA_SIGN_CLASS_MAIN_SL_080_ACTIVE
	  #define RTE_TSA_SIGN_CLASS_MAIN_SL_080_ACTIVE	(274581U)
	#endif
	#ifndef   RTE_TSA_SIGN_CLASS_MAIN_SL_090
	  #define RTE_TSA_SIGN_CLASS_MAIN_SL_090	(274590U)
	#endif
	#ifndef   RTE_TSA_SIGN_CLASS_MAIN_SL_090_ACTIVE
	  #define RTE_TSA_SIGN_CLASS_MAIN_SL_090_ACTIVE	(274591U)
	#endif
	#ifndef   RTE_TSA_SIGN_CLASS_MAIN_SL_100
	  #define RTE_TSA_SIGN_CLASS_MAIN_SL_100	(274600U)
	#endif
	#ifndef   RTE_TSA_SIGN_CLASS_MAIN_SL_100_ACTIVE
	  #define RTE_TSA_SIGN_CLASS_MAIN_SL_100_ACTIVE	(274601U)
	#endif
	#ifndef   RTE_TSA_SIGN_CLASS_MAIN_SL_110
	  #define RTE_TSA_SIGN_CLASS_MAIN_SL_110	(274610U)
	#endif
	#ifndef   RTE_TSA_SIGN_CLASS_MAIN_SL_110_ACTIVE
	  #define RTE_TSA_SIGN_CLASS_MAIN_SL_110_ACTIVE	(274611U)
	#endif
	#ifndef   RTE_TSA_SIGN_CLASS_MAIN_SL_120
	  #define RTE_TSA_SIGN_CLASS_MAIN_SL_120	(274620U)
	#endif
	#ifndef   RTE_TSA_SIGN_CLASS_MAIN_SL_120_ACTIVE
	  #define RTE_TSA_SIGN_CLASS_MAIN_SL_120_ACTIVE	(274621U)
	#endif
	#ifndef   RTE_TSA_SIGN_CLASS_MAIN_SL_130
	  #define RTE_TSA_SIGN_CLASS_MAIN_SL_130	(274630U)
	#endif
	#ifndef   RTE_TSA_SIGN_CLASS_MAIN_SL_130_ACTIVE
	  #define RTE_TSA_SIGN_CLASS_MAIN_SL_130_ACTIVE	(274631U)
	#endif
	#ifndef   RTE_TSA_SIGN_CLASS_MAIN_GARBAGE
	  #define RTE_TSA_SIGN_CLASS_MAIN_GARBAGE	(274990U)
	#endif
	#ifndef   RTE_TSA_SIGN_CLASS_MAIN_GARBAGE_ACTIVE
	  #define RTE_TSA_SIGN_CLASS_MAIN_GARBAGE_ACTIVE	(274991U)
	#endif
	#ifndef   RTE_TSA_SIGN_CLASS_MAIN_CAR_NO_PASSING
	  #define RTE_TSA_SIGN_CLASS_MAIN_CAR_NO_PASSING	(276000U)
	#endif
	#ifndef   RTE_TSA_SIGN_CLASS_MAIN_CAR_NO_PASSING_ACTIVE
	  #define RTE_TSA_SIGN_CLASS_MAIN_CAR_NO_PASSING_ACTIVE	(276001U)
	#endif
	#ifndef   RTE_TSA_SIGN_CLASS_MAIN_TRUCK_NO_PASSING
	  #define RTE_TSA_SIGN_CLASS_MAIN_TRUCK_NO_PASSING	(277000U)
	#endif
	#ifndef   RTE_TSA_SIGN_CLASS_MAIN_TRUCK_NO_PASSING_ACTIVE
	  #define RTE_TSA_SIGN_CLASS_MAIN_TRUCK_NO_PASSING_ACTIVE	(277001U)
	#endif
	#ifndef   RTE_TSA_SIGN_CLASS_MAIN_BUNDLE_TWO_DIGIT_END
	  #define RTE_TSA_SIGN_CLASS_MAIN_BUNDLE_TWO_DIGIT_END	(278200U)
	#endif
	#ifndef   RTE_TSA_SIGN_CLASS_MAIN_BUNDLE_TWO_DIGIT_END_ACTIVE
	  #define RTE_TSA_SIGN_CLASS_MAIN_BUNDLE_TWO_DIGIT_END_ACTIVE	(278201U)
	#endif
	#ifndef   RTE_TSA_SIGN_CLASS_MAIN_BUNDLE_THREE_DIGIT_END
	  #define RTE_TSA_SIGN_CLASS_MAIN_BUNDLE_THREE_DIGIT_END	(278300U)
	#endif
	#ifndef   RTE_TSA_SIGN_CLASS_MAIN_BUNDLE_THREE_DIGIT_END_ACTIVE
	  #define RTE_TSA_SIGN_CLASS_MAIN_BUNDLE_THREE_DIGIT_END_ACTIVE	(278301U)
	#endif
	#ifndef   RTE_TSA_SIGN_CLASS_MAIN_GARBAGE_END
	  #define RTE_TSA_SIGN_CLASS_MAIN_GARBAGE_END	(278990U)
	#endif
	#ifndef   RTE_TSA_SIGN_CLASS_MAIN_GARBAGE_END_ACTIVE
	  #define RTE_TSA_SIGN_CLASS_MAIN_GARBAGE_END_ACTIVE	(278991U)
	#endif
	#ifndef   RTE_TSA_SIGN_CLASS_MAIN_BUNDLE_NO_PASSING_END
	  #define RTE_TSA_SIGN_CLASS_MAIN_BUNDLE_NO_PASSING_END	(280100U)
	#endif
	#ifndef   RTE_TSA_SIGN_CLASS_MAIN_BUNDLE_NO_PASSING_END_ACTIVE
	  #define RTE_TSA_SIGN_CLASS_MAIN_BUNDLE_NO_PASSING_END_ACTIVE	(280101U)
	#endif
	#ifndef   RTE_TSA_SIGN_CLASS_MAIN_GENERAL_END
	  #define RTE_TSA_SIGN_CLASS_MAIN_GENERAL_END	(282000U)
	#endif
	#ifndef   RTE_TSA_SIGN_CLASS_MAIN_GENERAL_END_ACTIVE
	  #define RTE_TSA_SIGN_CLASS_MAIN_GENERAL_END_ACTIVE	(282001U)
	#endif
	#ifndef   RTE_TSA_SIGN_CLASS_MAIN_CITY_LIMIT_BEGIN
	  #define RTE_TSA_SIGN_CLASS_MAIN_CITY_LIMIT_BEGIN	(310000U)
	#endif
	#ifndef   RTE_TSA_SIGN_CLASS_MAIN_CITY_LIMIT_END
	  #define RTE_TSA_SIGN_CLASS_MAIN_CITY_LIMIT_END	(311000U)
	#endif
	#ifndef   RTE_TSA_SIGN_CLASS_MAIN_PLAY_STREET_BEGIN
	  #define RTE_TSA_SIGN_CLASS_MAIN_PLAY_STREET_BEGIN	(325000U)
	#endif
	#ifndef   RTE_TSA_SIGN_CLASS_MAIN_PLAY_STREET_END
	  #define RTE_TSA_SIGN_CLASS_MAIN_PLAY_STREET_END	(326000U)
	#endif
	#ifndef   RTE_TSA_SIGN_CLASS_CLUSTER_GARBAGE
	  #define RTE_TSA_SIGN_CLASS_CLUSTER_GARBAGE	(999990U)
	#endif

	#ifndef   RTE_TSAIF_SR_PROCESS_STATE_NOT_RUNNING
	  #define RTE_TSAIF_SR_PROCESS_STATE_NOT_RUNNING	(0U)
	#endif
	#ifndef   RTE_TSAIF_SR_PROCESS_STATE_ERROR
	  #define RTE_TSAIF_SR_PROCESS_STATE_ERROR	(1U)
	#endif
	#ifndef   RTE_TSAIF_SR_PROCESS_STATE_INIT
	  #define RTE_TSAIF_SR_PROCESS_STATE_INIT	(2U)
	#endif
	#ifndef   RTE_TSAIF_SR_PROCESS_STATE_NO_COMPETENCE
	  #define RTE_TSAIF_SR_PROCESS_STATE_NO_COMPETENCE	(3U)
	#endif
	#ifndef   RTE_TSAIF_SR_PROCESS_STATE_BLOCKAGE
	  #define RTE_TSAIF_SR_PROCESS_STATE_BLOCKAGE	(4U)
	#endif
	#ifndef   RTE_TSAIF_SR_PROCESS_STATE_RUNNING
	  #define RTE_TSAIF_SR_PROCESS_STATE_RUNNING	(5U)
	#endif
	#ifndef   RTE_TSAIF_SR_PROCESS_STATE_RUNNING_OVERLOADED
	  #define RTE_TSAIF_SR_PROCESS_STATE_RUNNING_OVERLOADED	(6U)
	#endif
	#ifndef   RTE_TSAIF_SR_PROCESS_STATE_TEMP_ERROR
	  #define RTE_TSAIF_SR_PROCESS_STATE_TEMP_ERROR	(7U)
	#endif

	#ifndef   RTE_TSAIF_SR_RESULT_TRACK_STATE_ACTIVE
	  #define RTE_TSAIF_SR_RESULT_TRACK_STATE_ACTIVE	(0U)
	#endif
	#ifndef   RTE_TSAIF_SR_RESULT_TRACK_STATE_ENDED
	  #define RTE_TSAIF_SR_RESULT_TRACK_STATE_ENDED	(1U)
	#endif
	#ifndef   RTE_TSAIF_SR_RESULT_TRACK_STATE_PASSED
	  #define RTE_TSAIF_SR_RESULT_TRACK_STATE_PASSED	(2U)
	#endif
	#ifndef   RTE_TSAIF_SR_RESULT_TRACK_STATE_FINISHED
	  #define RTE_TSAIF_SR_RESULT_TRACK_STATE_FINISHED	(3U)
	#endif

	#ifndef   RTE_TSAIF_INPUT_SIGNAL_STATE_INIT
	  #define RTE_TSAIF_INPUT_SIGNAL_STATE_INIT	(0U)
	#endif
	#ifndef   RTE_TSAIF_INPUT_SIGNAL_STATE_OK
	  #define RTE_TSAIF_INPUT_SIGNAL_STATE_OK	(1U)
	#endif
	#ifndef   RTE_TSAIF_INPUT_SIGNAL_STATE_NOT_OK
	  #define RTE_TSAIF_INPUT_SIGNAL_STATE_NOT_OK	(2U)
	#endif

	#ifndef   RTE_TSAIF_MAP_BUILD_UP_AREA_UNKNOWN
	  #define RTE_TSAIF_MAP_BUILD_UP_AREA_UNKNOWN	(0U)
	#endif
	#ifndef   RTE_TSAIF_MAP_BUILD_UP_AREA_OUTSIDE
	  #define RTE_TSAIF_MAP_BUILD_UP_AREA_OUTSIDE	(1U)
	#endif
	#ifndef   RTE_TSAIF_MAP_BUILD_UP_AREA_INSIDE
	  #define RTE_TSAIF_MAP_BUILD_UP_AREA_INSIDE	(2U)
	#endif
	#ifndef   RTE_TSAIF_MAP_BUILD_UP_AREA_SNA
	  #define RTE_TSAIF_MAP_BUILD_UP_AREA_SNA	(3U)
	#endif

	#ifndef   RTE_TSAIF_MAP_CONTEXT_CHANGE_UNKNOWN
	  #define RTE_TSAIF_MAP_CONTEXT_CHANGE_UNKNOWN	(0U)
	#endif
	#ifndef   RTE_TSAF_MAP_CONTEXT_CHANGE_NO_CHANGE_AHEAD
	  #define RTE_TSAF_MAP_CONTEXT_CHANGE_NO_CHANGE_AHEAD	(1U)
	#endif
	#ifndef   RTE_TSAIF_MAP_CONTEXT_CHANGE_OUTSIDE_TO_INSIDE
	  #define RTE_TSAIF_MAP_CONTEXT_CHANGE_OUTSIDE_TO_INSIDE	(2U)
	#endif
	#ifndef   RTE_TSAIF_MAP_CONTEXT_CHANGE_INSIDE_TO_OUTSIDE
	  #define RTE_TSAIF_MAP_CONTEXT_CHANGE_INSIDE_TO_OUTSIDE	(3U)
	#endif

	#ifndef   RTE_TSAIF_MAP_FORM_OF_WAY_UNKNOWN
	  #define RTE_TSAIF_MAP_FORM_OF_WAY_UNKNOWN	(0U)
	#endif
	#ifndef   RTE_TSAIF_MAP_FORM_OF_WAY_CONTROLLED_ACCESS
	  #define RTE_TSAIF_MAP_FORM_OF_WAY_CONTROLLED_ACCESS	(1U)
	#endif
	#ifndef   RTE_TSAIF_MAP_FORM_OF_WAY_MULTIPLY_DIGITIZED
	  #define RTE_TSAIF_MAP_FORM_OF_WAY_MULTIPLY_DIGITIZED	(2U)
	#endif
	#ifndef   RTE_TSAIF_MAP_FORM_OF_WAY_SINGLE_CARRIAGEWAY
	  #define RTE_TSAIF_MAP_FORM_OF_WAY_SINGLE_CARRIAGEWAY	(3U)
	#endif
	#ifndef   RTE_TSAIF_MAP_FORM_OF_WAY_ROUNDABOUT
	  #define RTE_TSAIF_MAP_FORM_OF_WAY_ROUNDABOUT	(4U)
	#endif
	#ifndef   RTE_TSAIF_MAP_FORM_OF_WAY_STF
	  #define RTE_TSAIF_MAP_FORM_OF_WAY_STF	(5U)
	#endif
	#ifndef   RTE_TSAIF_MAP_FORM_OF_WAY_RESERVED_6
	  #define RTE_TSAIF_MAP_FORM_OF_WAY_RESERVED_6	(6U)
	#endif
	#ifndef   RTE_TSAIF_MAP_FORM_OF_WAY_RESERVED_7
	  #define RTE_TSAIF_MAP_FORM_OF_WAY_RESERVED_7	(7U)
	#endif
	#ifndef   RTE_TSAIF_MAP_FORM_OF_WAY_PARALLEL_ROAD
	  #define RTE_TSAIF_MAP_FORM_OF_WAY_PARALLEL_ROAD	(8U)
	#endif
	#ifndef   RTE_TSAIF_MAP_FORM_OF_WAY_RAMP_CONTROLLED_ACCESS
	  #define RTE_TSAIF_MAP_FORM_OF_WAY_RAMP_CONTROLLED_ACCESS	(9U)
	#endif
	#ifndef   RTE_TSAIF_MAP_FORM_OF_WAY_RAMP_NO_CONTROLLED_ACCESS
	  #define RTE_TSAIF_MAP_FORM_OF_WAY_RAMP_NO_CONTROLLED_ACCESS	(10U)
	#endif
	#ifndef   RTE_TSAIF_MAP_FORM_OF_WAY_FRONTAGE_ROAD
	  #define RTE_TSAIF_MAP_FORM_OF_WAY_FRONTAGE_ROAD	(11U)
	#endif
	#ifndef   RTE_TSAIF_MAP_FORM_OF_WAY_SERVICE_ACCESS_PARKING
	  #define RTE_TSAIF_MAP_FORM_OF_WAY_SERVICE_ACCESS_PARKING	(12U)
	#endif
	#ifndef   RTE_TSAIF_MAP_FORM_OF_WAY_SERVICE_ACCESS
	  #define RTE_TSAIF_MAP_FORM_OF_WAY_SERVICE_ACCESS	(13U)
	#endif
	#ifndef   RTE_TSAIF_MAP_FORM_OF_WAY_PEDESTRIANS
	  #define RTE_TSAIF_MAP_FORM_OF_WAY_PEDESTRIANS	(14U)
	#endif
	#ifndef   RTE_TSAIF_MAP_FORM_OF_WAY_SNA
	  #define RTE_TSAIF_MAP_FORM_OF_WAY_SNA	(15U)
	#endif

	#ifndef   RTE_TSAIF_MAP_FRC_UNKNOWN
	  #define RTE_TSAIF_MAP_FRC_UNKNOWN	(0U)
	#endif
	#ifndef   RTE_TSAIF_MAP_FRC1
	  #define RTE_TSAIF_MAP_FRC1	(1U)
	#endif
	#ifndef   RTE_TSAIF_MAP_FRC2
	  #define RTE_TSAIF_MAP_FRC2	(2U)
	#endif
	#ifndef   RTE_TSAIF_MAP_FRC3
	  #define RTE_TSAIF_MAP_FRC3	(3U)
	#endif
	#ifndef   RTE_TSAIF_MAP_FRC4
	  #define RTE_TSAIF_MAP_FRC4	(4U)
	#endif
	#ifndef   RTE_TSAIF_MAP_FRC5
	  #define RTE_TSAIF_MAP_FRC5	(5U)
	#endif
	#ifndef   RTE_TSAIF_MAP_FRC6
	  #define RTE_TSAIF_MAP_FRC6	(6U)
	#endif
	#ifndef   RTE_TSAIF_MAP_FRC_SNA
	  #define RTE_TSAIF_MAP_FRC_SNA	(7U)
	#endif

	#ifndef   RTE_TSAIF_MAP_LCT_UNKNOWN
	  #define RTE_TSAIF_MAP_LCT_UNKNOWN	(0U)
	#endif
	#ifndef   RTE_TSAIF_MAP_LCT_TUNNEL
	  #define RTE_TSAIF_MAP_LCT_TUNNEL	(1U)
	#endif
	#ifndef   RTE_TSAIF_MAP_LCT_INTERSECTION
	  #define RTE_TSAIF_MAP_LCT_INTERSECTION	(2U)
	#endif
	#ifndef   RTE_TSAIF_MAP_LCT_ROUNDABOUT
	  #define RTE_TSAIF_MAP_LCT_ROUNDABOUT	(3U)
	#endif
	#ifndef   RTE_TSAIF_MAP_LCT_TOLLSTATION
	  #define RTE_TSAIF_MAP_LCT_TOLLSTATION	(4U)
	#endif
	#ifndef   RTE_TSAIF_MAP_LCT_LEFT_EXIT_RAMP
	  #define RTE_TSAIF_MAP_LCT_LEFT_EXIT_RAMP	(5U)
	#endif
	#ifndef   RTE_TSAIF_MAP_LCT_RIGHT_EXIT_RAMP
	  #define RTE_TSAIF_MAP_LCT_RIGHT_EXIT_RAMP	(6U)
	#endif
	#ifndef   RTE_TSAIF_MAP_LCT_LEFT_ENTERING_RAMP
	  #define RTE_TSAIF_MAP_LCT_LEFT_ENTERING_RAMP	(7U)
	#endif
	#ifndef   RTE_TSAIF_MAP_LCT_RIGHT_ENTERING_RAMP
	  #define RTE_TSAIF_MAP_LCT_RIGHT_ENTERING_RAMP	(8U)
	#endif
	#ifndef   RTE_TSAIF_MAP_LCT_SNA
	  #define RTE_TSAIF_MAP_LCT_SNA	(15U)
	#endif

	#ifndef   RTE_TSAIF_MAP_NUM_LANES_DRIVING_UNKNOWN
	  #define RTE_TSAIF_MAP_NUM_LANES_DRIVING_UNKNOWN	(0U)
	#endif
	#ifndef   RTE_TSAIF_MAP_NUM_LANES_DRIVING_0
	  #define RTE_TSAIF_MAP_NUM_LANES_DRIVING_0	(1U)
	#endif
	#ifndef   RTE_TSAIF_MAP_NUM_LANES_DRIVING_1
	  #define RTE_TSAIF_MAP_NUM_LANES_DRIVING_1	(2U)
	#endif
	#ifndef   RTE_TSAIF_MAP_NUM_LANES_DRIVING_2
	  #define RTE_TSAIF_MAP_NUM_LANES_DRIVING_2	(3U)
	#endif
	#ifndef   RTE_TSAIF_MAP_NUM_LANES_DRIVING_3
	  #define RTE_TSAIF_MAP_NUM_LANES_DRIVING_3	(4U)
	#endif
	#ifndef   RTE_TSAIF_MAP_NUM_LANES_DRIVING_4
	  #define RTE_TSAIF_MAP_NUM_LANES_DRIVING_4	(5U)
	#endif
	#ifndef   RTE_TSAIF_MAP_NUM_LANES_DRIVING_5
	  #define RTE_TSAIF_MAP_NUM_LANES_DRIVING_5	(6U)
	#endif
	#ifndef   RTE_TSAIF_MAP_NUM_LANES_DRIVING_6_PLUS
	  #define RTE_TSAIF_MAP_NUM_LANES_DRIVING_6_PLUS	(7U)
	#endif
	#ifndef   RTE_TSAIF_MAP_NUM_LANES_DRIVING_SNA
	  #define RTE_TSAIF_MAP_NUM_LANES_DRIVING_SNA	(15U)
	#endif

	#ifndef   RTE_TSAIF_MAP_NUM_LANES_OPPOSITE_UNKNOWN
	  #define RTE_TSAIF_MAP_NUM_LANES_OPPOSITE_UNKNOWN	(0U)
	#endif
	#ifndef   RTE_TSAIF_MAP_NUM_LANES_OPPOSITE_0
	  #define RTE_TSAIF_MAP_NUM_LANES_OPPOSITE_0	(1U)
	#endif
	#ifndef   RTE_TSAIF_MAP_NUM_LANES_OPPOSITE_1
	  #define RTE_TSAIF_MAP_NUM_LANES_OPPOSITE_1	(2U)
	#endif
	#ifndef   RTE_TSAIF_MAP_NUM_LANES_OPPOSITE_2_PLUS
	  #define RTE_TSAIF_MAP_NUM_LANES_OPPOSITE_2_PLUS	(3U)
	#endif
	#ifndef   RTE_TSAIF_MAP_NUM_LANES_OPPOSITE_SNA
	  #define RTE_TSAIF_MAP_NUM_LANES_OPPOSITE_SNA	(7U)
	#endif

	#ifndef   RTE_TSAIF_MAP_PROVIDER_UNKNOWN
	  #define RTE_TSAIF_MAP_PROVIDER_UNKNOWN	(0U)
	#endif
	#ifndef   RTE_TSAIF_MAP_PROVIDER_TELEATLAS
	  #define RTE_TSAIF_MAP_PROVIDER_TELEATLAS	(1U)
	#endif
	#ifndef   RTE_TSAIF_MAP_PROVIDER_NAVTEQ
	  #define RTE_TSAIF_MAP_PROVIDER_NAVTEQ	(2U)
	#endif
	#ifndef   RTE_TSAIF_MAP_PROVIDER_ZENRIN
	  #define RTE_TSAIF_MAP_PROVIDER_ZENRIN	(3U)
	#endif
	#ifndef   RTE_TSAIF_MAP_PROVIDER_SNA
	  #define RTE_TSAIF_MAP_PROVIDER_SNA	(7U)
	#endif

	#ifndef   RTE_TSAIF_MAP_RCT_UNKNOWN
	  #define RTE_TSAIF_MAP_RCT_UNKNOWN	(0U)
	#endif
	#ifndef   RTE_TSAIF_MAP_RCT_LEFT_TURN
	  #define RTE_TSAIF_MAP_RCT_LEFT_TURN	(1U)
	#endif
	#ifndef   RTE_TSAIF_MAP_RCT_RIGHT_TURN
	  #define RTE_TSAIF_MAP_RCT_RIGHT_TURN	(2U)
	#endif
	#ifndef   RTE_TSAIF_MAP_RCT_LEFT_LEAVE
	  #define RTE_TSAIF_MAP_RCT_LEFT_LEAVE	(3U)
	#endif
	#ifndef   RTE_TSAIF_MAP_RCT_RIGHT_LEAVE
	  #define RTE_TSAIF_MAP_RCT_RIGHT_LEAVE	(4U)
	#endif
	#ifndef   RTE_TSAIF_MAP_RCT_ROUNDABOUT
	  #define RTE_TSAIF_MAP_RCT_ROUNDABOUT	(5U)
	#endif
	#ifndef   RTE_TSAIF_MAP_RCT_UTURN
	  #define RTE_TSAIF_MAP_RCT_UTURN	(6U)
	#endif
	#ifndef   RTE_TSAIF_MAP_RCT_SNA
	  #define RTE_TSAIF_MAP_RCT_SNA	(7U)
	#endif

	#ifndef   RTE_TSAIF_MAP_SPD_LIMIT_SIDE_UNKNOWN
	  #define RTE_TSAIF_MAP_SPD_LIMIT_SIDE_UNKNOWN	(0U)
	#endif
	#ifndef   RTE_TSAIF_MAP_SPD_LIMIT_SIDE_LEFT
	  #define RTE_TSAIF_MAP_SPD_LIMIT_SIDE_LEFT	(1U)
	#endif
	#ifndef   RTE_TSAIF_MAP_SPD_LIMIT_SIDE_RIGHT
	  #define RTE_TSAIF_MAP_SPD_LIMIT_SIDE_RIGHT	(2U)
	#endif
	#ifndef   RTE_TSAIF_MAP_SPD_LIMIT_SIDE_SNA
	  #define RTE_TSAIF_MAP_SPD_LIMIT_SIDE_SNA	(3U)
	#endif

	#ifndef   RTE_TSAIF_MAP_SPD_LMT_STYPE_UNKNOWN
	  #define RTE_TSAIF_MAP_SPD_LMT_STYPE_UNKNOWN	(0U)
	#endif
	#ifndef   RTE_TSAIF_MAP_SPD_LMT_STYPE_NDEF0
	  #define RTE_TSAIF_MAP_SPD_LMT_STYPE_NDEF0	(1U)
	#endif
	#ifndef   RTE_TSAIF_MAP_SPD_LMT_STYPE_LIM
	  #define RTE_TSAIF_MAP_SPD_LMT_STYPE_LIM	(2U)
	#endif
	#ifndef   RTE_TSAIF_MAP_SPD_LMT_STYPE_UNLIM
	  #define RTE_TSAIF_MAP_SPD_LMT_STYPE_UNLIM	(3U)
	#endif
	#ifndef   RTE_TSAIF_MAP_SPD_LMT_STYPE_TMP
	  #define RTE_TSAIF_MAP_SPD_LMT_STYPE_TMP	(4U)
	#endif
	#ifndef   RTE_TSAIF_MAP_SPD_LMT_STYPE_IMPL
	  #define RTE_TSAIF_MAP_SPD_LMT_STYPE_IMPL	(5U)
	#endif
	#ifndef   RTE_TSAIF_MAP_SPD_LMT_STYPE_CHNG
	  #define RTE_TSAIF_MAP_SPD_LMT_STYPE_CHNG	(6U)
	#endif
	#ifndef   RTE_TSAIF_MAP_SPD_LMT_STYPE_NDEF6
	  #define RTE_TSAIF_MAP_SPD_LMT_STYPE_NDEF6	(7U)
	#endif
	#ifndef   RTE_TSAIF_MAP_SPD_LMT_STYPE_SNA
	  #define RTE_TSAIF_MAP_SPD_LMT_STYPE_SNA	(15U)
	#endif

	#ifndef   RTE_TSAIF_MAP_SPD_LMT_VLD_UNKNOWN
	  #define RTE_TSAIF_MAP_SPD_LMT_VLD_UNKNOWN	(0U)
	#endif
	#ifndef   RTE_TSAIF_MAP_SPD_LMT_VLD_UNLIM
	  #define RTE_TSAIF_MAP_SPD_LMT_VLD_UNLIM	(1U)
	#endif
	#ifndef   RTE_TSAIF_MAP_SPD_LMT_VLD_WET
	  #define RTE_TSAIF_MAP_SPD_LMT_VLD_WET	(2U)
	#endif
	#ifndef   RTE_TSAIF_MAP_SPD_LMT_VLD_ICY
	  #define RTE_TSAIF_MAP_SPD_LMT_VLD_ICY	(3U)
	#endif
	#ifndef   RTE_TSAIF_MAP_SPD_LMT_VLD_FOG
	  #define RTE_TSAIF_MAP_SPD_LMT_VLD_FOG	(4U)
	#endif
	#ifndef   RTE_TSAIF_MAP_SPD_LMT_VLD_TMP_UN
	  #define RTE_TSAIF_MAP_SPD_LMT_VLD_TMP_UN	(5U)
	#endif
	#ifndef   RTE_TSAIF_MAP_SPD_LMT_VLD_TMP_NA
	  #define RTE_TSAIF_MAP_SPD_LMT_VLD_TMP_NA	(6U)
	#endif
	#ifndef   RTE_TSAIF_MAP_SPD_LMT_VLD_TMP_A
	  #define RTE_TSAIF_MAP_SPD_LMT_VLD_TMP_A	(7U)
	#endif
	#ifndef   RTE_TSAIF_MAP_SPD_LMT_VLD_WEIGHT
	  #define RTE_TSAIF_MAP_SPD_LMT_VLD_WEIGHT	(8U)
	#endif
	#ifndef   RTE_TSAIF_MAP_SPD_LMT_VLD_VEHICLE
	  #define RTE_TSAIF_MAP_SPD_LMT_VLD_VEHICLE	(9U)
	#endif
	#ifndef   RTE_TSAIF_MAP_SPD_LMT_VLD_DARK
	  #define RTE_TSAIF_MAP_SPD_LMT_VLD_DARK	(10U)
	#endif
	#ifndef   RTE_TSAIF_MAP_SPD_LMT_VLD_SNA
	  #define RTE_TSAIF_MAP_SPD_LMT_VLD_SNA	(15U)
	#endif

	#ifndef   RTE_TSAIF_MAP_SPD_UNIT_UNKNOWN
	  #define RTE_TSAIF_MAP_SPD_UNIT_UNKNOWN	(0U)
	#endif
	#ifndef   RTE_TSAIF_MAP_SPD_UNIT_KMH
	  #define RTE_TSAIF_MAP_SPD_UNIT_KMH	(1U)
	#endif
	#ifndef   RTE_TSAIF_MAP_SPD_UNIT_MPH
	  #define RTE_TSAIF_MAP_SPD_UNIT_MPH	(2U)
	#endif
	#ifndef   RTE_TSAIF_MAP_SPD_UNIT_SNA
	  #define RTE_TSAIF_MAP_SPD_UNIT_SNA	(3U)
	#endif

	#ifndef   RTE_TSAIF_MAP_TRAFFIC_STYLE_UNKNOWN
	  #define RTE_TSAIF_MAP_TRAFFIC_STYLE_UNKNOWN	(0U)
	#endif
	#ifndef   RTE_TSAIF_MAP_TRAFFIC_STYLE_RIGHTHAND
	  #define RTE_TSAIF_MAP_TRAFFIC_STYLE_RIGHTHAND	(1U)
	#endif
	#ifndef   RTE_TSAIF_MAP_TRAFFIC_STYLE_LEFTHAND
	  #define RTE_TSAIF_MAP_TRAFFIC_STYLE_LEFTHAND	(2U)
	#endif
	#ifndef   RTE_TSAIF_MAP_TRAFFIC_STYLE_SNA
	  #define RTE_TSAIF_MAP_TRAFFIC_STYLE_SNA	(3U)
	#endif

	#ifndef   RTE_TSAIF_MDRQ_OFF
	  #define RTE_TSAIF_MDRQ_OFF	(0U)
	#endif
	#ifndef   RTE_TSAIF_MDRQ_ON_NO_WARN
	  #define RTE_TSAIF_MDRQ_ON_NO_WARN	(1U)
	#endif
	#ifndef   RTE_TSAIF_MDRQ_ON_WARN
	  #define RTE_TSAIF_MDRQ_ON_WARN	(2U)
	#endif

	#ifndef   RTE_TSAIF_MODE_SEL_RUN_NORMAL
	  #define RTE_TSAIF_MODE_SEL_RUN_NORMAL	(0U)
	#endif
	#ifndef   RTE_TSAIF_MODE_SEL_MEAS_FREEZE
	  #define RTE_TSAIF_MODE_SEL_MEAS_FREEZE	(1U)
	#endif
	#ifndef   RTE_TSAIF_MODE_SEL_FIXED_OUTPUT
	  #define RTE_TSAIF_MODE_SEL_FIXED_OUTPUT	(2U)
	#endif
	#ifndef   RTE_TSAIF_MODE_SEL_RESERVED_3
	  #define RTE_TSAIF_MODE_SEL_RESERVED_3	(3U)
	#endif
	#ifndef   RTE_TSAIF_MODE_SEL_RESERVED_4
	  #define RTE_TSAIF_MODE_SEL_RESERVED_4	(4U)
	#endif
	#ifndef   RTE_TSAIF_MODE_SEL_RESERVED_5
	  #define RTE_TSAIF_MODE_SEL_RESERVED_5	(5U)
	#endif
	#ifndef   RTE_TSAIF_MODE_SEL_RESERVED_6
	  #define RTE_TSAIF_MODE_SEL_RESERVED_6	(6U)
	#endif
	#ifndef   RTE_TSAIF_MODE_SEL_RESERVED_7
	  #define RTE_TSAIF_MODE_SEL_RESERVED_7	(7U)
	#endif

	#ifndef   RTE_TSAIF_OBJ_EDGE_FALSE
	  #define RTE_TSAIF_OBJ_EDGE_FALSE	(0U)
	#endif
	#ifndef   RTE_TSAIF_OBJ_EDGE_TRUE
	  #define RTE_TSAIF_OBJ_EDGE_TRUE	(1U)
	#endif
	#ifndef   RTE_TSAIF_OBJ_EDGE_SNA
	  #define RTE_TSAIF_OBJ_EDGE_SNA	(2U)
	#endif

	#ifndef   RTE_TSAIF_SPD_OFFSET_UNIT_KMH
	  #define RTE_TSAIF_SPD_OFFSET_UNIT_KMH	(0U)
	#endif
	#ifndef   RTE_TSAIF_SPD_OFFSET_UNIT_MPH
	  #define RTE_TSAIF_SPD_OFFSET_UNIT_MPH	(1U)
	#endif

	#ifndef   RTE_TSAIF_VEH_IGN_LOCK
	  #define RTE_TSAIF_VEH_IGN_LOCK	(0U)
	#endif
	#ifndef   RTE_TSAIF_VEH_IGN_OFF
	  #define RTE_TSAIF_VEH_IGN_OFF	(1U)
	#endif
	#ifndef   RTE_TSAIF_VEH_IGN_ACC
	  #define RTE_TSAIF_VEH_IGN_ACC	(2U)
	#endif
	#ifndef   RTE_TSAIF_VEH_IGN_ON
	  #define RTE_TSAIF_VEH_IGN_ON	(3U)
	#endif
	#ifndef   RTE_TSAIF_VEH_IGN_START
	  #define RTE_TSAIF_VEH_IGN_START	(4U)
	#endif

	#ifndef   RTE_TSAIF_VEH_MOTION_UNKN
	  #define RTE_TSAIF_VEH_MOTION_UNKN	(0U)
	#endif
	#ifndef   RTE_TSAIF_VEH_MOTION_ROLL_FWD
	  #define RTE_TSAIF_VEH_MOTION_ROLL_FWD	(1U)
	#endif
	#ifndef   RTE_TSAIF_VEH_MOTION_ROLL_REV
	  #define RTE_TSAIF_VEH_MOTION_ROLL_REV	(2U)
	#endif
	#ifndef   RTE_TSAIF_VEH_MOTION_STAND_STILL
	  #define RTE_TSAIF_VEH_MOTION_STAND_STILL	(3U)
	#endif

	#ifndef   RTE_TSAIF_VEH_TRLR_NO_DETECT
	  #define RTE_TSAIF_VEH_TRLR_NO_DETECT	(0U)
	#endif
	#ifndef   RTE_TSAIF_VEH_TRLR_OK
	  #define RTE_TSAIF_VEH_TRLR_OK	(1U)
	#endif
	#ifndef   RTE_TSAIF_VEH_TRLR_NDEF2
	  #define RTE_TSAIF_VEH_TRLR_NDEF2	(2U)
	#endif
	#ifndef   RTE_TSAIF_VEH_TRLR_SNA
	  #define RTE_TSAIF_VEH_TRLR_SNA	(3U)
	#endif

	#ifndef   RTE_TSAIF_VEH_TI_OFF
	  #define RTE_TSAIF_VEH_TI_OFF	(0U)
	#endif
	#ifndef   RTE_TSAIF_VEH_TI_LEFT
	  #define RTE_TSAIF_VEH_TI_LEFT	(1U)
	#endif
	#ifndef   RTE_TSAIF_VEH_TI_RIGHT
	  #define RTE_TSAIF_VEH_TI_RIGHT	(2U)
	#endif
	#ifndef   RTE_TSAIF_VEH_TI_BOTH
	  #define RTE_TSAIF_VEH_TI_BOTH	(3U)
	#endif

	#ifndef   RTE_TSAIF_TSA_SLA_ICON_DISP_IDLE
	  #define RTE_TSAIF_TSA_SLA_ICON_DISP_IDLE	(0U)
	#endif
	#ifndef   RTE_TSAIF_TSA_SLA_ICON_DISP_NORM_ICON
	  #define RTE_TSAIF_TSA_SLA_ICON_DISP_NORM_ICON	(1U)
	#endif
	#ifndef   RTE_TSAIF_TSA_SLA_ICON_DISP_INVRT_ICON
	  #define RTE_TSAIF_TSA_SLA_ICON_DISP_INVRT_ICON	(2U)
	#endif

	#ifndef   RTE_TSAIF_ERROR_PARAMETER
	  #define RTE_TSAIF_ERROR_PARAMETER	(0U)
	#endif
	#ifndef   RTE_TSAIF_ERROR_BLOCKAGE
	  #define RTE_TSAIF_ERROR_BLOCKAGE	(1U)
	#endif
	#ifndef   RTE_TSAIF_ERROR_VEHICLE_DATA
	  #define RTE_TSAIF_ERROR_VEHICLE_DATA	(2U)
	#endif
	#ifndef   RTE_TSAIF_ERROR_IMAGE_DATA
	  #define RTE_TSAIF_ERROR_IMAGE_DATA	(3U)
	#endif
	#ifndef   RTE_TSAIF_ERROR_CALIBRATION
	  #define RTE_TSAIF_ERROR_CALIBRATION	(4U)
	#endif
	#ifndef   RTE_TSAIF_ERROR_INPUT
	  #define RTE_TSAIF_ERROR_INPUT	(5U)
	#endif
	#ifndef   RTE_TSAIF_ERROR_SOFTWARE
	  #define RTE_TSAIF_ERROR_SOFTWARE	(6U)
	#endif
	#ifndef   RTE_TSAIF_ERROR_FATAL
	  #define RTE_TSAIF_ERROR_FATAL	(7U)
	#endif
	#ifndef   RTE_TSAIF_ERROR_COUNTRY_CODE
	  #define RTE_TSAIF_ERROR_COUNTRY_CODE	(8U)
	#endif

	#ifndef   RTE_TSAIF_ERROR_CHECK_NOT_DONE
	  #define RTE_TSAIF_ERROR_CHECK_NOT_DONE	(0U)
	#endif
	#ifndef   RTE_TSAIF_ERROR_CHECK_DONE_AND_PASSED
	  #define RTE_TSAIF_ERROR_CHECK_DONE_AND_PASSED	(1U)
	#endif
	#ifndef   RTE_TSAIF_ERROR_CHECK_DONE_AND_FAILED
	  #define RTE_TSAIF_ERROR_CHECK_DONE_AND_FAILED	(2U)
	#endif

	#ifndef   RTE_TSAIF_HMI_NPA_WARN_NO_PASS_IDLE
	  #define RTE_TSAIF_HMI_NPA_WARN_NO_PASS_IDLE	(0U)
	#endif
	#ifndef   RTE_TSAIF_HMI_NPA_WARN_NO_PASS
	  #define RTE_TSAIF_HMI_NPA_WARN_NO_PASS	(1U)
	#endif
	#ifndef   RTE_TSAIF_HMI_NPA_WARN_PASS
	  #define RTE_TSAIF_HMI_NPA_WARN_PASS	(2U)
	#endif

	#ifndef   RTE_TSAIF_HMI_NPA_WARN_IDLE
	  #define RTE_TSAIF_HMI_NPA_WARN_IDLE	(0U)
	#endif
	#ifndef   RTE_TSAIF_HMI_NPA_WARN_LANE_CHNG_ALERT
	  #define RTE_TSAIF_HMI_NPA_WARN_LANE_CHNG_ALERT	(1U)
	#endif
	#ifndef   RTE_TSAIF_HMI_NPA_WARN_IND_ALERT
	  #define RTE_TSAIF_HMI_NPA_WARN_IND_ALERT	(2U)
	#endif

	#ifndef   RTE_TSAIF_HMI_RWF_WARN_IDLE
	  #define RTE_TSAIF_HMI_RWF_WARN_IDLE	(0U)
	#endif
	#ifndef   RTE_TSAIF_HMI_RWF_WARN_NO_ROAD_WORK
	  #define RTE_TSAIF_HMI_RWF_WARN_NO_ROAD_WORK	(1U)
	#endif
	#ifndef   RTE_TSAIF_HMI_RWF_WARN_ROAD_WORK
	  #define RTE_TSAIF_HMI_RWF_WARN_ROAD_WORK	(2U)
	#endif

	#ifndef   RTE_TSAIF_HMI_SLA_WARN_IDLE
	  #define RTE_TSAIF_HMI_SLA_WARN_IDLE	(0U)
	#endif
	#ifndef   RTE_TSAIF_HMI_SLA_WARN_SPD_OK
	  #define RTE_TSAIF_HMI_SLA_WARN_SPD_OK	(1U)
	#endif
	#ifndef   RTE_TSAIF_HMI_SLA_WARN_SPD_EXCD
	  #define RTE_TSAIF_HMI_SLA_WARN_SPD_EXCD	(2U)
	#endif

	#ifndef   RTE_TSAIF_HMI_SPD_WARN_DISP_IDLE
	  #define RTE_TSAIF_HMI_SPD_WARN_DISP_IDLE	(0U)
	#endif
	#ifndef   RTE_TSAIF_HMI_SPD_WARN_DISP_RED
	  #define RTE_TSAIF_HMI_SPD_WARN_DISP_RED	(1U)
	#endif

	#ifndef   RTE_TSAIF_HMI_SPD_WARN_TYPE_OFF
	  #define RTE_TSAIF_HMI_SPD_WARN_TYPE_OFF	(0U)
	#endif
	#ifndef   RTE_TSAIF_HMI_SPD_WARN_TYPE_FLASH
	  #define RTE_TSAIF_HMI_SPD_WARN_TYPE_FLASH	(1U)
	#endif
	#ifndef   RTE_TSAIF_HMI_SPD_WARN_TYPE_STEADY
	  #define RTE_TSAIF_HMI_SPD_WARN_TYPE_STEADY	(2U)
	#endif
	#ifndef   RTE_TSAIF_HMI_SPD_WARN_TYPE_NDEF3
	  #define RTE_TSAIF_HMI_SPD_WARN_TYPE_NDEF3	(3U)
	#endif

	#ifndef   RTE_TSAIF_HMI_SPD_WARN_UNIT_KMH
	  #define RTE_TSAIF_HMI_SPD_WARN_UNIT_KMH	(0U)
	#endif
	#ifndef   RTE_TSAIF_HMI_SPD_WARN_UNIT_MPH
	  #define RTE_TSAIF_HMI_SPD_WARN_UNIT_MPH	(1U)
	#endif

	#ifndef   RTE_TSAIF_HMI_TSA_STATE_READY
	  #define RTE_TSAIF_HMI_TSA_STATE_READY	(0U)
	#endif
	#ifndef   RTE_TSAIF_HMI_TSA_STATE_READY_POPUP
	  #define RTE_TSAIF_HMI_TSA_STATE_READY_POPUP	(1U)
	#endif
	#ifndef   RTE_TSAIF_HMI_TSA_STATE_TSA_NA
	  #define RTE_TSAIF_HMI_TSA_STATE_TSA_NA	(2U)
	#endif
	#ifndef   RTE_TSAIF_HMI_TSA_STATE_TSA_TNA
	  #define RTE_TSAIF_HMI_TSA_STATE_TSA_TNA	(3U)
	#endif
	#ifndef   RTE_TSAIF_HMI_TSA_STATE_TSA_NA_COUNTRY
	  #define RTE_TSAIF_HMI_TSA_STATE_TSA_NA_COUNTRY	(4U)
	#endif
	#ifndef   RTE_TSAIF_HMI_TSA_STATE_NDEF5
	  #define RTE_TSAIF_HMI_TSA_STATE_NDEF5	(5U)
	#endif
	#ifndef   RTE_TSAIF_HMI_TSA_STATE_NDEF6
	  #define RTE_TSAIF_HMI_TSA_STATE_NDEF6	(6U)
	#endif
	#ifndef   RTE_TSAIF_HMI_TSA_STATE_NDEF7
	  #define RTE_TSAIF_HMI_TSA_STATE_NDEF7	(7U)
	#endif

	#ifndef   RTE_TSAIF_HMI_WWA_WARN_IDLE
	  #define RTE_TSAIF_HMI_WWA_WARN_IDLE	(0U)
	#endif
	#ifndef   RTE_TSAIF_HMI_WWA_WARN_WRONG_WAY
	  #define RTE_TSAIF_HMI_WWA_WARN_WRONG_WAY	(1U)
	#endif
	#ifndef   RTE_TSAIF_HMI_WWA_WARN_FORBID_CONT
	  #define RTE_TSAIF_HMI_WWA_WARN_FORBID_CONT	(2U)
	#endif

	#ifndef   RTE_TSAIF_STATE_NOT_INITIALIZED
	  #define RTE_TSAIF_STATE_NOT_INITIALIZED	(0U)
	#endif
	#ifndef   RTE_TSAIF_STATE_RUNNING
	  #define RTE_TSAIF_STATE_RUNNING	(1U)
	#endif
	#ifndef   RTE_TSAIF_STATE_TEMP_NOT_AVAILABLE
	  #define RTE_TSAIF_STATE_TEMP_NOT_AVAILABLE	(2U)
	#endif
	#ifndef   RTE_TSAIF_STATE_FAILURE
	  #define RTE_TSAIF_STATE_FAILURE	(3U)
	#endif
	#ifndef   RTE_TSAIF_STATE_INITIALIZED
	  #define RTE_TSAIF_STATE_INITIALIZED	(4U)
	#endif
	#ifndef   RTE_TSAIF_STATE_NOT_RUNNING
	  #define RTE_TSAIF_STATE_NOT_RUNNING	(5U)
	#endif

	#ifndef   RTE_TSAIF_RWF_STATUS_UNKNOWN
	  #define RTE_TSAIF_RWF_STATUS_UNKNOWN	(0U)
	#endif
	#ifndef   RTE_TSAIF_RWF_STATUS_NO
	  #define RTE_TSAIF_RWF_STATUS_NO	(1U)
	#endif
	#ifndef   RTE_TSAIF_RWF_STATUS_YES
	  #define RTE_TSAIF_RWF_STATUS_YES	(2U)
	#endif

	#ifndef   RTE_TSAIF_OUTPUT_SIGNAL_STATE_INIT
	  #define RTE_TSAIF_OUTPUT_SIGNAL_STATE_INIT	(0U)
	#endif
	#ifndef   RTE_TSAIF_OUTPUT_SIGNAL_STATE_OK
	  #define RTE_TSAIF_OUTPUT_SIGNAL_STATE_OK	(1U)
	#endif
	#ifndef   RTE_TSAIF_OUTPUT_SIGNAL_STATE_NOT_OK
	  #define RTE_TSAIF_OUTPUT_SIGNAL_STATE_NOT_OK	(2U)
	#endif

	#ifndef   VDY_ERR_STATE_UNKNOWN
	  #define VDY_ERR_STATE_UNKNOWN	(0U)
	#endif
	#ifndef   VDY_ERR_STATE_ACTIVE
	  #define VDY_ERR_STATE_ACTIVE	(1U)
	#endif
	#ifndef   VDY_ERR_STATE_INACTIVE
	  #define VDY_ERR_STATE_INACTIVE	(2U)
	#endif

	#ifndef   VDY_LONG_MOT_STATE_MOVE
	  #define VDY_LONG_MOT_STATE_MOVE	(0U)
	#endif
	#ifndef   VDY_LONG_MOT_STATE_MOVE_FWD
	  #define VDY_LONG_MOT_STATE_MOVE_FWD	(1U)
	#endif
	#ifndef   VDY_LONG_MOT_STATE_MOVE_RWD
	  #define VDY_LONG_MOT_STATE_MOVE_RWD	(2U)
	#endif
	#ifndef   VDY_LONG_MOT_STATE_STDST
	  #define VDY_LONG_MOT_STATE_STDST	(3U)
	#endif

	#ifndef   SENSOR_OR_NORMAL
	  #define SENSOR_OR_NORMAL	(0U)
	#endif
	#ifndef   SENSOR_OR_ROTATED
	  #define SENSOR_OR_ROTATED	(1U)
	#endif

	#ifndef   VEH_PAR_ADD_VEHICLE_WIDTH
	  #define VEH_PAR_ADD_VEHICLE_WIDTH	(0U)
	#endif
	#ifndef   VEH_PAR_ADD_VEHICLE_LENGTH
	  #define VEH_PAR_ADD_VEHICLE_LENGTH	(2U)
	#endif
	#ifndef   VEH_PAR_ADD_CURB_WEIGHT
	  #define VEH_PAR_ADD_CURB_WEIGHT	(4U)
	#endif
	#ifndef   VEH_PAR_ADD_OVERHANG_FRONT
	  #define VEH_PAR_ADD_OVERHANG_FRONT	(6U)
	#endif
	#ifndef   VEH_PAR_ADD_DUMMY
	  #define VEH_PAR_ADD_DUMMY	(1000000U)
	#endif

	#ifndef   VEH_PAR_SEN_MOUNT_LAT_POS
	  #define VEH_PAR_SEN_MOUNT_LAT_POS	(0U)
	#endif
	#ifndef   VEH_PAR_SEN_MOUNT_LONG_POS
	  #define VEH_PAR_SEN_MOUNT_LONG_POS	(2U)
	#endif
	#ifndef   VEH_PAR_SEN_MOUNT_VERT_POS
	  #define VEH_PAR_SEN_MOUNT_VERT_POS	(4U)
	#endif
	#ifndef   VEH_PAR_SEN_MOUNT_LONGPOS_TO_COG
	  #define VEH_PAR_SEN_MOUNT_LONGPOS_TO_COG	(6U)
	#endif
	#ifndef   VEH_PAR_SEN_MOUNT_PITCH_ANGLE
	  #define VEH_PAR_SEN_MOUNT_PITCH_ANGLE	(8U)
	#endif
	#ifndef   VEH_PAR_SEN_MOUNT_ORIENTATION
	  #define VEH_PAR_SEN_MOUNT_ORIENTATION	(10U)
	#endif
	#ifndef   VEH_PAR_SEN_MOUNT_YAW_ANGLE
	  #define VEH_PAR_SEN_MOUNT_YAW_ANGLE	(12U)
	#endif
	#ifndef   VEH_PAR_SEN_MOUNT_DUMMY
	  #define VEH_PAR_SEN_MOUNT_DUMMY	(1000000U)
	#endif

	#ifndef   VEH_PAR_SENSOR_COVER_DAMPING
	  #define VEH_PAR_SENSOR_COVER_DAMPING	(0U)
	#endif
	#ifndef   VEH_PAR_SENSOR_COVERAGE_ANGLE
	  #define VEH_PAR_SENSOR_COVERAGE_ANGLE	(2U)
	#endif
	#ifndef   VEH_PAR_SENSOR_LOBE_ANGLE
	  #define VEH_PAR_SENSOR_LOBE_ANGLE	(4U)
	#endif
	#ifndef   VEH_PAR_SENSOR_CYCLE_TIME
	  #define VEH_PAR_SENSOR_CYCLE_TIME	(6U)
	#endif
	#ifndef   VEH_PAR_SENSOR_NO_OF_SCANS
	  #define VEH_PAR_SENSOR_NO_OF_SCANS	(8U)
	#endif
	#ifndef   VEH_PAR_SENSOR_DUMMY
	  #define VEH_PAR_SENSOR_DUMMY	(1000000U)
	#endif

	#ifndef   ACT_GEAR_POS_NEUTRAL
	  #define ACT_GEAR_POS_NEUTRAL	(0U)
	#endif
	#ifndef   ACT_GEAR_POS_PARKING
	  #define ACT_GEAR_POS_PARKING	(1U)
	#endif
	#ifndef   ACT_GEAR_POS_FORWARD
	  #define ACT_GEAR_POS_FORWARD	(2U)
	#endif
	#ifndef   ACT_GEAR_POS_REVERSE
	  #define ACT_GEAR_POS_REVERSE	(3U)
	#endif

	#ifndef   VDY_LONG_DIR_VOID
	  #define VDY_LONG_DIR_VOID	(0U)
	#endif
	#ifndef   VDY_LONG_DIR_FWD
	  #define VDY_LONG_DIR_FWD	(1U)
	#endif
	#ifndef   VDY_LONG_DIR_RWD
	  #define VDY_LONG_DIR_RWD	(2U)
	#endif

	#ifndef   STAT_INACTIVE
	  #define STAT_INACTIVE	(0U)
	#endif
	#ifndef   STAT_ACTIVE
	  #define STAT_ACTIVE	(1U)
	#endif

	#ifndef   DYN_GEAR_NEUTRAL_GEAR
	  #define DYN_GEAR_NEUTRAL_GEAR	(0U)
	#endif
	#ifndef   DYN_GEAR_FIRST_GEAR
	  #define DYN_GEAR_FIRST_GEAR	(1U)
	#endif
	#ifndef   DYN_GEAR_SECOND_GEAR
	  #define DYN_GEAR_SECOND_GEAR	(2U)
	#endif
	#ifndef   DYN_GEAR_THIRD_GEAR
	  #define DYN_GEAR_THIRD_GEAR	(3U)
	#endif
	#ifndef   DYN_GEAR_FOURTH_GEAR
	  #define DYN_GEAR_FOURTH_GEAR	(4U)
	#endif
	#ifndef   DYN_GEAR_FIFTH_GEAR
	  #define DYN_GEAR_FIFTH_GEAR	(5U)
	#endif
	#ifndef   DYN_GEAR_SIXTH_GEAR
	  #define DYN_GEAR_SIXTH_GEAR	(6U)
	#endif
	#ifndef   DYN_GEAR_SEVENTH_GEAR
	  #define DYN_GEAR_SEVENTH_GEAR	(7U)
	#endif
	#ifndef   DYN_GEAR_EIGHTH_GEAR
	  #define DYN_GEAR_EIGHTH_GEAR	(8U)
	#endif
	#ifndef   DYN_GEAR_REVERSE_GEAR
	  #define DYN_GEAR_REVERSE_GEAR	(9U)
	#endif
	#ifndef   DYN_GEAR_PARK_GEAR
	  #define DYN_GEAR_PARK_GEAR	(10U)
	#endif

	#ifndef   TURN_SIG_LEFT
	  #define TURN_SIG_LEFT	(0U)
	#endif
	#ifndef   TURN_SIG_RIGHT
	  #define TURN_SIG_RIGHT	(1U)
	#endif
	#ifndef   TURN_SIG_NEUTRAL
	  #define TURN_SIG_NEUTRAL	(2U)
	#endif
	#ifndef   TURN_SIG_UNKNOWN
	  #define TURN_SIG_UNKNOWN	(3U)
	#endif

	#ifndef   VDY_VEH_MOT_STATE_ROLLING
	  #define VDY_VEH_MOT_STATE_ROLLING	(0U)
	#endif
	#ifndef   VDY_VEH_MOT_STATE_FAST_STST
	  #define VDY_VEH_MOT_STATE_FAST_STST	(1U)
	#endif
	#ifndef   VDY_VEH_MOT_STATE_SECURE_STST
	  #define VDY_VEH_MOT_STATE_SECURE_STST	(2U)
	#endif

	#ifndef   RTE_CALI_e_MODE_DEV
	  #define RTE_CALI_e_MODE_DEV	(0U)
	#endif
	#ifndef   RTE_CALI_e_MODE_EOL
	  #define RTE_CALI_e_MODE_EOL	(1U)
	#endif

	#ifndef   RTE_CALI_e_NOT_STARTED
	  #define RTE_CALI_e_NOT_STARTED	(0U)
	#endif
	#ifndef   RTE_CALI_e_RUNNING
	  #define RTE_CALI_e_RUNNING	(1U)
	#endif
	#ifndef   RTE_CALI_e_SUCCESS
	  #define RTE_CALI_e_SUCCESS	(2U)
	#endif
	#ifndef   RTE_CALI_e_ERROR
	  #define RTE_CALI_e_ERROR	(4U)
	#endif
	#ifndef   RTE_CALI_e_WARN_INTENSITY_INHOMOGEN
	  #define RTE_CALI_e_WARN_INTENSITY_INHOMOGEN	(16U)
	#endif
	#ifndef   RTE_CALI_e_WARN_INTENSITY_BELOW_RANGE
	  #define RTE_CALI_e_WARN_INTENSITY_BELOW_RANGE	(32U)
	#endif
	#ifndef   RTE_CALI_e_WARN_INTENSITY_ABOVE_RANGE
	  #define RTE_CALI_e_WARN_INTENSITY_ABOVE_RANGE	(64U)
	#endif
	#ifndef   RTE_CALI_e_WARN_CONTRAST_BELOW_RANGE
	  #define RTE_CALI_e_WARN_CONTRAST_BELOW_RANGE	(128U)
	#endif
	#ifndef   RTE_CALI_e_WARN_CONTRAST_ABOVE_RANGE
	  #define RTE_CALI_e_WARN_CONTRAST_ABOVE_RANGE	(256U)
	#endif
	#ifndef   RTE_CALI_e_WARN_OTHER
	  #define RTE_CALI_e_WARN_OTHER	(512U)
	#endif
	#ifndef   RTE_CALI_e_ERR_SYSTEM_NOT_CALIBRATED
	  #define RTE_CALI_e_ERR_SYSTEM_NOT_CALIBRATED	(2048U)
	#endif
	#ifndef   RTE_CALI_e_ERR_VIN_INVALID
	  #define RTE_CALI_e_ERR_VIN_INVALID	(4096U)
	#endif
	#ifndef   RTE_CALI_e_ERR_UNKNOWN_CALI_MODE
	  #define RTE_CALI_e_ERR_UNKNOWN_CALI_MODE	(8192U)
	#endif
	#ifndef   RTE_CALI_e_ERR_UNKNOWN_PATTERN_TYPE
	  #define RTE_CALI_e_ERR_UNKNOWN_PATTERN_TYPE	(16384U)
	#endif
	#ifndef   RTE_CALI_e_ERR_INIT_DATA_FAILED
	  #define RTE_CALI_e_ERR_INIT_DATA_FAILED	(32768U)
	#endif
	#ifndef   RTE_CALI_e_ERR_PARAMETER_FALSE
	  #define RTE_CALI_e_ERR_PARAMETER_FALSE	(65536U)
	#endif
	#ifndef   RTE_CALI_e_ERR_INTENSITY_INHOMOGEN
	  #define RTE_CALI_e_ERR_INTENSITY_INHOMOGEN	(131072U)
	#endif
	#ifndef   RTE_CALI_e_ERR_INTENSITY_BELOW_RANGE
	  #define RTE_CALI_e_ERR_INTENSITY_BELOW_RANGE	(262144U)
	#endif
	#ifndef   RTE_CALI_e_ERR_INTENSITY_ABOVE_RANGE
	  #define RTE_CALI_e_ERR_INTENSITY_ABOVE_RANGE	(524288U)
	#endif
	#ifndef   RTE_CALI_e_ERR_CONTRAST_BELOW_RANGE
	  #define RTE_CALI_e_ERR_CONTRAST_BELOW_RANGE	(1048576U)
	#endif
	#ifndef   RTE_CALI_e_ERR_CONTRAST_ABOVE_RANGE
	  #define RTE_CALI_e_ERR_CONTRAST_ABOVE_RANGE	(2097152U)
	#endif
	#ifndef   RTE_CALI_e_ERR_NO_MARKERS
	  #define RTE_CALI_e_ERR_NO_MARKERS	(4194304U)
	#endif
	#ifndef   RTE_CALI_e_ERR_NOT_ENOUGH_MARKERS
	  #define RTE_CALI_e_ERR_NOT_ENOUGH_MARKERS	(8388608U)
	#endif
	#ifndef   RTE_CALI_e_ERR_TOO_MANY_MARKERS
	  #define RTE_CALI_e_ERR_TOO_MANY_MARKERS	(16777216U)
	#endif
	#ifndef   RTE_CALI_e_ERR_UNCORRESPONDING_MARKERS
	  #define RTE_CALI_e_ERR_UNCORRESPONDING_MARKERS	(33554432U)
	#endif
	#ifndef   RTE_CALI_e_ERR_PATTERN_ECU_MOVING
	  #define RTE_CALI_e_ERR_PATTERN_ECU_MOVING	(67108864U)
	#endif
	#ifndef   RTE_CALI_e_ERR_PATTERN_POSITION_INVALID
	  #define RTE_CALI_e_ERR_PATTERN_POSITION_INVALID	(134217728U)
	#endif
	#ifndef   RTE_CALI_e_ERR_NUMERICAL_PROBLEM
	  #define RTE_CALI_e_ERR_NUMERICAL_PROBLEM	(268435456U)
	#endif
	#ifndef   RTE_CALI_e_ERR_RESULT_OUT_OF_RANGE
	  #define RTE_CALI_e_ERR_RESULT_OUT_OF_RANGE	(536870912U)
	#endif
	#ifndef   RTE_CALI_e_ERR_OTHER
	  #define RTE_CALI_e_ERR_OTHER	(1073741824U)
	#endif

	#ifndef   RTE_CALI_e_BAYERPATTERN_RGGB
	  #define RTE_CALI_e_BAYERPATTERN_RGGB	(0U)
	#endif
	#ifndef   RTE_CALI_e_BAYERPATTERN_GRBG
	  #define RTE_CALI_e_BAYERPATTERN_GRBG	(1U)
	#endif
	#ifndef   RTE_CALI_e_BAYERPATTERN_GBRG
	  #define RTE_CALI_e_BAYERPATTERN_GBRG	(2U)
	#endif
	#ifndef   RTE_CALI_e_BAYERPATTERN_BGGR
	  #define RTE_CALI_e_BAYERPATTERN_BGGR	(3U)
	#endif

	#ifndef   RTE_CALI_EXITTYPE_NONE
	  #define RTE_CALI_EXITTYPE_NONE	(0U)
	#endif
	#ifndef   RTE_CALI_EXITTYPE_SAMPLING_ABORTED
	  #define RTE_CALI_EXITTYPE_SAMPLING_ABORTED	(1U)
	#endif
	#ifndef   RTE_CALI_EXITTYPE_MAIN_TIMEOUT
	  #define RTE_CALI_EXITTYPE_MAIN_TIMEOUT	(2U)
	#endif
	#ifndef   RTE_CALI_EXITTYPE_EXTERNAL_REASON
	  #define RTE_CALI_EXITTYPE_EXTERNAL_REASON	(3U)
	#endif

	#ifndef   RTE_CALI_e_SIG_INIT
	  #define RTE_CALI_e_SIG_INIT	(0U)
	#endif
	#ifndef   RTE_CALI_e_SIG_OK
	  #define RTE_CALI_e_SIG_OK	(1U)
	#endif
	#ifndef   RTE_CALI_e_SIG_NOT_OK
	  #define RTE_CALI_e_SIG_NOT_OK	(2U)
	#endif
	#ifndef   RTE_CALI_e_SIG_TIMEOUT
	  #define RTE_CALI_e_SIG_TIMEOUT	(3U)
	#endif
	#ifndef   RTE_CALI_e_SIG_OK_BUT_SENSOR_NOT_INIT
	  #define RTE_CALI_e_SIG_OK_BUT_SENSOR_NOT_INIT	(4U)
	#endif
	#ifndef   RTE_CALI_e_SIG_OUT_OF_RANGE
	  #define RTE_CALI_e_SIG_OUT_OF_RANGE	(5U)
	#endif

	#ifndef   FCT_MOD_STARTUP
	  #define FCT_MOD_STARTUP	(0U)
	#endif
	#ifndef   FCT_MOD_INIT
	  #define FCT_MOD_INIT	(1U)
	#endif
	#ifndef   FCT_MOD_RUNNING
	  #define FCT_MOD_RUNNING	(2U)
	#endif
	#ifndef   FCT_MOD_SHUTDOWN
	  #define FCT_MOD_SHUTDOWN	(3U)
	#endif
	#ifndef   FCT_MOD_SERVICEALIGNMENT
	  #define FCT_MOD_SERVICEALIGNMENT	(4U)
	#endif
	#ifndef   FCT_MOD_END_OF_LINE
	  #define FCT_MOD_END_OF_LINE	(5U)
	#endif
	#ifndef   FCT_MOD_MON_INPUT_ACC
	  #define FCT_MOD_MON_INPUT_ACC	(6U)
	#endif
	#ifndef   FCT_MOD_REDUCED_FUNC
	  #define FCT_MOD_REDUCED_FUNC	(7U)
	#endif

	#ifndef   RTE_GB_BAYERPATTERN_RGGB
	  #define RTE_GB_BAYERPATTERN_RGGB	(1U)
	#endif
	#ifndef   RTE_GB_BAYERPATTERN_GRBG
	  #define RTE_GB_BAYERPATTERN_GRBG	(2U)
	#endif
	#ifndef   RTE_GB_BAYERPATTERN_GBRG
	  #define RTE_GB_BAYERPATTERN_GBRG	(3U)
	#endif
	#ifndef   RTE_GB_BAYERPATTERN_BGGR
	  #define RTE_GB_BAYERPATTERN_BGGR	(4U)
	#endif

	#ifndef   RTE_GB_UNKNOWN_STATUS
	  #define RTE_GB_UNKNOWN_STATUS	(0U)
	#endif
	#ifndef   RTE_GB_NO_BLOCKAGE
	  #define RTE_GB_NO_BLOCKAGE	(1U)
	#endif
	#ifndef   RTE_GB_TOLERATED_BLOCKAGE
	  #define RTE_GB_TOLERATED_BLOCKAGE	(2U)
	#endif
	#ifndef   RTE_GB_CONDENSATION
	  #define RTE_GB_CONDENSATION	(3U)
	#endif
	#ifndef   RTE_GB_PART_BLOCKAGE
	  #define RTE_GB_PART_BLOCKAGE	(4U)
	#endif
	#ifndef   RTE_GB_LOW_VISIBILITY
	  #define RTE_GB_LOW_VISIBILITY	(5U)
	#endif
	#ifndef   RTE_GB_BLOCKAGE
	  #define RTE_GB_BLOCKAGE	(6U)
	#endif

	#ifndef   RTE_GB_HLA_FCT_ID
	  #define RTE_GB_HLA_FCT_ID	(0U)
	#endif
	#ifndef   RTE_GB_TSA_FCT_ID
	  #define RTE_GB_TSA_FCT_ID	(1U)
	#endif
	#ifndef   RTE_GB_LDW_FCT_ID
	  #define RTE_GB_LDW_FCT_ID	(2U)
	#endif
	#ifndef   RTE_GB_SOD_R_FCT_ID
	  #define RTE_GB_SOD_R_FCT_ID	(3U)
	#endif
	#ifndef   RTE_GB_SOD_L_FCT_ID
	  #define RTE_GB_SOD_L_FCT_ID	(4U)
	#endif
	#ifndef   RTE_GB_SOD_FCT_ID
	  #define RTE_GB_SOD_FCT_ID	(5U)
	#endif
	#ifndef   RTE_GB_UNKNOWN_FCT_ID
	  #define RTE_GB_UNKNOWN_FCT_ID	(6U)
	#endif

	#ifndef   RTE_GB_HB_OFF
	  #define RTE_GB_HB_OFF	(0U)
	#endif
	#ifndef   RTE_GB_HB_FULL_ON
	  #define RTE_GB_HB_FULL_ON	(1U)
	#endif
	#ifndef   RTE_GB_HB_PARTIAL
	  #define RTE_GB_HB_PARTIAL	(2U)
	#endif
	#ifndef   RTE_GB_HB_SPOT
	  #define RTE_GB_HB_SPOT	(3U)
	#endif

	#ifndef   RTE_GB_LT_SYMM
	  #define RTE_GB_LT_SYMM	(0U)
	#endif
	#ifndef   RTE_GB_LT_COUNTRY
	  #define RTE_GB_LT_COUNTRY	(1U)
	#endif
	#ifndef   RTE_GB_LT_MOTORWAY
	  #define RTE_GB_LT_MOTORWAY	(2U)
	#endif
	#ifndef   RTE_GB_LT_PART_HIBM
	  #define RTE_GB_LT_PART_HIBM	(3U)
	#endif
	#ifndef   RTE_GB_LT_FULL_HIBM
	  #define RTE_GB_LT_FULL_HIBM	(4U)
	#endif

	#ifndef   RTE_GB_MOVE_IDLE
	  #define RTE_GB_MOVE_IDLE	(0U)
	#endif
	#ifndef   RTE_GB_MOVE_FWD
	  #define RTE_GB_MOVE_FWD	(1U)
	#endif
	#ifndef   RTE_GB_MOVE_REV
	  #define RTE_GB_MOVE_REV	(2U)
	#endif
	#ifndef   RTE_GB_STAND_STILL
	  #define RTE_GB_STAND_STILL	(3U)
	#endif

	#ifndef   RTE_HLAF_NV_OBJ_IDLE
	  #define RTE_HLAF_NV_OBJ_IDLE	(0U)
	#endif
	#ifndef   RTE_HLAF_NV_OBJ_PEDESTRIAN
	  #define RTE_HLAF_NV_OBJ_PEDESTRIAN	(1U)
	#endif
	#ifndef   RTE_HLAF_NV_OBJ_ANIMAL_SMALL
	  #define RTE_HLAF_NV_OBJ_ANIMAL_SMALL	(2U)
	#endif
	#ifndef   RTE_HLAF_NV_OBJ_ANIMAL_BIG
	  #define RTE_HLAF_NV_OBJ_ANIMAL_BIG	(3U)
	#endif

	#ifndef   RTE_HLAF_NV_SPOT_OFF
	  #define RTE_HLAF_NV_SPOT_OFF	(0U)
	#endif
	#ifndef   RTE_HLAF_NV_SPOT_BLINK
	  #define RTE_HLAF_NV_SPOT_BLINK	(1U)
	#endif
	#ifndef   RTE_HLAF_NV_SPOT_CONT
	  #define RTE_HLAF_NV_SPOT_CONT	(2U)
	#endif
	#ifndef   RTE_HLAF_NV_SPOT_ABORT
	  #define RTE_HLAF_NV_SPOT_ABORT	(3U)
	#endif

	#ifndef   RTE_HLAR_DEBUG_MODE_NORMAL
	  #define RTE_HLAR_DEBUG_MODE_NORMAL	(0U)
	#endif
	#ifndef   RTE_HLAR_DEBUG_MODE_DEMO
	  #define RTE_HLAR_DEBUG_MODE_DEMO	(1U)
	#endif
	#ifndef   RTE_HLAR_DEBUG_MEASFREEZE_ONLY
	  #define RTE_HLAR_DEBUG_MEASFREEZE_ONLY	(2U)
	#endif
	#ifndef   RTE_HLAR_DEBUG_HB_ON
	  #define RTE_HLAR_DEBUG_HB_ON	(3U)
	#endif
	#ifndef   RTE_HLAR_DEBUG_HB_OFF
	  #define RTE_HLAR_DEBUG_HB_OFF	(4U)
	#endif
	#ifndef   RTE_HLAR_DEBUG_MODE_0
	  #define RTE_HLAR_DEBUG_MODE_0	(20U)
	#endif
	#ifndef   RTE_HLAR_DEBUG_MODE_1
	  #define RTE_HLAR_DEBUG_MODE_1	(21U)
	#endif
	#ifndef   RTE_HLAR_DEBUG_MODE_2
	  #define RTE_HLAR_DEBUG_MODE_2	(22U)
	#endif
	#ifndef   RTE_HLAR_DEBUG_MODE_3
	  #define RTE_HLAR_DEBUG_MODE_3	(23U)
	#endif
	#ifndef   RTE_HLAR_DEBUG_MODE_4
	  #define RTE_HLAR_DEBUG_MODE_4	(24U)
	#endif
	#ifndef   RTE_HLAR_DEBUG_MODE_5
	  #define RTE_HLAR_DEBUG_MODE_5	(25U)
	#endif
	#ifndef   RTE_HLAR_DEBUG_MODE_6
	  #define RTE_HLAR_DEBUG_MODE_6	(26U)
	#endif
	#ifndef   RTE_HLAR_DEBUG_MODE_7
	  #define RTE_HLAR_DEBUG_MODE_7	(27U)
	#endif
	#ifndef   RTE_HLAR_DEBUG_MODE_8
	  #define RTE_HLAR_DEBUG_MODE_8	(28U)
	#endif
	#ifndef   RTE_HLAR_DEBUG_MODE_9
	  #define RTE_HLAR_DEBUG_MODE_9	(29U)
	#endif
	#ifndef   RTE_HLAR_DEBUG_MODE_10
	  #define RTE_HLAR_DEBUG_MODE_10	(30U)
	#endif
	#ifndef   RTE_HLAR_DEBUG_MODE_11
	  #define RTE_HLAR_DEBUG_MODE_11	(31U)
	#endif
	#ifndef   RTE_HLAR_DEBUG_MODE_12
	  #define RTE_HLAR_DEBUG_MODE_12	(32U)
	#endif
	#ifndef   RTE_HLAR_DEBUG_MODE_13
	  #define RTE_HLAR_DEBUG_MODE_13	(33U)
	#endif
	#ifndef   RTE_HLAR_DEBUG_MODE_14
	  #define RTE_HLAR_DEBUG_MODE_14	(34U)
	#endif
	#ifndef   RTE_HLAR_DEBUG_MODE_15
	  #define RTE_HLAR_DEBUG_MODE_15	(35U)
	#endif

	#ifndef   RTE_HLA_EXP_DAY
	  #define RTE_HLA_EXP_DAY	(0U)
	#endif
	#ifndef   RTE_HLA_EXP_NIGHT
	  #define RTE_HLA_EXP_NIGHT	(1U)
	#endif

	#ifndef   RTE_HLA_BAYERPATTERN_RGGB
	  #define RTE_HLA_BAYERPATTERN_RGGB	(0U)
	#endif
	#ifndef   RTE_HLA_BAYERPATTERN_GRBG
	  #define RTE_HLA_BAYERPATTERN_GRBG	(1U)
	#endif
	#ifndef   RTE_HLA_BAYERPATTERN_GBRG
	  #define RTE_HLA_BAYERPATTERN_GBRG	(2U)
	#endif
	#ifndef   RTE_HLA_BAYERPATTERN_BGGR
	  #define RTE_HLA_BAYERPATTERN_BGGR	(3U)
	#endif

	#ifndef   RTE_HLA_BRT_IDLE
	  #define RTE_HLA_BRT_IDLE	(0U)
	#endif
	#ifndef   RTE_HLA_BRT_DAY
	  #define RTE_HLA_BRT_DAY	(1U)
	#endif
	#ifndef   RTE_HLA_BRT_TWLGT_1
	  #define RTE_HLA_BRT_TWLGT_1	(2U)
	#endif
	#ifndef   RTE_HLA_BRT_TWLGT_2
	  #define RTE_HLA_BRT_TWLGT_2	(3U)
	#endif
	#ifndef   RTE_HLA_BRT_TWLGT_3
	  #define RTE_HLA_BRT_TWLGT_3	(4U)
	#endif
	#ifndef   RTE_HLA_BRT_NIGHT
	  #define RTE_HLA_BRT_NIGHT	(5U)
	#endif
	#ifndef   RTE_HLA_BRT_CLEARANCE
	  #define RTE_HLA_BRT_CLEARANCE	(249U)
	#endif
	#ifndef   RTE_HLA_BRT_BLOCKAGE
	  #define RTE_HLA_BRT_BLOCKAGE	(250U)
	#endif
	#ifndef   RTE_HLA_BRT_32BIT
	  #define RTE_HLA_BRT_32BIT	(2147483647U)
	#endif

	#ifndef   RTE_HLA_CITY_IDLE
	  #define RTE_HLA_CITY_IDLE	(0U)
	#endif
	#ifndef   RTE_HLA_CITY_DETECTED
	  #define RTE_HLA_CITY_DETECTED	(1U)
	#endif
	#ifndef   RTE_HLA_CITY_MAYBE
	  #define RTE_HLA_CITY_MAYBE	(2U)
	#endif
	#ifndef   RTE_HLA_CITY_32BIT
	  #define RTE_HLA_CITY_32BIT	(2147483647U)
	#endif

	#ifndef   RTE_HLA_DRVDIR_IDLE
	  #define RTE_HLA_DRVDIR_IDLE	(0U)
	#endif
	#ifndef   RTE_HLA_DRVDIR_ONCOMING
	  #define RTE_HLA_DRVDIR_ONCOMING	(1U)
	#endif
	#ifndef   RTE_HLA_DRVDIR_LEADING
	  #define RTE_HLA_DRVDIR_LEADING	(2U)
	#endif

	#ifndef   RTE_HLA_EXITTYPE_NONE
	  #define RTE_HLA_EXITTYPE_NONE	(0U)
	#endif
	#ifndef   RTE_HLA_EXITTYPE_SAMPLING_ABORTED
	  #define RTE_HLA_EXITTYPE_SAMPLING_ABORTED	(1U)
	#endif
	#ifndef   RTE_HLA_EXITTYPE_MAIN_TIMEOUT
	  #define RTE_HLA_EXITTYPE_MAIN_TIMEOUT	(2U)
	#endif
	#ifndef   RTE_HLA_EXITTYPE_EXTERNAL_REASON
	  #define RTE_HLA_EXITTYPE_EXTERNAL_REASON	(3U)
	#endif

	#ifndef   RTE_HLA_IC_AUTO_CTRL
	  #define RTE_HLA_IC_AUTO_CTRL	(0U)
	#endif
	#ifndef   RTE_HLA_IC_ALGO_CTRL
	  #define RTE_HLA_IC_ALGO_CTRL	(1U)
	#endif
	#ifndef   RTE_HLA_IC_FIXED_EXP_TIME
	  #define RTE_HLA_IC_FIXED_EXP_TIME	(2U)
	#endif

	#ifndef   RTE_HLA_GR_INACTIVE
	  #define RTE_HLA_GR_INACTIVE	(0U)
	#endif
	#ifndef   RTE_HLA_GR_ACTIVE
	  #define RTE_HLA_GR_ACTIVE	(1U)
	#endif
	#ifndef   RTE_HLA_GR_NDEF2
	  #define RTE_HLA_GR_NDEF2	(2U)
	#endif

	#ifndef   RTE_HLA_LMECH_UNKNOWN
	  #define RTE_HLA_LMECH_UNKNOWN	(0U)
	#endif
	#ifndef   RTE_HLA_LMECH_ROLLER
	  #define RTE_HLA_LMECH_ROLLER	(1U)
	#endif
	#ifndef   RTE_HLA_LMECH_APERTURE
	  #define RTE_HLA_LMECH_APERTURE	(2U)
	#endif
	#ifndef   RTE_HLA_LMECH_NONE
	  #define RTE_HLA_LMECH_NONE	(3U)
	#endif

	#ifndef   RTE_HLA_LMODE_UNKNOWN
	  #define RTE_HLA_LMODE_UNKNOWN	(0U)
	#endif
	#ifndef   RTE_HLA_LMODE_STANDARD
	  #define RTE_HLA_LMODE_STANDARD	(1U)
	#endif
	#ifndef   RTE_HLA_LMODE_STANDARD_PLUS
	  #define RTE_HLA_LMODE_STANDARD_PLUS	(2U)
	#endif
	#ifndef   RTE_HLA_LMODE_PLUS
	  #define RTE_HLA_LMODE_PLUS	(3U)
	#endif
	#ifndef   RTE_HLA_LMODE_LIGHT
	  #define RTE_HLA_LMODE_LIGHT	(4U)
	#endif

	#ifndef   RTE_HLA_LTYPE_UNKNOWN
	  #define RTE_HLA_LTYPE_UNKNOWN	(0U)
	#endif
	#ifndef   RTE_HLA_LTYPE_LED
	  #define RTE_HLA_LTYPE_LED	(1U)
	#endif
	#ifndef   RTE_HLA_LTYPE_XENON
	  #define RTE_HLA_LTYPE_XENON	(2U)
	#endif
	#ifndef   RTE_HLA_LTYPE_PIXEL
	  #define RTE_HLA_LTYPE_PIXEL	(3U)
	#endif
	#ifndef   RTE_HLA_LTYPE_HALOGENE
	  #define RTE_HLA_LTYPE_HALOGENE	(4U)
	#endif

	#ifndef   RTE_HLA_HB_OFF
	  #define RTE_HLA_HB_OFF	(0U)
	#endif
	#ifndef   RTE_HLA_HB_FULL_ON
	  #define RTE_HLA_HB_FULL_ON	(1U)
	#endif
	#ifndef   RTE_HLA_HB_PARTIAL
	  #define RTE_HLA_HB_PARTIAL	(2U)
	#endif
	#ifndef   RTE_HLA_HB_SPOT
	  #define RTE_HLA_HB_SPOT	(3U)
	#endif

	#ifndef   RTE_HLA_HIGHWAY_IDLE
	  #define RTE_HLA_HIGHWAY_IDLE	(0U)
	#endif
	#ifndef   RTE_HLA_NOT_HIGHWAY_DTCD
	  #define RTE_HLA_NOT_HIGHWAY_DTCD	(1U)
	#endif
	#ifndef   RTE_HLA_HIGHWAY_DTCD
	  #define RTE_HLA_HIGHWAY_DTCD	(2U)
	#endif
	#ifndef   RTE_HLA_HIGHWAY_LOW_SPEED
	  #define RTE_HLA_HIGHWAY_LOW_SPEED	(3U)
	#endif
	#ifndef   RTE_HLA_HIGHWAY_32BIT
	  #define RTE_HLA_HIGHWAY_32BIT	(2147483647U)
	#endif

	#ifndef   RTE_HLA_OCCL_IDLE
	  #define RTE_HLA_OCCL_IDLE	(0U)
	#endif
	#ifndef   RTE_HLA_NO_OCCL_DTCD
	  #define RTE_HLA_NO_OCCL_DTCD	(1U)
	#endif
	#ifndef   RTE_HLA_OCCL_DTCD
	  #define RTE_HLA_OCCL_DTCD	(2U)
	#endif
	#ifndef   RTE_HLA_OCCL_32BIT
	  #define RTE_HLA_OCCL_32BIT	(2147483647U)
	#endif

	#ifndef   RTE_HLA_RDWAY_IDLE
	  #define RTE_HLA_RDWAY_IDLE	(0U)
	#endif
	#ifndef   RTE_HLA_NORMAL_RDWAY
	  #define RTE_HLA_NORMAL_RDWAY	(1U)
	#endif
	#ifndef   RTE_HLA_DIVIDED_RDWAY
	  #define RTE_HLA_DIVIDED_RDWAY	(2U)
	#endif
	#ifndef   RTE_HLA_RDWAY_32BIT
	  #define RTE_HLA_RDWAY_32BIT	(2147483647U)
	#endif

	#ifndef   RTE_HLA_IC_PIX_OK
	  #define RTE_HLA_IC_PIX_OK	(0U)
	#endif
	#ifndef   RTE_HLA_IC_VERY_HOT_PIX
	  #define RTE_HLA_IC_VERY_HOT_PIX	(1U)
	#endif
	#ifndef   RTE_HLA_IC_VERY_BRT_PIX
	  #define RTE_HLA_IC_VERY_BRT_PIX	(2U)
	#endif
	#ifndef   RTE_HLA_IC_VERY_DRK_PIX
	  #define RTE_HLA_IC_VERY_DRK_PIX	(3U)
	#endif
	#ifndef   RTE_HLA_IC_HOT_PIX
	  #define RTE_HLA_IC_HOT_PIX	(4U)
	#endif
	#ifndef   RTE_HLA_IC_BRT_PIX
	  #define RTE_HLA_IC_BRT_PIX	(5U)
	#endif
	#ifndef   RTE_HLA_IC_DRK_PIX
	  #define RTE_HLA_IC_DRK_PIX	(6U)
	#endif
	#ifndef   RTE_HLA_IC_DYN_HOT_PIX
	  #define RTE_HLA_IC_DYN_HOT_PIX	(7U)
	#endif

	#ifndef   RTE_HLA_OPTL_OFF
	  #define RTE_HLA_OPTL_OFF	(0U)
	#endif
	#ifndef   RTE_HLA_OPTL_ON
	  #define RTE_HLA_OPTL_ON	(1U)
	#endif

	#ifndef   RTE_HLA_LTM_NAVL
	  #define RTE_HLA_LTM_NAVL	(0U)
	#endif
	#ifndef   RTE_HLA_LTM_IDLE
	  #define RTE_HLA_LTM_IDLE	(1U)
	#endif
	#ifndef   RTE_HLA_LTM_FAULT
	  #define RTE_HLA_LTM_FAULT	(2U)
	#endif
	#ifndef   RTE_HLA_LTM_DEACT
	  #define RTE_HLA_LTM_DEACT	(3U)
	#endif

	#ifndef   RTE_HLA_LIGHT_OUT_STD
	  #define RTE_HLA_LIGHT_OUT_STD	(0U)
	#endif
	#ifndef   RTE_HLA_LIGHT_OUT_MIN
	  #define RTE_HLA_LIGHT_OUT_MIN	(1U)
	#endif
	#ifndef   RTE_HLA_LIGHT_OUT_MAX
	  #define RTE_HLA_LIGHT_OUT_MAX	(2U)
	#endif

	#ifndef   RTE_HLA_LT_SYMM
	  #define RTE_HLA_LT_SYMM	(0U)
	#endif
	#ifndef   RTE_HLA_LT_COUNTRY
	  #define RTE_HLA_LT_COUNTRY	(1U)
	#endif
	#ifndef   RTE_HLA_LT_MOTORWAY
	  #define RTE_HLA_LT_MOTORWAY	(2U)
	#endif
	#ifndef   RTE_HLA_LT_PART_HIBM
	  #define RTE_HLA_LT_PART_HIBM	(3U)
	#endif
	#ifndef   RTE_HLA_LT_FULL_HIBM
	  #define RTE_HLA_LT_FULL_HIBM	(4U)
	#endif

	#ifndef   RTE_HLA_MTWY_IDLE
	  #define RTE_HLA_MTWY_IDLE	(0U)
	#endif
	#ifndef   RTE_HLA_MTWY_COUNTRY
	  #define RTE_HLA_MTWY_COUNTRY	(1U)
	#endif
	#ifndef   RTE_HLA_MTWY_MOTORWAY
	  #define RTE_HLA_MTWY_MOTORWAY	(2U)
	#endif

	#ifndef   RTE_HLA_MOVE_IDLE
	  #define RTE_HLA_MOVE_IDLE	(0U)
	#endif
	#ifndef   RTE_HLA_MOVE_FWD
	  #define RTE_HLA_MOVE_FWD	(1U)
	#endif
	#ifndef   RTE_HLA_MOVE_REV
	  #define RTE_HLA_MOVE_REV	(2U)
	#endif
	#ifndef   RTE_HLA_STAND_STILL
	  #define RTE_HLA_STAND_STILL	(3U)
	#endif

	#ifndef   RTE_HLA_RED_REFLECTOR_AREA_IDLE
	  #define RTE_HLA_RED_REFLECTOR_AREA_IDLE	(0U)
	#endif
	#ifndef   RTE_HLA_RED_REFLECTOR_AREA
	  #define RTE_HLA_RED_REFLECTOR_AREA	(1U)
	#endif
	#ifndef   RTE_HLA_RED_REFLECTOR_AREA_32BIT
	  #define RTE_HLA_RED_REFLECTOR_AREA_32BIT	(2147483647U)
	#endif

	#ifndef   RTE_HLA_SIG_INIT
	  #define RTE_HLA_SIG_INIT	(0U)
	#endif
	#ifndef   RTE_HLA_SIG_OK
	  #define RTE_HLA_SIG_OK	(1U)
	#endif
	#ifndef   RTE_HLA_SIG_NOT_OK
	  #define RTE_HLA_SIG_NOT_OK	(2U)
	#endif
	#ifndef   RTE_HLA_SIG_TIMEOUT
	  #define RTE_HLA_SIG_TIMEOUT	(3U)
	#endif
	#ifndef   RTE_HLA_SIG_OK_BUT_SENSOR_NOT_INIT
	  #define RTE_HLA_SIG_OK_BUT_SENSOR_NOT_INIT	(4U)
	#endif
	#ifndef   RTE_HLA_SIG_OUT_OF_RANGE
	  #define RTE_HLA_SIG_OUT_OF_RANGE	(5U)
	#endif

	#ifndef   RTE_HLA_SPOTLIGHT_UNKNOWN
	  #define RTE_HLA_SPOTLIGHT_UNKNOWN	(0U)
	#endif
	#ifndef   RTE_HLA_SPOTLIGHT_AVL
	  #define RTE_HLA_SPOTLIGHT_AVL	(1U)
	#endif
	#ifndef   RTE_HLA_SPOTLIGHT_NAVL
	  #define RTE_HLA_SPOTLIGHT_NAVL	(2U)
	#endif

	#ifndef   RTE_HLA_NAVL
	  #define RTE_HLA_NAVL	(0U)
	#endif
	#ifndef   RTE_HLA_IDLE
	  #define RTE_HLA_IDLE	(1U)
	#endif
	#ifndef   RTE_HLA_ACTV
	  #define RTE_HLA_ACTV	(2U)
	#endif
	#ifndef   RTE_HLA_FAULT
	  #define RTE_HLA_FAULT	(3U)
	#endif

	#ifndef   RTE_HLA_TRAFFIC_STYLE_IDLE
	  #define RTE_HLA_TRAFFIC_STYLE_IDLE	(0U)
	#endif
	#ifndef   RTE_HLA_TRAFFIC_RHD
	  #define RTE_HLA_TRAFFIC_RHD	(1U)
	#endif
	#ifndef   RTE_HLA_TRAFFIC_LHD
	  #define RTE_HLA_TRAFFIC_LHD	(2U)
	#endif
	#ifndef   RTE_HLA_TRAFFIC_32BIT
	  #define RTE_HLA_TRAFFIC_32BIT	(2147483647U)
	#endif

	#ifndef   RTE_HLA_TRAFFICSTYLE_INIT
	  #define RTE_HLA_TRAFFICSTYLE_INIT	(0U)
	#endif
	#ifndef   RTE_HLA_TRAFFICSTYLE_SCN
	  #define RTE_HLA_TRAFFICSTYLE_SCN	(1U)
	#endif
	#ifndef   RTE_HLA_TRAFFICSTYLE_LEARN
	  #define RTE_HLA_TRAFFICSTYLE_LEARN	(2U)
	#endif
	#ifndef   RTE_HLA_TRAFFICSTYLE_LAST_LEARNED
	  #define RTE_HLA_TRAFFICSTYLE_LAST_LEARNED	(3U)
	#endif
	#ifndef   RTE_HLA_TRAFFICSTYLE_32BIT
	  #define RTE_HLA_TRAFFICSTYLE_32BIT	(2147483647U)
	#endif

	#ifndef   RTE_HLA_TUNNEL_IDLE
	  #define RTE_HLA_TUNNEL_IDLE	(0U)
	#endif
	#ifndef   RTE_HLA_TUNNEL_UPFRONT
	  #define RTE_HLA_TUNNEL_UPFRONT	(1U)
	#endif
	#ifndef   RTE_HLA_TUNNEL_INSIDE
	  #define RTE_HLA_TUNNEL_INSIDE	(2U)
	#endif
	#ifndef   RTE_HLA_TUNNEL_32BIT
	  #define RTE_HLA_TUNNEL_32BIT	(2147483647U)
	#endif

	#ifndef   RTE_HLA_TYPE_NAVL
	  #define RTE_HLA_TYPE_NAVL	(0U)
	#endif
	#ifndef   RTE_HLA_TYPE_BINARY
	  #define RTE_HLA_TYPE_BINARY	(1U)
	#endif
	#ifndef   RTE_HLA_TYPE_STANDARD
	  #define RTE_HLA_TYPE_STANDARD	(2U)
	#endif
	#ifndef   RTE_HLA_TYPE_PLUS
	  #define RTE_HLA_TYPE_PLUS	(3U)
	#endif

	#ifndef   RTE_HLA_WEATHER_IDLE
	  #define RTE_HLA_WEATHER_IDLE	(0U)
	#endif
	#ifndef   RTE_HLA_WEATHER_BAD
	  #define RTE_HLA_WEATHER_BAD	(1U)
	#endif
	#ifndef   RTE_HLA_WEATHER_32BIT
	  #define RTE_HLA_WEATHER_32BIT	(2147483647U)
	#endif

	#ifndef   RTE_HLA_WTYPE_UNKNOWN
	  #define RTE_HLA_WTYPE_UNKNOWN	(0U)
	#endif
	#ifndef   RTE_HLA_WTYPE_CLEAR1
	  #define RTE_HLA_WTYPE_CLEAR1	(1U)
	#endif
	#ifndef   RTE_HLA_WTYPE_CLEAR2
	  #define RTE_HLA_WTYPE_CLEAR2	(2U)
	#endif
	#ifndef   RTE_HLA_WTYPE_GREEN
	  #define RTE_HLA_WTYPE_GREEN	(3U)
	#endif
	#ifndef   RTE_HLA_WTYPE_BLUE
	  #define RTE_HLA_WTYPE_BLUE	(4U)
	#endif

	#ifndef   RTE_HLA_WIPER_OFF
	  #define RTE_HLA_WIPER_OFF	(0U)
	#endif
	#ifndef   RTE_HLA_WIPER_INTERVAL1
	  #define RTE_HLA_WIPER_INTERVAL1	(1U)
	#endif
	#ifndef   RTE_HLA_WIPER_INTERVAL2
	  #define RTE_HLA_WIPER_INTERVAL2	(2U)
	#endif
	#ifndef   RTE_HLA_WIPER_INTERVAL3
	  #define RTE_HLA_WIPER_INTERVAL3	(3U)
	#endif
	#ifndef   RTE_HLA_WIPER_INTERVAL4
	  #define RTE_HLA_WIPER_INTERVAL4	(4U)
	#endif
	#ifndef   RTE_HLA_WIPER_STAGE1
	  #define RTE_HLA_WIPER_STAGE1	(5U)
	#endif
	#ifndef   RTE_HLA_WIPER_STAGE2
	  #define RTE_HLA_WIPER_STAGE2	(6U)
	#endif

	#ifndef   RTE_HLA_WWS_IDLE
	  #define RTE_HLA_WWS_IDLE	(0U)
	#endif
	#ifndef   RTE_HLA_WWS_TIPWIPE
	  #define RTE_HLA_WWS_TIPWIPE	(1U)
	#endif
	#ifndef   RTE_HLA_WWS_WASH
	  #define RTE_HLA_WWS_WASH	(2U)
	#endif

	#ifndef   DEM_DTC_KIND_ALL_DTCS
	  #define DEM_DTC_KIND_ALL_DTCS	(1U)
	#endif
	#ifndef   DEM_DTC_KIND_EMISSION_REL_DTCS
	  #define DEM_DTC_KIND_EMISSION_REL_DTCS	(2U)
	#endif

	#ifndef   DEM_EVENT_STATUS_PASSED
	  #define DEM_EVENT_STATUS_PASSED	(0U)
	#endif
	#ifndef   DEM_EVENT_STATUS_FAILED
	  #define DEM_EVENT_STATUS_FAILED	(1U)
	#endif
	#ifndef   DEM_EVENT_STATUS_PREPASSED
	  #define DEM_EVENT_STATUS_PREPASSED	(2U)
	#endif
	#ifndef   DEM_EVENT_STATUS_PREFAILED
	  #define DEM_EVENT_STATUS_PREFAILED	(3U)
	#endif

	#ifndef   DEM_INDICATOR_OFF
	  #define DEM_INDICATOR_OFF	(0U)
	#endif
	#ifndef   DEM_INDICATOR_CONTINUOUS
	  #define DEM_INDICATOR_CONTINUOUS	(1U)
	#endif
	#ifndef   DEM_INDICATOR_BLINKING
	  #define DEM_INDICATOR_BLINKING	(2U)
	#endif
	#ifndef   DEM_INDICATOR_BLINK_CONT
	  #define DEM_INDICATOR_BLINK_CONT	(3U)
	#endif

	#ifndef   DEM_CYCLE_STATE_START
	  #define DEM_CYCLE_STATE_START	(1U)
	#endif
	#ifndef   DEM_CYCLE_STATE_END
	  #define DEM_CYCLE_STATE_END	(2U)
	#endif

	#ifndef   RTE_CALIB_PATTERN_NIGHTVIEW
	  #define RTE_CALIB_PATTERN_NIGHTVIEW	(0U)
	#endif
	#ifndef   RTE_CALIB_PATTERN_NIGHTVIEW_BIG
	  #define RTE_CALIB_PATTERN_NIGHTVIEW_BIG	(1U)
	#endif

	#ifndef   HEAT_SWITCH_OFF
	  #define HEAT_SWITCH_OFF	(0U)
	#endif
	#ifndef   HEAT_SWITCH_ON
	  #define HEAT_SWITCH_ON	(1U)
	#endif
	#ifndef   HEAT_SWITCH_AUTOMATIC
	  #define HEAT_SWITCH_AUTOMATIC	(2U)
	#endif
	#ifndef   HEAT_SWITCH_OFF_FORCED
	  #define HEAT_SWITCH_OFF_FORCED	(3U)
	#endif
	#ifndef   HEAT_SWITCH_ON_FORCED
	  #define HEAT_SWITCH_ON_FORCED	(4U)
	#endif

	#ifndef   RTE_ALDW_VIB_MOT_LEFT
	  #define RTE_ALDW_VIB_MOT_LEFT	(0U)
	#endif
	#ifndef   RTE_ALDW_VIB_MOT_RIGHT
	  #define RTE_ALDW_VIB_MOT_RIGHT	(1U)
	#endif

	#ifndef   RTE_ALGO_MODE_NORMAL
	  #define RTE_ALGO_MODE_NORMAL	(0U)
	#endif
	#ifndef   RTE_ALGO_MODE_DEBUG
	  #define RTE_ALGO_MODE_DEBUG	(1U)
	#endif

	#ifndef   RTE_TSA_DISP_TEST_ON_ALL_SIGNS
	  #define RTE_TSA_DISP_TEST_ON_ALL_SIGNS	(0U)
	#endif
	#ifndef   RTE_TSA_DISP_TEST_OFF
	  #define RTE_TSA_DISP_TEST_OFF	(255U)
	#endif

	#ifndef   e_MODE_DEV
	  #define e_MODE_DEV	(0U)
	#endif
	#ifndef   e_MODE_EOL
	  #define e_MODE_EOL	(1U)
	#endif

	#ifndef   HEAT_RQ_OFF
	  #define HEAT_RQ_OFF	(0U)
	#endif
	#ifndef   HEAT_RQ_ON
	  #define HEAT_RQ_ON	(1U)
	#endif

	#ifndef   RTE_E_FRAME_TYPE_EVEN
	  #define RTE_E_FRAME_TYPE_EVEN	(0U)
	#endif
	#ifndef   RTE_E_FRAME_TYPE_ODD
	  #define RTE_E_FRAME_TYPE_ODD	(1U)
	#endif

	#ifndef   RTE_E_IMAGER_CFA_UNKNOWN
	  #define RTE_E_IMAGER_CFA_UNKNOWN	(0U)
	#endif
	#ifndef   RTE_E_IMAGER_CFA_CCCC
	  #define RTE_E_IMAGER_CFA_CCCC	(1U)
	#endif
	#ifndef   RTE_E_IMAGER_CFA_RGGB
	  #define RTE_E_IMAGER_CFA_RGGB	(2U)
	#endif
	#ifndef   RTE_E_IMAGER_CFA_BGGR
	  #define RTE_E_IMAGER_CFA_BGGR	(3U)
	#endif
	#ifndef   RTE_E_IMAGER_CFA_GRBG
	  #define RTE_E_IMAGER_CFA_GRBG	(4U)
	#endif
	#ifndef   RTE_E_IMAGER_CFA_GBRG
	  #define RTE_E_IMAGER_CFA_GBRG	(5U)
	#endif
	#ifndef   RTE_E_IMAGER_CFA_RCGB
	  #define RTE_E_IMAGER_CFA_RCGB	(6U)
	#endif
	#ifndef   RTE_E_IMAGER_CFA_GBRC
	  #define RTE_E_IMAGER_CFA_GBRC	(7U)
	#endif
	#ifndef   RTE_E_IMAGER_CFA_CRBG
	  #define RTE_E_IMAGER_CFA_CRBG	(8U)
	#endif
	#ifndef   RTE_E_IMAGER_CFA_BGCR
	  #define RTE_E_IMAGER_CFA_BGCR	(9U)
	#endif

	#ifndef   RTE_E_IC_SCHEMA_SINGLE_FRAME
	  #define RTE_E_IC_SCHEMA_SINGLE_FRAME	(0U)
	#endif
	#ifndef   RTE_E_IC_SCHEMA_DOUBLE_AT_NIGHT
	  #define RTE_E_IC_SCHEMA_DOUBLE_AT_NIGHT	(1U)
	#endif
	#ifndef   RTE_E_IC_SCHEMA_DOUBLE_AT_DAY
	  #define RTE_E_IC_SCHEMA_DOUBLE_AT_DAY	(2U)
	#endif
	#ifndef   RTE_E_IC_SCHEMA_DOUBLE_AT_UNKNOWN
	  #define RTE_E_IC_SCHEMA_DOUBLE_AT_UNKNOWN	(3U)
	#endif

	#ifndef   RTE_ICA_e_IMAGER_TYPE_RIGHT
	  #define RTE_ICA_e_IMAGER_TYPE_RIGHT	(0U)
	#endif
	#ifndef   RTE_ICA_e_IMAGER_TYPE_LEFT
	  #define RTE_ICA_e_IMAGER_TYPE_LEFT	(1U)
	#endif

	#ifndef   RTE_IC_e_DCG_LOW
	  #define RTE_IC_e_DCG_LOW	(0U)
	#endif
	#ifndef   RTE_IC_e_DCG_HIGH
	  #define RTE_IC_e_DCG_HIGH	(1U)
	#endif

	#ifndef   RTE_IC_e_INTRADAY_STATE_NIGHT
	  #define RTE_IC_e_INTRADAY_STATE_NIGHT	(0U)
	#endif
	#ifndef   RTE_IC_e_INTRADAY_STATE_DAY
	  #define RTE_IC_e_INTRADAY_STATE_DAY	(1U)
	#endif

	#ifndef   IGN_LOCK
	  #define IGN_LOCK	(0U)
	#endif
	#ifndef   IGN_OFF
	  #define IGN_OFF	(1U)
	#endif
	#ifndef   IGN_ACC
	  #define IGN_ACC	(2U)
	#endif
	#ifndef   IGN_ON
	  #define IGN_ON	(4U)
	#endif
	#ifndef   IGN_START
	  #define IGN_START	(5U)
	#endif

	#ifndef   RTE_NONE
	  #define RTE_NONE	(0U)
	#endif
	#ifndef   RTE_LEFT
	  #define RTE_LEFT	(1U)
	#endif
	#ifndef   RTE_RIGHT
	  #define RTE_RIGHT	(2U)
	#endif
	#ifndef   RTE_BOTH
	  #define RTE_BOTH	(3U)
	#endif

	#ifndef   RTE_LANESTAT_INVLD
	  #define RTE_LANESTAT_INVLD	(0U)
	#endif
	#ifndef   RTE_VLD_MARK_DIFF
	  #define RTE_VLD_MARK_DIFF	(1U)
	#endif
	#ifndef   RTE_VLD_MARK_SAME
	  #define RTE_VLD_MARK_SAME	(2U)
	#endif

	#ifndef   RTE_YAWSTAT_INVLD
	  #define RTE_YAWSTAT_INVLD	(0U)
	#endif
	#ifndef   RTE_VLD_ONLY_SAME_SIDE
	  #define RTE_VLD_ONLY_SAME_SIDE	(1U)
	#endif
	#ifndef   RTE_VLD_ONLY_DIFF_SIDE
	  #define RTE_VLD_ONLY_DIFF_SIDE	(2U)
	#endif
	#ifndef   RTE_VLD_MULTI_LINE
	  #define RTE_VLD_MULTI_LINE	(3U)
	#endif

	#ifndef   NM_DEACTIVATION_ACTIVE
	  #define NM_DEACTIVATION_ACTIVE	(0U)
	#endif
	#ifndef   NM_DEACTIVATION_OFF
	  #define NM_DEACTIVATION_OFF	(1U)
	#endif

	#ifndef   SYS_OS_TASK_IDLE
	  #define SYS_OS_TASK_IDLE	(0U)
	#endif
	#ifndef   SYS_OS_TSK_RE_1
	  #define SYS_OS_TSK_RE_1	(1U)
	#endif
	#ifndef   SYS_OS_TSK_RE_2
	  #define SYS_OS_TSK_RE_2	(2U)
	#endif
	#ifndef   SYS_OS_TSK_RE_3
	  #define SYS_OS_TSK_RE_3	(3U)
	#endif
	#ifndef   SYS_OS_TSK_RE_4
	  #define SYS_OS_TSK_RE_4	(4U)
	#endif
	#ifndef   SYS_OS_TSK_RE_5
	  #define SYS_OS_TSK_RE_5	(5U)
	#endif
	#ifndef   SYS_OS_TSK_RE_6
	  #define SYS_OS_TSK_RE_6	(6U)
	#endif
	#ifndef   SYS_OS_TSK_RE_7
	  #define SYS_OS_TSK_RE_7	(7U)
	#endif
	#ifndef   SYS_OS_TSK_RE_8
	  #define SYS_OS_TSK_RE_8	(8U)
	#endif
	#ifndef   SYS_OS_TSK_RE_9
	  #define SYS_OS_TSK_RE_9	(9U)
	#endif
	#ifndef   SYS_OS_TSK_RE_10
	  #define SYS_OS_TSK_RE_10	(10U)
	#endif
	#ifndef   SYS_OS_TSK_RE_11
	  #define SYS_OS_TSK_RE_11	(11U)
	#endif
	#ifndef   SYS_OS_TSK_RE_12
	  #define SYS_OS_TSK_RE_12	(12U)
	#endif

	#ifndef   SWCDEMSC_STAT_FL_REPORT_CYCLIC
	  #define SWCDEMSC_STAT_FL_REPORT_CYCLIC	(0U)
	#endif
	#ifndef   SWCDEMSC_STAT_FL_REPORT_EVENT
	  #define SWCDEMSC_STAT_FL_REPORT_EVENT	(1U)
	#endif
	#ifndef   SWCDEMSC_STAT_FL_REPORT_INVALID
	  #define SWCDEMSC_STAT_FL_REPORT_INVALID	(255U)
	#endif

	#ifndef   SWCDEMSC_E_OK
	  #define SWCDEMSC_E_OK	(0U)
	#endif
	#ifndef   SWCDEMSC_E_NOT_OK
	  #define SWCDEMSC_E_NOT_OK	(1U)
	#endif
	#ifndef   SWCDEMSC_E_INVALID
	  #define SWCDEMSC_E_INVALID	(255U)
	#endif

	#ifndef   I_C02_TRANSMD_STAT_OFF
	  #define I_C02_TRANSMD_STAT_OFF	(0U)
	#endif
	#ifndef   I_C02_TRANSMD_STAT_TEMP_OFF
	  #define I_C02_TRANSMD_STAT_TEMP_OFF	(1U)
	#endif
	#ifndef   I_C02_TRANSMD_STAT_ACTV
	  #define I_C02_TRANSMD_STAT_ACTV	(2U)
	#endif
	#ifndef   I_C02_TRANSMD_STAT_SNA
	  #define I_C02_TRANSMD_STAT_SNA	(3U)
	#endif

	#ifndef   I_C03_ENGRUN_STAT_STOP
	  #define I_C03_ENGRUN_STAT_STOP	(0U)
	#endif
	#ifndef   I_C03_ENGRUN_STAT_START
	  #define I_C03_ENGRUN_STAT_START	(1U)
	#endif
	#ifndef   I_C03_ENGRUN_STAT_IDLE_UNSTBL
	  #define I_C03_ENGRUN_STAT_IDLE_UNSTBL	(2U)
	#endif
	#ifndef   I_C03_ENGRUN_STAT_IDLE_STBL
	  #define I_C03_ENGRUN_STAT_IDLE_STBL	(3U)
	#endif
	#ifndef   I_C03_ENGRUN_STAT_UNLIMITED
	  #define I_C03_ENGRUN_STAT_UNLIMITED	(4U)
	#endif
	#ifndef   I_C03_ENGRUN_STAT_LIMITED
	  #define I_C03_ENGRUN_STAT_LIMITED	(5U)
	#endif
	#ifndef   I_C03_ENGRUN_STAT_NDEF6
	  #define I_C03_ENGRUN_STAT_NDEF6	(6U)
	#endif
	#ifndef   I_C03_ENGRUN_STAT_SNA
	  #define I_C03_ENGRUN_STAT_SNA	(7U)
	#endif

	#ifndef   I_C03_ISW_STAT_IGN_LOCK
	  #define I_C03_ISW_STAT_IGN_LOCK	(0U)
	#endif
	#ifndef   I_C03_ISW_STAT_IGN_OFF
	  #define I_C03_ISW_STAT_IGN_OFF	(1U)
	#endif
	#ifndef   I_C03_ISW_STAT_IGN_ACC
	  #define I_C03_ISW_STAT_IGN_ACC	(2U)
	#endif
	#ifndef   I_C03_ISW_STAT_IGN_ON
	  #define I_C03_ISW_STAT_IGN_ON	(4U)
	#endif
	#ifndef   I_C03_ISW_STAT_IGN_START
	  #define I_C03_ISW_STAT_IGN_START	(5U)
	#endif
	#ifndef   I_C03_ISW_STAT_SNA
	  #define I_C03_ISW_STAT_SNA	(7U)
	#endif

	#ifndef   RTE_ALGO_VERSION_INFO_MAX_LENGTH
	  #define RTE_ALGO_VERSION_INFO_MAX_LENGTH	(51)
	#endif
	#ifndef   RTE_DB_IMAGE_REGISTER_MAX_NUM
	  #define RTE_DB_IMAGE_REGISTER_MAX_NUM	(100)
	#endif

	#ifndef   ENGRUN_STOP
	  #define ENGRUN_STOP	(0U)
	#endif
	#ifndef   ENGRUN_START
	  #define ENGRUN_START	(1U)
	#endif
	#ifndef   ENGRUN_IDLE_UNSTABLE
	  #define ENGRUN_IDLE_UNSTABLE	(2U)
	#endif
	#ifndef   ENGRUN_IDLE_STABLE
	  #define ENGRUN_IDLE_STABLE	(3U)
	#endif
	#ifndef   ENGRUN_UNLIMITED
	  #define ENGRUN_UNLIMITED	(4U)
	#endif
	#ifndef   ENGRUN_LIMITED
	  #define ENGRUN_LIMITED	(5U)
	#endif
	#ifndef   ENGRUN_NDEF
	  #define ENGRUN_NDEF	(6U)
	#endif
	#ifndef   ENGRUN_SNA
	  #define ENGRUN_SNA	(7U)
	#endif

	#ifndef   RTE_SIG_INIT
	  #define RTE_SIG_INIT	(0U)
	#endif
	#ifndef   RTE_SIG_OK
	  #define RTE_SIG_OK	(1U)
	#endif
	#ifndef   RTE_SIG_NOT_OK
	  #define RTE_SIG_NOT_OK	(2U)
	#endif
	#ifndef   RTE_SIG_TIMEOUT
	  #define RTE_SIG_TIMEOUT	(3U)
	#endif
	#ifndef   RTE_SIG_OK_BUT_SENSOR_NOT_INIT
	  #define RTE_SIG_OK_BUT_SENSOR_NOT_INIT	(4U)
	#endif
	#ifndef   RTE_SIG_OUT_OF_RANGE
	  #define RTE_SIG_OUT_OF_RANGE	(5U)
	#endif

	#ifndef   WPRSW6POSN_OFF
	  #define WPRSW6POSN_OFF	(0U)
	#endif
	#ifndef   WPRSW6POSN_INTERVAL1
	  #define WPRSW6POSN_INTERVAL1	(1U)
	#endif
	#ifndef   WPRSW6POSN_INTERVAL2
	  #define WPRSW6POSN_INTERVAL2	(2U)
	#endif
	#ifndef   WPRSW6POSN_INTERVAL3
	  #define WPRSW6POSN_INTERVAL3	(3U)
	#endif
	#ifndef   WPRSW6POSN_INTERVAL4
	  #define WPRSW6POSN_INTERVAL4	(4U)
	#endif
	#ifndef   WPRSW6POSN_STAGE1
	  #define WPRSW6POSN_STAGE1	(5U)
	#endif
	#ifndef   WPRSW6POSN_STAGE2
	  #define WPRSW6POSN_STAGE2	(6U)
	#endif
	#ifndef   WPRSW6POSN_SNA
	  #define WPRSW6POSN_SNA	(7U)
	#endif

	#ifndef   NOT_PRESSED
	  #define NOT_PRESSED	(0U)
	#endif
	#ifndef   TIPWIPE
	  #define TIPWIPE	(1U)
	#endif
	#ifndef   WASH
	  #define WASH	(2U)
	#endif

	#ifndef   RTE_FALSE
	  #define RTE_FALSE	(0U)
	#endif
	#ifndef   RTE_TRUE
	  #define RTE_TRUE	(1U)
	#endif
	#ifndef   RTE_NOT_TESTED
	  #define RTE_NOT_TESTED	(2U)
	#endif

	#ifndef   RTE_MCU_ALGO_VERSION_HLA
	  #define RTE_MCU_ALGO_VERSION_HLA	(0U)
	#endif
	#ifndef   RTE_MCU_ALGO_VERSION_LD
	  #define RTE_MCU_ALGO_VERSION_LD	(1U)
	#endif
	#ifndef   RTE_MCU_ALGO_VERSION_VLN
	  #define RTE_MCU_ALGO_VERSION_VLN	(2U)
	#endif
	#ifndef   RTE_MCU_ALGO_VERSION_ALDW
	  #define RTE_MCU_ALGO_VERSION_ALDW	(3U)
	#endif
	#ifndef   RTE_MCU_ALGO_VERSION_CB
	  #define RTE_MCU_ALGO_VERSION_CB	(4U)
	#endif
	#ifndef   RTE_MCU_ALGO_VERSION_VDY
	  #define RTE_MCU_ALGO_VERSION_VDY	(5U)
	#endif
	#ifndef   RTE_MCU_ALGO_VERSION_TSA
	  #define RTE_MCU_ALGO_VERSION_TSA	(6U)
	#endif
	#ifndef   RTE_MCU_ALGO_VERSION_MAP
	  #define RTE_MCU_ALGO_VERSION_MAP	(7U)
	#endif
	#ifndef   RTE_MCU_ALGO_VERSION_NVM
	  #define RTE_MCU_ALGO_VERSION_NVM	(8U)
	#endif
	#ifndef   RTE_MCU_ALGO_VERSION_IC
	  #define RTE_MCU_ALGO_VERSION_IC	(9U)
	#endif
	#ifndef   RTE_DSPMONO_SW_VERSION
	  #define RTE_DSPMONO_SW_VERSION	(10U)
	#endif
	#ifndef   RTE_DSPMONO_ALGO_VERSION_LR
	  #define RTE_DSPMONO_ALGO_VERSION_LR	(11U)
	#endif
	#ifndef   RTE_DSPMONO_ALGO_VERSION_SR
	  #define RTE_DSPMONO_ALGO_VERSION_SR	(12U)
	#endif
	#ifndef   RTE_DSPSTEREO_SW_VERSION
	  #define RTE_DSPSTEREO_SW_VERSION	(13U)
	#endif
	#ifndef   RTE_DSPSTEREO_ALGO_VERSION_SAC
	  #define RTE_DSPSTEREO_ALGO_VERSION_SAC	(14U)
	#endif
	#ifndef   RTE_DSPSTEREO_ALGO_VERSION_FOD
	  #define RTE_DSPSTEREO_ALGO_VERSION_FOD	(15U)
	#endif
	#ifndef   RTE_DSPSTEREO_ALGO_VERSION_POD
	  #define RTE_DSPSTEREO_ALGO_VERSION_POD	(16U)
	#endif
	#ifndef   RTE_DSPSTEREO_ALGO_VERSION_PV
	  #define RTE_DSPSTEREO_ALGO_VERSION_PV	(17U)
	#endif
	#ifndef   RTE_DSPSTEREO_ALGO_VERSION_STEREOLANE
	  #define RTE_DSPSTEREO_ALGO_VERSION_STEREOLANE	(18U)
	#endif
	#ifndef   RTE_DSPSTEREO_ALGO_VERSION_PED_PRE
	  #define RTE_DSPSTEREO_ALGO_VERSION_PED_PRE	(19U)
	#endif
	#ifndef   RTE_DSPSTEREO_ALGO_VERSION_PED_POST
	  #define RTE_DSPSTEREO_ALGO_VERSION_PED_POST	(20U)
	#endif
	#ifndef   RTE_DSPSTEREO_ALGO_VERSION_SCB
	  #define RTE_DSPSTEREO_ALGO_VERSION_SCB	(21U)
	#endif
	#ifndef   RTE_FPGA_SW_VERSION
	  #define RTE_FPGA_SW_VERSION	(22U)
	#endif

	#ifndef   RTE_DATA_NOT_OK
	  #define RTE_DATA_NOT_OK	(0U)
	#endif
	#ifndef   RTE_DATA_OK
	  #define RTE_DATA_OK	(1U)
	#endif


	#ifndef   DB_LD_INTERFACE_MAX_NUM_MARKERS_PER_SIDE
	  #define DB_LD_INTERFACE_MAX_NUM_MARKERS_PER_SIDE	(3)
	#endif
	#ifndef   DB_POD_MAXNUMOBJS
	  #define DB_POD_MAXNUMOBJS	(3)
	#endif
	#ifndef   DB_POD_MAX_NUM_RADAR_OBJECTS
	  #define DB_POD_MAX_NUM_RADAR_OBJECTS	(3)
	#endif
	#ifndef   DB_SAC_NUM_ROT_ANGLES
	  #define DB_SAC_NUM_ROT_ANGLES	(3)
	#endif
	#ifndef   DB_SLE_INTERFACE_MAX_NUM_MARKERS_PER_SIDE
	  #define DB_SLE_INTERFACE_MAX_NUM_MARKERS_PER_SIDE	(3)
	#endif
	#ifndef   DB_SLE_INTERFACE_MAX_NUM_MARKERS_PER_SIDE_2
	  #define DB_SLE_INTERFACE_MAX_NUM_MARKERS_PER_SIDE_2	(6)
	#endif
	#ifndef   DB_LD_INTERFACE_MAX_NUM_MARKERS_PER_SIDE_2
	  #define DB_LD_INTERFACE_MAX_NUM_MARKERS_PER_SIDE_2	(6)
	#endif
	#ifndef   DB_LD_INTERFACE_NUM_MARKERS
	  #define DB_LD_INTERFACE_NUM_MARKERS	(7)
	#endif
	#ifndef   DB_SR_NUMBER_OBJECTS
	  #define DB_SR_NUMBER_OBJECTS	(8)
	#endif
	#ifndef   DB_SAC_NUM_ROT_MAT_RL_ENTRIES
	  #define DB_SAC_NUM_ROT_MAT_RL_ENTRIES	(9)
	#endif
	#ifndef   DB_SAC_MAX_NUM_TEPERATURES
	  #define DB_SAC_MAX_NUM_TEPERATURES	(10)
	#endif
	#ifndef   DB_ECU_SERIAL_NO_LENGHT
	  #define DB_ECU_SERIAL_NO_LENGHT	(14)
	#endif
	#ifndef   DB_FOD_MAXNUMOBJS
	  #define DB_FOD_MAXNUMOBJS	(14)
	#endif
	#ifndef   DB_TRANS_TYPE_VERSION
	  #define DB_TRANS_TYPE_VERSION	(16)
	#endif
	#ifndef   DB_SAC_TEMPMOD_ANGLE_NO_NODES
	  #define DB_SAC_TEMPMOD_ANGLE_NO_NODES	(16)
	#endif
	#ifndef   DB_SAC_MAX_NUM_THRESHOLD_QUALITY
	  #define DB_SAC_MAX_NUM_THRESHOLD_QUALITY	(20)
	#endif
	#ifndef   DB_SLE_INTERFACE_NUM_MARKER_SAMPLE_POINTS
	  #define DB_SLE_INTERFACE_NUM_MARKER_SAMPLE_POINTS	(20)
	#endif
	#ifndef   DB_SR_NUMBER_PERS_STATE_FV
	  #define DB_SR_NUMBER_PERS_STATE_FV	(28)
	#endif
	#ifndef   DB_LD_INTERFACE_MAX_MARKERFEATURES
	  #define DB_LD_INTERFACE_MAX_MARKERFEATURES	(50)
	#endif
	#ifndef   DB_PV_MAX_NUM_REL_PROFILE_POINTS_PER_TRACK
	  #define DB_PV_MAX_NUM_REL_PROFILE_POINTS_PER_TRACK	(72)
	#endif
	#ifndef   DB_SR_NUMBER_PERS_STATE_FP
	  #define DB_SR_NUMBER_PERS_STATE_FP	(80)
	#endif
	#ifndef   DB_IMAGE_REGISTER_MAX_NUM
	  #define DB_IMAGE_REGISTER_MAX_NUM	(100)
	#endif
	#ifndef   DB_PV_NUMBER_EGO_LOGGINGS
	  #define DB_PV_NUMBER_EGO_LOGGINGS	(146)
	#endif

	#ifndef   e_AL_SIG_STATE_INIT
	  #define e_AL_SIG_STATE_INIT	(0U)
	#endif
	#ifndef   e_AL_SIG_STATE_OK
	  #define e_AL_SIG_STATE_OK	(1U)
	#endif
	#ifndef   e_AL_SIG_STATE_INVALID
	  #define e_AL_SIG_STATE_INVALID	(2U)
	#endif

	#ifndef   e_INVALID
	  #define e_INVALID	(0U)
	#endif
	#ifndef   e_SIGTYPE_TACHO_SPEED
	  #define e_SIGTYPE_TACHO_SPEED	(1U)
	#endif
	#ifndef   e_WHEEL_COUNTER_FL
	  #define e_WHEEL_COUNTER_FL	(2U)
	#endif
	#ifndef   e_WHEEL_COUNTER_FR
	  #define e_WHEEL_COUNTER_FR	(3U)
	#endif
	#ifndef   e_WHEEL_COUNTER_RL
	  #define e_WHEEL_COUNTER_RL	(4U)
	#endif
	#ifndef   e_WHEEL_COUNTER_RR
	  #define e_WHEEL_COUNTER_RR	(5U)
	#endif
	#ifndef   e_WHEEL_FREQ_FL
	  #define e_WHEEL_FREQ_FL	(6U)
	#endif
	#ifndef   e_WHEEL_FREQ_FR
	  #define e_WHEEL_FREQ_FR	(7U)
	#endif
	#ifndef   e_WHEEL_FREQ_RL
	  #define e_WHEEL_FREQ_RL	(8U)
	#endif
	#ifndef   e_WHEEL_FREQ_RR
	  #define e_WHEEL_FREQ_RR	(9U)
	#endif
	#ifndef   e_WHEEL_DIR_FL
	  #define e_WHEEL_DIR_FL	(10U)
	#endif
	#ifndef   e_WHEEL_DIR_FR
	  #define e_WHEEL_DIR_FR	(11U)
	#endif
	#ifndef   e_WHEEL_DIR_RL
	  #define e_WHEEL_DIR_RL	(12U)
	#endif
	#ifndef   e_WHEEL_DIR_RR
	  #define e_WHEEL_DIR_RR	(13U)
	#endif
	#ifndef   e_WHEEL_CIRCUMFENCE_FL
	  #define e_WHEEL_CIRCUMFENCE_FL	(14U)
	#endif
	#ifndef   e_WHEEL_CIRCUMFENCE_FR
	  #define e_WHEEL_CIRCUMFENCE_FR	(15U)
	#endif
	#ifndef   e_WHEEL_CIRCUMFENCE_RL
	  #define e_WHEEL_CIRCUMFENCE_RL	(16U)
	#endif
	#ifndef   e_WHEEL_CIRCUMFENCE_RR
	  #define e_WHEEL_CIRCUMFENCE_RR	(17U)
	#endif
	#ifndef   e_SIGTYPE_FRONT_WHEEL_ANGLE
	  #define e_SIGTYPE_FRONT_WHEEL_ANGLE	(18U)
	#endif
	#ifndef   e_SIGTYPE_FRONT_WHEEL_ANGLE_OFFSET
	  #define e_SIGTYPE_FRONT_WHEEL_ANGLE_OFFSET	(19U)
	#endif
	#ifndef   e_YAWRATE_RAW
	  #define e_YAWRATE_RAW	(20U)
	#endif
	#ifndef   e_YAWRATE_OFFSET
	  #define e_YAWRATE_OFFSET	(21U)
	#endif
	#ifndef   e_SIGTYPE_ACCEL_X
	  #define e_SIGTYPE_ACCEL_X	(22U)
	#endif
	#ifndef   e_SIGTYPE_ACCEL_X_OFFSET
	  #define e_SIGTYPE_ACCEL_X_OFFSET	(23U)
	#endif
	#ifndef   e_SIGTYPE_ACCEL_Y
	  #define e_SIGTYPE_ACCEL_Y	(24U)
	#endif
	#ifndef   e_SIGTYPE_ACCEL_Y_OFFSET
	  #define e_SIGTYPE_ACCEL_Y_OFFSET	(25U)
	#endif
	#ifndef   e_STEERING_WHEEL_ANGLE
	  #define e_STEERING_WHEEL_ANGLE	(26U)
	#endif
	#ifndef   e_STEERING_WHEEL_ANGLE_VELOCITY
	  #define e_STEERING_WHEEL_ANGLE_VELOCITY	(27U)
	#endif
	#ifndef   e_STEERING_WHEEL_ANGLE_OFFSET
	  #define e_STEERING_WHEEL_ANGLE_OFFSET	(28U)
	#endif
	#ifndef   e_SIGTYPE_VEH_ACCEL_VERT
	  #define e_SIGTYPE_VEH_ACCEL_VERT	(29U)
	#endif
	#ifndef   e_SIGTYPE_VEH_ACCEL_PITCH
	  #define e_SIGTYPE_VEH_ACCEL_PITCH	(30U)
	#endif
	#ifndef   e_SIGTYPE_VEH_ACCEL_ROLL
	  #define e_SIGTYPE_VEH_ACCEL_ROLL	(31U)
	#endif
	#ifndef   e_SIGTYPE_VEH_SIDE_SLIP_ANGLE_GRADIENT
	  #define e_SIGTYPE_VEH_SIDE_SLIP_ANGLE_GRADIENT	(32U)
	#endif
	#ifndef   e_MAX_NO_SIGNALS
	  #define e_MAX_NO_SIGNALS	(33U)
	#endif

	#ifndef   e_EGO_LOG_SIGNAL_STATE_INVALID
	  #define e_EGO_LOG_SIGNAL_STATE_INVALID	(0U)
	#endif
	#ifndef   e_EGO_LOG_SIGNAL_STATE_VALID
	  #define e_EGO_LOG_SIGNAL_STATE_VALID	(1U)
	#endif

	#ifndef   e_FUSI_TEST_CHECK_DISABLE
	  #define e_FUSI_TEST_CHECK_DISABLE	(0U)
	#endif
	#ifndef   e_NO_FUSI_TEST_CHECK
	  #define e_NO_FUSI_TEST_CHECK	(0U)
	#endif
	#ifndef   e_FUSI_TEST_CHECK_FATAL_ERROR_STEREO
	  #define e_FUSI_TEST_CHECK_FATAL_ERROR_STEREO	(1U)
	#endif
	#ifndef   e_FUSI_TEST_CHECK_STEREO_CLOCK_MONITORING
	  #define e_FUSI_TEST_CHECK_STEREO_CLOCK_MONITORING	(2U)
	#endif
	#ifndef   e_HILL_SKIP_DEBAYER_TEST
	  #define e_HILL_SKIP_DEBAYER_TEST	(3U)
	#endif
	#ifndef   e_FUSI_TEST_CHECK_STEREO_IPC_CRC
	  #define e_FUSI_TEST_CHECK_STEREO_IPC_CRC	(4U)
	#endif
	#ifndef   e_FUSI_TEST_CHECK_STEREO_IPC_UPDATE
	  #define e_FUSI_TEST_CHECK_STEREO_IPC_UPDATE	(5U)
	#endif
	#ifndef   e_FUSI_TEST_CHECK_FATAL_ERROR_FPGA
	  #define e_FUSI_TEST_CHECK_FATAL_ERROR_FPGA	(16777217U)
	#endif
	#ifndef   e_FUSI_TEST_CHECK_FATAL_ERROR_MONO
	  #define e_FUSI_TEST_CHECK_FATAL_ERROR_MONO	(33554433U)
	#endif
	#ifndef   e_FUSI_TEST_CHECK_MONO_CLOCK_MONITORING
	  #define e_FUSI_TEST_CHECK_MONO_CLOCK_MONITORING	(33554434U)
	#endif
	#ifndef   e_FUSI_TEST_CHECK_MONO_IPC_CRC
	  #define e_FUSI_TEST_CHECK_MONO_IPC_CRC	(33554436U)
	#endif
	#ifndef   e_FUSI_TEST_CHECK_MONO_IPC_UPDATE
	  #define e_FUSI_TEST_CHECK_MONO_IPC_UPDATE	(33554437U)
	#endif
	#ifndef   e_FUSI_TEST_CHECK_ENABLE
	  #define e_FUSI_TEST_CHECK_ENABLE	(1515870810U)
	#endif

	#ifndef   e_IMGREGRESP_OK
	  #define e_IMGREGRESP_OK	(0U)
	#endif
	#ifndef   e_IMGREGRESP_INVALID_TAG
	  #define e_IMGREGRESP_INVALID_TAG	(1U)
	#endif
	#ifndef   e_IMGREGRESP_INVALID_ADDR
	  #define e_IMGREGRESP_INVALID_ADDR	(2U)
	#endif
	#ifndef   e_IMGREGRESP_SYSTEM_ERROR
	  #define e_IMGREGRESP_SYSTEM_ERROR	(3U)
	#endif

	#ifndef   e_MODE_MONO_INIT
	  #define e_MODE_MONO_INIT	(0U)
	#endif
	#ifndef   e_MODE_MONO_NORMAL
	  #define e_MODE_MONO_NORMAL	(1U)
	#endif
	#ifndef   e_MODE_MONO_DEGRAD
	  #define e_MODE_MONO_DEGRAD	(2U)
	#endif
	#ifndef   e_MODE_MONO_ERROR
	  #define e_MODE_MONO_ERROR	(3U)
	#endif

	#ifndef   e_MODE_STEREO_INIT
	  #define e_MODE_STEREO_INIT	(0U)
	#endif
	#ifndef   e_MODE_STEREO_PARALLEL
	  #define e_MODE_STEREO_PARALLEL	(1U)
	#endif
	#ifndef   e_MODE_STEREO_SAC_EOL_CALIB
	  #define e_MODE_STEREO_SAC_EOL_CALIB	(2U)
	#endif
	#ifndef   e_MODE_STEREO_STANDALONE
	  #define e_MODE_STEREO_STANDALONE	(3U)
	#endif
	#ifndef   e_MODE_STEREO_IMAGE_OVER_BUS
	  #define e_MODE_STEREO_IMAGE_OVER_BUS	(4U)
	#endif
	#ifndef   e_MODE_STEREO_SEND_IMAGE
	  #define e_MODE_STEREO_SEND_IMAGE	(5U)
	#endif
	#ifndef   e_MODE_STEREO_TEST_PATTERN_READY
	  #define e_MODE_STEREO_TEST_PATTERN_READY	(6U)
	#endif
	#ifndef   e_MODE_STEREO_SHUTDOWN
	  #define e_MODE_STEREO_SHUTDOWN	(7U)
	#endif
	#ifndef   e_MODE_STEREO_ERROR
	  #define e_MODE_STEREO_ERROR	(8U)
	#endif
	#ifndef   e_MODE_STEREO_SAC_DIST_TEST
	  #define e_MODE_STEREO_SAC_DIST_TEST	(9U)
	#endif

	#ifndef   e_SAC_SRC_INVALID
	  #define e_SAC_SRC_INVALID	(0U)
	#endif
	#ifndef   e_SAC_SRC_NVM
	  #define e_SAC_SRC_NVM	(20U)
	#endif
	#ifndef   e_SAC_SRC_EOL
	  #define e_SAC_SRC_EOL	(30U)
	#endif
	#ifndef   e_SAC_SRC_AUTO_CAL_COARSE
	  #define e_SAC_SRC_AUTO_CAL_COARSE	(40U)
	#endif
	#ifndef   e_SAC_SRC_AUTO_CAL_FINE
	  #define e_SAC_SRC_AUTO_CAL_FINE	(50U)
	#endif
	#ifndef   e_SAC_SRC_EOL_UPDATE
	  #define e_SAC_SRC_EOL_UPDATE	(60U)
	#endif
	#ifndef   e_SAC_SRC_EOL_UPDATE_RUNNING
	  #define e_SAC_SRC_EOL_UPDATE_RUNNING	(61U)
	#endif
	#ifndef   e_SAC_SRC_EOL_UPDATE_FINISHED
	  #define e_SAC_SRC_EOL_UPDATE_FINISHED	(62U)
	#endif
	#ifndef   e_SAC_SRC_EOL_UPDATE_FAILED
	  #define e_SAC_SRC_EOL_UPDATE_FAILED	(63U)
	#endif
	#ifndef   e_SAC_SRC_SELF_EVAL
	  #define e_SAC_SRC_SELF_EVAL	(70U)
	#endif
	#ifndef   e_SAC_SRC_TEMP_MODEL
	  #define e_SAC_SRC_TEMP_MODEL	(80U)
	#endif




/* Complex types */
typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint32 objID;                               /* object ID */
    	uint32 lifetime;                            /* [frames], lifetime of object, should be >2 for detection */
    	float32 heightBound;                         /* [m], height of bounding box */
    	float32 heightLowBound;                      /* [m], height of lower vertical bound of bounding box */
    	float32 xInbetPos;                           /* [m], position of in between point x value */
    	float32 yInbetPos;                           /* [m], position of in between point y value */
    	float32 xOutLtPos;                           /* [m], position of outermost left point x value */
    	float32 yOutLtPos;                           /* [m], position of outermost left point y value */
    	float32 xOutRtPos;                           /* [m], position of outermost right point x value */
    	float32 yOutRtPos;                           /* [m], position of outermost right point y value */
    	RTE_t_TSAIFObjEdgeFlag edgeFlagLeft;                        /* edge flag left */
    	RTE_t_TSAIFObjEdgeFlag edgeFlagRight;                       /* edge flag right */
    } RTE_t_TSAIFObject;			/* type definition for object */

typedef sint32                    	additionalInfo_array_t[2];   /* sign specific data */	/* [Satisfies_rte sws 1189] */


typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	RTE_t_TSAIFInputSRFunctionalSignClassId classId;                             /* id of the sign type */
    	additionalInfo_array_t additionalInfo;                      /* sign specific data */
    	float32 recogReliability;                    /* classification resultsum for supplementary sign */
    } RTE_t_TSAIFInputSRResultClass;			/* substruct for alternative sign result classes */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint8 value;                               /* 0 = unknown, 1 - 254 = face value, 255 = SNA */
    	RTE_t_TSAIFMapSpeedUnit unit;                                /* speed limit sign unit */
    	RTE_t_TSAIFMapSpeedLimitSignType type;                                /* speed limit sign type */
    	RTE_t_TSAIFMapSpeedLimitValidity validity;                            /* speed limit sign validity */
    	RTE_t_TSAIFMapSpeedLimitSide side;                                /* speed limit sign is expected on this side of the road */
    } RTE_t_TSAIFMapSpeedLimit;			/* current speed limit(s) */

typedef RTE_t_TSAIFMapSpeedLimit  	speedLimit_array_t_0[3];     /* next speed limit on path */	/* [Satisfies_rte sws 1189] */


typedef RTE_t_TSAIFMapSpeedLimit  	effectiveSpeedLimitPreview_array_t[8];/* upcoming speed limits on path (no parallelism, only effective) */	/* [Satisfies_rte sws 1189] */


typedef sint32                    	distToEffectiveSpeedLimit_array_t[8];/* vector with distances to respective speed limits */	/* [Satisfies_rte sws 1189] */


typedef RTE_t_TSAIFMapSpeedLimit  	visibleSpeedLimitPreview_array_t[8];/* upcoming potentially visible speed limits NOT on path (no parallelism, only effective) */	/* [Satisfies_rte sws 1189] */


typedef sint32                    	distToVisibleSpeedLimit_array_t[8];/* vector with distances to visible speed limits */	/* [Satisfies_rte sws 1189] */


typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	sint32 sec;                                 /* seconds since ECU startup */
    	sint32 usec;                                /* microseconds since ECU startup */
    } RTE_t_TSAIFInputTimestamp;			/* input data timestamp */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	RTE_t_TSAIFInputTimestamp timestamp;                           
    	RTE_t_TSAIFInputSignalState signalState;                         
    	uint8 hour;                                /* hour */
    	uint8 minute;                              /* minute */
    	uint8 second;                              /* second */
    } RTE_t_TSAIFInputTime;			/* current time of day information */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	RTE_t_TSAIFInputTimestamp timestamp;                           
    	RTE_t_TSAIFInputSignalState signalState;                         
    	float32 latit;                               /* [°], GPS longitude position */
    	float32 longit;                              /* [°], GPS latitude position */
    } RTE_t_TSAIFInputGPSPos;			/* GPS position data */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	RTE_t_TSAIFInputTimestamp timestamp;                           
    	RTE_t_TSAIFInputSignalState signalState;                         
    	uint8 day;                                 /* day of month */
    	uint8 month;                               /* month */
    	uint16 year;                                /* year */
    } RTE_t_TSAIFInputDate;			/* current day information */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	sint32 value;                               /* value of input integer data */
    	RTE_t_TSAIFInputTimestamp timestamp;                           /* timestamp for data creation */
    	RTE_t_TSAIFInputSignalState signalStateIn;                       /* state of input */
    } RTE_t_TSAIFInputInt32;			/* compound 32 bit integer input type */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	float32 value;                               /* value of input float data */
    	RTE_t_TSAIFInputTimestamp timestamp;                           /* timestamp for data creation */
    	RTE_t_TSAIFInputSignalState signalState;                         /* state of input */
    } RTE_t_TSAIFInputFloat32;			/* compound 32 bit float input type */

typedef RTE_t_TSAIFObject         	obj_array_t[14];               /* object data list */	/* [Satisfies_rte sws 1189] */


typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	RTE_t_TSAIFInputSignalState signalState;                         /* state of input */
    	RTE_t_TSAIFInputTimestamp timestamp;                           /* timestamp for data creation */
    	uint32 frameNumber;                         /* frame number of right image */
    	uint8 numberOfObjects;                     /* number of valid objects in list */
    	obj_array_t obj;                                 /* object data list */
    } RTE_t_TSAIFObjData;			/* type definition for object data */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	RTE_t_TSAIFVehTrnIndState trnIndicator;                        /* turn indicator state */
    	RTE_t_TSAIFInputTimestamp timestamp;                           /* timestamp for data creation */
    	RTE_t_TSAIFInputSignalState signalState;                         /* state of input */
    } RTE_t_TSAIFInputVehTrnIndState;			/* compound vehicle turn indicator state */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	RTE_t_TSAIFVehIgnSwState ignSwitch;                           /* ignition switch state */
    	RTE_t_TSAIFInputTimestamp timestamp;                           /* timestamp for data creation */
    	RTE_t_TSAIFInputSignalState signalState;                         /* state of input */
    } RTE_t_TSAIFInputVehIgnSwState;			/* compound vehicle ignition switch state */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	RTE_t_TSAIFVehMotionState motState;                            /* vehicle motion state */
    	RTE_t_TSAIFInputTimestamp timestamp;                           /* timestamp for data creation */
    	RTE_t_TSAIFInputSignalState signalState;                         /* state of input */
    } RTE_t_TSAIFInputVehMotionState;			/* compound vehicle motion state */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint8 wiperState;                          /* wiper state */
    	RTE_t_TSAIFInputTimestamp timestamp;                           /* timestamp for data creation */
    	RTE_t_TSAIFInputSignalState signalState;                         /* state of input */
    } RTE_t_TSAIFInputVehWiperState;			/* compound vehicle wiper state */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	RTE_t_TSAIFVehTrailerState trlrState;                           /* trailer state */
    	RTE_t_TSAIFInputTimestamp timestamp;                           /* timestamp for data creation */
    	RTE_t_TSAIFInputSignalState signalState;                         /* state of input */
    } RTE_t_TSAIFInputVehTrailerState;			/* compound vehicle trailer state */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	RTE_t_TSAIFInputFloat32 velocity;                            /* vehicle velocity */
    	RTE_t_TSAIFInputFloat32 yawrate;                             /* current yaw rate */
    	RTE_t_TSAIFInputFloat32 steerWheelAngle;                     /* current steering wheel angle */
    	RTE_t_TSAIFInputFloat32 steerWheelAngleVelocity;             /* current steering wheel angle velocity */
    	RTE_t_TSAIFInputInt32 odometer;                            /* current vehicle odometer value */
    	RTE_t_TSAIFInputVehTrnIndState turnIndicator;                       /* current turn indicator state */
    	RTE_t_TSAIFInputVehIgnSwState ignSwState;                          /* current ignition switch state */
    	RTE_t_TSAIFInputVehMotionState motionState;                         /* current vehicle motion state */
    	RTE_t_TSAIFInputFloat32 tachometerSpeed;                     /* current tachometer vehicle velocity */
    	RTE_t_TSAIFInputFloat32 airTempOutside;                      /* outside air temperature [°C] */
    	RTE_t_TSAIFInputVehWiperState wiperState;                          /* wiper state */
    	RTE_t_TSAIFInputVehTrailerState trailerState;                        /* trailer state */
    } RTE_t_TSAIFVehicleData;			/* vehicle input data */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	sint32 id;                                  /* unique id of the track */
    	RTE_t_TSAIFInputSRResultTrackState trackStatus;                         /* track status */
    	sint32 trackCharacteristics;                /* characteristics of track */
    	sint32 current;                             /* detected in current image or just tracking */
    	sint32 x;                                   /* x-coordinate of upper left corner of resulting traffic sign box in image */
    	sint32 y;                                   /* y-coordinate of upper left corner of resulting traffic sign box in image */
    	sint32 w;                                   /* width of resulting traffic sign box in image */
    	sint32 h;                                   /* height of resulting traffic sign box in image */
    	RTE_t_TSAIFInputSRResultClass mainClass;                           /* result(s) for main sign */
    	RTE_t_TSAIFInputSRResultClass supplClass;                          /* result(s) for supplementary sign */
    	float32 worldPosX;                           /* x-real world coordinate in last pic, relative to vehicle */
    	float32 worldPosY;                           /* y-real world coordinate in last pic, relative to vehicle */
    	float32 worldPosZ;                           /* z-real world coordinate in last pic, relative to vehicle */
    	float32 deltaWorldPosX;                      /* 1-sigma uncertainty on world x coordinate */
    	float32 deltaWorldPosY;                      /* 1-sigma uncertainty on world y coordinate */
    	float32 deltaWorldPosZ;                      /* 1-sigma uncertainty on world z coordinate */
    	float32 worldWidth;                          /* real world width of sign in last pic */
    	float32 worldHeight;                         /* real world height of sign in last pic */
    	float32 deltaWorldWidth;                     /* 1-sigma uncertainty on world size in last pic */
    	float32 threeDQuality;                       /* quality of threeD result */
    	sint32 wholeLength;                         /* length of track */
    } RTE_t_TSAIFInputSRResultTrack;			/* compound sign recognition track results */

typedef RTE_t_TSAIFInputSRResultTrack 	track_array_t[8];            /* current results */	/* [Satisfies_rte sws 1189] */


typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	RTE_t_TSAIFInputSRCountryTrafficStyleResult trafficStyle;                        /* the estimated traffic style */
    	RTE_t_TSAIFInputSRCountrySpeedLimitUnitResult speedUnit;                           /* the estimated speed unit */
    	sint32 countryCode;                         /* the estimated country code */
    } RTE_t_TSAIFInputSRCountryResults;			/* merged results of SR country estimation */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint32 inputImageWidth;                     /* number of horizontal pixels in input image */
    	uint32 inputImageHeight;                    /* number of vertical pixels in input image */
    	uint32 offsetX;                             /* horizontal offset of origin of ROI relative to origin of input image */
    	uint32 offsetY;                             /* vertical offset of origin of ROI relative to origin of input image */
    	uint32 width;                               /* number of horizontal pixels in ROI */
    	uint32 height;                              /* number of vertical pixels in ROI */
    	float32 pointOfExX;                          /* x coordinate of point of expansion relative to origin of input image */
    	float32 pointOfExY;                          /* y coordinate of point of expansion relative to origin of input image */
    } RTE_t_TSAIFInputSignROIInformation;			/* ROI information from SR */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	RTE_t_TSAIFInputSignalState signalState;                         /* state of input */
    	RTE_t_TSAIFInputTimestamp timestamp;                           /* timestamp for data creation */
    	uint32 frameNumber;                         /* current frame no from input for synchronizing meas packets and images */
    	RTE_t_TSAIFInputTimestamp frameTimestamp;                      /* timestamp of input image for synchronizing SR output data with other input in further components */
    	uint32 numberOfResultTracks;                /* number of active result tracks */
    	track_array_t track;                               /* current results */
    	RTE_t_TSAIFInputSRProcessState srState;                             /* current state of sign recognition process, see defines above */
    	RTE_t_TSAIFInputSRCountryResults countryResults;                      /* results of various country parameter estimations */
    	RTE_t_TSAIFInputSignROIInformation roiInformation;                      /* ROI information */
    } RTE_t_TSAIFSRData;			/* compound sign recognition input data */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	RTE_t_TSAIFMapProvider mapProvider;                         /* map supplier */
    	uint32 mapAge;                              /* in quarter years, 0 = unknown */
    	uint32 swVersion;                           /* sw version of ehorizon provider IMPORTANT, 0 = unknown */
    } RTE_t_TSAIFMapCharacteristics;			/* map characteristics */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint32 countryCode;                         /* ISO 3166 numerical, 0 = unknown */
    	uint32 regionCode;                          /* region code, 0 = unknown */
    	RTE_t_TSAIFMapTrafficStyle areaTrafficStyle;                    /* driving side */
    	RTE_t_TSAIFMapSpeedUnit areaSpeedUnit;                       /* default speed unit in country/region */
    } RTE_t_TSAIFMapAreaCharacteristics;			/* area characteristics */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	sint32 metersSinceRoadChange;               /* keep track of leave events */
    	sint32 metersSinceCountryChange;            /* keep track of country border crossings */
    	sint32 metersSinceRegionChange;             /* keep track of state/region border crossings */
    	sint32 metersSinceBuildUpAreaChange;        /* keep track of urban area border crossings */
    	sint32 metersSincePathChange;               /* keep track of path changes */
    } RTE_t_TSAIFMapPastPositionData;			/* last position data */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	RTE_t_TSAIFMapFunctionalRoadClass frc;                                 /* functional road class */
    	RTE_t_TSAIFMapNumLanesDrivingDir lanesDrivingDir;                     /* number of lanes in driving direction */
    	RTE_t_TSAIFMapNumLanesOppositeDir lanesOppositeDir;                    /* number of lanes in opposite direction */
    	RTE_t_TSAIFMapFormOfWay formOfWay;                           /* road type */
    	uint8 routeNumberType;                     /* type of route number */
    	boolean physicalSeperation;                  /* are opposite lanes physically seperated */
    } RTE_t_TSAIFMapRoadData;			/* current road data */

typedef RTE_t_TSAIFMapSpeedLimit  	speedLimit_array_t[3];       /* current speed limit(s) */	/* [Satisfies_rte sws 1189] */


typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	RTE_t_TSAIFMapRoadData roadData;                            /* current road data */
    	RTE_t_TSAIFMapLocationType locationType;                        /* current location type */
    	RTE_t_TSAIFMapBuildUpArea buildUpArea;                         /* current position is inside of a build up area */
    	speedLimit_array_t speedLimit;                          /* current speed limit(s) */
    	uint16 varSignPosition;                     /* position of variable signs */
    	boolean offroad;                             /* we are currently offroad */
    	boolean tunnel;                              /* we are currently in a tunnel */
    	boolean bridge;                              /* current location is on bridge */
    } RTE_t_TSAIFMapCurrentPositionData;			/* current position data */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	RTE_t_TSAIFMapContextChangeType contextChangeType;                   /* type of upcoming context change event                                                            a change type with zero or negative distance means that the type changed to is still valid, e.g. TSAIF_MAP_CONTEXT_CHANGE_OUTSIDE_TO_INSIDE with -2.5 meters means that we are inside the given context */
    	float32 distanceToContextChange;             /* [m], distance to next context change */
    } RTE_t_TSAIFMapContextChangeInfo;			/* compound context change input */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	RTE_t_TSAIFMapRoadData roadData;                            /* next road data */
    	sint32 distToRoadDataChange;                /* distance to change of road data */
    	RTE_t_TSAIFMapLocationType locationType;                        /* next location type */
    	sint32 distToLocationTypeChange;            /* distance to location change */
    	speedLimit_array_t_0 speedLimit;                          /* next speed limit on path */
    	sint32 distToSpeedLimitChange;              /* distance to next speed limit change on path */
    	RTE_t_TSAIFMapRoadChangeType roadChange;                          /* next road change */
    	sint32 distToRoadChange;                    /* distance to next road change */
    	RTE_t_TSAIFMapContextChangeInfo urbanAreaChangeInfo;                 /* information on upcoming urban area change event */
    	RTE_t_TSAIFMapContextChangeInfo residentialAreaChangeInfo;           /* information on upcoming residential area change event */
    	RTE_t_TSAIFMapContextChangeInfo noCircleSignContextChangeInfo;       /* information on upcoming urban area change event */
    	boolean tunnel;                              /* upcoming tunnel status */
    	sint32 distToTunnelChange;                  /* distance to change in tunnel status */
    	sint16 relativeAngle;                       /* relative angle of next segment on path, degrees [-180, 180] */
    	sint32 distToHeadingChange;                 /* distance to change of current path heading, meters */
    	boolean bridge;                              /* future location is on bridge yes/no */
    	sint32 distToBridgeChange;                  /* distance to change of bridge status */
    	effectiveSpeedLimitPreview_array_t effectiveSpeedLimitPreview;          /* upcoming speed limits on path (no parallelism, only effective) */
    	distToEffectiveSpeedLimit_array_t distToEffectiveSpeedLimit;           /* vector with distances to respective speed limits */
    	visibleSpeedLimitPreview_array_t visibleSpeedLimitPreview;            /* upcoming potentially visible speed limits NOT on path (no parallelism, only effective) */
    	distToVisibleSpeedLimit_array_t distToVisibleSpeedLimit;             /* vector with distances to visible speed limits */
    } RTE_t_TSAIFMapFuturePositionData;			/* next position data */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	RTE_t_TSAIFInputSignalState signalState;                         /* state of input */
    	RTE_t_TSAIFInputTimestamp timestamp;                           /* timestamp for data creation */
    	RTE_t_TSAIFMapCharacteristics mapCharacteristics;                  /* map characteristics */
    	RTE_t_TSAIFMapAreaCharacteristics areaCharacteristics;                 /* area characteristics */
    	RTE_t_TSAIFMapPastPositionData pastPositionData;                    /* last position data */
    	RTE_t_TSAIFMapCurrentPositionData currentPositionData;                 /* current position data */
    	RTE_t_TSAIFMapFuturePositionData futurePositionData;                  /* next position data */
    } RTE_t_TSAIFMapData;			/* compound map input data */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	RTE_t_TSAIFInputSignalState signalState;                         /* state of input */
    	RTE_t_TSAIFInputTimestamp timestamp;                           /* timestamp for data creation */
    	float32 fYEgo;                               /* Y-position relative to lane center */
    	float32 fLaneWidth;                          /* estimated lane width */
    	float32 fMarkerWidthLeft;                    /* extracted marker width to the left */
    	float32 fMarkerWidthRight;                   /* extracted marker width to the right */
    	uint32 bSystemAvailable;                    /* true if system available */
    	RTE_t_TSAIFInputLRLaneChangeState LaneChgStat;                         /* lane change state */
    	uint32 uiExitLeft;                          /* exit detection on left side */
    	uint32 uiExitRight;                         /* exit detected on right side */
    	float32 fExitLeftDistance;                   /* distance to detected exit on left side */
    	float32 fExitRightDistance;                  /* distance to detected exit on right side */
    	RTE_t_TSAIFInputLRMarkingColor LaneMarkColLt;                       /* lane mark color left */
    	RTE_t_TSAIFInputLRMarkingColor LaneMarkColRt;                       /* lane mark color right */
    	RTE_t_TSAIFInputLRMarkState LaneMarkStatLt;                      /* lane mark state left */
    	RTE_t_TSAIFInputLRMarkState LaneMarkStatRt;                      /* lane mark state right */
    	RTE_t_TSAIFInputLRMarkType LaneMarkTypeLt;                      /* lane mark type left */
    	RTE_t_TSAIFInputLRMarkType LaneMarkTypeRt;                      /* lane mark type right */
    	RTE_t_TSAIFInputLRSiteDtctStat LaneSiteDtctStat;                    /* lane site detection state */
    	uint32 uiSmoothOperation;                   /* information about continuous detection */
    } RTE_t_TSAIFLRData;			/* compound lane recognition input data */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	RTE_t_TSAIFBlockageState blockageState;                       /* blockage state */
    	uint8 statusConf;                          /* blockage state confidence */
    } RTE_t_TSAIFBlockage;			/* compound external blockage data */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	RTE_t_TSAIFInputSignalState signalState;                         /* state of input */
    	RTE_t_TSAIFInputTimestamp timestamp;                           /* timestamp for data creation */
    	RTE_t_TSAIFModeRequest slaModeRequest;                      /* driver mode request for submodule SLA */
    	sint8 slaSpdOffsetValue;                   /* speed offset value */
    	RTE_t_TSAIFSpdOffsetUnit slaSpdOffsetUnit;                    /* speed offset unit */
    	RTE_t_TSAIFModeRequest npaModeRequest;                      /* driver mode request for submodule NPA */
    	RTE_t_TSAIFModeRequest wwaModeRequest;                      /* driver mode request for submodule WWA */
    	uint8 countryConfig;                       /* country dependent TSA configuration */
    } RTE_t_TSAIFSettings;			/* compound settings */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	RTE_t_TSAIFInputSignalState signalState;                         /* state of input */
    	RTE_t_TSAIFInputTimestamp timestamp;                           /* timestamp for data creation */
    	RTE_t_IFDiagDataSrc diagRequestDataSrc;                  /* diagnosis data source request */
    	boolean diagRequestBAKTestIC;                /* diagnosis BAK display test */
    	boolean diagResetBlockageData;               /* Diagnostics reset of blockage data */
    } RTE_t_TSAIFDiag;			/* compound diagnosis input */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	float32 yaw;                                 /* yaw angle from on-line camera calibration [rad] */
    	float32 pitch;                               /* pitch angle from on-line camera calibration [rad] */
    	float32 roll;                                /* roll angle from on-line camera calibration [rad] */
    	RTE_t_TSAIFInputTimestamp timestamp;                           /* timestamp for data creation */
    	RTE_t_TSAIFInputSignalState signalState;                         /* state of input */
    } RTE_t_TSAIFOnlineCalibrationInfo;			/* compound online calibration input */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint64 tsaTriggerReference;                 /* reference identifying the current TSA cycle */
    	uint64 vdyTriggerReference;                 /* reference identifying the current VDy cycle */
    	uint64 srTriggerReference;                  /* reference identifying the current SR cycle */
    	uint64 lrTriggerReference;                  /* reference identifying the current LR cycle */
    	uint64 mapTriggerReference;                 /* reference identifying the current MAP cycle */
    	uint64 blockageTriggerReference;            /* reference identifying the current GENERIC BLOCKAGE cycle */
    	uint64 objectTriggerReference;              /* reference identifying the current SFOD cycle */
    } RTE_t_TSAIFInputTriggerReference;			/* compound trigger reference input */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	RTE_t_TSAIFInputTimestamp cycleTimestamp;                      /* system time at which the current TSA cycle is executed */
    	RTE_t_TSAIFInputDate currDate;                            /* current date */
    	RTE_t_TSAIFInputTime currTime;                            /* current time */
    	RTE_t_TSAIFInputGPSPos currGPSPos;                          /* current GPS position */
    	RTE_t_TSAIFVehicleData vehData;                             /* vehicle input data */
    	RTE_t_TSAIFSRData srData;                              /* input data from sign recognition */
    	RTE_t_TSAIFMapData mapData;                             /* input data from digital map */
    	RTE_t_TSAIFLRData lrData;                              /* input data from lane recognition */
    	RTE_t_TSAIFObjData objData;                             /* current input data from object detection */
    	RTE_t_TSAIFOnlineCalibrationInfo onlineCalibrationInfo;               /* yaw, pitch, and roll angles from on-line camera calibration [rad] */
    	RTE_t_TSAIFBlockage blockageData;                        /* input data from external blockage detection */
    	RTE_t_TSAIFSettings settings;                            /* settings */
    	RTE_t_TSAIFDiag diagReq;                             /* diagnosis request */
    	RTE_t_TSAIFModeSelect modSelect;                           /* mode selection */
    	RTE_t_TSAIFInputTriggerReference triggerReference;                    /* ECU trigger information needed for PC simulation only */
    } RTE_t_TSAIFInput;			/* compound TSA input data */

typedef uint8                     	tsaMsg_array_t[8];           /* tsa display request message */	/* [Satisfies_rte sws 1189] */


typedef uint8                     	optData_array_t[10];          /* optional (environment) data */	/* [Satisfies_rte sws 1189] */


typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	RTE_eTSAIFErrorStatus status;                              /* status of error */
    	optData_array_t optData;                             /* optional (environment) data */
    } RTE_t_TSAIFErrorListEntry;			/* external error list entry type */

typedef uint8                     	data_array_t[8192];                /* debug data memory area */	/* [Satisfies_rte sws 1189] */


typedef uint8                     	VersionInfo_array_t[51];       /* string for version information */	/* [Satisfies_rte sws 1189] */


typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	sint32 sec;                                 /* seconds since ECU startup */
    	sint32 usec;                                /* microseconds since ECU startup */
    } RTE_t_TSAIFOutputTimestamp;			/* output data timestamp */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	tsaMsg_array_t tsaMsg;                              /* tsa display request message */
    	RTE_eTSACustomSpdWarnIconDisp spdWarnIconDispRq;                   /* SLA icon */
    	RTE_eTSAIFHmiSpdWarnType spdWarnType;                         /* speed warning type */
    	uint8 spdWarnValue;                        /* speed warning value */
    	RTE_eTSAIFHmiSpdWarnDispType spdWarnDisp;                         /* speed warning display type */
    	RTE_eTSAIFHmiSpdWarnUnit spdWarnUnit;                         /* speed warning unit */
    	RTE_eTSAIFHmiTSAState tsaState;                            /* tsa state */
    	RTE_eTSAIFHmiSLAWarnReq slaWarn;                             /* sla warning */
    	RTE_eTSAIFHmiNPAWarnReq npaWarn;                             /* npa warning */
    	RTE_eTSAIFHmiNPANoPassWarnReq npaNoPassWarn;                       /* npa no passing warning */
    	RTE_eTSAIFHmiWWAWarnReq wwaWarn;                             /* wwa warning */
    	RTE_eTSAIFHmiRWFWarnReq rwfWarn;                             /* rwf warning */
    } RTE_t_TSAIFHmiOuput;			/* compound output for HMI */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	RTE_eTSAIFRWFStatus rwfStatus;                           /* status of road works */
    	uint32 rwfIndicators;                       /* indicators for recognized road works */
    } RTE_t_TSAIFRWFOuput;			/* compound output for RWF */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	boolean TSASwitchedOn;                       /* TSA is available and switched on */
    	boolean Condensation;                        /* condensation flag from TSA */
    	boolean Blockage;                            /* blockage flag from TSA */
    } RTE_t_TSAIFBlockageOutput;			/* blackage state */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint64 tsaTriggerReference;                 /* reference identifying the current TSA cycle */
    } RTE_t_TSAIFOutputTriggerReference;			/* compound trigger reference output */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint32 errors;                              /* standard system error list */
    	RTE_eTSAIFOutputProcessState state;                               /* standard system process state */
    } RTE_t_TSAIFOutputSystemInfo;			/* system data output */

typedef RTE_t_TSAIFErrorListEntry 	error_array_t[9];            /* error entries, slot positions correspond to                                                                        RTE_eTSAIFErrorId */	/* [Satisfies_rte sws 1189] */


typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	error_array_t error;                               /* error entries, slot positions correspond to                                                                        RTE_eTSAIFErrorId */
    } RTE_t_TSAIFOutputErrorList;			/* standard system error list */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint32 dataLength;                          /* data in use in bytes */
    	data_array_t data;                                /* debug data memory area */
    } RTE_t_TSAIFOutputDebugAbstract;			/* memory for debug information */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	sint32 kilometersDrivenWithCamera;          /* total number of KMs this camera has driven */
    	sint32 kilometersDrivenReadyNoPopUp;        /* number of KMs driven with ready TSA without pop-ups activated */
    	sint32 kilometersDrivenReadyWithPopUp;      /* number of KMs driven with ready TSA with pop-ups activated */
    	sint32 kilometersDrivenNotAvailable;        /* number of KMs driven with TSA permanently not available */
    	sint32 kilometersDrivenTempNotAvailable;    /* number of KMs driven with TSA temporarily not available */
    	sint32 kilometersDrivenNotAvailableCountry;  /* number of KMs driven with TSA not available in this country */
    	sint32 kilometersDrivenBlockage;            /* number of KMs driven with TSA in blockage mode */
    	sint32 kilometersDrivenToleratedBlockage;   /* number of KMs driven with TSA in tolerated blockage mode */
    	sint32 kilometersDrivenNoSLADisplay;        /* number of KMs driven without SLA ouputting a velocity to HMI */
    	sint32 kilometersDrivenSLADisplayMap;       /* number of KMs driven where SLA ouputs a velocity based on map speed */
    	sint32 kilometersDrivenSLADisplayRules;     /* number of KMs driven where SLA ouputs a velocity based on the rule database */
    	sint32 kilometersDrivenSLADisplaySign;      /* number of KMs driven where SLA ouputs a velocity based on recognised sign */
    	sint32 kilometersDrivenSLADisplayMapAndSign;  /* number of KMs driven where SLA ouputs a velocity where camera and map agreed */
    	sint32 kilometersDrivenNoNPADisplay;        /* number of KMs driven without NPA ouputting a no-passing restriction to HMI */
    	sint32 kilometersDrivenNPADisplayLane;      /* number of KMs driven where NPA ouputs a no-passing restriction based on lane input */
    	sint32 kilometersDrivenNPADisplaySign;      /* number of KMs driven where NPA ouputs a no-passing restriction based on sign input */
    	sint32 kilometersDrivenNPADisplayLaneAndSign;  /* number of KMs driven where NPA ouputs a no-passing restriction based on lane and sign input */
    	sint32 numberOfWWATriggers;                 /* number of times WWA triggered a warning */
    } RTE_t_TSADiagStatistic;			/* diagnosis statistical */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint32 VersionNumber;                       /* version number of algo */
    	VersionInfo_array_t VersionInfo;                         /* string for version information */
    } RTE_t_TSAIFAlgoVersion;			/* version information */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	RTE_t_TSAIFOutputSignalState signalState;                         /* signal state of output data */
    	RTE_t_TSAIFOutputTimestamp cycleTimestamp;                      /* system time at which the current TSA cycle was executed */
    	RTE_t_TSAIFHmiOuput hmiOutput;                           /* output of HMI data */
    	RTE_t_TSAIFRWFOuput rwfOutput;                           /* output of RWF data */
    	RTE_t_TSAIFBlockageOutput blockageOutput;                      /* output of blockage data */
    	RTE_t_TSAIFDiagOutput diagOutput;                          /* output of diagnosis data */
    	RTE_t_TSADiagStatistic diagStatistic;                       /* output of diagnosis statistic data */
    	RTE_t_TSAIFOutputTriggerReference triggerReference;                    /* ECU trigger information needed for PC simulation only */
    } RTE_t_TSAIFOutput;			/* compund struct for output of traffic sign assist */

typedef uint8                     	tsaifStateAbst_array_t[8192];      /* memory for state of TSA component */	/* [Satisfies_rte sws 1189] */


typedef uint8                     	tsaifPersStateFPAbst_array_t[128];/* memory is stored at ignition off and keeps values even when a new SW version is flahsed */	/* [Satisfies_rte sws 1189] */


typedef uint8                     	tsaifPersStateFVAbst_array_t[96];/* memory is stored at ignition off and is erased when a new SW version is flashed */	/* [Satisfies_rte sws 1189] */


typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint32 dataLength;                          /* data in use in bytes */
    	tsaifStateAbst_array_t tsaifStateAbst;                      /* memory for state of TSA component */
    } RTE_t_TSAIFStateAbstract;			/* memory for state information */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	tsaifPersStateFPAbst_array_t tsaifPersStateFPAbst;                /* memory is stored at ignition off and keeps values even when a new SW version is flahsed */
    	tsaifPersStateFVAbst_array_t tsaifPersStateFVAbst;                /* memory is stored at ignition off and is erased when a new SW version is flashed */
    } RTE_t_SRIFPersistentStateAbstract;			/* memory for persistant state information */

typedef uint8                     	RTE_ui8_TSAIFSlaCountrySwitch[40];/* country switch information */	/* [Satisfies_rte sws 1189] */


typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	RTE_t_TSAIFInputSignalState signalState;                         /* state of input */
    	uint32 configSwitch;                        /* configuration switch */
    	RTE_ui8_TSAIFSlaCountrySwitch countrySwitch;                       /* country switch */
    } RTE_t_TSAIFInputParam;			/* TSA configuration parameters */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	float32 focalLengthPix;                      /* focal length of lens [pixels] */
    	float32 principalAxisX;                      /* the principal X-axis point in the image. Top left corner of top left pixel is 0.0/0.0 */
    	float32 principalAxisY;                      /* the principal Y-axis point in the image. Top left corner of top left pixel is 0.0/0.0 */
    	float32 lensDistortionParam1;                /* first lens distortion parameter (TBD) */
    	float32 lensDistortionParam2;                /* second lens distortion parameter (TBD) */
    	float32 camPosX;                             /* camera X position in vehicle coordinates [m] */
    	float32 camPosY;                             /* camera Y position in vehicle coordinates [m] */
    	float32 camPosZ;                             /* camera Z position in vehicle coordinates [m] */
    	float32 camPitch;                            /* camera pitch angle in vehicle coordinates [rad] */
    	float32 camYaw;                              /* camera yaw angle in vehicle coordinates [rad] */
    	float32 camRoll;                             /* camera roll angle in vehicle coordinates [rad] */
    	RTE_t_TSAIFInputSignalState signalState;                         /* state of input */
    } RTE_t_TSAIFInputCameraConfig;			/* camera configuration information */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	RTE_t_TSAIFInputParam parameter;                           /* static TSA config parameters */
    	RTE_t_TSAIFInputCameraConfig cameraConfig;                        /* static camera config */
    } RTE_t_TSAIFInputConfig;			/* static input config data */

typedef float32                   	af32_RotMatRL_array_t[9];    			/* [Satisfies_rte sws 1189] */


typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	af32_RotMatRL_array_t af32_RotMatRL;                       
    	float32 f32_Temperature;                     
    	RTE_t_eSACSource ui32_SACSource;                      
    } RTE_t_SACFromToNvm;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	float32 f32_RotMatrixR11;                    
    	float32 f32_RotMatrixR21;                    
    	float32 f32_RotMatrixR31;                    
    	float32 f32_RotMatrixR12;                    
    	float32 f32_RotMatrixR22;                    
    	float32 f32_RotMatrixR32;                    
    	float32 f32_RotMatrixR13;                    
    	float32 f32_RotMatrixR23;                    
    	float32 f32_RotMatrixR33;                    
    	float32 f32_TranslationX;                    
    	float32 f32_TranslationY;                    
    	float32 f32_TranslationZ;                    
    	float32 f32_Baseline;                        
    } RTE_t_SACExtrinsicCalibrationData;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint32 ui32_BBoxStartX;                     /* x-coordinate of top/left pixel of image bounding box with respect to stereo roi */
    	uint32 ui32_BBoxStartY;                     /* y-coordinate of top/left pixel of image bounding box with respect to stereo roi */
    	uint32 ui32_BBoxWidth;                      /* width of image bounding box */
    	uint32 ui32_BBoxHeight;                     /* height of image bounding box */
    } RTE_t_SACBBox;			/* X-coordinate of camera center point in image [pixel] */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	RTE_t_SACBBox s_BBoxLeft;                          /* bounding box of left rectified image */
    	RTE_t_SACBBox s_BBoxRight;                         /* bounding box of rigth rectified image */
    } RTE_t_SACRectCamPars;			/* Part of output struct of SAC Algo, rectified camera parameters */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint32 ui32_Version;                        
    	float32 f32_Pitch;                           
    	float32 f32_Roll;                            
    	float32 f32_Yaw;                             
    	float32 f32_QltyPitch;                       
    	float32 f32_QltyRoll;                        
    	float32 f32_QltyYaw;                         
    	float32 f32_Odometer;                        
    	float32 f32_Temperature;                     
    	uint32 ui32_TargetNo;                       
    	uint32 ui32_ErrorCode;                      
    	uint32 ui32_AlgoSignalState;                
    } S_SACUpdateEolFromToNvm;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint8 value;                               /* 0 = unknown, 1 - 254 = face value, 255 = SNA */
    	RTE_t_MAPIFSpeedUnit unit;                                /* speed limit sign unit */
    	RTE_t_MAPIFSpeedLimitSignType type;                                /* speed limit sign type */
    	RTE_t_MAPIFSpeedLimitValidity validity;                            /* speed limit sign validity */
    	RTE_t_MAPIFSpeedLimitSide side;                                /* speed limit sign is expected on this side of the road */
    } RTE_t_MAPIFSpeedLimit;			/* current speed limit(s) */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	RTE_eMAPIFErrorStatus status;                              /* status of error */
    	optData_array_t optData;                             /* optional (environment) data */
    } RTE_t_MAPIFErrorListEntry;			/* external error list entry type */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	sint32 sec;                                 /* seconds since ECU startup */
    	sint32 usec;                                /* microseconds since ECU startup */
    } RTE_t_MAPIFOutputTimestamp;			/* output data timestamp */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint64 mapTriggerReference;                 /* reference identifying the current MAP cycle */
    } RTE_t_MAPIFOutputTriggerReference;			/* ECU trigger information for simulation */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	RTE_t_MAPIFProvider mapProviderInfo;                     /* map supplier */
    	uint32 mapAgeInfo;                          /* in quarter years, 0 = unknown */
    	uint32 swVersion;                           /* sw version of ehorizon provider IMPORTANT, 0 = unknown */
    } RTE_t_MAPIFCharacteristics;			/* map characteristics */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint32 countryCode;                         /* ISO 3166 numerical, 0 = unknown */
    	uint32 regionCode;                          /* region code, 0 = unknown */
    	RTE_t_MAPIFTrafficStyle areaTrafficStyle;                    /* driving side */
    	RTE_t_MAPIFSpeedUnit areaSpeedUnit;                       /* default speed unit in country/region */
    } RTE_t_MAPIFAreaCharacteristics;			/* area characteristics */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	sint32 metersSinceRoadChange;               /* keep track of leave events */
    	sint32 metersSinceCountryChange;            /* keep track of country border crossings */
    	sint32 metersSinceRegionChange;             /* keep track of state/region border crossings */
    	sint32 metersSinceBuildUpAreaChange;        /* keep track of urban area border crossings */
    	sint32 metersSincePathChange;               /* keep track of path changes */
    } RTE_t_MAPIFPastPositionData;			/* last position data */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	RTE_t_MAPIFFunctionalRoadClass frc;                                 /* functional road class */
    	RTE_t_MAPIFNumLanesDrivingDir lanesDrivingDir;                     /* number of lanes in driving direction */
    	RTE_t_MAPIFNumLanesOppositeDir lanesOppositeDir;                    /* number of lanes in opposite direction */
    	RTE_t_MAPIFFormOfWay formOfWay;                           /* road type */
    	uint8 routeNumberType;                     /* type of route number */
    	boolean physicalSeperation;                  /* are opposite lanes physically seperated */
    } RTE_t_MAPIFRoadData;			/* current road data */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	RTE_t_MAPIFRoadData roadData;                            /* current road data */
    	RTE_t_MAPIFLocationType locationType;                        /* current location type */
    	RTE_t_MAPIFBuildUpArea buildUpArea;                         /* current position is inside of a build up area */
    	speedLimit_array_t speedLimit;                          /* current speed limit(s) */
    	uint16 varSignPosition;                     /* position of variable signs */
    	boolean offroad;                             /* we are currently offroad */
    	boolean tunnel;                              /* we are currently in a tunnel */
    	boolean bridge;                              /* current location is on bridge */
    } RTE_t_MAPIFCurrentPositionData;			/* current position data */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	RTE_t_MAPIFContextChangeType contextChangeType;                   /* type of upcoming context change event                                                            a change type with zero or negative distance means that the type changed to is still valid, e.g. MAPIF_CONTEXT_CHANGE_OUTSIDE_TO_INSIDE with -2.5 meters means that we are inside the given context */
    	float32 distanceToContextChange;             /* [m], distance to next context change */
    } RTE_t_MAPIFContextChangeInfo;			/* compound context change input */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	RTE_t_MAPIFRoadData roadData;                            /* next road data */
    	sint32 distToRoadDataChange;                /* distance to change of road data */
    	RTE_t_MAPIFLocationType locationType;                        /* next location type */
    	sint32 distToLocationTypeChange;            /* distance to location change */
    	speedLimit_array_t_0 speedLimit;                          /* next speed limit on path */
    	sint32 distToSpeedLimitChange;              /* distance to next speed limit change on path */
    	RTE_t_MAPIFRoadChangeType roadChange;                          /* next road change */
    	sint32 distToRoadChange;                    /* distance to next road change */
    	RTE_t_MAPIFContextChangeInfo urbanAreaChangeInfo;                 /* information on upcoming urban area change event */
    	RTE_t_MAPIFContextChangeInfo residentialAreaChangeInfo;           /* information on upcoming residential area change event */
    	RTE_t_MAPIFContextChangeInfo noCircleSignContextChangeInfo;       /* information on upcoming urban area change event */
    	boolean tunnel;                              /* upcoming tunnel status */
    	sint32 distToTunnelChange;                  /* distance to change in tunnel status */
    	sint16 relativeAngle;                       /* relative angle of next segment on path, degrees [-180, 180] */
    	sint32 distToHeadingChange;                 /* distance to change of current path heading, meters */
    	boolean bridge;                              /* future location is on bridge yes/no */
    	sint32 distToBridgeChange;                  /* distance to change of bridge status */
    	effectiveSpeedLimitPreview_array_t effectiveSpeedLimitPreview;          /* upcoming speed limits on path (no parallelism, only effective) */
    	distToEffectiveSpeedLimit_array_t distToEffectiveSpeedLimit;           /* vector with distances to respective speed limits */
    	visibleSpeedLimitPreview_array_t visibleSpeedLimitPreview;            /* upcoming potentially visible speed limits NOT on path (no parallelism, only effective) */
    	distToVisibleSpeedLimit_array_t distToVisibleSpeedLimit;             /* vector with distances to visible speed limits */
    } RTE_t_MAPIFFuturePositionData;			/* next position data */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	RTE_t_MAPIFOuputSignalState signalState;                         /* signal state of output data */
    	RTE_t_MAPIFOutputTimestamp cycleTimestamp;                      /* system time at which the current MAP cycle was executed */
    	RTE_t_MAPIFCharacteristics mapCharacteristics;                  /* map characteristics */
    	RTE_t_MAPIFAreaCharacteristics areaCharacteristics;                 /* area characteristics */
    	RTE_t_MAPIFPastPositionData pastPositionData;                    /* last position data */
    	RTE_t_MAPIFCurrentPositionData currentPositionData;                 /* current position data */
    	RTE_t_MAPIFFuturePositionData futurePositionData;                  /* next position data */
    	RTE_t_MAPIFOutputTriggerReference triggerReference;                    /* ECU trigger information for PC simulation only */
    } RTE_t_MAPIFMapData;			/* compound map input data */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint32 sec;                                 /* data in use in bytes */
    	data_array_t data;                                /* debug data memory area */
    } RTE_t_MAPIFOutputDebugAbstract;			/* memory for debug information */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint32 errors;                              /* standard system error list */
    	RTE_eMAPIFOutputProcessState state;                               /* standard system process state */
    } RTE_t_MAPIFOutputSystemInfo;			/* system data output */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	error_array_t error;                               /* error entries, slot positions correspond to                                                                        RTE_eMAPIFErrorId */
    } RTE_t_MAPIFOutputErrorList;			/* standard system error list */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint32 VersionNumber;                       /* version number of algo */
    	VersionInfo_array_t VersionInfo;                         /* string for version information */
    } RTE_t_MAPIFAlgoVersion;			/* version information */

typedef uint8                     	mapifStateAbst_array_t[8192];      /* memory for state of MAP component */	/* [Satisfies_rte sws 1189] */


typedef uint8                     	mapifPersStateFPAbst_array_t[128];/* memory is stored at ignition off and keeps values even when a new SW version is flahsed */	/* [Satisfies_rte sws 1189] */


typedef uint8                     	mapifPersStateFVAbst_array_t[96];/* memory is stored at ignition off and is erased when a new SW version is flashed */	/* [Satisfies_rte sws 1189] */


typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint32 dataLength;                          /* data in use in bytes */
    	mapifStateAbst_array_t mapifStateAbst;                      /* memory for state of MAP component */
    } RTE_t_MAPIFStateAbstract;			/* memory for state information */

typedef sint32                    	value_array_t[2];            /* profile value */	/* [Satisfies_rte sws 1189] */


typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint8 day;                                 /* day of month */
    	uint8 month;                               /* month */
    	uint16 year;                                /* year */
    } RTE_t_MAPIFInputDate;			/* current day information */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint8 hour;                                /* hour */
    	uint8 minute;                              /* minute */
    	uint8 second;                              /* second */
    } RTE_t_MAPIFInputTime;			/* current time of day information */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	sint32 sec;                                 /* seconds since ECU startup */
    	sint32 usec;                                /* microseconds since ECU startup */
    } RTE_t_MAPIFInputTimestamp;			/* input data timestamp */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	float32 value;                               /* value of input float data */
    	RTE_t_MAPIFInputTimestamp timestamp;                           /* timestamp for data creation */
    	RTE_t_MAPIFInputSignalState signalState;                         /* state of input */
    } RTE_t_MAPIFInputFloat32;			/* compound 32 bit float input type */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	RTE_t_MAPIFVehMotionState motState;                            /* vehicle motion state */
    	RTE_t_MAPIFInputTimestamp timestamp;                           /* timestamp for data creation */
    	RTE_t_MAPIFInputSignalState signalState;                         /* state of input */
    } RTE_t_MAPIFInputVehMotionState;			/* compound vehicle motion state */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	sint32 value;                               /* value of input integer data */
    	RTE_t_MAPIFInputTimestamp timestamp;                           /* timestamp for data creation */
    	RTE_t_MAPIFInputSignalState signalStateIn;                       /* state of input */
    } RTE_t_MAPIFInputInt32;			/* compound 32 bit integer input type */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	RTE_t_MAPIFInputFloat32 velocity;                            /* vehicle velocity */
    	RTE_t_MAPIFInputInt32 odometer;                            /* current vehicle odometer value */
    	RTE_t_MAPIFInputVehMotionState motionState;                         /* current vehicle motion state */
    } RTE_t_MAPIFInputVehicleData;			/* vehicle input data */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	RTE_t_MAPIFTriggerReference mapTriggerReference;                 /* reference identifying the current MAP cycle */
    } RTE_t_MAPIFInputTriggerReference;			/* ECU trigger information for simulation */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	float32 latit;                               /* [°], GPS longitude position */
    	float32 longit;                              /* [°], GPS latitude position */
    } RTE_t_MAPIFInputGPSPos;			/* GPS position data */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	RTE_t_MAPIFInputTimestamp cycleTimestamp;                      /* system time at which the current MAP cycle is executed */
    	RTE_t_MAPIFInputDate currDate;                            /* current date */
    	RTE_t_MAPIFInputTime currTime;                            /* current time */
    	RTE_t_MAPIFInputGPSPos currGPSPos;                          /* current GPS position */
    	RTE_t_MAPIFInputVehicleData vehData;                             /* vehicle data */
    	RTE_t_MAPIFInputModeSelect modSelect;                           /* execution mode selection */
    	RTE_t_MAPIFInputTriggerReference triggerReference;                    /* ECU trigger information for PC simulation only */
    } RTE_t_MAPIFInput;			/* compound MAP input data */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint32 pathId;                              /* path index */
    	RTE_t_MAPIFVPState vpStat;                              /* vehicle positioning status */
    	uint32 offset;                              /* position offset along the path, in meters */
    	uint8 index;                               /* position index */
    	uint32 age;                                 /* position age, in milliseconds */
    	sint32 speed;                               /* vehicle speed on path, in cm per second */
    	sint16 heading;                             /* heading raltive to path, in degrees */
    	uint8 probability;                         /* probability, in percent */
    	uint8 confidence;                          /* position confidence */
    	RTE_t_MAPIFLane lane;                                /* current lane */
    	uint32 msgTimestamp;                        /* message timestamp */
    	uint8 msgCycleCnt;                         
    } RTE_t_MAPIFPosition;			/* input position data */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint32 pathId;                              /* path index */
    	uint32 offset;                              /* position offset along the path, in meters */
    	boolean update;                              /* data are information update */
    	RTE_t_MAPIFFuncRoadClass functionalClass;                     /* functional road class */
    	RTE_t_MAPIFFormOfWaySeg formOfWaySegment;                    /* form of way */
    	uint8 effectiveSpeedLimit;                 /* effective speed limit */
    	RTE_t_MAPIFEffSpdLmtType effectiveSpeedLimitType;             /* effective speed limit type */
    	RTE_t_MAPIFNumOfLanesDrivDir noOfLanesInDrivingDirection;         /* number of lanes in driving direction */
    	RTE_t_MAPIFNumOfLanesOppDir noOfLanesInOppositeDirection;        /* number of lanes in opposite direction */
    	boolean isTunnel;                            /* segment is part of tunnel */
    	boolean isBridge;                            /* segment is part of bridge */
    	boolean isDividedRoad;                       /* segment is part of divided road */
    	boolean isBuildUpArea;                       /* segment is part of build-up area */
    	boolean isCalculatedRoute;                   /* segment is part of calculated route */
    	boolean isComplexIntersection;               /* segment is part of complex intersection */
    	uint8 relativeProbability;                 /* probability, in percent */
    	boolean isRetransmit;                        /* Value indicates retransmit of data */
    	uint8 msgCycleCnt;                         
    } RTE_t_MAPIFSegment;			/* input segment data */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint32 pathId;                              /* path index */
    	uint32 offset;                              /* position offset along the path, in meters */
    	boolean update;                              /* data are information update */
    	uint32 subPathId;                           /* sub path ID */
    	sint16 turnAngle;                           /* turn angle, in degrees */
    	uint8 relativeProbability;                 /* probability, in percent */
    	RTE_t_MAPIFFormOfWay formOfWayStub;                       /* first form of way on path */
    	RTE_t_MAPIFNumOfLanesDrivDir noOfLanesInDrivingDirection;         /* number of lanes in driving direction */
    	RTE_t_MAPIFNumOfLanesOppDir noOfLanesInOppositeDirection;        /* number of lanes in opposite direction */
    	boolean isComplexIntersection;               /* stub is part of complex intersection */
    	boolean isRightOfWay;                        /* turn is right-of-way */
    	boolean isLastStubAtOffset;                  /* stub is last one at path and offset */
    	boolean isCalculatedRoute;                   /* stub is part of calculated route */
    	RTE_t_MAPIFFuncRoadClass functionalClass;                     /* functional road class */
    	boolean isRetransmit;                        /* Value indicates retransmit of data */
    	uint8 msgCycleCnt;                         
    } RTE_t_MAPIFStub;			/* input stub data */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint32 pathId;                              /* path index */
    	uint32 offset;                              /* position offset along the path, in meters */
    	uint16 type;                                /* profile type */
    	boolean isControlPoint;                      /* profile is control point */
    	boolean isUpdate;                            /* data are information update */
    	value_array_t value;                               /* profile value */
    	uint8 accuracyClass;                       /* value accuracy class */
    	boolean isRetransmit;                        /* Value indicates retransmit of data */
    	uint8 msgCycleCnt;                         
    } RTE_t_MAPIFProfile;			/* input profile data */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint16 countryCode;                         /* country code */
    	uint16 regionCode;                          /* region code */
    	boolean drivingSideRight;                    /* driving on right side */
    	boolean speedUnitMPH;                        /* speed unit is mph */
    	uint8 protocolVersionMajor;                /* major protocol version */
    	uint8 protocolVersionMinor;                /* minor protocol version */
    	uint8 protocolVersionSubMinor;             /* subminor protocol version */
    	uint16 hardwareVersion;                     /* hardware version */
    	RTE_t_MAPIFInMapProvider mapProvider;                         /* map provider */
    	uint16 mapVersionYear;                      /* year of map version age */
    	uint8 mapVersionQuarter;                   /* quarter of map version age */
    	uint8 msgCycleCnt;                         
    } RTE_t_MAPIFMetaData;			/* input meta data */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint32 pathId;                              /* path index */
    	uint32 offset;                              /* position offset along the path, in meters */
    	boolean update;                              /* data are information update */
    	RTE_t_MAPIFFuncRoadClass functionalClass;                     /* functional road class */
    	RTE_t_MAPIFFormOfWaySeg formOfWaySegment;                    /* form of way */
    	uint8 effectiveSpeedLimit;                 /* effective speed limit */
    	RTE_t_MAPIFEffSpdLmtType effectiveSpeedLimitType;             /* effective speed limit type */
    	RTE_t_MAPIFNumOfLanesDrivDir noOfLanesInDrivingDirection;         /* number of lanes in driving direction */
    	RTE_t_MAPIFNumOfLanesOppDir noOfLanesInOppositeDirection;        /* number of lanes in opposite direction */
    	boolean isTunnel;                            /* segment is part of tunnel */
    	boolean isBridge;                            /* segment is part of bridge */
    	boolean isDividedRoad;                       /* segment is part of divided road */
    	boolean isBuildUpArea;                       /* segment is part of build-up area */
    	boolean isCalculatedRoute;                   /* segment is part of calculated route */
    	boolean isComplexIntersection;               /* segment is part of complex intersection */
    	uint8 relativeProbability;                 /* probability, in percent */
    	boolean isRetransmit;                        /* Value indicates retransmit of data */
    	uint8 msgCycleCnt;                         
    } RTE_t_MAPIFCuA;			/* input current attributes */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	float32 f32_PitchAngleNominal;               /* camera pitch angle */
    	float32 f32_RollAngleNominal;                /* camera roll angle */
    	float32 f32_CamYawAngleNominal;              /* camera yaw angle */
    	float32 f32_CamHeight;                       /* camera height above ground */
    	float32 f32_CamOffset;                       /* camera offset from vehicle center axis */
    	float32 f32_CamX;                            /* camera distance from rear axle */
    	float32 f32_Axis2Axis;                       /* distance front to rear axle */
    	float32 f32_CamFocalLength;                  /* camera focal length in pixels */
    	float32 f32_CamDistortionK1;                 /* first order lens distortion parameter */
    	float32 f32_CamDistortionK2;                 
    	float32 i32_CamMainPointX;                   /* camera main point X */
    	float32 i32_CamMainPointY;                   /* camera main point Y */
    	float32 f32_VehicleWidth;                    /* vehicle width */
    	float32 f32_CameraAlignmentRangeMinimum;     /* minimum field of view limit */
    	float32 f32_CameraAlignmentRangeMaximum;     /* maximum field of view limit */
    	sint32 i32_EnableCheckLostFrames;           /* check for lost frames */
    	sint32 i32_EnableUseYawRate;                /* use the vehicle yaw rate */
    	sint32 i32_EnableAutoCalibration;           /* use auto calibration */
    	sint32 i32_EnableRollAutoCalibration;       /* use roll angle calibration */
    	sint32 i32_EnableBotDotDetection;           /* use bot dot detector */
    	sint32 i32_EnableFarDistanceLane;           /* use far distance lane */
    	sint32 i32_EnableBlockage;                  /* use blockage detection */
    	sint16 i32_EnableCrashBarriers;             /* detect false tracking on elevated structures */
    	RTE_t_eLDPlatform i32_OptimizationPlatform;            /* select the desired optimized code */
    	sint32 i32_HardwareClicksPerSecond;         /* operating frequency of the processor in Hz */
    } RTE_t_LDParameterIn;			/* static input config data */

typedef sint32                    	ai32_MarkerTypes_array_t[3]; /* enum fo rmarker types left */	/* [Satisfies_rte sws 1189] */


typedef RTE_t_eLDMarkerColor      	ai32_MarkerColors_array_t[3];			/* [Satisfies_rte sws 1189] */


typedef float32                   	af32_MarkerPositions_array_t[6];/* distances of marker edges starting from innermost marker */	/* [Satisfies_rte sws 1189] */


typedef float32                   	af32_FeaturePosU_array_t[50];  			/* [Satisfies_rte sws 1189] */


typedef float32                   	af32_FeaturePosV_array_t[50];  			/* [Satisfies_rte sws 1189] */


typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	RTE_t_eLDMarkerQualitiy i32_MarkerQuality;                   
    	RTE_t_eLDMarkerRel i32_MarkerRelation;                  
    	sint32 i32_NumFeatures;                     
    	RTE_t_eLDMarkerType i32_MarkerType;                      
    	float32 f32_MarkerHeight;                    
    	af32_FeaturePosU_array_t af32_FeaturePosU;                    
    	af32_FeaturePosV_array_t af32_FeaturePosV;                    
    } RTE_t_LDMarkerFeatures;			

typedef uint8                     	aui8_Info_array_t[32];         			/* [Satisfies_rte sws 1189] */


typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	sint32 i32_Quality;                         /* quality of the left marker track */
    	float32 f32_Distance;                        /* distance to the left marker */
    	float32 f32_Curvature;                       /* curvature of the left marker */
    	float32 f32_CurvatureRate;                   /* curvature rate of the left marker */
    	float32 f32_Yaw;                             /* yaw angle to the left marker */
    	float32 f32_MarkerWidth;                     /* width of the left marker */
    	RTE_t_eLDMarkerType i32_MarkerType;                      /* enum fo rmarker types left side */
    	RTE_t_eLDMarkerColor i32_MarkerColor;                     
    	float32 f32_LookaheadDistance;               /* range of vision left */
    	sint32 i32_NumberOfMarkers;                 
    	ai32_MarkerTypes_array_t ai32_MarkerTypes;                    /* enum fo rmarker types left */
    	ai32_MarkerColors_array_t ai32_MarkerColors;                   
    	af32_MarkerPositions_array_t af32_MarkerPositions;                /* distances of marker edges starting from innermost marker */
    	RTE_t_eLDEvent i32_Event;                           
    	float32 f32_EventDist;                       
    	sint32 i32_EventQual;                       
    	sint32 i32_Available;                       
    } RTE_t_LDOutputDetails;			

typedef RTE_t_LDMarkerFeatures    	as_MarkerFeatures_array_t[7];			/* [Satisfies_rte sws 1189] */


typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint32 ui32_timestampHigh;                  /* The HighDoubleWord of 64 bit timestamp. */
    	uint32 ui32_timestampLow;                   /* The LowDoubleWord of 64 bit timestamp. */
    } RTE_t_Timestamp_64_Bit;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	as_MarkerFeatures_array_t as_MarkerFeatures;                   
    	RTE_t_Timestamp_64_Bit s_Timestamp_64_us;                   
    } RTE_t_LDOutputExtension;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint32 ui32_Number;                         
    	aui8_Info_array_t aui8_Info;                           
    } RTE_t_LDVersion;			

typedef sint32                    	ai32_MarkerTypes_array_t_0[3];/* enum for rmarker types */	/* [Satisfies_rte sws 1189] */


typedef float32                   	af32_MarkerPositions_array_t_0[6];/* distances of marker edges starting from innermost marker */	/* [Satisfies_rte sws 1189] */


typedef float32                   	af32_MarkerSamplePointsX_array_t[20];			/* [Satisfies_rte sws 1189] */


typedef float32                   	af32_MarkerSamplePointsY_array_t[20];			/* [Satisfies_rte sws 1189] */


typedef float32                   	af32_MarkerSamplePointsZ_array_t[20];			/* [Satisfies_rte sws 1189] */


typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint32 ui32_MiscCheckSum;                   /* The MiscCheckSum which has to be calculated over the rest of the payload. */
    	RTE_t_LDOutputDetails s_OutputDetails_Left;                
    	RTE_t_LDOutputDetails s_OutputDetails_Right;               
    	float32 f32_PitchAngleOnline;                
    	float32 f32_CamYawAngleOnline;               
    	float32 f32_RollAngleOnline;                 
    	sint32 i32_ACSaveRequest;                   
    	sint32 i32_ACPercentage;                    
    	sint32 i32_ParallelModel;                   
    	sint32 i32_CameraMisaligned;                
    	sint32 i32_ACNotFinished;                   
    	sint32 i32_ConstructionSite;                
    	sint32 i32_LaneChange;                      
    	sint32 i32_SmoothOperation;                 
    	sint32 i32_SteeringSide;                    
    	RTE_t_eLDRoadType i32_RoadType;                        
    	sint32 i32_IndexEgoLane;                    
    	sint32 i32_NumberOfLanes;                   
    	sint32 i32_AdditionalParallelMarkers;       
    	sint32 i32_Blockage;                        
    	sint32 i32_Condensation;                    
    	sint32 i32_ImageFrameCounter;               
    	RTE_t_Timestamp_64_Bit s_Timestamp_64_us;                   
    	sint32 i32_VersionMajor;                    
    	sint32 i32_VersionMinor;                    
    	sint32 i32_VersionPatch;                    
    	sint32 i32_AlgoState;                       
    } RTE_t_SLEOutput;			/* output data from SLE */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	sint32 i32_Quality;                         /* quality of the marker track */
    	float32 f32_Distance;                        /* distance to the marker */
    	float32 f32_Curvature;                       /* curvature of the marker */
    	float32 f32_CurvatureRate;                   /* curvature rate of the marker */
    	float32 f32_VertCurvature;                   /* curvature of the marker */
    	float32 f32_VertCurvatureRate;               /* curvature rate of the marker */
    	float32 f32_Yaw;                             /* yaw angle to the marker */
    	float32 f32_MarkerHeight;                    /* height of the marker */
    	float32 f32_MarkerPitch;                     /* pitch of the marker */
    	float32 f32_MarkerWidth;                     /* width of the marker */
    	RTE_t_eLDMarkerType i32_MarkerType;                      /* enum for rmarker types */
    	RTE_t_eLDMarkerColor i32_MarkerColor;                     
    	sint32 i32_MarkerState;                     
    	float32 f32_LookaheadDistance;               /* range of vision */
    	sint32 i32_NumberOfMarkers;                 
    	ai32_MarkerTypes_array_t_0 ai32_MarkerTypes;                    /* enum for rmarker types */
    	af32_MarkerPositions_array_t_0 af32_MarkerPositions;                /* distances of marker edges starting from innermost marker */
    	RTE_t_eLDEvent i32_Event;                           
    	float32 f32_EventDist;                       
    	sint32 i32_Available;                       
    	sint32 i32_MarkerQuality;                   
    	sint32 i32_NumSamplePoints;                 
    	af32_MarkerSamplePointsX_array_t af32_MarkerSamplePointsX;            
    	af32_MarkerSamplePointsY_array_t af32_MarkerSamplePointsY;            
    	af32_MarkerSamplePointsZ_array_t af32_MarkerSamplePointsZ;            
    } RTE_t_SLEOutputDetails;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	float32 f32_InputSpeedSI;                    /* vehicle speed in m/s */
    	float32 f32_InputYawRateSI;                  /* vehicle yaw rate in rad/s */
    	uint64 ui64_InputSpeedTS;                   
    	uint64 ui64_InputYawTS;                     
    	sint32 i32_InputYawRateValid;               /* validity flag for the yaw rate */
    	uint32 u32_InputImageFingerPrint;           
    	sint32 i32_InputImageRoiXStart;             
    	sint32 i32_InputImageRoiYStart;             
    	sint32 i32_InputImageWidth;                 
    	sint32 i32_InputImageHeight;                
    	sint32 i32_InputImageBytesPerPixel;         
    	sint32 i32_InputImagePitch;                 
    	sint32 i32_InputImageFrameCounter;          /* frame counter */
    	sint32 i32_InputPreventLaneChange;          /* prevent a lange change of the lane tracker */
    	float32 f32_InputDeltaTime;                  /* delta time in seconds to the last frame */
    	RTE_t_eLDSensorID i32_InputSensorID;                   /* sensor ID */
    	sint32 i32_InputBlackLevel;                 /* current black level */
    	float32 f32_InputExposureTime;               /* current exposure time */
    	float32 f32_InputLuxAtGray512;               /* lux to produce a gray value of 512 */
    	sint32 i32_InputCountryCode;                /* current country code */
    	sint32 i32_InputDefaultOutput;              
    	uint64 ui64_TimeStamp;                      
    } RTE_t_LDDynamicIn;			/* dynamic vehicle and imager data */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	float32 f32_lux;                             /* Access to the lux value. */
    	float32 f32_avgR;                            /* Access to the average red value. */
    	float32 f32_avgG;                            /* Access to the average green value. */
    	float32 f32_avgB;                            /* Access to the average blue value. */
    } RTE_HLA_t_RGBLuxElement;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint16 ui16_xPos;                           /* Access to x-position of the defect pixel. */
    	uint16 ui16_yPos;                           /* Access to y-position of the defect pixel. */
    	RTE_HLA_t_eICDefectType e_DefectType;                        /* Access to defect type of the pixel. */
    	uint16 ui16_Count;                          /* Access to counter for defect pixel existence check */
    } RTE_HLA_t_ICDefectPixel;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint8 ui8_ID;                              /* object identification number */
    	RTE_HLAF_t_eNightViewObjectType e_ObjType;                           /* object type */
    	RTE_HLAF_t_eNightViewSpot e_Spot;                              /* spot light request */
    	float32 f32_Distance_m;                      /* [m]object distance */
    	float32 f32_HorAng_rad;                      /* [rad] horizontal object angle (autosar) */
    } RTE_HLAF_t_NightViewObject;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	float32 f32_Z;                               /* Height over ground */
    	float32 f32_Y;                               /* Offset lateral */
    	float32 f32_X;                               /* Offset longitudinal */
    } RTE_HLA_t_SensorSocket;			/* Sensor Socket */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	float32 f32_Pitch;                           /* Pitch angle */
    	float32 f32_Roll;                            /* Roll angle */
    	float32 f32_Yaw;                             /* Yaw angle */
    	float32 f32_Quality;                         /* calibration quality: <2.55°: OK, =2.55°: NOK */
    } RTE_HLA_t_SensorAngles;			/* Sensor Angles */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	float32 f32_FrontLeft;                       /* [m] */
    	float32 f32_FrontRight;                      /* [m] */
    	float32 f32_RearLeft;                        /* [m] */
    	float32 f32_RearRight;                       /* [m] */
    } RTE_HLA_t_VehLevel;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	float32 f32_TrackWidthFront_m;               /* [m] track width front */
    	float32 f32_TrackWidthRear_m;                /* [m] track width rear */
    	float32 f32_WheelBase_m;                     /* [m] wheel base */
    	RTE_HLA_t_VehLevel s_VehLevEOLCali;                     /* vehicle level at EOL/ service calibration */
    	RTE_HLA_t_eTrafficStyle e_TrafficStyle;                      /* local traffic style */
    	RTE_HLA_t_eHeadLightType e_HeadLightType;                     /* head light type */
    	RTE_HLA_t_eHeadLightMechanics e_HeadLightMechanics;                /* head light mechanics (roller, aperture, none = pixel light) */
    	RTE_HLA_t_eHeadLightMode e_HeadLightMode;                     /* head light mode (light, standard, plus, standard and plus) */
    	RTE_HLA_t_eSpotLight e_SpotLight;                         /* spot light installed (avl, not avl) */
    	RTE_HLA_t_eWindshieldType e_WindshieldType;                    /* wind shield type */
    	float32 f32_SpotLightWidth_rad;              /* [rad] spot light width */
    	float32 f32_FullHBDefaultPos_Left_rad;       /* [rad] full high beam default position, related to part HB cut off angle */
    	float32 f32_FullHBDefaultPos_Right_rad;      /* [rad] full high beam default position, related to part HB cut off angle */
    } RTE_HLA_t_VehicleParameter;			/* variant coding (scn) */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint32 ui32_Odometer_m;                     
    	float32 f32_PitchAngle;                      
    	float32 f32_RollAngle;                       
    	float32 f32_YawAngle;                        
    	RTE_HLA_t_eSigStatus_t e_SigStat;                           
    } RTE_HLA_t_OnlineCal;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	sint32 si32_maxPairCnt;                     /* [cycles] max. highbeam turn on delay for TOB */
    	uint16 ui16_minDistLost;                    /* min./max. distance for lost tracks (traffic) to be relevant for TOB */
    	uint16 ui16_maxDistLost;                    /* min./max. distance for lost tracks (traffic) to be relevant for TOB */
    	uint16 ui16_minDistFirst;                   /* min./max. distance for new tracks (pair lights) to be relevant for TOB */
    	uint16 ui16_maxDistFirst;                   /* min./max. distance for new tracks (pair lights) to be relevant for TOB */
    	float32 f32_minTTBLost;                      
    	uint16 ui16_minROIWidth;                    
    	uint16 ui16_maxROIWidth;                    
    	uint16 ui16_minROIHeight;                   
    	uint16 ui16_maxROIHeight;                   
    	float32 f32_minYawrateError;                 
    	float32 f32_camOffset2MidLane_m;             
    	sint32 si32_maxLostCnt;                     
    	float32 f32_maxDeltaPairWidth;               
    	sint16 si16_maxOncomingInt;                 
    	sint16 si16_maxAheadRGBRedCnt;              
    } RTE_HLA_t_DecTrafficObserverPar;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	float32 f32_CondReleaseMinDist_m;            /* set condensation (heater on) when  hla not released after CondReleaseMinDist_m AND CondReleaseMinTime_s */
    	float32 f32_CondReleaseMinTime_s;            /* set condensation (heater on) when  hla not released after CondReleaseMinDist_m AND CondReleaseMinTime_s */
    	float32 f32_BlockReleaseMinDist_m;           /* set blockage when   hla not released after BlockReleaseMinDist_m AND BlockReleaseMinTime_s */
    	float32 f32_BlockReleaseMinTime_s;           /* set blockage when   hla not released after BlockReleaseMinDist_m AND BlockReleaseMinTime_s */
    } RTE_HLA_t_DecBlockageParameters;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	float32 f32_maxDistOncomingTraffic;          
    	float32 f32_minLateralDistOncomingLeft;      
    	float32 f32_minLateralDistOncomingRight;     
    	float32 f32_maxHeightHeadLights;             
    	float32 f32_minDistMediumChangeOverLevel;    
    	float32 f32_minDistLowChangeOverLevel;       
    	float32 f32_minRadius2TurnsOn;               
    	uint32 ui32_maxSmallRadiusDelayCnt;         
    	float32 f32_maxTimeOutSerial_s;              
    	sint32 si32_maxLostFrames;                  
    	RTE_HLA_t_DecTrafficObserverPar s_TOB;                               
    	RTE_HLA_t_DecBlockageParameters s_Blockage;                          
    } RTE_HLA_t_DecisionParameters;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	RTE_HLA_t_eType e_Type;                              /* Access to signal HLA availability. */
    	RTE_HLA_t_eState e_State;                             /* Access to HLA State */
    } RTE_HLA_t_Availability;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	RTE_HLA_t_eLightStyle e_LightStyle_Lt;                     
    	RTE_HLA_t_eLightStyle e_LightStyle_Rt;                     
    	float32 f32_CurveLightRotAngle_Lt;           /* Access to signal curve light rotation angle */
    	float32 f32_CurveLightRotAngle_Rt;           /* Access to signal curve light rotation angle right */
    	float32 f32_CurveLightRotAngleCutoff_Lt;     
    	float32 f32_CurveLightRotAngleCutoff_Rt;     
    	RTE_HLA_t_eHighBeamState e_HighBeamState;                     
    	RTE_HLA_t_eLightModuleState e_LightModuleState;                  
    	float32 f32_LightDistance;                   
    	float32 f32_LightOutput;                     
    	RTE_HLA_t_eGlareReductionState e_GlareReductionState;               
    } RTE_HLA_t_HeadlightState;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	float32 f32_Blacklevel_R_Greyvalue;          /* [12bit greyvalue] red pixel */
    	float32 f32_Blacklevel_G_Greyvalue;          /* [12bit greyvalue] green pixel */
    	float32 f32_Blacklevel_B_Greyvalue;          /* [12bit greyvalue] blue pixel */
    	float32 f32_Kneepoint1_Greyvalue;            /* [12bit greyvalue] */
    	float32 f32_Kneepoint1_R_Lux;                /* [lux] red pixel */
    	float32 f32_Kneepoint1_G_Lux;                /* [lux] green pixel */
    	float32 f32_Kneepoint1_B_Lux;                /* [lux] blue pixel */
    	float32 f32_Kneepoint2_Greyvalue;            /* [12bit greyvalue] */
    	float32 f32_Kneepoint2_R_Lux;                /* [lux] red pixel */
    	float32 f32_Kneepoint2_G_Lux;                /* [lux] green pixel */
    	float32 f32_Kneepoint2_B_Lux;                /* [lux] blue pixel */
    	float32 f32_Saturation_Greyvalue;            /* [12bit greyvalue] */
    	float32 f32_Saturation_R_Lux;                /* [lux] red pixel */
    	float32 f32_Saturation_G_Lux;                /* [lux] green pixel */
    	float32 f32_Saturation_B_Lux;                /* [lux] blue pixel */
    } RTE_HLA_t_ImagerResponseCurve;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint32 ui32_R1;                             /* requested R1 = T1/T2 [4x, 8x or 16x] */
    	uint32 ui32_R2;                             /* requested R2 = T2/T3 [4x, 8x or 16x] */
    	float32 f32_T1_us;                           /* [us] current integration time T1 */
    	float32 f32_T2_us;                           /* [us] current integration time T2 */
    	float32 f32_T3_us;                           /* [us] current integration time T3 */
    	float32 f32_Gain;                            /* [1]  total gain, depending on temperature */
    	RTE_HLA_t_ImagerResponseCurve s_ResponseCurve;                     /* imager response curve (lux to 12bit greyvalues) */
    } RTE_HLA_t_ImagerCharacteristic;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	RTE_HLA_t_eExpCRTLState e_ExposureState;                     /* Access to current illumination control state */
    	RTE_HLA_t_eActCharac e_ActiveCharacteristic;              /* Access to active characteristic of illumination control */
    	uint32 ui32_Brightness_mLux;                /* Access to current brightness in mLux */
    	uint32 ui32_ExposureTime_us;                /* Access to current exposure time in us */
    	uint32 ui32_FrameNumber;                    /* Access to the current frame number */
    	float32 f32_Noise;                           /* current imager noise, standard deviation of black pixels */
    	RTE_HLA_t_ImagerCharacteristic s_ImagerCharacteristic;              /* imager characteristic */
    } RTE_HLA_t_ImagerState;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	float32 f32_SpeedDisplay;                    /* [m/s] displayed speed (HMI) */
    	float32 f32_Speed;                           /* [m/s] longitudinal velocity */
    	float32 f32_Acceleration;                    /* [m/s²] longitudinal acceleration */
    	float32 f32_YawRateRaw;                      /* [rad/s] raw yaw rate (from CAN, FR), offset compensated */
    	float32 f32_YawRate;                         /* [rad/s] estimated vehicle yaw rate (from vdy) */
    	float32 f32_YawRateVariance;                 /* Estimated vehicle yaw rate variance (from vdy) */
    	float32 f32_YawRateQuality;                  /* Estimated vehicle yaw rate quality (from vdy) */
    	float32 f32_SteeringWheelAngle;              /* [rad] current steering wheel angle */
    	float32 f32_SteeringAngle;                   /* [rad] current steering angle = steering wheel/ steering ratio, angle of the front wheels */
    	RTE_HLA_t_eMovementState e_MoveState;                         /* vehicle motion state e.g. DYN_VHEMOT_STAND_STILL, DYN_VHEMOT_ROLL_FWD,... */
    	float32 f32_MoveStateConfidence;             /* confidence of vehicle motion state */
    } RTE_HLA_t_MotionState;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	boolean b_FogLampFront;                      /* fog lamps front active */
    	boolean b_FogLampRear;                       /* fog lamps rear active */
    	boolean b_RainSensor;                        /* rain sensor state */
    	uint8 ui8_WiperState;                      /* wiper state */
    	RTE_HLA_t_eWiperWasherState e_WiperWasherFrontState;             /* tip-wipe / washer state */
    	RTE_HLA_t_eWiperStage e_WiperStage;                        /* wiper switch position */
    	RTE_HLA_t_VehLevel s_VehicleLevel;                      /* current vehcile level */
    } RTE_HLA_t_VehicleState;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint32 ui32_x;                              /* [pix] image width */
    	uint32 ui32_y;                              /* [pix] image height */
    } RTE_HLA_t_ImageSize;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	float32 f32_x;                               /* [pix] x-position of the lens center */
    	float32 f32_y;                               /* [pix] y-position of the lens center */
    } RTE_HLA_t_LensCenter;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	float32 f32_x;                               /* [pix] focal length in x-direction */
    	float32 f32_y;                               /* [pix] focal length in y-direction */
    } RTE_HLA_t_FocalLength;			

typedef RTE_HLA_t_RGBLuxElement   	as_table_array_t[12];          /* the table with the RGB-Lux elements. */	/* [Satisfies_rte sws 1189] */


typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint32 ui32_R1;                             /* requested R1 = T1/T2 [4x, 8x or 16x] */
    	uint32 ui32_R2;                             /* requested R2 = T2/T3 [4x, 8x or 16x] */
    	float32 f32_T1_us;                           /* [us] current integration time T1 */
    	float32 f32_T2_us;                           /* [us] current integration time T2 */
    	float32 f32_T3_us;                           /* [us] current integration time T3 */
    	float32 f32_Gain;                            /* [1]  total gain, depending on temperature */
    	float32 f32_RatioRedGreen;                   /* [1]  Red/ Green ratio */
    	float32 f32_RatioBlueGreen;                  /* [1]  Blue/ Green ratio */
    	float32 f32_RatioGreenRef;                   /* [1]  Green reference ratio */
    	uint32 ui32_tableLength;                    /* number of valid RGB-Lux elements in the table. */
    	as_table_array_t as_table;                            /* the table with the RGB-Lux elements. */
    } RTE_HLA_t_CalibratedRGBLuxTable;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint32 ui32_x;                              /* [pix] x position of first cropped Roi pixel (X1) */
    	uint32 ui32_y;                              /* [pix] y position of first cropped Roi pixel (X1) */
    } RTE_HLA_t_CroppedRoiX;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	float32 f32_K1;                              
    	float32 f32_K2;                              
    	float32 f32_K3;                              
    	float32 f32_K4;                              
    	float32 f32_K5;                              
    } RTE_HLA_t_CameraDistortion;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	RTE_HLA_t_eBayerPatternType e_bayerPattern;                      /* Bayer Pattern type */
    	float32 f32_cycleTime;                       /* [s] cycle time of HLA Algo */
    	RTE_HLA_t_FocalLength s_FocalLength;                       /* focal length */
    	RTE_HLA_t_ImageSize s_ImageSize;                         /* total image size */
    	RTE_HLA_t_ImageSize s_CroppedRoiSize;                    /* cropped roi size */
    	RTE_HLA_t_CroppedRoiX s_CroppedRoiX1;                      /* first pixel position X1=(x1,y1) of cropped ROI in the image */
    	RTE_HLA_t_LensCenter s_LensCenter;                        /* lens center in absolute Imager coordinates, not in cropped ROI coordinates */
    	RTE_HLA_t_CalibratedRGBLuxTable s_RGBLuxTable;                       /* calibrated RGB-Lux table */
    	RTE_HLA_t_CameraDistortion s_Distortion;                        /* camera distortion parameter */
    	uint32 ui32_BitsPerPixel;                   /* bits per pixel of imager */
    } RTE_HLA_t_CameraParameter;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	RTE_HLA_t_eState e_State;                             /* Access to HLA control state */
    	RTE_HLA_t_eTrafficStyle e_TrafficStyle;                      /* Access to HLA right/left hand traffic style */
    	RTE_HLA_t_eLevelState e_LevelState;                        /* Access to HLA optical headlight leveling state */
    	RTE_HLA_t_eHighBeamState e_HighBeamState;                     /* Access to HLA high beam state (left head lamp) */
    	float32 f32_LowBeamDist;                     /* Access to HLA low beam distance (left head lamp) */
    	float32 f32_LowBeamAngle;                    /* Access to HLA low beam object angle (left head lamp) */
    	uint8 ui8_ChangeoverLevel;                 /* Access to HLA changeover level (left head lamp) */
    	RTE_HLA_t_eDrivingDirection e_TargetDrivingDirection;            /* Access to HLA driving direction */
    	RTE_HLA_t_eCityState e_CityState;                         /* Access to HLA city detection */
    	RTE_HLA_t_eWeatherState e_WeatherState;                      /* Access to HLA weather detection */
    	RTE_HLA_t_eTunnel e_TunnelState;                       /* Access to HLA tunnel detection */
    	RTE_HLA_t_eMotorwayState e_MotorwayState;                     /* Access to HLA motorway detection */
    	RTE_HLA_t_eBrightnessState e_BrightnessState;                   /* Access to HLA signal "Outside Brightness State" */
    	float32 f32_RotAngleMin_Lt;                  /* Access to HLA plus signal "headlamp left rotation angle min" [°] */
    	float32 f32_RotAngleMin_Rt;                  /* Access to HLA plus signal "headlamp right rotation angle min" [°] */
    	RTE_HLA_t_eLightOutput e_LightOutput_Lt;                    /* Access to HLA plus signal "headlamp left light output" */
    	RTE_HLA_t_eLightOutput e_LightOutput_Rt;                    /* Access to HLA plus signal "headlamp right light output" */
    	RTE_HLA_t_eHighBeamState e_HighBeamState_Lt;                  /* Access to HLA plus signal "high beam left state" */
    	RTE_HLA_t_eHighBeamState e_HighBeamState_Rt;                  /* Access to HLA plus signal "high beam right state" */
    	uint8 ui8_ChangeoverLevel_Lt;              /* Access to HLA plus changeover level left */
    	uint8 ui8_ChangeoverLevel_Rt;              /* Access to HLA plus changeover level right */
    } RTE_HLA_t_HeadlightControl;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	RTE_HLA_t_eExit e_LastExitReason;                    
    	uint32 ui32_iSamplingAborted;               
    	uint32 ui32_iMainTimeout;                   
    	uint32 ui32_hlaTmpNavlCount;                
    	uint32 ui32_ExitReasonActive;               
    	uint32 ui32_iTimeOutSerial;                 
    	float32 f32_dTimeInit_ms;                    
    	float32 f32_dTimeMain_ms;                    
    	float32 f32_dTimeMainMax_ms;                 
    	float32 f32_dTimeSegDoIt_ms;                 
    	float32 f32_dTimeSegDoItMax_ms;              
    	float32 f32_dTimeSegExit_ms;                 
    	float32 f32_dTimeSegExitMax_ms;              
    	sint32 si32_FrameNumber;                    
    	sint32 si32_FrameNumberMax;                 
    	sint32 si32_dFrameNumber;                   
    	sint32 si32_dFrameNumberMax;                
    } RTE_HLA_t_ExitReason;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	boolean b_ClearanceMeasurement;              /* TRUE: clearance measurement done; FALSE: clearance measurement not done */
    	boolean b_Condensation;                      
    	boolean b_Blockage;                          
    	RTE_HLA_t_eSigStatus_t e_SigStatus;                         
    } RTE_HLA_t_Blockage;			

typedef RTE_HLA_t_ICDefectPixel   	as_DefectList_array_t[90];     /* Access to defect pixel length. */	/* [Satisfies_rte sws 1189] */


typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint8 ui8_DefectsListLength;               /* Access to the length of the defects list. */
    	RTE_HLA_t_eSigStatus_t e_DefectsListLengthSigStat;          /* Access to signal quality of DefectsListLength. */
    	as_DefectList_array_t as_DefectList;                       /* Access to defect pixel length. */
    } RTE_HLA_t_DefectPixelList;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	float32 f32_FOV_Horizontal_rad;              /* [rad] horizontal field of view (+/-18° = 36°) */
    	float32 f32_FOV_FunctionRoiAboveHorizon_rad;  /* [rad] Field of view for the function roi above the horizon (atan(0.95/(1.16+13) = 3.83° -> 4.0°)) */
    	float32 f32_FOV_MinBelowHorizon_rad;         /* [rad] minimum field of view below the horizon (= FOV_FunctionRoiAboveHorizon_rad) */
    	float32 f32_FOV_MinAboveHorizon_rad;         /* [rad] minimum field of view above the horizon (= FOV_FunctionRoiAboveHorizon_rad + 3° = 6.83°) */
    	float32 f32_minDistance_m;                   /* [m] minimum distance on the road (measured from front axis) which could be seen in the HLA ROI */
    	float32 f32_StreetLamp_Distance_m;           /* [m] leaving streep lamp distance from front axis (= 60m) */
    } RTE_HLA_t_RoiParameter;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	float32 f32_Pitch;                           /* [rad] pitch angle of online calibration */
    	float32 f32_Yaw;                             /* [rad] yaw   angle of online calibration */
    	float32 f32_Roll;                            /* [rad] roll  angle of online calibration */
    	float32 f32_OdoCali_m;                       /* [m]   calibration odometer */
    	float32 f32_StreetLamp_Height_m;             /* [m] leaving streep lamp height over ground (= 6m) */
    } RTE_HLA_t_CaliOnline;			

typedef RTE_HLAF_t_NightViewObject 	as_Obj_array_t[2];           /* night view object */	/* [Satisfies_rte sws 1189] */


typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	as_Obj_array_t as_Obj;                              /* night view object */
    } RTE_HLAF_t_NightView;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	float32 f32_Level1_lux;                      
    	float32 f32_Level2_lux;                      
    	float32 f32_Level3_lux;                      
    } RTE_HLA_t_ObjectRegionLevel;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint16 ui16_RoiX1;                          
    	uint16 ui16_RoiX2;                          
    	uint16 ui16_RoiY1;                          
    	uint16 ui16_RoiY2;                          
    	uint16 ui16_RoiYu;                          /* y-border between AboveRoi (city detection) and functionRoi (vehicle detection) */
    } RTE_HLA_t_ObjectRoi;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint16 ui16_X;                              
    	uint16 ui16_Y;                              
    } RTE_HLA_t_ObjectFOE;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint32 ui32_Version;                        /* object list version number */
    	uint32 ui32_HLA_SWVersionNumber;            /* HLA Software version number */
    	uint32 ui32_FrameCnt;                       /* Frame counter */
    	uint32 ui32_HLAR_Cnt;                       /* HLAR cycle counter */
    	uint64 ui64_TimeStamp_HLA_us;               /* [m] leaving streep lamp height over ground (= 6m) */
    	uint64 ui64_TimeStamp_Image_us;             /* HLA image timestamp */
    	RTE_HLA_t_ObjectRegionLevel s_RegionAboveRoi;                    /* street lamps, city detection */
    	RTE_HLA_t_ObjectRegionLevel s_RegionFunctRoi;                    /* vehicle detection */
    	RTE_HLA_t_ObjectRoi s_ObjectRoi;                         
    	uint32 ui32_NumVehicles;                    /* number of detected vehicles, first in the list */
    	uint32 ui32_NumObjects;                     /* number of all objects */
    	uint32 ui32_SizeOf_as_Object;               /* (sizeof(as_Object) * HLA_OBJECT_LIST_LENGTH) */
    	uint32 ui32_ObjectListAddress;              /* address of hla object list = pointer to object array */
    	RTE_HLA_t_ObjectFOE s_ObjectFOE;                         
    } RTE_HLA_t_ObjectList;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	RTE_HLA_t_eHighwayRoadwayType e_RoadwayType;                       
    	RTE_HLA_t_eHighwayDetectionState e_HighwayDetection;                  
    	RTE_HLA_t_eHighwayOcclusionState e_OcclusionDetection;                
    	float32 f32_ConfRdwayType;                   
    	float32 f32_ConfHwayDtction;                 
    	float32 f32_ConfOcclDtction;                 
    } RTE_HLA_t_Highway;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	RTE_HLA_t_Highway s_Highway;                           
    	RTE_HLA_t_eBrightnessState e_Brightness;                        
    	RTE_HLA_t_eCityState e_City;                              
    	RTE_HLA_t_eTrafficStyle e_TrafficStyle;                      
    	RTE_HLA_t_eTrafficStyleState e_TrafficStyleState;                 
    	RTE_HLA_t_eTunnel e_Tunnel;                            
    	RTE_HLA_t_eWeatherState e_Weather;                           
    	RTE_HLA_t_eRedReflectorArea e_RedReflectorArea;                  
    } RTE_HLA_t_EnvironmentData;			

typedef uint8                     	aui8_AOIWeight_array_t[25];    /* AOI weights for current MPC function */	/* [Satisfies_rte sws 1189] */


typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	RTE_GB_t_eFctId e_FctId;                             /* MPC function identifier */
    	aui8_AOIWeight_array_t aui8_AOIWeight;                      /* AOI weights for current MPC function */
    	uint16 ui16_WeightSum;                      /* AOI weights sum */
    	RTE_GB_t_eBlockageStatus e_InitStatus;                        /* Blockage status for current MPC function initialisation */
    	uint8 ui8_MaxNoBlockageMeanTh;             /* Max Threshold for Mean value for NO_BLOCKAGE */
    	uint8 ui8_MinPartBlockageMeanTh;           /* Min Threshold for Mean value for PART_BLOCKAGE */
    	uint8 ui8_MaxPartBlockageMeanTh;           /* Max Threshold for Mean value for PART_BLOCKAGE */
    	uint8 ui8_MinPartBlockageVarTh;            /* Min Threshold for Variance value for PART_BLOCKAGE */
    	uint8 ui8_MaxPartBlockageMinTh;            /* Max Threshold for Min value for PART_BLOCKAGE */
    	uint8 ui8_MinPartBlockageMaxTh;            /* Min Threshold for Max value for PART_BLOCKAGE */
    	uint8 ui8_MinCondensationMeanTh;           /* Min Threshold for Mean value for CONDENSATION */
    	uint8 ui8_MaxCondensationMeanTh;           /* Max Threshold for Mean value for CONDENSATION */
    	uint8 ui8_MaxVarTh;                        /* Max Threshold for Variance value for CONDENSATION, BLOCKAGE AND NO_BLOCKAGE */
    	uint8 ui8_MinBlockageMeanTh;               /* Min Threshold for Mean value for BLOCKAGE */
    } RTE_GB_t_FctParameter;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint16 ui16_Val;                            /* blockage percentage */
    	uint16 ui16_Conf;                           /* confidence */
    } RTE_GB_t_BlockageInfo;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	RTE_GB_t_eFctId e_FctId;                             /* MPC function identifier */
    	RTE_GB_t_eBlockageStatus e_BlockageStatus;                    /* Blockage status for current MPC function */
    	uint8 ui8_StatusConf;                      /* Confidence on blockage status */
    } RTE_GB_t_FctBlockage;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint32 ui32_Sec;                            /* second */
    	uint32 ui32_MSec;                           /* millisecond */
    	uint64 ui32_USec;                           /* microsecond */
    } RTE_GB_t_Timestamp;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint16 ui16_X;                              /* ROI X position */
    	uint16 ui16_Y;                              /* ROI Y position */
    	uint16 ui16_Width;                          /* ROI width */
    	uint16 ui16_Height;                         /* ROI height */
    } RTE_GB_t_ImageROI;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint8 dummy;			/* Error: number of record elements was 0. Dummy inserted. [Satisfies_rte sws 1192] */
    } RTE_GB_t_HeadLightState;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	float32 f32_alpha;                           
    	float32 f32_alphaSlow;                       
    	float32 f32_alphaFast;                       
    	uint8 ui8_resetConfidenceThreshold;        
    } RTE_GB_t_GBAlgoParameter;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint16 ui16_MinEdgeThreshold;               /* Minimum edge threshold */
    	uint16 ui16_MinDiracThreshold;              /* Minimum edge threshold for Dirac */
    	uint16 ui16_MaxBlurEdgeThreshold;           /* Maximum threshold for blurred edges */
    	uint16 ui16_ConfidentDiracThreshold;        /* Minimum edge threshold to consider the confidence =100 for the Dirac&A-step classification */
    	uint16 ui16_ConfidentRoofThreshold;         /* Minimum edge threshold to consider the confidence =100 for the Roof&Gstep classification */
    	uint16 ui16_MinNbEdges;                     /* Minimum number of edges to consider no full blockage */
    	uint8 ui8_MinPercentDAEdgeInAOI;           /* Minimum percentage of dirac in the AOI to consider No Blockage */
    } RTE_GB_t_HaarAlgoParameter;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint16 ui16_minMaxMinDiffThreshold;         /* Minimum value of (max - min) difference */
    	uint16 ui16_confMaxMinDiffThreshold;        /* Confident minimum value of (max - min) difference */
    	uint8 ui8_confDiffRatioThreshold;          /* Confidente diff ratio threshold (max of the histogram) */
    	uint8 ui8_minBinsHistoThreshold;           /* Minimum number of edge to compute the max histo value */
    	uint8 ui8_maxBinsHistoThreshold;           /* Minimum number of edge to compute the min histo value */
    } RTE_GB_t_DiffRatioAlgoParameter;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint32 ui32_X;                              
    	uint32 ui32_Y;                              
    } RTE_GB_t_ImageSize;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint32 ui32_X;                              
    	uint32 ui32_Y;                              
    } RTE_GB_t_CroppedRoiX;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	float32 f32_x;                               
    	float32 f32_y;                               
    } RTE_GB_t_FocalLength;			

typedef RTE_GB_t_FctParameter     	as_FctParam_array_t[6];      			/* [Satisfies_rte sws 1189] */


typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint16 ui16_MaxTolBlockageDuration;         /* Max duration in second for Tolerated Blockage state */
    	sint8 si8_MaxTolBlockageTemperature;       /* Max sensor temperature in °C at vehicle ignition for the Tolerated blockage state */
    } RTE_GB_t_TSAParameter;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint32 ui32_MinStatusCount;                 /* Min number of occurence of the status for valid classification */
    	float32 f32_Alpha;                           /* Alpha coefficient for status confidence integration */
    	uint8 ui8_HysteresisLimitConf;             /* Confidence value at the other limit of a status hysteresis */
    	as_FctParam_array_t as_FctParam;                         
    	RTE_GB_t_TSAParameter s_TSAParam;                          /* specific parameter for TSA */
    } RTE_GB_t_ManagerParameter;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint16 ui16_AoiIdx;                         /* AOI index */
    	uint16 ui16_X1;                             /* AOI definition */
    	uint16 ui16_X2;                             /* AOI definition */
    	uint16 ui16_Y1;                             /* AOI definition */
    	uint16 ui16_Y2;                             /* AOI definition */
    	uint16 ui16_Reserved;                       
    } RTE_GB_t_AOIDefinition;			

typedef RTE_GB_t_FctBlockage      	RTE_GB_t_FctBlockage_array[6];/* blockage output for MPC functions */	/* [Satisfies_rte sws 1189] */


typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	RTE_GB_t_AOIDefinition s_AOIDef;                            /* current AOI definition */
    	RTE_GB_t_BlockageInfo s_BlockageInfo;                      /* current AOI blockage probability */
    } RTE_GB_t_AOIBlockage;			

typedef RTE_GB_t_AOIBlockage      	RTE_GB_t_AOIBlockage_array[25];/* blockage output per AOI */	/* [Satisfies_rte sws 1189] */


typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	float32 f32_Speed;                           /* vehicle speed */
    	float32 f32_Odometer;                        /* vehicle odometer */
    	RTE_GB_t_eMovementState e_MoveState;                         /* movement state */
    	float32 f32_MoveStateConfidence;             /* movement state confidence */
    	boolean b_HeaterState;                       /* heater state */
    	float32 f32_SensorTemperature;               /* temperature of the camera */
    	uint8 ui8_WiperState;                      
    	boolean b_WiperOutParkPos;                   
    	RTE_GB_t_HeadLightState s_HeadLightState;                    
    } RTE_GB_t_VehicleState;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	float32 f32_x;                               
    	float32 f32_y;                               
    } RTE_GB_t_LensCenter;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	float32 f32_Z;                               
    	float32 f32_Y;                               
    	float32 f32_X;                               
    } RTE_GB_t_SensorSocket;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	float32 f32_Pitch;                           
    	float32 f32_Roll;                            
    	float32 f32_Yaw;                             
    	float32 f32_Quality;                         
    } RTE_GB_t_SensorAngles;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	RTE_GB_t_eBayerPatternType e_BayerPattern;                      /* Bayer pattern type */
    	float32 f32_CycleTime;                       /* cycle time of Generic Blockage algorithm */
    	RTE_GB_t_ImageSize s_ImageSize;                         /* total image size */
    	RTE_GB_t_ImageSize s_CroppedRoiSize;                    /* cropped image size */
    	RTE_GB_t_CroppedRoiX s_CroppedRoiX1;                      /* first pixel position of the cropped ROI */
    	uint32 ui32_BytesPerRow;                    
    	float32 f32_BlackLevelCalib;                 
    	uint32 ui32_BitsPerPixel;                   /* number of bits per pixel */
    	RTE_GB_t_FocalLength s_FocalLength;                       /* camera focal */
    	RTE_GB_t_LensCenter s_LensCenter;                        /* main point */
    	RTE_GB_t_SensorSocket s_SensorSocket;                      /* position of the camera */
    	RTE_GB_t_SensorAngles s_SensorAngles;                      /* eol calibration angles of the camera */
    	float32 f32_GrazingAngle;                    
    } RTE_GB_t_CameraParameter;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	RTE_GB_t_SensorAngles s_CurSensorAngles;                   /* current shift of sensor angles with eol calibration */
    	float32 f32_YawRateRaw;                      /* current vehicle raw yaw rate (from CAN) */
    	float32 f32_YawRate;                         /* current vehicle estimated yaw rate (from vdy) */
    	float32 f32_QualityYawRate;                  /* signal state of current vehicle yaw rate */
    	float32 f32_VarianceYawRate;                 /* variance of estimated vehicle yaw rate */
    } RTE_GB_t_CaliOnline;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint32 ui32_FrameCnt;                       
    	uint64 ui64_Timestamp;                      
    	RTE_GB_t_FctBlockage_array as_FctBlockage;                      
    } RTE_GB_t_FctBlockageData;			

typedef uint8                     	RTE_CALI_t_ui8VinDataByte[17];/* Vehicule VIN */	/* [Satisfies_rte sws 1189] */


typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	float32 f32_Z;                               /* Height over ground */
    	float32 f32_Y;                               /* Offset lateral */
    	float32 f32_X;                               /* Offset longitudinal */
    	uint32 ui32_Quality;                        /* Quality !=0 means sensor socket is calibrated */
    	RTE_CALI_t_eSigStatus e_SigStat;                           /* signal quality of sensor socket data */
    } RTE_CALI_t_SensorSocket;			/* Sensor Socket */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	float32 f32_Pitch;                           /* Pitch angle */
    	float32 f32_Roll;                            /* Roll angle */
    	float32 f32_Yaw;                             /* Yaw angle */
    	float32 f32_Quality;                         /* calibration quality: <2.55°: OK, =2.55°: NOK */
    	RTE_CALI_t_eSigStatus e_SigStat;                           /* signal quality of sensor angles */
    } RTE_CALI_t_SensorAngles;			/* Sensor Angles */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	float32 f32_FrontLeft;                       /* Front Left */
    	float32 f32_FrontRight;                      /* Front Right */
    	float32 f32_RearLeft;                        /* Rear Left */
    	float32 f32_RearRight;                       /* Rear Right */
    	RTE_CALI_t_eSigStatus e_SigStat;                           /* signal quality of height car body */
    } RTE_CALI_t_HeightCarBody;			/* Vehicule level */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	float32 f32_XPos;                            /* x position of the star */
    	float32 f32_ZPos;                            /* z position of the star */
    	float32 f32_Diameter;                        /* diameter of the star */
    	RTE_CALI_t_eSigStatus e_SigStat;                           /* signal quality of star position */
    } RTE_CALI_t_StarPosition;			/* Vehicule Star */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	float32 f32_Z;                               /* the z component of the 3D point */
    	float32 f32_Y;                               /* the y component of the 3D point */
    	float32 f32_X;                               /* the x component of the 3D point */
    } RTE_CALI_t_3DPoint;			/* 3D point generic structure */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	RTE_CALI_t_3DPoint s_CarBodyToZ0FA;                     /* wheel house to Z0, front axle */
    	RTE_CALI_t_3DPoint s_CarBodyToZ0RA;                     /* wheel house to Z0, rear axle */
    	float32 f32_Z0ToGround;                      /* position of the front axle to ground */
    	RTE_CALI_t_StarPosition s_StarPos;                           /* position of the star */
    	RTE_CALI_t_eSigStatus e_SigStat;                           /* signal quality of vehicule parameter */
    } RTE_CALI_t_VehicleParameter;			/* Vehicule parameter */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint32 ui32_Brightness;                     /* Access to current brightness */
    	uint32 ui32_ExposureTime;                   /* Access to current exposure time */
    	uint32 ui32_FrameNumber;                    /* Access to the current frame number */
    } RTE_CALI_t_ImagerState;			/* Image state */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint32 ui32_X;                              /* image width */
    	uint32 ui32_Y;                              /* image height */
    } RTE_CALI_t_ImageSize;			/* Image size */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	float32 f32_X;                               /* x-position of the lens center */
    	float32 f32_Y;                               /* y-position of the lens center */
    } RTE_CALI_t_LensCenter;			/* Lens center */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	float32 f32_K1;                              /* 1 st radial distortion coefficient */
    	float32 f32_K2;                              /* 2 nd radial distortion coefficient */
    	float32 f32_invK1;                           /* 1st inverse distortion coefficient */
    	float32 f32_invK2;                           /* 2nd inverse distortion coefficient */
    } RTE_CALI_t_CameraDistortion;			/* Inverse distortion */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	float32 f32_X;                               /* focal length in x-direction */
    	float32 f32_Y;                               /* focal length in y-direction */
    } RTE_CALI_t_FocalLength;			/* Focal Length */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	RTE_CALI_t_eBayerPatType e_BayerPattern;                      /* Bayer Pattern type */
    	float32 f32_CycleTime;                       /* cycle time of CALI Algo */
    	RTE_CALI_t_FocalLength s_FocalLength;                       /* focal length */
    	RTE_CALI_t_ImageSize s_ImageSize;                         /* image size */
    	RTE_CALI_t_CameraDistortion s_Distortion;                        /* camera inverse distortion parameters */
    	RTE_CALI_t_LensCenter s_LensCenter;                        /* lens center */
    	RTE_CALI_t_SensorSocket s_SensSocketBR;                      /* sensor socket, z measured from front axle */
    	RTE_CALI_t_eSigStatus e_SigStat;                           /* signal quality of camera parameter */
    } RTE_CALI_t_CameraParameter;			/* Camera parameter */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	RTE_CALI_t_eExit e_Reason;                            /* access last calibration exit reason */
    	RTE_CALI_t_eSigStatus e_SigStat;                           /* signal quality of exit reason */
    } RTE_CALI_t_ExitReason;			/* Exit reason */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	float32 f32_Z;                               /* the z component of the 3D pattern position */
    	float32 f32_Y;                               /* the y component of the 3D pattern position */
    	float32 f32_X;                               /* the x component of the 3D pattern position */
    	RTE_CALI_t_eSigStatus e_SigStat;                           /* signal quality of pattern position */
    } RTE_CALI_t_PatternPosition;			/* Pattern position */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	float32 f32_PatternWidth;                    /* calibration target width */
    	float32 f32_PatternHeight;                   /* calibration target height */
    	float32 f32_PatDistCircle2Circle;            /* distance from circle to circle */
    	float32 f32_PatDistCircleToCenter;           /* distance from circle to target center */
    	float32 f32_PatOutCircleDiameter;            /* outer circle diameter */
    	float32 f32_PatInnerCircleDiameter;          /* inner circle diameter */
    	RTE_CALI_t_eSigStatus e_SigStat;                           /* signal quality of pattern parameter */
    } RTE_CALI_t_PatternParameter;			/* Pattern parameter */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint32 ui32_FoVUL_X;                        /* the X component of the upper left field of view */
    	uint32 ui32_FoVUL_Y;                        /* the Y component of the upper left field of view */
    	uint32 ui32_FoVUR_X;                        /* the X component of the upper right field of view */
    	uint32 ui32_FoVUR_Y;                        /* the Y component of the upper riht field of view */
    	uint32 ui32_FoVLL_X;                        /* the X component of the lower left field of view */
    	uint32 ui32_FoVLL_Y;                        /* the Y component of the lower left field of view */
    	uint32 ui32_FoVLR_X;                        /* the X component of the lower right field of view */
    	uint32 ui32_FoVLR_Y;                        /* the Y component of the lower right field of view */
    	RTE_CALI_t_eSigStatus e_SigStat;                           /* signal quality of the field of view */
    } RTE_CALI_t_FieldOfView;			/* Field of view */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint32 ui32_Brightness;                     /* brightness in the ROI where the target will be expected */
    	uint32 ui32_Contrast;                       /* contrast in the ROI where the target will be expected */
    	uint32 ui32_RecPatternMarker;               /* recognized pattern marker in the ROI */
    	float32 f32_VehLevFL;                        /* Front left vehicule level */
    	float32 f32_VehLevFR;                        /* Front right vehicule level */
    	float32 f32_VehLevRL;                        /* Rear left vehicule level */
    	float32 f32_VehLevRR;                        /* Rear right vehicule level */
    	float32 f32_CarBodyFL;                       /* Front Left vehicule body height */
    	float32 f32_CarBodyFR;                       /* Front Right vehicule body height */
    	float32 f32_CarBodyRL;                       /* Rear Left vehicule body height */
    	float32 f32_CarBodyRR;                       /* Rear Right vehicule body height */
    	RTE_CALI_t_eSigStatus e_SigStat;                           /* signal quality of the environment data */
    } RTE_CALI_t_EnvData;			/* Environment data */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	float32 f32_X;                               /* the x component of the 2D point */
    	float32 f32_Y;                               /* the y component of the 2D point */
    	RTE_CALI_t_eSigStatus e_SigStat;                           /* signal quality of the 2D point */
    } RTE_CALI_t_2DPoint;			/* 2D point generic structure */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	RTE_CALI_t_2DPoint s_LeftCircle;                        /* left circle position */
    	RTE_CALI_t_2DPoint s_RightCircle;                       /* right circle position */
    } RTE_CALI_t_TargetExtraction;			/* Target extracted circles */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	RTE_CALI_t_PatternParameter s_PatternParameter;                  /* pattern parameter */
    	RTE_CALI_t_SensorAngles s_SenAnglesTolPos;                   /* tolerance for roll,yall and pitch angle */
    	RTE_CALI_t_SensorAngles s_SenAnglesNom;                      /* nominal sensor mounting angles */
    	RTE_CALI_t_CameraParameter s_CameraParameter;                   /* camera parameter */
    	RTE_CALI_t_VehicleParameter s_VehiculeParameter;                 /* vehicule parameter */
    	RTE_CALI_t_PatternPosition s_PatternPosition;                   /* pattern position for service (mid alignement at the bumper) */
    } RTE_CALI_t_InputParameters;			/* Input Parameters */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	RTE_CALI_t_HeightCarBody s_DynVehLevel;                       /* dynamic vehicule level from flexray signal */
    	RTE_CALI_t_PatternPosition s_PatPosFromDiag;                    /* pattern position from diagnostic signal */
    	RTE_CALI_t_SensorSocket s_SensorSocketFromDiag;              /* sensor socket parameters from diagnostic signal */
    	RTE_CALI_t_ui8VinDataByte ui8_VinDataByte;                     /* vehicule identification number from flexray signal */
    	RTE_CALI_t_ImagerState s_ImagerState;                       /* imager control state signal */
    	RTE_CALI_t_eCALIMode e_CaliMode;                          /* calibration mode signal */
    } RTE_CALI_t_InputSignals;			/* Input Signals */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	RTE_CALI_t_ExitReason s_ExitReason;                        /* exit reason */
    } RTE_CALI_t_State;			/* Caibration state */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	RTE_CALI_t_InputParameters s_Par;                               /* input parameters */
    	RTE_CALI_t_InputSignals s_Sig;                               /* input signals */
    } RTE_CALI_t_RequiredInputs;			/* Calibration inputs */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	RTE_CALI_t_SensorSocket s_SenSocket;                         /* sensor position parameters */
    	RTE_CALI_t_SensorAngles s_SensorAngles;                      /* sensor angles parameters */
    	RTE_CALI_t_eStatus e_Status;                            /* calibration status */
    	RTE_CALI_t_FieldOfView s_FieldOfView;                       /* sensor field of view */
    	RTE_CALI_t_EnvData s_EnvData;                           /* calibration environment data */
    	RTE_CALI_t_ui8VinDataByte ui8_VinDataByte;                     /* last Calibration VIN */
    	RTE_CALI_t_TargetExtraction s_TargetExtraction;                  /* target extracted circles */
    } RTE_CALI_t_ProvidedOutputs;			/* Calibration outputs */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	sint16 nXDist;                              /* xDistance */
    	sint16 nYDist;                              /* yDistance */
    } Vector2_i16_t;			/* Vector with x and y with i16 values */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	sint32 nXDist;                              /* xDistance */
    	sint32 nYDist;                              /* yDistance */
    } Vector2_i32_t;			/* Vector with x and y with i32 values */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	float32 fXDist;                              /* xDistance */
    	float32 fYDist;                              /* yDistance */
    } Vector2_f32_t;			/* Vector with x and y with f32 values */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint32 uiVersionNumber;                     /* Number of used Version @min:0.0 @max:16277215.0 */
    	float32 YawRate;                             /* Estimated vehicle angular rate about vertical axis (offset compensated) */
    	float32 Quality;                             /* Differenz zwischen der kurzzeitgefilterten und langzeitgefilterten yaw rate */
    	OffsetCompState_t OffsetCompState;                     /* Offset state of the yaw rate,
 FullStandStill: voller Stillstandsabgleich
 ShortStandStill: kurzer Stillstandsabgleich
 NoStandStill: kein Stillstandsabgleich, Wert kommt aus dem EEPROM
 NoEeprom: kein Wert im EEPROM, kein Lernwert für die Offsetkompensierung */
    	boolean bSenYawRateState;                    /* yaw rate valid flag 1=Valid. 0= Invalid */
    } ALNYawRate_t;			/* Yaw rate for alignment only from yaw rate sensor @vaddr:VDY_MEAS_ID_ALN_YAW_RATE, ALN_MEAS_ID_YAW_RATE @cycleid:vdy_cycle_id,ALN_ENV @vname:VDYALNYawRate,ALNYawRate */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint32 uiVersionNumber;                     /* Number of used Version @min:0.0 @max:16277215.0 */
    	Algo64DataTimeStamp_t ui64TimeStamp;                       /* 64 bit integer Timestamp */
    } VDYLongLongTimeStamp_t;			/* 64 bit integer Timestamp @vaddr:VDY_MEAS_ID_LONGLONG_TIMESTAMP @cycleid:vdy_cycle_id @vname:VDYInt64TimeStamp */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint32 uiVersionNr;                         /* Version number of interface */
    	ALDWMsgDispRq_t ALDWMsgDispRq;                       /* Access to ALDW message display request */
    	boolean ALDWMenuEnblRq;                      /* Access to ALDW menu enable request */
    	ALDWIndLmpOnRq_t ALDWIndLmpOnRq;                      /* Access to ALDW indication lamp on request */
    	ALDWBrkMsgDispRq_t ALDWBrkMsgDispRq;                    /* Access to ALDW break message display request */
    	ALDWWrnRq_t ALDWWarnRq;                          /* Access to ALDW warning request */
    	ALDWWrnMdRq_t ALDWWarnMdRq;                        /* Access to ALDW warning mode request (pulse/continious) */
    	ALDWPulseTmRq_t ALDWPulseTmRq;                       /* Access to pulse time */
    	uint8 ALDWVibTmRq;                         /* Access to ALDW vibration intensity request */
    	ALDWDrvActvLDP_t ALDWDrvActvLDP;                      /* Access to ALDW driver activity */
    	ALDWLaneChgStatLDP_t ALDWLaneChgStatLDP;                  /* Access to ALDW driver activity due to lane change */
    	ALDWWarnSuppStat_t ALDWWarnSuppStat;                    /* suppression status */
    	uint8 ALDWWarnDelayLt;                     /* Distance to alert threshold Left */
    	uint8 ALDWWarnDelayRt;                     /* Distance to alert threshold Right */
    	uint8 ALDWMenuDispRq;                      
    } LKAOutputCustom_t;			

typedef uint32                    	State_array_t[2];            /* vehicle parameter states @values: struct VDYParaState */	/* [Satisfies_rte sws 1189] */


typedef VehParAddState_t          	State_array_t_0[2];          /* vehicle additional parameter states  @values: struct VDYParaAddState */	/* [Satisfies_rte sws 1189] */


typedef VehParSenorMountingState_t 	State_array_t_1[2];          /* vehicle parameter sensor mounting states   @values: struct VDYParaSensorMountingState */	/* [Satisfies_rte sws 1189] */


typedef VehParSenorState_t        	State_array_t_2[2];          /* vehicle parameter sensor parameter states   @values: struct VDYParaSensorState */	/* [Satisfies_rte sws 1189] */


typedef float32                   	ang_array_t[2];              /* Abscissa: Steering wheel angle sample points */	/* [Satisfies_rte sws 1189] */


typedef float32                   	rat_array_t[2];              /* Ordinate: Base ratio sample points */	/* [Satisfies_rte sws 1189] */


typedef float32                   	vel_array_t[2];              /* Ordinate: Additional ratio by super-imposed steering */	/* [Satisfies_rte sws 1189] */


typedef float32                   	rat_array_t_0[2];            /* Abscissa: Vehicle velocity sample points */	/* [Satisfies_rte sws 1189] */


typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	ang_array_t ang;                                 /* Abscissa: Steering wheel angle sample points */
    	rat_array_t rat;                                 /* Ordinate: Base ratio sample points */
    } swa_t;			/* Table for base steering ratio in dependence of steering wheel angle */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	State_array_t_0 State;                               /* vehicle additional parameter states  @values: struct VDYParaAddState */
    	float32 VehicleWidth;                        /* Vehicle width */
    	float32 CurbWeight;                          /* The weight of a fueled automobile with standard equipment but without cargo or passengers @min:100.0 @max:65000.0 */
    	float32 OverhangFront;                       /* Longitudinal distance from the center of front axle group to the front most point @min:0.0 @max:5.0 */
    } VehParAdd_t;			/* Vehicle additional parameters */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	State_array_t_1 State;                               /* vehicle parameter sensor mounting states   @values: struct VDYParaSensorMountingState */
    	float32 LatPos;                              /* Lateral displacment related to vehicle reference point (+ left) @min:-25.0 @max:25.0 */
    	float32 LongPos;                             /* Longitudinal displacment related to vehicle reference point (+ fwd) @min:-25.0 @max:25.0 */
    	float32 VertPos;                             /* Vertical displacemnt (height) over ground @min:-25.0 @max:25.0 */
    	float32 LongPosToCoG;                        /* Longitudinal displacment related to vehicle center of gravity (+ fwd) @min:1.0 @max:4.0 */
    	float32 PitchAngle;                          /* Angular displacement about sensor lateral axis (+ down) @min:0.0 @max:40.0 */
    	Orientation_t Orientation;                         /* Angular displacement about sensor longitudinal axis */
    	float32 YawAngle;                            /* Angular displacemnt about vehicle vertical axis @min:0.0 @max:40.0 */
    } SensorMounting_t;			/* Sensor mounting geometry */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	State_array_t_2 State;                               /* vehicle parameter sensor parameter states   @values: struct VDYParaSensorState */
    	float32 CoverDamping;                        /* Attenuation of secondary surface (two-way) in dB @min:-25.0 @max:25.0 */
    	float32 fCoverageAngle;                      /* Coverage Angel @min:-25.0 @max:25.0 */
    	float32 fLobeAngle;                          /* Lobe Angle @min:-25.0 @max:25.0 */
    	float32 fCycleTime;                          /* Global Cycle Time of the radar cycle used by the components in the radar cycle task @min:0.0 @max:100.0 */
    	uint8 uNoOfScans;                          /* Number of scanns @min:1.0 @max:2.0 */
    } Sensor_t;			/* Sensor specific parameters */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	vel_array_t vel;                                 /* Ordinate: Additional ratio by super-imposed steering */
    	rat_array_t_0 rat;                                 /* Abscissa: Vehicle velocity sample points */
    } vel_t;			/* Table for additional steering ratio part in dependence of velocity */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	swa_t swa;                                 /* Table for base steering ratio in dependence of steering wheel angle */
    	vel_t vel;                                 /* Table for additional steering ratio part in dependence of velocity */
    } StRatio_t;			/* Steering ratio */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	State_array_t State;                               /* vehicle parameter states @values: struct VDYParaState */
    	float32 SelfSteerGrad;                       /* Rate of change in steering wheel angle with respect to change in steady-state lateral acceleration. @min:-128.0 @max:128.0 */
    	StRatio_t SteeringRatio;                       /* Rate of change of steering wheel angle at given steering wheel trim position, with respect to change in average steer angel of a pair of steered wheels. In case of active steering systems this parameter is dependent additional vehicle states @min:1.0 @max:30.0 */
    	float32 WheelBase;                           /* Longitudinal distance between  the center of tire contact of pair of wheels on same vehicle side @min:0.0 @max:10.0 */
    	float32 TrackWidthFront;                     /* Lateral distance between the center of tire contact of pair of wheels on front vehicle axle @min:1.0 @max:5.0 */
    	float32 TrackWidthRear;                      /* Lateral distance between the center of tire contact of pair of wheels on rear vehicle axle @min:1.0 @max:5.0 */
    	float32 VehWeight;                           /* Vehicle weight @min:1.0 @max:60000.0 */
    	float32 CntrOfGravHeight;                    /* Imaginary point where the total weight of the body may be thought to be concentrated @min:0.2 @max:3.0 */
    	float32 AxisLoadDistr;                       /* The ratio of the vertical load at rear axle to total vehicle vertical load @min:0.1 @max:0.9 */
    	float32 WhlLoadDepFrontAxle;                 /* Change of difference in wheel circumferential speed resulting from this load transfer during cornering at front axle @min:0.0 @max:3.0 */
    	float32 WhlLoadDepRearAxle;                  /* Change of difference in wheel circumferential speed resulting from this load transfer during cornering at rear axle @min:0.0 @max:3.0 */
    	float32 WhlCircumference;                    /* Dynamic wheel rolling circumference @min:1.0 @max:5.0 */
    	uint8 DrvAxle;                             /* Powered Axle @min:1.0 @max:5.0 */
    	uint8 WhlTcksPerRev;                       /* Number of sensor pulses per wheel revolution @min:1.0 @max:150.0 */
    	float32 FrCrnrStiff;                         /* The rate of change of lateral force with respect to change in side slip angle at front axle @min:-25.0 @max:25.0 */
    	float32 ReCrnrStiff;                         /* The rate of change of lateral force with respect to change in side slip angle at rear axle @min:-25.0 @max:25.0 */
    } VehParMain_t;			/* Vehicle main parameters */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint32 uiVersionNumber;                     /* Number of used Version @min:0.0 @max:16277215.0 */
    	VehParMain_t VehParMain;                          /* Vehicle main parameters */
    	VehParAdd_t VehParAdd;                           /* Vehicle additional parameters */
    	SensorMounting_t SensorMounting;                      /* Sensor mounting geometry */
    	Sensor_t Sensor;                              /* Sensor specific parameters */
    } VehPar_t;			/* Static Vehicle parameters */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	boolean bSeatButtonPressed;                  
    	boolean bWindowButtonsPressed;               
    	boolean bMirrorButtonsPressed;               
    	boolean bIntLightsButtonsPressed;            
    	boolean bExtLightsButtonsPressed;            
    	boolean bSunRoofButtonsPressed;              
    	boolean bStWhlButtonsPressed;                
    	boolean bMidConsoleButtonsPressed;           
    	boolean bRadioButtonsPressed;                
    	boolean bOtherButtonsPressed;                
    } lka_aldw_buttons_t;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint32 uiVersionNr;                         /* Version number of interface */
    	eALDWMode_t eALDWMode;                           /* Daimler ALDW Mode */
    	eALDWOpMode_t eALDWOpMode;                         /* Daimler ALDW operational mode */
    	eLkaMotorStatus_t eMotorStatus;                        /* Daimler Steering Wheel
Vibration Motor Status */
    	lka_aldw_buttons_t sButtons;                            
    } LKAInputCustom_t;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	LDPMsgDispRq_t LDPMsgDispRq;                        /* Access to LDP message display request */
    	boolean LDPMenuEnblRq;                       /* Access to LDP menu enable request */
    	LDPIndLmpOnRq_t LDPIndLmpOnRq;                       /* Access to LDP indication lamp on request */
    	LDPBrkMsgDispRq_t LDPBrkMsgDispRq;                     /* Access to LDP break message display request */
    	uint8 LDPMenuDispRq;                       
    } LDPWarnRq_t;			

typedef uint32                    	State_array_t_4[2];          /* State of the values as bitfield @values: struct VDYOutState */	/* [Satisfies_rte sws 1189] */


typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	FCT_OP_MODE_t FCT_OP_MODE;                         
    } ENUM_DEFS_t;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	float32 fLaneWidth;                          /* lane width in cm (in case of only on lane marker use 4m) */
    	float32 fLaneWidthStdDev;                    
    	float32 fCurvature;                          /* lane mean curvature (could be mean value between to left and right curvature) */
    	float32 fCurvatureStdDev;                    
    	float32 fCurvatureGrad;                      
    	float32 fCurvatureGradStdDev;                
    	quality_t uiLaneQuality;                       /* current lane quality, should be above 70 in case of a valid lane */
    	float32 fLaneMarkerWidthLeft;                /* ane marker width left */
    	float32 fLaneMarkerWidthRight;               /* ane marker width right */
    	eLaneMarkerType eLaneMarkerTypeLeft;                 /* set either to Lane_mark_type_broken or Lane_mark_type_solid, or in case of an invalid marker at the left side - use Lane_mark_type_virtual */
    	eLaneMarkerType eLaneMarkerTypeRight;                /* set either to Lane_mark_type_broken or Lane_mark_type_solid, or in case of an invalid marker at the left side - use Lane_mark_type_virtual */
    } lka_lane_t;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	float32 fOrientation;                        /* heading angle of the object within the lane */
    	float32 rOrientationStdDev;                  
    	float32 fPitch;                              /* pitch angle of the vehicle inside the lane (use 0 if unsure) */
    	float32 fPitchStdDev;                        
    	float32 fLatDisplacement;                    /* lateral displacement from the center of the lane (left+, right-), (in case of only on lane marker use a "virtual lane width of 4m) */
    	float32 fLatDisplacementStdDev;              
    } lka_lane_rel_pos_t;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	boolean bLSActive;                           /* Lane sencing active */
    	boolean bLSLaneSwitchLeft;                   /* Lane change to left */
    	boolean bLSLaneSwitchRight;                  /* Lane change to right */
    	boolean bLSCondensation;                     
    	boolean bLSBlockage;                         
    } lka_lane_sens_status_t;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	float32 fEgoVelocity;                        
    	float32 fEgoAcceleration;                    
    	float32 fVehicleWidth;                       
    	float32 fSpeedoSpeed;                        /* in defined unit */
    	eSpeedUnit_t eSpeedoSpeedUnit;                    
    } lka_ldw_input_t;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	float32 fSteeringWheelAngle;                 
    	float32 fCurvature;                          /* ego course from VDY */
    	float32 fSteeringWheelCurvature;             /* driver intendet curvature from VDY */
    	float32 fSteeringWheelCurvatureStdDev;       /* driver intendet curvature std dev from VDY */
    	float32 fBrakeTorque;                        
    	percentage_t uiGasPedalPos;                       
    	boolean bKickDown;                           
    	boolean bBrakePedalPressed;                  
    	boolean bBreakIntervention;                  /* Bussignal: BrkIntrvntn_Actv_ESP */
    	boolean bEmergencyBreak;                     /* Bussignal: EmgBrk_Actv */
    	boolean bFullBreak;                          /* Bussignal: FullBrk_Actv */
    } lka_driver_input_t;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint32 uiVersionNr;                         /* Version number of interface */
    	float32 fCycleTime;                          
    	lka_lane_t sLane;                               
    	lka_lane_rel_pos_t sLaneRelPos;                         
    	lka_lane_sens_status_t sLaneSenceStatus;                    
    	lka_ldw_input_t sLDWInput;                           
    	lka_driver_input_t sDriverInput;                        
    } LKAInputGeneric_t;			

typedef uint32                    	State_array_t_3[2];          /* State of the vehicle input signals @name: Status @values: struct VDYInSignalState @min:-2.86 @max:2.86 */	/* [Satisfies_rte sws 1189] */


typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	State_array_t_3 State;                               /* State of the vehicle input signals @name: Status @values: struct VDYInSignalState @min:-2.86 @max:2.86 */
    	float32 YawRate;                             /* VDY_SIN_POS_YWR @min:-2.86 @max:2.86 */
    	float32 YawRateTemp;                         /* VDY_SIN_POS_YWR_TEMP @min:-2.86 @max:2.86 */
    	float32 StWheelAngle;                        /* VDY_SIN_POS_SWA */
    	float32 LatAccel;                            /* VDY_SIN_POS_LATA */
    	float32 WhlVelFrLeft;                        /* VDY_SIN_POS_WVEL_FL */
    	float32 WhlVelFrRight;                       /* VDY_SIN_POS_WVEL_FR */
    	float32 WhlVelReLeft;                        /* VDY_SIN_POS_WVEL_RL */
    	float32 WhlVelReRight;                       /* VDY_SIN_POS_WVEL_RR */
    	float32 YawRateInt;                          /* VDY_SIN_POS_YWRINT @min:-2.86 @max:2.86 */
    	float32 YawRateIntTemp;                      /* VDY_SIN_POS_YWRINT_TEMP @min:-2.86 @max:2.86 */
    	float32 LongAccel;                           /* VDY_SIN_POS_LONGA */
    	float32 RearWhlAngle;                        /* VDY_SIN_POS_RSTA */
    	float32 VehVelocityExt;                      /* VDY_SIN_POS_VEHVEL_EXT */
    	float32 VehLongAccelExt;                     /* VDY_SIN_POS_VEHACL_EXT */
    	LongDirState_t WhlDirFrLeft;                        /* VDY_SIN_POS_WDIR_FL */
    	LongDirState_t WhlDirFrRight;                       /* VDY_SIN_POS_WDIR_FR */
    	LongDirState_t WhlDirReLeft;                        /* VDY_SIN_POS_WDIR_RL */
    	LongDirState_t WhlDirReRight;                       /* VDY_SIN_POS_WDIR_RR */
    	uint8 WhlTicksDevFrLeft;                   /* VDY_SIN_POS_WTCKS_FL */
    	uint8 WhlTicksDevFrRight;                  /* VDY_SIN_POS_WTCKS_FR */
    	uint8 WhlTicksDevReLeft;                   /* VDY_SIN_POS_WTCKS_RL */
    	uint8 WhlTicksDevReRight;                  /* VDY_SIN_POS_WTCKS_RR */
    	ActGearPos_t ActGearPos;                          /* VDY_SIN_POS_GEAR */
    	uint16 BrakeActLevel;                       /* VDY_SIN_POS_BRAKE */
    	ParkBrakeState_t ParkBrakeState;                      /* VDY_SIN_POS_PBRK */
    	LongDirState_t VehLongDirExt;                       /* VDY_SIN_POS_VDIR */
    	VehLongMotStateExt_t VehLongMotStateExt;                  /* VDY_SIN_POS_VMOT */
    	float32 CurveC0Ext;                          /* VDY_SIN_POS_CRV */
    	float32 CurveC1Ext;                          /* VDY_SIN_POS_SSA */
    	float32 SideSlipAngleExt;                    /* VDY_SIN_SIZE_DW */
    } VehSigMain_t;			/* Main Vehicle dynacmis sensor signals */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	float32 EnvTemp;                             /* Ambient environmental temperature */
    	TurnSignal_t TurnSignal;                          /* Turn signal switch state */
    	float32 RoadWhlAngFr;                        /* Steering angle (road wheel) at front axle @min:-25.0 @max:25.0 */
    	float32 RoadWhlAngRe;                        /* Steering angle (road wheel) at rear axle @min:-25.0 @max:25.0 */
    	float32 Odometer;                            /* Total driven distance @min:-25.0 @max:25.0 */
    } VehSigAdd_t;			/* Additional Vehicle dynacmis sensor signals */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	TransmissionGear_t ActualGear;                          /* Indicates current used gear position */
    } PowerTrain_t;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	boolean ABSCtrl;                             /* Attenuation of secondary surface (two-way) @min:0.0 @max:1.0 */
    	boolean TCSCtrl;                             /* Test @min:0.0 @max:1.0 */
    } Brake_t;			/* Sensor specific parameters */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint32 uiVersionNumber;                     /* Number of used Version @min:0.0 @max:16277215.0 */
    	VehSigMain_t VehSigMain;                          /* Main Vehicle dynacmis sensor signals */
    	VehSigAdd_t VehSigAdd;                           /* Additional Vehicle dynacmis sensor signals */
    	PowerTrain_t PowerTrain;                          
    	Brake_t Brake;                               /* Sensor specific parameters */
    } VehSig_t;			/* Main Vehicle dynacmis sensor signals @vaddr:VDY_MEAS_ID_VEH_SIG @cycleid:vdy_cycle_id @vname:VehSig */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	fYawRate_t StandStillOffset;                    /* Stand still Yaw rate offset */
    	sint32 StandStillState;                     /* Stand still Yaw rate offset state */
    	fYawRate_t DynOffset;                           /* Dynamic Yaw rate offset */
    	fVariance_t DynVariance;                         /* Dynamic Yaw rate offset Variance */
    } Ywr_t;			/* Yaw rate offset result */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	fAngle_t Offset;                              /* Steering wheel angle offset */
    	fVariance_t Variance;                            /* Steering wheel angle offset variance */
    	sint32 State;                               /* Steering wheel angle offset state */
    } Swa_t;			/* Steering wheel angle offset result */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	fAngle_t Offset;                              /* Steering wheel angle offset */
    	fVariance_t Variance;                            /* Steering wheel angle offset variance */
    	sint32 State;                               /* Steering wheel angle offset state */
    } Ay_t;			/* Lat accel offset result */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint32 uiVersionNumber;                     /* Number of used Version @min:0.0 @max:16277215.0 */
    	Ywr_t Ywr;                                 /* Yaw rate offset result */
    	Swa_t Swa;                                 /* Steering wheel angle offset result */
    	Ay_t Ay;                                  /* Lat accel offset result */
    } VDYOffsets_t;			/* The offsets of the vdy input signals like yaw rate @vaddr:VDY_MEAS_ID_OFFSETS @cycleid:vdy_cycle_id @vname:VDYOffsets */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint32 uiVersionNumber;                     /* Version number of interface @min:1.0 @max:16777215.0 */
    	AlgoDataTimeStamp_t uiTimeStamp;                         /* System time stamp added to the vdy output data */
    	uiTime_t CycleTime;                           /* component cycle time */
    	VDYCaliState_t CaliMode;                            /* Calibration inhibition states */
    	VDYCtrlState_t CtrlMode;                            /* Operating modes of vdy component */
    } BSW_s_VDYCtrlData_t;			/* @vaddr:VDY_MEAS_ID_CTRLDATA @cycleid:vdy_cycle_id @vname:VDYCtrlData */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	VDYErrState_t InputSignalError;                    /* input signal errors */
    	VDYErrState_t InputSignalPeakError;                /* input signal peak errors */
    } SignalInputErrors_t;			/* Signal input errors */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	VDYErrState_t InputParameterError;                 /* Input Parameter error */
    } ParInputErrors_t;			/* Parameter input errors */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	VDYErrState_t YwrOffsRg;                           /* Yaw rate offset range error */
    	VDYErrState_t SwaOffsRg;                           /* Steering wheel angle offset range error */
    	VDYErrState_t AyOffsRg;                            /* Lateral acceleration offset range error */
    	VDYErrState_t VelCorrRg;                           /* Velocity correction factor range error */
    	VDYErrState_t NVMYwrOffsRg;                        /* Eeprom Yaw rate offset range error */
    	VDYErrState_t NVMSwaOffsRg;                        /* Eeprom Steering wheel angle offset range error */
    	VDYErrState_t NVMAyOffsRg;                         /* EEprom Lateral acceleration offset range error */
    	VDYErrState_t NVMVelCorrRg;                        /* EEprom Velocity correction factor range error */
    	VDYErrState_t VelCorrWin;                          /* Velocity correction factor window error */
    	VDYErrState_t VelMon;                              /* Velocity monitoring error */
    	VDYErrState_t VelMonLt;                            /* Velocity monitoring long-term error */
    	VDYErrState_t VelocityErr;                         /* Velocity out of physical range error */
    	VDYErrState_t YawRateErr;                          /* Yaw rate out of physical range error */
    	VDYErrState_t YwrMonVehHalt;                       /* Yaw rate monitoring during vehicle halt */
    	VDYErrState_t YwrMonVehDOff;                       /* Yaw rate monitoring during vehicle drive off */
    	VDYErrState_t YwrMonAdmWdrwl;                      /* Yaw rate monitoring at admission and withdrawal of vehicle standstill */
    	VDYErrState_t YwrACCMonAlignm;                     /* ACC Yaw rate offset monitoring over alignment */
    	VDYErrState_t YwrCGMonAlignm;                      /* CG Yaw rate offset monitoring over alignment */
    	VDYErrState_t YwrMonVehHaltCal;                    /* Yaw rate calibration monitoring during vehicle halt */
    	VDYErrState_t VDY_FS_YR_VS_WSP;                    /* Fusi error, difference between yaw rate and wheel speed yaw rate to high */
    	VDYErrState_t VDY_FS_YR_VS_AY;                     /* Fusi error, difference between yaw rate and lateral acceleration yaw rate to high */
    	VDYErrState_t VDY_FS_YR_VS_SWA;                    /* Fusi error, difference between yaw rate and steering wheel yaw rate to high */
    	VDYErrState_t VDY_VEH_VEL_NOT_AVAILABLE;           /* Global error state for veh velocity not available */
    	VDYErrState_t VDY_VEH_YWR_NOT_AVAILABLE;           /* Global error state for yaw rate not availabel */
    } OutPutErrors_t;			/* Output values and internalal errors */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint32 uiVersionNumber;                     /* Number of used Version @min:0.0 @max:16277215.0 */
    	SignalInputErrors_t SignalInputErrors;                   /* Signal input errors */
    	ParInputErrors_t ParInputErrors;                      /* Parameter input errors */
    	OutPutErrors_t OutPutErrors;                        /* Output values and internalal errors */
    } VDYErrors_t;			/* The vdy errors input signals/parameters
Output errors, internal errors, @vaddr:VDY_MEAS_ID_ERRORS @cycleid:vdy_cycle_id @vname:VDYErrors */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	fRatio_t CorrFact;                            /* Corrections factors @NAME: Fact */
    	fVelocity_t Velo;                                /* Velocity of this hist */
    	float32 Dev;                                 /* Confidence of correction factors */
    } VelCorr_t;			/* Longitudinal velocity correction */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	fAngle_t ZeroAngle;                           /* Steering wheel angle zero point offset value */
    	uint32 CalStatus;                           /* Steering wheel angle zero point offset status */
    } VDYNvStWhlAngCal_t;			/* Steering wheel angle zero point offset estimation */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	float32 SlfStGrad;                           /* Understeer / Oversteer gradient value */
    	uint8 SlfStGradMax;                        /* Understeer / Oversteer gradient max value */
    	uint8 SlfStGradMin;                        /* Understeer / Oversteer gradient min value */
    	sint8 CalStatus;                           /* Understeer / Oversteer gradient status */
    	uint8 Dummy;                               /* Understeer / Oversteer gradient Dummy */
    } VDYNvSlfStGradCal_t;			/* Understeer / Oversteer gradient estimation */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	fYawRate_t ZeroRate;                            /* Yaw rate zero point offset value */
    	fYawRate_t ZeroRateMin;                         /* Yaw rate zero point for minimum detection */
    	fYawRate_t ZeroRateMax;                         /* Yaw rate zero point for maximum detection */
    	uint32 CalStatus;                           /* Yaw rate zero point offset status */
    } YwRate_t;			/* Yaw rate  zero point offset value */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	fAccel_t ZeroAccel;                           /* Lateral accleration zero point offset value */
    	uint32 CalStatus;                           /* Lateral accleration zero point offset status */
    } LatAcc_t;			/* Lateral accleration zero point offset estimation */

typedef VelCorr_t                 	VelCorr_array_t[3];          /* Longitudinal velocity correction */	/* [Satisfies_rte sws 1189] */


typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	float32 Wld_front;                           /* Wheel load dependency front axis @NAME: WldFront */
    	float32 Wld_rear;                            /* Wheel load dependency rear axis @NAME: WldRear */
    	uint8 Wld_front_quality;                   /* Wheel load dependency quality front axis @NAME: WldFrontQuality */
    	uint8 Wld_rear_quality;                    /* Wheel load dependency quality rear axis @NAME: WldRearQuality */
    } VDYNvWldCal_t;			/* Wheel load dependency */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint32 uiVersionNumber;                     /* Number of used Version @min:0.0 @max:16277215.0 */
    	VDYNvStWhlAngCal_t StWhlAng;                            /* Steering wheel angle zero point offset estimation */
    	VDYNvSlfStGradCal_t SlfstGrad;                           /* Understeer / Oversteer gradient estimation */
    	YwRate_t YwRate;                              /* Yaw rate  zero point offset value */
    	LatAcc_t LatAcc;                              /* Lateral accleration zero point offset estimation */
    	VelCorr_array_t VelCorr;                             /* Longitudinal velocity correction */
    	VDYNvWldCal_t Wld;                                 /* Wheel load dependency */
    	uint32 State;                               /* Read status respective write request */
    } VDYNvIoData_t;			/* The vdy nvm input and output data stuct @vaddr:VDY_MEAS_ID_NVM_READ, VDY_MEAS_ID_NVM_WRITE @cycleid:vdy_cycle_id @vname:VDYNvIoDataRD,VDYNvIoDataWR */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	float32 Velocity;                            /* Based on wheel speeds, slip compensated, uncorrected and without sign @min:0.0 @max:128.0 */
    	float32 Accel;                               /* Longitudinal acceleration in travel direction (compensated for road gradients) @min:-20.0 @max:20.0 */
    	float32 varVelocity;                         /* Longitudinal velocity variance @min:0.0 @max:1000.0 */
    	float32 varAccel;                            /* Longitudinal acceleration variance @min:1.0 @max:5.0 */
    } MotVarVehDyn_t;			/* Longitudinal motion variables */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	float32 corrFact;                            /* Velocity correction factor @min:0.8 @max:1.2 */
    	float32 corrVar;                             /* Corrected  velocity variances @min:0.0 @max:5.0 */
    	float32 corrVelo;                            /* Velocity with correction of forward looking beam sensor @min:0.0 @max:128.0 */
    	float32 corrVeloVar;                         /* Corrected  velocity variances @min:0.0 @max:5.0 */
    	float32 minVelo;                             /* Min velocity @min:0.0 @max:128.0 */
    	float32 maxVelo;                             /* max velocity @min:0.0 @max:128.0 */
    } VeloCorrVehDyn_t;			/* Longitudinal Velocity correction */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	float32 corrAccel;                           /* Accel with correction of forward looking beam sensor @min:-20.0 @max:20.0 */
    	float32 corrAccelVar;                        /* Corrected  accel variances @min:1.0 @max:5.0 */
    } AccelCorrVehDyn_t;			/* Longitudinal acceleration correction */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	MotVarVehDyn_t MotVar;                              /* Longitudinal motion variables */
    	VeloCorrVehDyn_t VeloCorr;                            /* Longitudinal Velocity correction */
    	AccelCorrVehDyn_t AccelCorr;                           /* Longitudinal acceleration correction */
    } Longitudinal_t;			/* Longitudinal motion variables */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	float32 Curve;                               /* Driven vehicle curve as inverse radius (related to vehicle CoG) @min:0.1 @max:0.9 */
    	float32 C1;                                  /* Driven vehicle curve c1 @min:0.1 @max:0.9 */
    	float32 Gradient;                            /* Time derivative of course curvature @min:1.0 @max:30.0 */
    	float32 varC0;                               /* Variance of course c0 curvature @min:-128.0 @max:128.0 */
    	float32 varC1;                               /* Variance of course c1 curvature @min:-128.0 @max:128.0 */
    	float32 Quality;                             /* Quality of course curvature @min:-128.0 @max:128.0 */
    } CurveVehDyn_t;			/* Curve */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	float32 Curve;                               /* Driver intended curvature (derived from steering wheel angle), related to vehicle CoG @min:0.0 @max:3.0 */
    	float32 Variance;                            /* Driver intended curvature variance @min:-25.0 @max:25.0 */
    	float32 Gradient;                            /* Time derivative of dirver intended curvature @min:-25.0 @max:25.0 */
    } DrvIntCurveVehDyn_t;			/* Driver intended curvature */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	float32 LatAccel;                            /* Acceleration perpendicular to travel direction (road bank angle compensated), related to vehicle CoG */
    	float32 Variance;                            /* Lateral acceleration variance */
    } LatAccelVehDyn_t;			/* Lateral acceleration */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	float32 SideSlipAngle;                       /* Vehicle body side slip angle, related to CoG */
    	float32 Variance;                            /* Vehicle side slip angle variance */
    } SideSlipVehDyn_t;			/* Vehice body side slip angle */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	float32 YawRate;                             /* Estimated vehicle angular rate about vertical axis (offset compensated) */
    	float32 Variance;                            /* Estimated vehicle yaw rate variance */
    	float32 Quality;                             /* Estimated vehicle yaw rate quality */
    } YawRateVehDyn_t;			/* Yaw rate data */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	MotState_t MotState;                            /* Moving (forward or reverse)
Moving forward
Moving reverse
Stand still */
    	float32 Confidence;                          /* Confidence of motion state @min:0.0 @max:100.0 */
    } MotionStateVehDyn_t;			/* Lateral motion variables */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	float32 YawRateMaxJitter;                    /* Sync Object  (EM only) */
    	boolean bStandStill;                         /* Stand Still flag */
    } LegacyVehDyn_t;			/* Vehicle sensor qualifiers */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	YawRateVehDyn_t YawRate;                             /* Vehicle yaw rate */
    	CurveVehDyn_t Curve;                               /* Curve */
    	DrvIntCurveVehDyn_t DrvIntCurve;                         /* Driver intended curvature */
    	LatAccelVehDyn_t Accel;                               /* Lateral acceleration */
    	SideSlipVehDyn_t SlipAngle;                           /* Vehice body side slip angle */
    } Lateral_t;			/* Lateral motion variables */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint32 uiVersionNumber;                     /* Version of interface @min:0.0 @max:16277215.0 */
    	AlgoDataTimeStamp_t uiTimeStamp;                         /* Time stamp of data */
    	AlgoCycleCounter_t uiCycleCounter;                      /* Cycle counter of producer algo */
    	Longitudinal_t Longitudinal;                        /* Longitudinal motion variables */
    	Lateral_t Lateral;                             /* Lateral motion variables */
    	MotionStateVehDyn_t MotionState;                         /* Lateral motion variables */
    	LegacyVehDyn_t Legacy;                              /* Vehicle sensor qualifiers */
    	State_array_t_4 State;                               /* State of the values as bitfield @values: struct VDYOutState */
    } VehDyn_t;			/* Vehicle dynamic data (VDY output) */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	VehDyn_t VehDyn;                              /* Vehicle dynamic data (VDY output) @vaddr:RSP_MEAS_ID_VEH_DYN, VDY_MEAS_ID_VEH_DYN @cycleid:RSP_ENV,vdy_cycle_id @vname:RSPVehDyn,VehDyn */
    	VehPar_t VehPar;                              /* Static Vehicle parameters @vaddr:VDY_MEAS_ID_VEH_PAR, RSP_MEAS_ID_VEH_PAR @cycleid:vdy_cycle_id,RSP_ENV @vname:VehPar,RSPVehPar */
    } Dummy4PDO_ARS_t;			/* Dummy struct only for PDO */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	fCurve_t Curve;                               /* Curve */
    } WhlCurve_t;			/* Wheel speed curve all axles */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	fCurve_t Curve;                               /* Curve */
    } WhlFrCurve_t;			/* Wheel speed curve front axle */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	fCurve_t Curve;                               /* Curve */
    } WhlReCurve_t;			/* Wheel speed curve rear axle */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	fCurve_t Curve;                               /* Curve */
    } YwRateCurve_t;			/* Yaw rate sensor curve */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	fCurve_t Curve;                               /* Curve */
    } AyCurve_t;			/* Lateral acceleration curve */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	fCurve_t Curve;                               /* Curve */
    } SwaCurve_t;			/* Steering angle yaw rate curve */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	fCurve_t Curve;                               /* Curve */
    } DrvIntCurve_t;			/* Steering wheel angle curve */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	fCurve_t Curve;                               /* Curve */
    } VehYawCurve_t;			/* Vehicle yaw rate curve */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint32 uiVersionNumber;                     /* Number of used Version @min:0.0 @max:16277215.0 */
    	WhlCurve_t Whl;                                 /* Wheel speed curve all axles */
    	WhlFrCurve_t WhlFr;                               /* Wheel speed curve front axle */
    	WhlReCurve_t WhlRe;                               /* Wheel speed curve rear axle */
    	YwRateCurve_t YwRate;                              /* Yaw rate sensor curve */
    	AyCurve_t Ay;                                  /* Lateral acceleration curve */
    	SwaCurve_t Swa;                                 /* Steering angle yaw rate curve */
    	DrvIntCurve_t DrvInt;                              /* Steering wheel angle curve */
    	VehYawCurve_t VehYaw;                              /* Vehicle yaw rate curve */
    } VDYEstCurves_t;			/* The vdy estimated curves @vaddr:VDY_MEAS_ID_EST_CURVES @cycleid:vdy_cycle_id @vname:VDYCrv */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint32 uiVersionNr;                         /* Version number of interface */
    	eLDWState_t eLDWState;                           /* activation state:
off - system is shut down
onpassive - system is activated but no warnings will be issued
onready - system is activated an ready to warn */
    	boolean bWarnLeft;                           
    	boolean bWarnRight;                          
    } LKAOutputGeneric_t;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint32 uiVersionNumber;                     /* Number of used Version @min:0.0 @max:16277215.0 */
    } FCTSenErrorOut_t;			/* FCTSen error output structure @vaddr:FCT_MEAS_ID_SEN_ERROR_OUT_VADDR @cycleid:FCT_ENV @vname:FCTSenErrorOut */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	Dem_DTCType DTC;                                 
    	Dem_DTCStatusMaskType DTCStatus;                           
    } SwcRoElite_QueueElementType;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	c24_0_16777215_1_SNA_na ROE_DTC_XX;                          
    	c08_0_255_1_SNA_na ROE_DTC_Stat_XX;                     
    	c32_0_4294967295_1_SNA_na ROE_Header_XX;                       
    } SwcRoElite_MsgType;			

typedef SwcRoElite_QueueElementType 	SwcRoElite_QueueType[5];     			/* [Satisfies_rte sws 1189] */


typedef UInt8                     	DstPtrType[42];                			/* [Satisfies_rte sws 1189] */



typedef uint8                     	uint8_Transparent_array_t[512];			/* [Satisfies_rte sws 1189] */


typedef uint8                     	aui8_versionInfo_array_t[52];  			/* [Satisfies_rte sws 1189] */


typedef uint8                     	aui8_versionInfo_array_t_0[4];			/* [Satisfies_rte sws 1189] */


typedef uint32                    	aui32_Reserved_array_t[16];    			/* [Satisfies_rte sws 1189] */


typedef float32                   	af32_WindshieldCoefficients_array_t[5];			/* [Satisfies_rte sws 1189] */


typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	float32 f32_CurveLightRotAngleCutoff_Lt;     
    	float32 f32_CurveLightRotAngleCutoff_Rt;     
    	float32 f32_CurveLightRotAngle_Lt;           
    	float32 f32_CurveLightRotAngle_Rt;           
    	float32 f32_LightDistance;                   
    	float32 f32_LightOutput;                     
    	uint32 ui32_HighBeamState;                  
    	uint32 ui32_LightStyle_Lt;                  
    	uint32 ui32_LightStyle_Rt;                  
    } S_HeadlightState;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint32 ui32_FogLampFront;                   
    	uint32 ui32_FogLampRear;                    
    } S_VehicleState;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint32 ui32_WiperOutsideParkPos;            
    	uint32 ui32_WiperState;                     
    } S_WiperInfo;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint32 ui32_timestampHigh;                  /* The HighDoubleWord of 64 bit timestamp. */
    	uint32 ui32_timestampLow;                   /* The LowDoubleWord of 64 bit timestamp. */
    } s_Timestamp_64_Bit;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	sint32 si32_ROIStartX_Right;                
    	sint32 si32_ROIStartY_Left;                 
    	sint32 si32_ROIStartX_Left;                 
    	sint32 si32_ROIStartY_Right;                
    	float32 f32_Blacklevel;                      
    } S_MonoStereoImageData;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	float32 f32_FocalLength;                     
    	float32 f32_MainPointX;                      
    	float32 f32_MainPointY;                      
    	float32 f32_Distortion1;                     
    	float32 f32_Distortion2;                     
    	float32 f32_CameraAlignMax;                  
    	float32 f32_CameraAlignMin;                  
    	float32 f32_COG2FrontAxe;                    
    	float32 f32_COG2RearAxe;                     
    } S_MonoCameraExtIntCalibration;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint32 ui32_RequestedFrame;                 
    	uint32 ui32_RequestedStereoDspState;        
    	uint32 ui32_RequestedMonoDspState;          
    	uint32 ui32_VariationsFunctions;            
    	uint32 ui32_SetDebugState;                  
    	uint32 ui32_SetMeasFreezeMode;              
    	uint32 ui32_MTSActive;                      
    	uint32 ui32_FusiTestCheckID;                
    	uint32 ui32_FusiTestCheckEnable;            
    } S_MCUSystemData;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint8_Transparent_array_t uint8_Transparent;                   
    } S_DEM_Slave_Results;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint32 ui32_versionNumber;                  
    	aui8_versionInfo_array_t aui8_versionInfo;                    
    } S_AlgoVersion;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint32 ui32_versionNumber;                  
    	aui8_versionInfo_array_t_0 aui8_versionInfo;                    
    } S_SWVersion;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	float32 f32_PitchDelta;                      
    	float32 f32_RollDelta;                       
    	float32 f32_YawDelta;                        
    	uint32 ui32_Timestamp_us_H;                 
    	uint32 ui32_Timestamp_us_L;                 
    	uint32 ui32_PitchStage;                     
    	uint32 ui32_RollStage;                      
    	uint32 ui32_YawStage;                       
    	uint32 ui32_MiscCheckSum;                   
    } S_MonoOnlineCalibration;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	float32 f32_BrightnessCdqmOddFrame;          
    	float32 f32_CommandedExposureTgesOddFrame;   
    	float32 f32_ImagerNoiseStdDevEvenFrame;      
    	float32 f32_ImagerNoiseStdDevOddFrame;       
    	float32 f32_PixelSizeInMeter;                
    	float32 f32_RedGreenRatio;                   
    	float32 f32_BlueGreenRatio;                  
    	float32 f32_GreenRefRatio;                   
    	uint32 ui32_ImagerCFA;                      
    } S_ImagerControlResults;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint32 ui32_MiscCheckSum;                   /* The MiscCheckSum which has to be calculated over the rest of the payload. */
    	s_Timestamp_64_Bit s_Timestamp_64_us;                   
    	uint32 ui32_CycleCounter;                   
    	uint32 ui32_AlgoTimestamp_ms;               
    	float32 f32_LongAccel;                       
    	float32 f32_RealSpeed;                       
    	float32 f32_YawRate;                         
    	float32 f32_YawRateOffset;                   
    	float32 f32_YawRateQuality;                  
    	float32 f32_YawRateVariance;                 
    	float32 f32_DrvIntCurve;                     
    	float32 f32_DrvIntCurveVariance;             
    	float32 f32_Curve;                           
    	uint32 ui32_VehicleMotionState;             
    	float32 f32_MotionStateConfidence;           
    	float32 f32_StWheelAngleOffset;              
    } S_VDYOutput;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	aui32_Reserved_array_t aui32_Reserved;                      
    } S_ReservedCluster;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	float32 f32_Pitch;                           
    	float32 f32_Roll;                            
    	float32 f32_Yaw;                             
    	float32 f32_X;                               
    	float32 f32_Y;                               
    	float32 f32_Z;                               
    	uint32 ui32_Quality;                        
    	uint32 ui32_MiscCheckSum;                   
    } S_CamPos_CALIOutput;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	float32 f32_VehicleWidth;                    
    	float32 f32_WheelTrack;                      
    	float32 f32_WheelBase;                       
    	float32 f32_WheelCircumfence;                
    	float32 f32_WheelWidth;                      
    	float32 f32_FrontAxleRoadDist;               
    	float32 f32_SteeringWheelGradient;           
    	float32 f32_GrazingAngle;                    
    	af32_WindshieldCoefficients_array_t af32_WindshieldCoefficients;         
    	uint32 ui32_TotalVehicleHeight;             
    	uint32 ui32_WheelCountsPerRotation;         
    	uint32 ui32_WheelCountsMaxValues;           
    	uint32 ui32_SteeringVariant;                
    	uint32 ui32_MiscCheckSum;                   
    } S_VehicleCoding;			

typedef float32                   	af32_temperature_array_t[10]; 			/* [Satisfies_rte sws 1189] */


typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint32 ui32_Version;                        
    	float32 f32_qThreshold;                      
    	uint32 ui32_mode;                           
    } S_SACQthres;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	sint32 si32_Angle;                          
    	uint32 ui32_Confidence;                     
    } S_SACNvAngleLearnNode;			

typedef uint32                    	aui32_RectErrHistBin_array_t[12];			/* [Satisfies_rte sws 1189] */


typedef uint32                    	aui32_NoUsedFramesHistBin_array_t[6];			/* [Satisfies_rte sws 1189] */


typedef float32                   	af32_initTmpModelPitch_array_t[16];			/* [Satisfies_rte sws 1189] */


typedef float32                   	af32_initTmpModelRoll_array_t[16];			/* [Satisfies_rte sws 1189] */


typedef float32                   	af32_initTmpModelYaw_array_t[16];			/* [Satisfies_rte sws 1189] */


typedef float32                   	af32_P_TopLeft_array_t[2];   			/* [Satisfies_rte sws 1189] */


typedef float32                   	af32_P_BottomRight_array_t[2];			/* [Satisfies_rte sws 1189] */


typedef float32                   	af32_initTmpModelPitch_array_t_0[16];			/* [Satisfies_rte sws 1189] */


typedef float32                   	af32_initTmpModelRoll_array_t_0[16];			/* [Satisfies_rte sws 1189] */


typedef float32                   	af32_initTmpModelYaw_array_t_0[16];			/* [Satisfies_rte sws 1189] */


typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	float32 f32_DistanceLongitudinal;            
    	float32 f32_DistanceLateral;                 
    	float32 f32_RelVelocityLong;                 
    	uint16 ui16_DTQTimestamp;                   
    	uint16 ui16_FFT;                            
    	uint16 ui16_GlobalTimestamp;                
    	uint16 ui16_OOI;                            
    	uint16 ui16_SequenceCounter;                
    	uint16 ui16_State;                          
    } S_PODRadarObject;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	float32 f32_EgoData;                         
    	uint32 ui32_EgoDataTimestamp_us;            
    	uint32 ui32_SignalTypeCoding;               
    } S_EgoLogging;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	float32 f32_RelHgt;                          
    	float32 f32_Qual;                            
    } S_PreViewRelProfileValue;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint32 ui32_SignalStateObjectData;          
    	uint32 ui32_ObjID;                          
    	sint32 si32_MergeFlag;                      
    	sint32 si32_ObservedFlag;                   
    	uint32 ui32_RelevantObjectFlag;             
    	sint32 si32_OcclusionFlagLeft;              
    	sint32 si32_OcclusionFlagRight;             
    	sint32 si32_SplitFlag;                      
    	uint32 ui32_Lifetime;                       
    	sint32 si32_EdgeFlagLeft;                   
    	sint32 si32_EdgeFlagRight;                  
    	sint32 si32_ReferencePointIndex;            
    	float32 f32_XLeft_m;                         
    	float32 f32_YLeft_m;                         
    	float32 f32_XRight_m;                        
    	float32 f32_YRight_m;                        
    	float32 f32_XInter_m;                        
    	float32 f32_YInter_m;                        
    	float32 f32_SigmaX;                          
    	float32 f32_SigmaY;                          
    	float32 f32_HeightBottom_m;                  
    	float32 f32_HeightTop_m;                     
    	float32 f32_Width_m;                         
    	float32 f32_RelativeVelocityX_ms;            
    	float32 f32_SigmaRelVX;                      
    	float32 f32_RelativeVelocityYLeft_ms;        
    	float32 f32_RelativeVelocityYRight_ms;       
    	float32 f32_RelativeVelocityConfidence_percent;  
    	float32 f32_SigmaRelVY;                      
    	float32 f32_QualityDisparity_percent;        
    	float32 f32_QualityFlow_percent;             
    	uint32 ui32_Priority;                       
    	float32 f32_FloxelDensity;                   
    	sint32 si32_PedFlag;                        
    	sint32 si32_PedQuality;                     
    	sint32 si32_PedGroupID;                     
    	sint32 s32_PEDCriticalSection;              
    	sint32 si32_Streetflag;                     
    	sint32 si32_Tunnelflag;                     
    	sint32 si32_SendToFlexRay;                  
    } S_FODObject;			

typedef uint16                    	aui16_RequestedAddresses_array_t[100];			/* [Satisfies_rte sws 1189] */


typedef uint16                    	aui16_RegisterContents_array_t[100];			/* [Satisfies_rte sws 1189] */


typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint32 ui32_SignalStateObjectData;          
    	uint32 ui32_ObjID;                          
    	uint32 ui32_FOD_ID;                         
    	uint32 ui32_Radar_ID;                       
    	sint32 si32_ObservedFlag;                   
    	uint32 ui32_LifetimeCycles;                 
    	uint32 ui32_RelevantType;                   
    	sint32 si32_Useable;                        
    	float32 f32_Confidence;                      
    	uint32 ui32_ObjectState;                    
    	float32 f32_LongitudinalDistance_m;          
    	float32 f32_LateralDistance_m;               
    	float32 f32_Width_m;                         
    	float32 f32_RelativeVelocityY_ms;            
    } S_PODObject;			

typedef RTE_GB_t_AOIBlockage      	as_AOIBlockage_array_t[25];    			/* [Satisfies_rte sws 1189] */


typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	sint32 si32_MarkerQuality;                  
    	sint32 si32_MarkerRelation;                 
    	sint32 si32_NumFeatures;                    
    	sint32 si32_MarkerType;                     
    	float32 f32_MarkerHeight;                    
    	af32_FeaturePosU_array_t af32_FeaturePosU;                    
    	af32_FeaturePosV_array_t af32_FeaturePosV;                    
    } S_LaneDetectionMarkerFeatures;			

typedef sint32                    	asi32_MarkerTypes_array_t[3];			/* [Satisfies_rte sws 1189] */


typedef sint32                    	asi32_MarkerColors_array_t[3];			/* [Satisfies_rte sws 1189] */


typedef sint32                    	asi32_MarkerTypes_array_t_0[3];			/* [Satisfies_rte sws 1189] */


typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	float32 f32_FocalX;                          
    	float32 f32_FocalY;                          
    	float32 f32_CenterX;                         
    	float32 f32_CenterY;                         
    	float32 f32_RadDistCoeff_1;                  
    	float32 f32_RadDistCoeff_2;                  
    	float32 f32_RadDistCoeff_3;                  
    	float32 f32_RadDistCoeff_4;                  
    	float32 f32_RadDistCoeff_5;                  
    	float32 f32_RadDistCoeff_6;                  
    	float32 f32_RadDistCoeff_7;                  
    	float32 f32_RadDistCoeff_8;                  
    	float32 f32_RadDistCoeff_9;                  
    	float32 f32_RadDistCoeff_10;                 
    	uint32 ui32_NumRadDistortion;               
    } S_StereoIntrinsicsCalibrationData;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint32 ui32_FrameCounter;                   
    	uint32 ui32_TimeStamp_us;                   
    } S_SACTimeFrameStamp;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	S_SACTimeFrameStamp s_TimeFrameStamp;                    
    	af32_temperature_array_t af32_temperature;                    
    	uint16 ui16_NoOfEntries;                    
    	uint16 ui16_Reserved;                       
    } S_SACInputTemperatures;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	af32_RotMatRL_array_t af32_RotMatRL;                       
    	float32 f32_Temperature;                     
    	uint32 ui32_SACSource;                      
    } S_SACFromToNvm;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint32 ui32_diagStateHigh;                  /* The HighDoubleWord of 64 bit diagState. */
    	uint32 ui32_diagStateLow;                   /* The LowDoubleWord of 64 bit diagState. */
    } s_DiagState_64_Bit;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint32 ui32_BBoxStartX;                     
    	uint32 ui32_BBoxStartY;                     
    	uint32 ui32_BBoxWidth;                      
    	uint32 ui32_BBoxHeight;                     
    } S_SACBBox;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	S_SACBBox s_BBoxLeft;                          
    	S_SACBBox s_BBoxRight;                         
    } S_SACRectCamPars;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	float32 f32_RotationsMatrixR11;              
    	float32 f32_RotationsMatrixR21;              
    	float32 f32_RotationsMatrixR31;              
    	float32 f32_RotationsMatrixR12;              
    	float32 f32_RotationsMatrixR22;              
    	float32 f32_RotationsMatrixR32;              
    	float32 f32_RotationsMatrixR13;              
    	float32 f32_RotationsMatrixR23;              
    	float32 f32_RotationsMatrixR33;              
    	float32 f32_TranslationVectorX;              
    	float32 f32_TranslationVectorY;              
    	float32 f32_TranslationVectorZ;              
    	float32 f32_Baseline;                        
    } S_SACExtrinsicCalibrationData;			

typedef S_SACQthres               	S_qThresholds_array_t[20];     			/* [Satisfies_rte sws 1189] */


typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint32 ui32_Version;                        
    	s_Timestamp_64_Bit S_TimeLimit_64Bit;                   
    	float32 f32_DistanceLimit;                   
    	uint32 ui32_Enable;                         
    } S_SACTimeout;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint32 ui32_Version;                        
    	S_SACTimeout S_QCheckLR;                          
    	S_SACTimeout S_QCheckSGM;                         
    	S_SACTimeout S_CoarseCalib;                       
    	S_SACTimeout S_FineCalib;                         
    } S_SACComponentTimeout;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	S_SACUpdateEolFromToNvm s_EOLupdateFromNVM;                  
    	S_SACFromToNvm s_InputFromNVM;                      
    	S_SACInputTemperatures s_RelevantTemperatures;              
    	S_SACComponentTimeout S_Timeout;                           
    	S_qThresholds_array_t S_qThresholds;                       
    } S_SACInput;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint32 ui32_MiscCheckSum;                   
    	sint32 si32_ImageSynchOffset;               
    	s_Timestamp_64_Bit s_Timestamp_64_us;                   
    	S_SACFromToNvm s_OutputToNVM;                       
    	S_SACUpdateEolFromToNvm s_EOLupdateToNVM;                    
    	S_SACRectCamPars s_RectCamPars;                       
    	S_SACExtrinsicCalibrationData S_SACExtrinsicCalibrationDataUpdate;  
    	sint32 si32_AlgoState;                      
    	sint32 si32_ImageSynchOffsetActual;         
    	s_DiagState_64_Bit s_DiagState_64;                      
    	sint32 si32_SacSFMode;                      
    } S_SACOutput;			

typedef S_SACNvAngleLearnNode     	S_AngleLearnNode_array_t[16];  			/* [Satisfies_rte sws 1189] */


typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint32 ui32_Version;                        
    	S_AngleLearnNode_array_t S_AngleLearnNode;                    
    	uint32 ui32_StateRead;                      
    	uint32 ui32_StateWrite;                     
    	uint32 ui32_StateWritePending;              
    	sint32 si32_ProductionAnlge;                
    } S_SACNvAngleLearnTable;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint32 ui32_MiscCheckSum;                   
    	uint32 ui32_Version;                        
    	S_SACNvAngleLearnTable S_YawANgleNvData;                    
    	S_SACNvAngleLearnTable S_PitchAnlgeNvData;                  
    	S_SACNvAngleLearnTable S_RollAngleNvData;                   
    } S_SACNvAngleData;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint32 ui32_Version;                        
    	s_DiagState_64_Bit s_FlexrayBitfield;                   
    	aui32_RectErrHistBin_array_t aui32_RectErrHistBin;                
    	aui32_NoUsedFramesHistBin_array_t aui32_NoUsedFramesHistBin;           
    	float32 f32_KmetersLastCoarseCalib;          
    	float32 f32_KmetersLastFineCalib;            
    	float32 f32_KmetersLastYawCalib;             
    	float32 f32_KmetersLastError;                
    	float32 f32_KmetersStartOfStatistic;         
    	sint32 si32_LastError;                      
    	float32 f32_CurrRecterror;                   
    	uint32 ui32_CurrNoUsedFrames;               
    	float32 f32_MaxDistCalib;                    
    	uint32 ui32_MaxNoUsedFramesFine;            
    	uint32 ui32_MaxNoUsedFramesCoarse;          
    	float32 f32_MinPitch;                        
    	float32 f32_CurrPitch;                       
    	float32 f32_MaxPitch;                        
    	float32 f32_MinYaw;                          
    	float32 f32_CurrYaw;                         
    	float32 f32_MaxYaw;                          
    	float32 f32_MinRoll;                         
    	float32 f32_CurrRoll;                        
    	float32 f32_MaxRoll;                         
    	uint32 ui32_SACSource;                      
    	uint32 ui32_AlgoSignalState;                
    } S_SACStatistics;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint32 ui32_Version;                        
    	float32 f32_targetPosX;                      
    	float32 f32_targetPosY;                      
    	float32 f32_targetPosZ;                      
    	float32 f32_xCircleLeft;                     
    	float32 f32_xCircleRight;                    
    	float32 f32_yCircleLeft;                     
    	float32 f32_yCircleRight;                    
    	af32_initTmpModelPitch_array_t af32_initTmpModelPitch;              
    	af32_initTmpModelRoll_array_t af32_initTmpModelRoll;               
    	af32_initTmpModelYaw_array_t af32_initTmpModelYaw;                
    	uint32 ui32_targetNo;                       
    } S_SacUpdEolInput;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint32 ui32_Version;                        
    	uint32 ui32_CoordinateSystem;               
    	af32_P_TopLeft_array_t af32_P_TopLeft;                      
    	af32_P_BottomRight_array_t af32_P_BottomRight;                  
    	float32 f32_TargetDistNom;                   
    	uint32 ui32_SACDistTestMode;                
    	float32 f32_reqRectError;                    
    	af32_initTmpModelPitch_array_t_0 af32_initTmpModelPitch;              
    	af32_initTmpModelRoll_array_t_0 af32_initTmpModelRoll;               
    	af32_initTmpModelYaw_array_t_0 af32_initTmpModelYaw;                
    } S_SacDistTestInput;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint32 ui32_Version;                        
    	float32 f32_meanDisparity;                   
    	float32 f32_densityDisparity;                
    	float32 f32_xTargetDistMeasured;             
    	float32 f32_xTargetDistMeasured_std;         
    	float32 f32_xTargetDistMeasured_min;         
    	float32 f32_xTargetDistMeasured_max;         
    	float32 f32_TargetDistanceNorm;              
    	float32 f32_pitch;                           
    	float32 f32_roll;                            
    	float32 f32_yaw;                             
    	float32 f32_rectError;                       
    	float32 f32_temperature;                     
    	uint32 ui32_errorCode;                      
    	uint32 ui32_SACDistTestSigState;            
    } S_SacDistTestFromToNVM;			

typedef S_PODRadarObject          	as_PODRadarObjects_array_t[3];			/* [Satisfies_rte sws 1189] */


typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	as_PODRadarObjects_array_t as_PODRadarObjects;                  
    } S_PODInputRadarObjects;			

typedef S_EgoLogging              	as_EgoLogs_array_t[146];         			/* [Satisfies_rte sws 1189] */


typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	as_EgoLogs_array_t as_EgoLogs;                          
    	uint32 ui32_HasValidFrontWheelAngles;       
    } S_EgoLoggingList;			

typedef S_PreViewRelProfileValue  	S_TrackProfilePoints_array_t[72];			/* [Satisfies_rte sws 1189] */


typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	S_TrackProfilePoints_array_t S_TrackProfilePoints;                
    	uint32 ui32_NumValidTrkProfilePoints;       
    } S_PreViewProfileData;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	s_DiagState_64_Bit s_DiagState_64;                      
    	s_Timestamp_64_Bit s_Timestamp_64_us;                   
    	float32 f32_AbsoluteDistanceLeft;            
    	float32 f32_AbsoluteDistanceRight;           
    	float32 f32_AbsoluteHeightLeft;              
    	float32 f32_AbsoluteHeightRight;             
    	float32 f32_PitchAngleDelta;                 
    	float32 f32_QualityLeft;                     
    	float32 f32_QualityRight;                    
    	float32 f32_RollAngleDelta;                  
    	float32 f32_ShiftDeltaX;                     
    	float32 f32_ShiftDeltaY;                     
    	float32 f32_ShiftDeltaZ;                     
    	float32 f32_YawAngleDelta;                   
    	uint32 ui32_TrackingState;                  
    } S_PreViewDiverseResults;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	S_PreViewProfileData S_ProfilePointsLeft;                 
    	S_PreViewProfileData S_ProfilePointsRight;                
    	S_PreViewDiverseResults S_DiverseResults;                    
    	uint32 ui32_PacketCnt;                      
    } S_PVOutput;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint32 ui32_ProvidedFrame;                  
    	uint16 ui16_CurrentStereoDspState;          
    } S_DSPStereoSystemData;			

typedef S_FODObject               	as_FODObjectList_array_t[14];  			/* [Satisfies_rte sws 1189] */


typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint32 ui32_MiscCheckSum;                   
    	uint32 ui32_FrameID;                        
    	s_Timestamp_64_Bit s_Timestamp_64_us;                   
    	float32 f32_YawRateEgoVehicle;               
    	uint32 ui32_NumberOfObjects;                
    	as_FODObjectList_array_t as_FODObjectList;                    
    	uint32 ui32_AlgoState;                      
    	s_DiagState_64_Bit s_DiagState_FOD_64;                  
    	s_DiagState_64_Bit s_DiagState_PED_64;                  
    } S_FODOutput;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	aui16_RequestedAddresses_array_t aui16_RequestedAddresses;            
    	uint16 ui16_RequestValid;                   
    	uint16 ui16_NumRegs;                        
    	uint16 ui16_SequenceCounter;                
    	uint16 ui16_WildCard;                       
    } S_ImageRegisterRequest;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	s_Timestamp_64_Bit s_Timestamp_64_us;                   
    	aui16_RegisterContents_array_t aui16_RegisterContents;              
    	uint16 ui16_DataValid;                      
    	uint16 ui16_ResponseCode;                   
    	uint16 ui16_SequenceCounter;                
    	uint16 ui16_WildCard;                       
    	sint16 si16_FrameTimingOffsetLines;         
    } S_ImageRegisterResponse;			

typedef S_PODObject               	as_PODObjectList_array_t[3]; 			/* [Satisfies_rte sws 1189] */


typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint32 ui32_MiscCheckSum;                   
    	uint32 ui32_FrameID;                        
    	s_Timestamp_64_Bit s_Timestamp_64_us;                   
    	as_PODObjectList_array_t as_PODObjectList;                    
    	uint32 ui32_AlgoState;                      
    	s_DiagState_64_Bit s_DiagState_64;                      
    } S_PODOutput;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	float32 f32_OdoCali_m;                       
    	float32 f32_Pitch;                           
    	float32 f32_Roll;                            
    	float32 f32_Yaw;                             
    } S_CaliOnline_HLAOutput;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint16 ui16_BlockageStatus;                 
    	uint16 ui16_FctID;                          
    	uint16 ui16_StatusConfidence;               
    	uint16 ui16_Reserved;                       
    } S_FctBlockage;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	s_DiagState_64_Bit s_DiagState_64;                      
    } S_StereoBlockageOutput;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	S_FctBlockage s_ftcBlockage;                       
    	as_AOIBlockage_array_t as_AOIBlockage;                      
    	uint16 ui16_RollTestMd;                     
    	uint16 ui16_Reserved;                       
    } S_BlockageOutputRight;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	as_MarkerFeatures_array_t as_MarkerFeatures;                   
    	s_Timestamp_64_Bit s_Timestamp_64_us;                   
    } S_LaneDetectionOutputExtension;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	sint32 si32_Quality;                        /* quality of the left marker track */
    	float32 f32_Distance;                        /* distance to the left marker */
    	float32 f32_Curvature;                       /* curvature of the left marker */
    	float32 f32_CurvatureRate;                   /* curvature rate of the left marker */
    	float32 f32_Yaw;                             /* yaw angle to the left marker */
    	float32 f32_MarkerWidth;                     /* width of the left marker */
    	sint32 si32_MarkerType;                     
    	sint32 si32_MarkerColor;                    
    	float32 f32_LookAheadDistance;               /* range of vision left */
    	sint32 si32_NumberOfMarkers;                
    	asi32_MarkerTypes_array_t asi32_MarkerTypes;                   
    	asi32_MarkerColors_array_t asi32_MarkerColors;                  
    	af32_MarkerPositions_array_t af32_MarkerPositions;                /* distances of marker edges starting from innermost marker */
    	sint32 si32_Event;                          
    	float32 f32_EventDist;                       
    	sint32 si32_EventQual;                      
    	sint32 si32_Available;                      
    } S_LaneDetectionOutputDetails;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint32 ui32_MiscCheckSum;                   /* The MiscCheckSum which has to be calculated over the rest of the payload. */
    	S_LaneDetectionOutputDetails s_OutputDetails_Left;                
    	S_LaneDetectionOutputDetails s_OutputDetails_Right;               
    	float32 f32_PitchAngleOnline;                
    	float32 f32_CamYawAngleOnline;               
    	float32 f32_RollAngleOnline;                 
    	sint32 si32_ACSaveRequest;                  
    	sint32 si32_ACPercentage;                   
    	sint32 si32_ParallelModel;                  
    	sint32 si32_CameraMisaligned;               
    	sint32 si32_ACNotFinished;                  
    	sint32 si32_ConstructionSite;               
    	sint32 si32_LaneChange;                     
    	sint32 si32_SmoothOperation;                
    	sint32 si32_SteeringSide;                   
    	sint32 si32_RoadType;                       
    	sint32 si32_IndexEgoLane;                   
    	sint32 si32_NumberOfLanes;                  
    	sint32 si32_AdditionalParallelMarkers;      
    	sint32 si32_Blockage;                       
    	sint32 si32_Condensation;                   
    	sint32 si32_ImageFrameCounter;              
    	s_Timestamp_64_Bit s_Timestamp_64_us;                   
    	sint32 si32_VersionMajor;                   
    	sint32 si32_VersionMinor;                   
    	sint32 si32_VersionPatch;                   
    	S_LaneDetectionOutputExtension s_OutputExtension;                   
    	uint32 ui32_AlgoState;                      
    	uint32 ui32_ImageFingerPrint;               
    	s_DiagState_64_Bit s_DiagState_64;                      
    } S_LaneDetectionOutput;			/* output data from LD */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	sint32 si32_Quality;                        /* quality of the marker track */
    	float32 f32_Distance;                        /* distance to the marker */
    	float32 f32_Curvature;                       /* curvature of the marker */
    	float32 f32_CurvatureRate;                   /* curvature rate of the marker */
    	float32 f32_VertCurvature;                   /* curvature of the marker */
    	float32 f32_VertCurvatureRate;               /* curvature rate of the marker */
    	float32 f32_Yaw;                             /* yaw angle to the marker */
    	float32 f32_MarkerHeight;                    /* height of the marker */
    	float32 f32_MarkerPitch;                     /* pitch of the marker */
    	float32 f32_MarkerWidth;                     /* width of the marker */
    	sint32 si32_MarkerType;                     
    	sint32 si32_MarkerColor;                    
    	sint32 si32_MarkerState;                    
    	float32 f32_LookAheadDistance;               /* range of vision */
    	sint32 si32_NumberOfMarkers;                
    	asi32_MarkerTypes_array_t_0 asi32_MarkerTypes;                   
    	af32_MarkerPositions_array_t_0 af32_MarkerPositions;                /* distances of marker edges starting from innermost marker */
    	sint32 si32_Event;                          
    	float32 f32_EventDist;                       
    	sint32 si32_Available;                      
    	sint32 si32_MarkerQuality;                  
    	sint32 si32_NumSamplePoints;                
    	af32_MarkerSamplePointsX_array_t af32_MarkerSamplePointsX;            
    	af32_MarkerSamplePointsY_array_t af32_MarkerSamplePointsY;            
    	af32_MarkerSamplePointsZ_array_t af32_MarkerSamplePointsZ;            
    } S_StereoLaneExtensionOutputDetails;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint32 ui32_MiscCheckSum;                   /* The MiscCheckSum which has to be calculated over the rest of the payload. */
    	S_StereoLaneExtensionOutputDetails s_OutputDetails_Left;                
    	S_StereoLaneExtensionOutputDetails s_OutputDetails_Right;               
    	float32 f32_PitchAngleOnline;                
    	float32 f32_CamYawAngleOnline;               
    	float32 f32_RollAngleOnline;                 
    	sint32 si32_ACSaveRequest;                  
    	sint32 si32_ACPercentage;                   
    	sint32 si32_ParallelModel;                  
    	sint32 si32_CameraMisaligned;               
    	sint32 si32_ACNotFinished;                  
    	sint32 si32_ConstructionSite;               
    	sint32 si32_LaneChange;                     
    	sint32 si32_SmoothOperation;                
    	sint32 si32_SteeringSide;                   
    	sint32 si32_RoadType;                       
    	sint32 si32_IndexEgoLane;                   
    	sint32 si32_NumberOfLanes;                  
    	sint32 si32_AdditionalParallelMarkers;      
    	sint32 si32_Blockage;                       
    	sint32 si32_Condensation;                   
    	sint32 si32_ImageFrameCounter;              
    	s_Timestamp_64_Bit s_Timestamp_64_us;                   
    	sint32 si32_VersionMajor;                   
    	sint32 si32_VersionMinor;                   
    	sint32 si32_VersionPatch;                   
    	sint32 si32_AlgoState;                      
    	s_DiagState_64_Bit s_DiagState_64;                      
    } S_StereoLaneExtensionOutput;			/* output data from SLE */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint32 ui32_NumVehicles;                    
    	uint32 ui32_NumObjects;                     
    } RTE_t_HLATracks;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	s_Timestamp_64_Bit s_Timestamp_64_us;                   
    	S_HeadlightState s_HeadLightState;                    
    	S_VehicleState s_VehicleState;                      
    	S_WiperInfo s_WiperInfo;                         
    	float32 f32_YawRateFromVehicleBus;           
    	float32 f32_Odometer;                        
    	uint32 ui32_HighBeamState;                  
    	uint32 ui32_VehicleClusterSpeedUnit;        
    	uint32 ui32_HeaterState;                    
    } S_EgoData;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint32 ui32_MiscCheckSum;                   
    	sint32 si32_ImageSynchOffset;               
    	RTE_t_Timestamp_64_Bit s_Timestamp_64_us;                   
    	RTE_t_SACFromToNvm s_OutputToNVM;                       
    	S_SACUpdateEolFromToNvm s_EOLupdateToNVM;                    
    	RTE_t_SACRectCamPars s_RectCamPars;                       
    	RTE_t_SACExtrinsicCalibrationData s_SACExtrinsicCalibrationDataUpdate;  
    	sint32 si32_AlgoState;                      
    	sint32 si32_ImageSynchOffsetActual;         
    	s_DiagState_64_Bit s_DiagState_64;                      
    	sint32 si32_SacSFMode;                      
    } RTE_t_SACOutput;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint32 ui32_SerialNoHigh;                   
    	uint32 ui32_SerialNoLow;                    
    } s_ImagerSerialNo_64_Bit;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint32 ui32_TriggerRefHigh;                 
    	uint32 ui32_TriggerRefLow;                  
    } s_TriggerRef_64_Bit;			

typedef uint8                     	aui8_ECUSerialNumber_array_t[14];			/* [Satisfies_rte sws 1189] */


typedef float32                   	f32_MarkerPositionsLeft_array_t[6];			/* [Satisfies_rte sws 1189] */


typedef float32                   	f32_MarkerPositionsRight_array_t[6];			/* [Satisfies_rte sws 1189] */


typedef uint32                    	ui32_MarkerTypesLeft_array_t[3];			/* [Satisfies_rte sws 1189] */


typedef uint32                    	ui32_MarkerTypesRight_array_t[3];			/* [Satisfies_rte sws 1189] */


typedef uint8                     	ui8_srifPersStateFPAbst_array_t[80];			/* [Satisfies_rte sws 1189] */


typedef uint8                     	ui8_srifPersStateFVAbst_array_t[28];			/* [Satisfies_rte sws 1189] */


typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	float32 f32_SR_TrackLateralOffsetOfSign;     
    	float32 f32_SR_TrackLongitudinalOffsetOfSign;  
    	float32 f32_SR_TrackMainSignConfidence;      
    	float32 f32_SR_TrackSupplSignConfidence;     
    	float32 f32_SR_TrackVarianceLongitudinalOffsetOfSign;  
    	float32 f32_SR_TrackVarianceHeightOfSignOverGround;  
    	float32 f32_SR_TrackVarianceWidthOfSign;     
    	float32 f32_SR_TrackIntegratedConfidence;    
    	float32 f32_SR_TrackHeightOfSignOverGround;  
    	float32 f32_SR_TrackVarianceLateralOffsetOfSign;  
    	float32 f32_SR_TrackHeightOfSign;            
    	float32 f32_SR_TrackWidthOfSign;             
    	uint32 ui32_SR_TrackMainSignClassID;        
    	uint32 ui32_SR_TrackSupplSignClassID;       
    	uint32 ui32_SR_TrackID;                     
    	uint32 ui32_SR_TrackStatus;                 
    	uint32 ui32_SR_TrackCharacteristic;         
    	uint32 ui32_SR_TrackCurrentFrameDetected;   
    	uint32 ui32_SR_TrackCutOutCenterColumn;     
    	uint32 ui32_SR_TrackCutOutWidth;            
    	uint32 ui32_SR_TrackCutOutCenterRow;        
    	uint32 ui32_SR_TrackLength;                 
    	uint32 ui32_SR_TrackCutOutHeight;           
    	uint32 ui32_SR_TrackMainSignAddInfo;        
    	uint32 ui32_SR_TrackSupplSignAddInfo;       
    	uint32 ui32_SR_TrackMainSignAddInfo2;       
    	uint32 ui32_SR_TrackSupplSignAddInfo2;      
    } S_SR_ResultTrackObject;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint16 ui16_CurrentMonoDspState;            
    	uint16 ui16_VuCCycleCounter;                
    	uint16 ui16_Reserved_0;                     
    	uint16 ui16_Reserved_1;                     
    	uint16 ui16_Reserved_2;                     
    	uint16 ui16_Reserved_3;                     
    } S_DSPMonoSystemData;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	float32 f32_distanceToContextChange;         
    	uint16 ui16_contextChangeType;              
    	uint16 ui16_Reserved;                       
    } S_SRInputContextChangeInfo;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	s_Timestamp_64_Bit s_Timestamp_64_us;                   
    	S_SRInputContextChangeInfo s_urbanAreaChangeInfo;               
    	S_SRInputContextChangeInfo s_residentialAreaChangeInfo;         
    	S_SRInputContextChangeInfo s_noCircleSignContextChangeInfo;     
    	s_ImagerSerialNo_64_Bit s_ImagerSerialNumber;                
    	uint16 ui16_CountryCodeNavi;                
    	uint16 ui16_RegionCode;                     
    	uint16 ui16_ImagerModell;                   
    	aui8_ECUSerialNumber_array_t aui8_ECUSerialNumber;                
    	uint16 ui16_varSignPosition;                
    } S_SRInputGeneral;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	float32 f32_X_Blacklevel0;                   
    	float32 f32_Y_Measured_1500;                 
    	float32 f32_Y_Measured_3500;                 
    	float32 f32_Y_Measured_2500;                 
    	float32 f32_X_Measured_1500;                 
    	float32 f32_X_Measured_2500;                 
    	float32 f32_X_Measured_3500;                 
    	float32 f32_Y_Blacklevel0;                   
    	float32 f32_DCG_FactorRight;                 
    	float32 f32_AnalogGainMinus40Right;          
    	float32 f32_AnalogGainPlus25Right;           
    	float32 f32_AnalogGainPlus85Right;           
    	float32 f32_AnalogGainPlus105Right;          
    	float32 f32_ConversionGainMinus40Right;      
    	float32 f32_ConversionGainPlus25Right;       
    	float32 f32_ConversionGainPlus85Right;       
    	float32 f32_ConversionGainPLus105Right;      
    	uint16 ui16_T1_ProductionRight;             
    	uint16 ui16_Actual_T2_right;                
    	uint16 ui16_Actual_T3_right;                
    } S_ImagerDynResponseCurveParamInput;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	s_DiagState_64_Bit s_DiagState_64;                      
    	float32 f32_C0Left;                          
    	float32 f32_C0Right;                         
    	float32 f32_C1Left;                          
    	float32 f32_C1Right;                         
    	float32 f32_DistanceLeft;                    
    	float32 f32_DistanceRight;                   
    	float32 f32_HeadingAngleLeft;                
    	float32 f32_HeadingAngleRight;               
    	float32 f32_MarkerWidthLeft;                 
    	float32 f32_MarkerWidthRight;                
    	float32 f32_LookAheadDistanceLeft;           
    	float32 f32_LookAheadDistanceRight;          
    	float32 f32_OnlinePitch2VLNE;                
    	float32 f32_CurvatureLeft;                   
    	float32 f32_CurvatureRateLeft;               
    	float32 f32_YawLeft;                         
    	float32 f32_CurvatureRight;                  
    	float32 f32_CurvatureRateRight;              
    	float32 f32_YawRight;                        
    	float32 f32_CamYawAngleOnline;               
    	float32 f32_RollAngleOnline;                 
    	f32_MarkerPositionsLeft_array_t f32_MarkerPositionsLeft;             
    	f32_MarkerPositionsRight_array_t f32_MarkerPositionsRight;            
    	uint32 ui32_FrameCounter;                   
    	uint32 ui32_ImageFingerPrint;               
    	uint32 ui32_QualityLeft;                    
    	uint32 ui32_QualityRight;                   
    	uint32 ui32_MarkerTypeRight;                
    	uint32 ui32_MarkerTypeLeft;                 
    	uint32 ui32_ParallelModel;                  
    	uint32 ui32_AmbigiousSituation;             
    	uint32 ui32_LaneChange;                     
    	uint32 ui32_RoadModelConfidenceLeft;        
    	uint32 ui32_RoadModelConfidenceRight;       
    	uint32 ui32_AvailableLeft;                  
    	uint32 ui32_AvailableRight;                 
    	uint32 ui32_SmoothOperation;                
    	uint32 ui32_Blockage;                       
    	uint32 ui32_Condensation;                   
    	uint32 ui32_MarkerColorLeft;                
    	uint32 ui32_MarkerColorRight;               
    	uint32 ui32_NumberOfMarkersRight;           
    	uint32 ui32_NumberOfMarkersLeft;            
    	uint32 ui32_ConstructionSite;               
    	uint32 ui32_VersionMajor;                   
    	uint32 ui32_VersionMinor;                   
    	uint32 ui32_VersionPatch;                   
    	ui32_MarkerTypesLeft_array_t ui32_MarkerTypesLeft;                
    	ui32_MarkerTypesRight_array_t ui32_MarkerTypesRight;               
    	uint32 ui32_MiscCheckSum;                   
    } S_LaneRecognitionOutput;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint32 ui32_MiscCheckSum;                   
    	ui8_srifPersStateFPAbst_array_t ui8_srifPersStateFPAbst;             
    	ui8_srifPersStateFVAbst_array_t ui8_srifPersStateFVAbst;             
    } S_SR_LearningNVM;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	s_DiagState_64_Bit s_DiagState_64;                      
    	uint32 ui32_SR_FrameCounter;                
    	uint32 ui32_SR_ImageTimestamp;              
    	uint16 ui16_SR_Status;                      
    	uint16 ui16_SR_NumberOfTracks;              
    	uint16 ui16_SR_TrafficStyle;                
    	uint16 ui16_SR_SpeedUnit;                   
    	uint16 ui16_SR_CountryCode;                 
    	uint16 ui16_ImageWidth;                     
    	uint16 ui16_ImageHeight;                    
    	uint16 ui16_OffsetX;                        
    	uint16 ui16_OffsetY;                        
    	uint16 ui16_Width;                          
    	uint16 ui16_PointOfExX;                     
    	uint16 ui16_PointOfExY;                     
    	uint16 ui16_Height;                         
    } S_SR_Results2SLA;			

typedef S_SR_ResultTrackObject    	as_ObjectList_array_t[8];    			/* [Satisfies_rte sws 1189] */


typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	s_TriggerRef_64_Bit s_TriggerReference;                  
    	as_ObjectList_array_t as_ObjectList;                       
    	S_SR_Results2SLA s_Results2Sla;                       
    } S_SROutput;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint16 ui16_LdpBrkMsgDispRq;                
    	uint16 ui16_Reserved;                       
    } S_LdpWarnRq;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint8 ACTL_t_eOpMode;                      
    	uint32 ACTL_t_eOpModeParam;                 /* Bitstructure for additional information */
    } ACTLOpMode_t;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint32 ui32_RequestedFrame;                 
    	uint16 ui16_RequestedStereoDspState;        
    	uint16 ui16_RequestedMonoDspState;          
    	uint16 ui16_CodingState;                    
    	uint16 ui16_CalibrationState;               
    	uint16 ui16_VariationsFunctions;            
    	uint16 ui16_SetDebugState;                  
    	uint16 ui16_SetMeasFreezeMode;              
    	uint16 ui16_NvmConfigSwitchMono;            
    	uint16 ui16_NvmConfigSwitchStereo;          
    } RTE_t_MCUSystemData;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint16 ui16_CurrentMonoDspState;            
    	uint16 ui16_VuCCycleCounter;                
    	uint16 ui16_Reserved_0;                     
    	uint16 ui16_Reserved_1;                     
    	uint16 ui16_Reserved_2;                     
    	uint16 ui16_Reserved_3;                     
    } RTE_t_DSPMonoSystemData;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint32 ui32_ProvidedFrame;                  
    	uint16 ui16_CurrentStereoDspState;          
    	uint16 ui16_MeasConsistency;                
    	uint16 ui16_ImageAcqConsistency;            
    	uint16 ui16_RegisterConsistency;            
    	uint16 ui16_AluTestConsistency;             
    	uint16 ui16_PODState;                       
    	uint16 ui16_SACState;                       
    	uint16 ui16_FODState;                       
    	uint16 ui16_PVState;                        
    	uint16 ui16_PEDState;                       
    	uint16 ui16_SLEState;                       
    } RTE_t_DSPStereoSystemData;			

typedef uint8                     	InfoblockString_array_t[8];  			/* [Satisfies_rte sws 1189] */


typedef uint8                     	CRCSuchstr_array_t[12];        			/* [Satisfies_rte sws 1189] */


typedef uint8                     	ProjectString_array_t[8];    			/* [Satisfies_rte sws 1189] */


typedef uint8                     	UnivId_array_t[12];            			/* [Satisfies_rte sws 1189] */


typedef uint8                     	Supplier_array_t[2];         			/* [Satisfies_rte sws 1189] */


typedef uint8                     	Version_array_t[3];          			/* [Satisfies_rte sws 1189] */


typedef uint8                     	Partnumber_array_t[13];        			/* [Satisfies_rte sws 1189] */


typedef uint8                     	Reserved_array_t[12];          			/* [Satisfies_rte sws 1189] */


typedef uint8                     	Reserved1_array_t[10];        			/* [Satisfies_rte sws 1189] */


typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint32 FlashParamPtr;                       
    	uint32 ParDataSize;                         
    	uint32 ParDataVersion;                      
    	uint32 ParDataEnum;                         
    } FLSPProdFlashDict;			

typedef uint16                    	Reserved_array_t_0[3];       			/* [Satisfies_rte sws 1189] */


typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	CRCSuchstr_array_t CRCSuchstr;                          
    	uint32 AdrBegin;                            
    	uint32 AdrEnd;                              
    	uint32 MagicNumber;                         
    } CrcBuffer;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	InfoblockString_array_t InfoblockString;                     
    	uint16 LengthInfoblock;                     
    	uint8 TypeBits;                            
    	uint8 BlockId;                             
    	uint32 MagicNumber;                         
    	CrcBuffer CrcBuffer;                           
    } BOOT_FPARInfoBlock1;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint8 Reserved;                            
    	uint8 Year;                                
    	uint8 Month;                               
    	uint8 Day;                                 
    } Date;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint8 Reserved;                            
    	uint8 Hour;                                
    	uint8 Minute;                              
    	uint8 Second;                              
    } Time;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint8 Major;                               
    	uint8 Minor;                               
    	uint8 PatchLevel;                          
    	uint8 PaddingReserved;                     
    } Version;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	UnivId_array_t UnivId;                              
    	Date Date;                                
    	Time Time;                                
    	Version Version;                             
    } Ident;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	Ident Ident;                               
    	uint32 ParamInfo;                           
    } BOOT_FPARInfoBlock2;			

typedef FLSPProdFlashDict         	FLSPProdFlashDict_array_t[16];			/* [Satisfies_rte sws 1189] */


typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint32 FlashDictBegin;                      
    	uint32 FlashDictEnd;                        
    	uint32 InitDataBegin;                       
    	uint32 InitDataEnd;                         
    	uint32 DictElementSize;                     
    	Reserved_array_t_0 Reserved;                            
    } FlashInfoBlock;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	float32 f32_InFocusX;                        
    	float32 f32_InFocusY;                        
    	float32 f32_InPrincipalPointXCoordinate;     
    	float32 f32_InPrincipalPointYCoordinate;     
    	float32 f32_RadialDistortionCoeff1;          
    	float32 f32_RadialDistortionCoeff2;          
    	float32 f32_RadialDistortionCoeff3;          
    	float32 f32_RadialDistortionCoeff4;          
    	float32 f32_RadialDistortionCoeff5;          
    	float32 f32_RadialDistortionCoeff6;          
    	float32 f32_RadialDistortionCoeff7;          
    	float32 f32_RadialDistortionCoeff8;          
    	float32 f32_RadialDistortionCoeff9;          
    	float32 f32_RadialDistortionCoeff10;         
    	uint32 ui32_ActualNumberOfCoeffients;       
    } RTE_t_PPARStereoCaliIntrinsics;			/* Intrinsic calibration parameters (left / right) */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	float32 f32_Baseline;                        
    	float32 f32_TranslationX;                    
    	float32 f32_TranslationY;                    
    	float32 f32_TranslationZ;                    
    	float32 f32_RotMatrixR11;                    
    	float32 f32_RotMatrixR21;                    
    	float32 f32_RotMatrixR31;                    
    	float32 f32_RotMatrixR12;                    
    	float32 f32_RotMatrixR22;                    
    	float32 f32_RotMatrixR32;                    
    	float32 f32_RotMatrixR13;                    
    	float32 f32_RotMatrixR23;                    
    	float32 f32_RotMatrixR33;                    
    	float32 f32_ROIVShiftLeft;                   
    } RTE_t_PPARStereoCalTransRot;			/* Extrinsic calibration parameters */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	BOOT_FPARInfoBlock1 BOOT_FPARInfoBlock1;                 
    	ProjectString_array_t ProjectString;                       
    	BOOT_FPARInfoBlock2 BOOT_FPARInfoBlock2;                 
    	uint16 OemId;                               
    	Supplier_array_t Supplier;                            
    	Version_array_t Version;                             
    	Partnumber_array_t Partnumber;                          
    	Reserved_array_t Reserved;                            
    	uint16 HwCompatId;                          
    	uint16 SubCompatIdMin;                      
    	uint16 SubCompatIdMax;                      
    	Reserved1_array_t Reserved1;                           
    	FLSPProdFlashDict_array_t FLSPProdFlashDict;                   
    	FlashInfoBlock FlashInfoBlock;                      
    	RTE_t_PPARStereoCaliIntrinsics RTE_t_PPARStereoCalIntrinsicData;    /* Intrinsic calibration parameters (left / right) */
    	RTE_t_PPARStereoCalTransRot RTE_t_PPARStereoCalTransRotData;     /* Extrinsic calibration parameters */
    } PPARData_t;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	float32 f32_FocalLength;                     
    	float32 f32_LensDistortion;                  
    	float32 f32_IntrinsicRoll;                   
    	float32 f32_IntrinsicPitch;                  
    	float32 f32_IntrinsicYaw;                    
    	float32 f32_HPrinAxis;                       
    	float32 f32_VPrinAxis;                       
    	float32 f32_RedGreenRatio;                   
    	float32 f32_BlueGreenRatio;                  
    	float32 f32_GreenRefRatio;                   
    	float32 f32_MTF_red;                         
    	float32 f32_MTF_green;                       
    	float32 f32_MTF_blue;                        
    	float32 f32_streulichttest;                  
    } RTE_t_PPARImagerIntrinsics;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint32 VersionNumber;                       /* version number of algo */
    	VersionInfo_array_t VersionInfo;                         /* string for version information */
    } RTE_t_AlgoVersion;			/* version information */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	e_OffOnRequest e_OffOnRequest;                      /* Requested state of the heat signal/pin */
    	RTE_eTrueFalseNt e_ShortCircuit;                      /* Short circuit, only valid for internal heating */
    	RTE_eTrueFalseNt e_OpenCircuit;                       /* Open circuit, only valid for internal heating */
    } RTE_t_HeatOutput;			/* Output data provided by HEAT component */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint32 ui32_OnTimeIgnCycle;                 /* Heat request time since IgnOn */
    	uint32 ui32_OnTimeComplete;                 /* Heat request time since last statistic clear */
    } RTE_t_HeatStatistics;			/* Statistic data "OnTimeIgnCycle" and so on */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	float32 f32_Z;                               /* the z component of the 3D pattern position */
    	float32 f32_Y;                               /* the y component of the 3D pattern position */
    	float32 f32_X;                               /* the x component of the 3D pattern position */
    	e_SigStatus e_SigStat;                           /* signal quality of pattern position */
    } RTE_t_DiagPatternPosition;			/* Pattern position */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	float32 f32_X;                               /* the X coordinate of the camera position */
    	float32 f32_Y;                               /* the Y coordinate of the camera position */
    	float32 f32_Z;                               /* the Z coordinate of the camera position */
    } RTE_t_DiagCamSocket;			/* Camera position */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint32 ui32_DiagStateHigh;                  
    	uint32 ui32_DiagStateLow;                   
    } RTE_t_DiagState64Bit;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	RTE_t_DiagState64Bit s_StateLR;                           
    	RTE_t_DiagState64Bit s_StateSR;                           
    	RTE_t_DiagState64Bit s_StateSAC;                          
    	RTE_t_DiagState64Bit s_StateFOD;                          
    	RTE_t_DiagState64Bit s_StatePV;                           
    	RTE_t_DiagState64Bit s_StateSLNE;                         
    	RTE_t_DiagState64Bit s_StatePOD;                          
    	RTE_t_DiagState64Bit s_StateSBD;                          
    } RTE_t_DiagAlgoStates;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint32 ui32_MiscCheckSum;                   /* The MiscCheckSum which has to be calculated over the rest of the payload. */
    	RTE_t_LDOutputDetails s_OutputDetails_Left;                
    	RTE_t_LDOutputDetails s_OutputDetails_Right;               
    	float32 f32_PitchAngleOnline;                
    	float32 f32_CamYawAngleOnline;               
    	float32 f32_RollAngleOnline;                 
    	sint32 i32_ACSaveRequest;                   
    	sint32 i32_ACPercentage;                    
    	sint32 i32_ParallelModel;                   
    	sint32 i32_CameraMisaligned;                
    	sint32 i32_ACNotFinished;                   
    	sint32 i32_ConstructionSite;                
    	sint32 i32_LaneChange;                      
    	sint32 i32_SmoothOperation;                 
    	sint32 i32_SteeringSide;                    
    	RTE_t_eLDRoadType i32_RoadType;                        
    	sint32 i32_IndexEgoLane;                    
    	sint32 i32_NumberOfLanes;                   
    	sint32 i32_AdditionalParallelMarkers;       
    	sint32 i32_Blockage;                        
    	sint32 i32_Condensation;                    
    	sint32 i32_ImageFrameCounter;               
    	RTE_t_Timestamp_64_Bit s_Timestamp_64_us;                   
    	sint32 i32_VersionMajor;                    
    	sint32 i32_VersionMinor;                    
    	sint32 i32_VersionPatch;                    
    	RTE_t_LDOutputExtension s_OutputExtension;                   
    	uint32 ui32_AlgoState;                      
    	uint32 i32_ImageFingerPrint;                
    	uint64 i64_DiagnosisOutput;                 
    } RTE_t_LDOutput;			/* output data from LD */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	RTE_eTrueFalseNt RTE_TrueFalseNt;                     /* True false and not tested enumeration */
    	RTE_t_eAlgoId RTE_eAlgoId;                         /* algo ID */
    	RTE_t_eDataValid RTE_eDataValid;                      /* Flag for data validity */
    } ENUM_DEFS;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	float32 f32_WheelBase;                       
    	float32 f32_TrackWidthFront;                 
    	float32 f32_TrackWidthRear;                  
    	float32 f32_WhlToWhlOutsdFront;              
    	float32 f32_WeightCenterAlt;                 
    	float32 f32_WheelCircumDyn;                  
    	float32 f32_CamPosX;                         
    	float32 f32_CamPosY;                         
    	float32 f32_CamPosZ;                         
    	float32 f32_TargetPosX;                      
    	float32 f32_TargetPosZ;                      
    	float32 f32_Z0ToGround;                      
    	float32 f32_VehLevelOffset;                  
    	float32 f32_CarBodyZ0FrontX;                 
    	float32 f32_CarBodyZ0FrontY;                 
    	float32 f32_CarBodyZ0FrontZ;                 
    	float32 f32_CarBodyZ0RearX;                  
    	float32 f32_CarBodyZ0RearY;                  
    	float32 f32_CarBodyZ0RearZ;                  
    	float32 f32_SteeringRatio;                   
    	float32 f32_SteelSpringOffsFront;            
    	float32 f32_SteelSpringOffsRear;             
    	float32 f32_GrazingAngle;                    
    	float32 f32_PitchAngle;                      
    	float32 f32_RollAngle;                       
    	float32 f32_YawingAngle;                     
    	af32_WindshieldCoefficients_array_t af32_WindshieldCoefficients;         
    	uint16 ui16_VehWeight;                      
    	uint16 ui16_WhlTicksPerRev;                 
    	uint16 ui16_NVAvailable;                    
    	uint16 ui16_HeatAvailability;               /* No heat, intern, extern */
    	uint16 ui16_VehicleLine;                    
    	uint16 ui16_BodyStyle;                      
    	uint16 ui16_SteeringVariant;                
    	uint16 ui16_TransmissionWindscreen;         
    	uint32 ui32_MiscChecksum;                   
    } RTE_t_VCVehicleData;			/* SCN coded vehicle information (weight, size,...) */

typedef float32                   	f32_ResponseCurveBrightness_R_array_t[5];			/* [Satisfies_rte sws 1189] */


typedef float32                   	f32_ResponseCurveBrightness_G_array_t[5];			/* [Satisfies_rte sws 1189] */


typedef float32                   	f32_ResponseCurveBrightness_B_array_t[5];			/* [Satisfies_rte sws 1189] */


typedef uint16                    	ui16_ResponseCurveGreyValues_array_t[5];			/* [Satisfies_rte sws 1189] */


typedef uint16                    	ui16_SensorFuseId_array_t[4];			/* [Satisfies_rte sws 1189] */


typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint64 ui64_EmbeddedTimestamp;              /* Frame time of the timestamp embedded in the image */
    	float32 f32_ImagerNoiseStdDev;               /* Noise level provided by the imager, standard deviation */
    	float32 f32_ActualSlopeR1;                   /* Actual ratio T1/T2 */
    	float32 f32_ActualSlopeR2;                   /* Actual ratio T2/T3 */
    	float32 f32_BrightnessAtGrey512;             
    	f32_ResponseCurveBrightness_R_array_t f32_ResponseCurveBrightness_R;       
    	f32_ResponseCurveBrightness_G_array_t f32_ResponseCurveBrightness_G;       
    	f32_ResponseCurveBrightness_B_array_t f32_ResponseCurveBrightness_B;       
    	float32 f32_ExposureTimeTotal;               /* Total exposure time commanded to imager (in seconds) */
    	float32 f32_ExposureTimeT1;                  /* Exposure time T1 commanded to imager (in seconds) */
    	float32 f32_ExposureTimeT2;                  /* Exposure time T2 commanded to imager (in seconds) */
    	float32 f32_ExposureTimeT3;                  /* Exposure time T3 commanded to imager (in seconds) */
    	float32 f32_TimePerLineRollingShutter;       /* Imager rolling shutter time per line */
    	float32 f32_ImagerPixelSizeInMeter;          /* The pixel size of the imager in meters */
    	float32 f32_CFA_TransmittanceRed;            
    	float32 f32_CFA_TransmittanceGreen;          
    	float32 f32_CFA_TransmittanceBlue;           
    	float32 f32_ImagerGainTotal;                 
    	uint16 ui16_RequestedSlopeR1;               /* Requested ratio T1/T2 (e.g. 4 or 16) */
    	uint16 ui16_RequestedSlopeR2;               /* Requested ratio T2/T3 (e.g. 4 or 16) */
    	uint16 ui16_BlackLevel_0;                   /* Imager blacklevel */
    	uint16 ui16_BlackLevel_1;                   /* Virtual Blacklevel for 2nd branch */
    	uint16 ui16_BlackLevel_2;                   /* Virtual Blacklevel for 3rd branch */
    	ui16_ResponseCurveGreyValues_array_t ui16_ResponseCurveGreyValues;        
    	uint16 ui16_ResponseCurveNumSupportPoints;  
    	uint16 ui16_FrameNumber;                    /* Frame number of the current image from camera as 16 bit value */
    	RTE_IC_E_DCG_STATE e_DCGState;                          /* State of the dual conversion gain (DCG) */
    	RTE_ICA_E_FRAME_TYPE e_FrameType;                         /* Frame-type this data belongs to */
    	RTE_ICA_E_IMAGER_CONTROL_SCHEMA e_ImagerControlSchema;               /* Imager control schema */
    	RTE_ICA_E_IMAGER_CFA e_ImagerCFA;                         /* Imager color filter array */
    	RTE_IC_E_INTRADAY_STATE e_IntradayState;                     /* Flag for day or night mode */
    	RTE_t_eDataValid e_DataValid;                         /* Flag for data validity */
    } RTE_t_IC_S_ImageCharacteristics;			/* Characteristics of an image */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint64 ui64_EmbeddedTimestamp;              /* Frame time of the timestamp embedded in the image */
    	float32 f32_BrightnessTrueCdqm;              /* Calculated mean "real-world" brightness based on the right imager's response curve. Here the "true" mean is used for calculation instead of the weighted one. */
    	uint32 ui32_LumaMeanTrue;                   /* True mean (20-bit) of all pixels in the imager control ROI */
    	uint32 ui32_LumaMeanWeighted;               /* Weighted mean of all pixels (each 20-bit) in the imager control ROI. The weights are set in the IC-Adapter and usually fades out the upper bins of the histogram (excludes very bright spots from the mean-value) */
    	uint16 ui16_FrameNumber;                    /* Frame number of the current image from camera as 16 bit value */
    	uint16 ui16_CompandedMean;                  
    	RTE_t_eDataValid e_DataValid;                         /* Flag for data validity */
    } RTE_t_IC_S_StatisticalResults;			/* Imager statistical results */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	aui16_RequestedAddresses_array_t aui16_RequestedAddresses;            
    	uint16 ui16_RequestValid;                   
    	uint16 ui16_NumRegs;                        
    	uint16 ui16_SequenceCounter;                
    	uint16 ui16_WildCard;                       
    } RTE_t_ImageRegisterRequest;			/* DB cluster contains the requested register address (MCU -> stereo DSP) */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	RTE_t_Timestamp_64_Bit s_Timestamp_64_us;                   
    	aui16_RegisterContents_array_t aui16_RegisterContents;              
    	uint16 ui16_DataValid;                      
    	uint16 ui16_ResponseCode;                   
    	uint16 ui16_SequenceCounter;                
    	uint16 ui16_WildCard;                       
    	sint16 si16_FrameTimingOffsetLines;         
    } RTE_t_ImageRegisterResponse;			/* DB cluster contains the responded register values (stereo DSP -> MCU) */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint16 ui16_SensorModelId;                  
    	ui16_SensorFuseId_array_t ui16_SensorFuseId;                   
    	uint8 ui8_SensorRevisionNumber;            
    } RTE_t_ICA_S_SensorIDs;			/* Stores IDs and unique numbers of an imager */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	c03_EngRun_Stat EngRun_Stat;                         
    } SwcDemSc_EngRsEngCtrl_GrpType;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	c03_ISw_Stat ISw_Stat;                            
    } SwcDemSc_IgnStat_GrpType;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	c08_V_0_25k4_0k1 PN14_SupBat_Volt;                    
    } SwcDemSc_PN14SupBatStat_GrpType;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint32 ui32_ImageCounter;                   
    	RTE_t_eLCLaneValid e_LaneValidLeft;                     /* Lane valid state */
    	RTE_t_eLCLaneValid e_LaneValidRight;                    /* Lane valid state */
    	RTE_t_eLCYawValid e_YawValid;                          /* Yaw angle valid */
    	RTE_t_eLCLaneDscrbSide e_LaneDscrbSide;                     /* Yaw angle valid */
    	float32 f32_VlnLaneConf;                     /* Lane confidence */
    } RTE_t_LCOutput;			/* LC output data */

typedef uint8                     	aui8_CaliVin_array_t[17];      /* VIN of last calibration */	/* [Satisfies_rte sws 1189] */


typedef uint8                     	NvM_t_SrLearnValues[108];        /* Byte 0..53:
First part of SR learn values should not be cleared even when software is updated
Byte 1..107: cleared after each SW update */	/* [Satisfies_rte sws 1189] */


typedef uint16                    	aui16_Param_array_t[30];       /* Container for the parameters */	/* [Satisfies_rte sws 1189] */


typedef uint8                     	ui8_VibIntens_array_t[24];     			/* [Satisfies_rte sws 1189] */


typedef float32                   	af_RotMatRL_array_t[9];      			/* [Satisfies_rte sws 1189] */


typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint16 ui16_xPos;                           
    	uint16 ui16_yPos;                           
    	uint16 ui16_Count;                          
    	uint8 ui8_DefectType;                      
    	uint8 ui8_Unused;                          
    } NvM_t_HLABadPixel;			

typedef uint8                     	aui8_VibIntens_array_t[24];    			/* [Satisfies_rte sws 1189] */


typedef float32                   	af32_WindshieldCoefficients_array_t_0[5];			/* [Satisfies_rte sws 1189] */


typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	sint16 si16_Pitch;                          /* @resolution:0.0001 */
    	sint16 si16_Roll;                           /* @resolution:0.0001 */
    	sint16 si16_Yaw;                            /* @resolution:0.0001 */
    	sint16 si16_X;                              /* @resolution:1.0 */
    	sint16 si16_Y;                              /* @resolution:1.0 */
    	sint16 si16_Z;                              /* @resolution:1.0 */
    	uint16 ui16_Quality;                        
    } NvM_t_CamPos;			/* Angles calculated by the CALI component */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint16 ui16_Attenuation;                    
    	uint16 ui16_MaxExposureT1Long;              
    	uint16 ui16_MinExposureT1Long;              
    	uint16 ui16_DCGControlLong;                 
    	uint16 ui16_DCGThresholdHighLong;           
    	uint16 ui16_DCGThresholdLowLong;            
    	uint16 ui16_ExposureMinNoControlLong;       
    	uint16 ui16_ExposureMaxNoControlLong;       
    	uint16 ui16_LowEndMeanMaxLong;              
    	uint16 ui16_PercLowEndMinLong;              
    	uint16 ui16_IC_ROI_X_SizeLong;              
    	uint16 ui16_IC_ROI_X_StartOffsetLong;       
    	uint16 ui16_IC_ROI_Y_SizeLong;              
    	uint16 ui16_IC_ROI_Y_StartOffsetLong;       
    	uint16 ui16_TargetLumaLong;                 
    	uint16 ui16_MaxExposureT1Short;             
    	uint16 ui16_MinExposureT1Short;             
    	uint16 ui16_DCGControlShort;                
    	uint16 ui16_DCGThresholdHighShort;          
    	uint16 ui16_DCGThresholdLowShort;           
    	uint16 ui16_ExposureMinNoControlShort;      
    	uint16 ui16_ExposureMaxNoControlShort;      
    	uint16 ui16_LowEndMeanMaxShort;             
    	uint16 ui16_PercLowEndMinLongShort;         
    	uint16 ui16_IC_ROI_X_SizeShort;             
    	uint16 ui16_IC_ROI_X_StartOffsetShort;      
    	uint16 ui16_IC_ROI_Y_SizeShort;             
    	uint16 ui16_IC_ROI_Y_StartOffsetShort;      
    	uint16 ui16_TargetLumaShort;                
    	uint8 ui8_Valid;                           
    } NvM_t_ICConfig;			/* Configuration of IC component */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	sint16 si16_ROIStartX_Left;                 
    	sint16 si16_ROIStartY_Left;                 
    	sint16 si16_ROIStartX_Right;                
    	sint16 si16_ROIStartY_Right;                
    } NvM_t_ImageData;			/* Start position of ROIs for both imagers */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	RTE_t_PPARStereoCaliIntrinsics IntrinsData;                         
    	uint32 ui32_Valid;                          /* valid information */
    } NvM_t_StereoCalIntrinsics;			/* The same as in PPAR, just the valid flag is added to identify which block should be used. */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	RTE_t_PPARStereoCalTransRot TransRot;                            
    	uint32 ui32_Valid;                          
    } NvM_t_StereoCalTransRot;			/* The same as in PPAR, just the valid flag is added to identify which block should be used. */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint16 ui16_ImageWidth;                     
    	uint16 ui16_ImageHeight;                    
    	uint16 ui16_ROIWidth;                       
    	uint16 ui16_ROIHeight;                      
    	uint16 ui16_UVMapWidth;                     
    	uint16 ui16_UVMapHeight;                    
    	uint16 ui16_ROIXPos;                        
    	uint16 ui16_ROIYPos;                        
    	uint16 ui16_EpsilonGreyThreshold1;          
    	uint16 ui16_EpsilonGreyThreshold2;          
    	uint16 ui16_EpsilonMax;                     
    	uint16 ui16_EpsilonMin;                     
    } NvM_t_PowerFlowParams;			/* NvM Parameter for PF algo (stereo DSP) */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint16 ui16_GlobCtrlReg;                    
    	uint16 ui16_Hirschmueller_P1;               
    	uint16 ui16_Hirschmueller_P2;               
    	uint16 ui16_Adaptives_P1;                   
    	uint16 ui16_Adaptives_P2;                   
    	uint16 ui16_Roi_X_StartPositon;             
    	uint16 ui16_Roi_Y_StartPositon;             
    } NvM_t_SGMParams;			/* NvM Parameter for SGM algo (stereo DSP) */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint32 ui32_OdoVehicle;                     /* Odometer value of last calibration */
    	uint32 ui32_LastResult;                     /* Result of last calibration */
    	sint16 i16_VehLevFL;                        /* Vehicle level of last calibration */
    	sint16 i16_VehLevFR;                        /* Vehicle level of last calibration */
    	sint16 i16_VehLevRL;                        /* Vehicle level of last calibration */
    	sint16 i16_VehLevRR;                        /* Vehicle level of last calibration */
    	uint16 ui16_CarbodyFL;                      /* Carbody front left */
    	uint16 ui16_CarbodyFR;                      /* Carbody front right */
    	uint16 ui16_CarbodyRL;                      /* Carbody rear left */
    	uint16 ui16_CarbodyRR;                      /* Carbody rear right */
    	uint8 ui8_RecPatternMarker;                /* Number of recognized pattern marker */
    	uint8 ui8_Brightness;                      /* Brighntess while last calibration */
    	uint8 ui8_Contrast;                        /* Contrast while last calibration */
    	uint8 ui8_AlignmentDummy;                  /* fill byte to avoid alignment problems */
    	aui8_CaliVin_array_t aui8_CaliVin;                        /* VIN of last calibration */
    } NvM_t_CaliEnvData;			/* Environment data of the last calibration */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	sint16 si16_Pitch;                          
    	sint16 si16_Roll;                           
    	sint16 si16_Yaw;                            
    	uint8 ui8_PitchStage;                      
    	uint8 ui8_RollStage;                       
    	uint8 ui8_YawStage;                        
    } NvM_t_LDOnlineCali;			/* LD online calibration values */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint8 ui8_IpcConfig;                       /* switch for IPC configuration */
    	uint8 ui8_FctEnblSwitch;                   /* Bitfield to activate and deactivate functions
Bit0: FOD
Bit1: POD
Bit2: HLA */
    } NvM_t_SwConfigSwitch;			/* Configuration of the IuC software */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint16 ui16_FoVUL_X;                        
    	uint16 ui16_FoVUL_Y;                        
    	uint16 ui16_FoVUR_X;                        
    	uint16 ui16_FoVUR_Y;                        
    	uint16 ui16_FoVLL_X;                        
    	uint16 ui16_FoVLL_Y;                        
    	uint16 ui16_FoVLR_X;                        
    	uint16 ui16_FoVLR_Y;                        
    } NvM_t_CaliFoV;			/* Field of view, stored by CALI component */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint16 ui16_WheelBase;                      
    	uint16 ui16_TrackWidthFront;                
    	uint16 ui16_TrackWidthRear;                 
    	uint16 ui16_WhlToWhlOutsdFront;             
    	uint16 ui16_VehWeight;                      
    	uint16 ui16_WeightCenterAlt;                
    	uint16 ui16_WheelCircumDyn;                 
    	sint16 i16_CamPosX;                         
    	sint16 i16_CamPosY;                         
    	sint16 i16_CamPosZ;                         
    	sint16 i16_TargetPosX;                      
    	sint16 i16_TargetPosZ;                      
    	sint16 i16_Z0ToGround;                      
    	sint16 i16_VehLevelOffset;                  
    	sint16 i16_CarBodyZ0FrontX;                 
    	sint16 i16_CarBodyZ0FrontY;                 
    	sint16 i16_CarBodyZ0FrontZ;                 
    	sint16 i16_CarBodyZ0RearX;                  
    	sint16 i16_CarBodyZ0RearY;                  
    	sint16 i16_CarBodyZ0RearZ;                  
    	uint8 ui8_TransmissionWindscreen;          
    	uint8 ui8_SteeringRatio;                   
    	uint8 ui8_WhlTicksPerRev;                  
    	sint8 i8_SteelSpringOffsFront;             
    	sint8 i8_SteelSpringOffsRear;              
    	uint8 ui8_NVAvailable;                     
    	uint8 ui8_HeatAvailability;                /* No heat, intern, extern */
    	uint8 ui8_VehicleLine;                     
    	uint8 ui8_BodyStyle;                       
    	uint8 ui8_SteeringVariant;                 
    	uint8 ui8_GrazingAngle;                    /* @resolution:0.1 */
    	sint8 si8_PitchAngle;                      /* @resolution:0.1 */
    	sint8 si8_RollAngle;                       /* @resolution:0.1 */
    	sint8 si8_YawingAngle;                     /* @resolution:0.1 */
    } NvM_t_VCVehicleData;			/* SCN coded vehicle information (weight, size,...) */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint32 ui32_Odometer;                       
    	sint16 si16_Pitch;                          
    	sint16 si16_Roll;                           
    	sint16 si16_Yaw;                            
    } NvM_t_HLAOnlineCali;			/* HLA online calibration values */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint32 ui32_Version;                        /* SW Version information (3 bytes) */
    	uint32 ui32_Crc;                            /* CRC information which is stored in NvM at startup */
    } NvM_t_VersionCrc;			/* Version */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint16 ui16_CorrectionFactor;               
    	uint16 ui16_DCGGainFactor;                  
    	uint16 ui16_RegAdr01;                       
    	uint16 ui16_RegVal01;                       
    	uint16 ui16_RegAdr02;                       
    	uint16 ui16_RegVal02;                       
    	uint16 ui16_RegAdr03;                       
    	uint16 ui16_RegVal03;                       
    	uint16 ui16_Testpattern;                    
    	uint8 ui8_Valid;                           
    } NvM_t_ICImagerRegisters;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	aui16_Param_array_t aui16_Param;                         /* Container for the parameters */
    	uint8 ui8_Valid;                           /* Valid flag for NvM paramaters */
    } NvM_t_ICParameter;			/* Adjustable IC parameters */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint8 ui8_Headlighttype;                   
    	uint8 ui8_RightLeftTraffic;                
    	uint8 ui8_HeadlightMechanics;              
    	uint8 ui8_EmergencyLight;                  
    	uint8 ui8_HeadlightIHCMode;                
    	sint8 si8_HeadlightPositionLeft;           
    	sint8 si8_HeadlightPositionRight;          
    	uint8 ui8_HeadLampLatency;                 
    	uint8 ui8_SpotLightTolerance;              
    } NvM_t_IHCCoding;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	ui8_VibIntens_array_t ui8_VibIntens;                       
    	uint8 ui8_MBStarInPicture;                 
    	uint8 ui8_FAS_Switch;                      
    } NvM_t_VCAldwInfo;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint16 ui16_VehicleWidth;                   
    	uint16 ui16_VehicleHeight;                  
    } NvM_t_StereoCoding;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint32 ui32_TrafficStyleLastLearned;        
    	uint32 ui32_TrafficStyleLearningState;      
    } NvM_t_HLALearnValues;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	af_RotMatRL_array_t af_RotMatRL;                         
    	float32 f_Temperature;                       
    	uint16 ui16_Source;                         
    } NvM_t_SacCoarseCali;			

typedef NvM_t_HLABadPixel         	as_DefectPixelList_array_t[90];			/* [Satisfies_rte sws 1189] */


typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint8 ui8_DefectPixelListState;            
    	uint8 ui8_DefectPixelListLength;           
    	as_DefectPixelList_array_t as_DefectPixelList;                  
    } NvM_t_HLADefectPixelList;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint32 ui32_Version;                        
    	float32 f32_Pitch;                           
    	float32 f32_Roll;                            
    	float32 f32_Yaw;                             
    	float32 f32_QltyPitch;                       
    	float32 f32_QltyRoll;                        
    	float32 f32_QltyYaw;                         
    	float32 f32_Odometer;                        
    	float32 f32_Temperature;                     
    	uint8 ui8_TargetNo;                        
    	uint8 ui8_ErrorCode;                       
    	uint8 ui8_AlgoSignalState;                 
    } NvM_SACUpdateEolFromToNvm;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint32 ui32_TotalManualOverrides;           
    	uint32 ui32_SuccessfulManualOverrides;      
    } NvM_t_HLABlockageStatistics;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint8 ui8_CfgChange;                       
    	uint8 ui8_EVC_0C_VehLine;                  
    	uint8 ui8_EVC_01_StStyle;                  
    	uint8 ui8_EVC_02_BodyStyle;                
    	uint8 ui8_EVC_72_ActvLDA_Avl;              
    	uint8 ui8_EVC_74_LaneRec_Avl;              
    	uint8 ui8_EVC_75_NV_Avl;                   
    	uint8 ui8_EVC_76_RoadSignDtct_Avl;         
    	uint8 ui8_EVC_7C_IHC_Avl;                  
    	uint8 ui8_EVC_7D_IHC_Plus_Avl;             
    	uint8 ui8_EVC_81_ABC_Avl;                  
    	uint8 ui8_EVC_82_SteelAirSusp_Avl;         
    	uint8 ui8_EVC_83_AirSemiActv_Susp_Avl;     
    	uint8 ui8_EVC_0F_TrLrHtch_Avl;             
    } NvM_t_UsedEvcConfig;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint16 Duration;                            
    	uint16 Distance;                            
    	sint16 OutsideTemp;                         
    	uint16 Reserved;                            
    	uint32 MileageKm;                           
    } NvM_t_BlockStatClearanceSingle;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint16 Duration;                            
    	uint16 Distance;                            
    	sint16 OutsideTemp;                         
    	uint16 Reserved;                            
    	uint32 MileageKm;                           
    } NvM_t_BlockStatBlockageSingle;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint32 DurationMean;                        
    	uint32 DurationMax;                         
    	uint16 DistanceMean;                        
    	uint16 DistanceMax;                         
    	uint32 DurationComplete;                    
    	uint32 DistanceComplete;                    
    	uint32 NoEventsComplete;                    
    	uint16 CurrentStatus;                       
    	uint16 CurrentDuration;                     
    	uint16 CurrentDistance;                     
    	uint16 OutsideTempIgnStart;                 
    } NvM_t_BlockStatClearance;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint32 DurationMean;                        
    	uint32 DurationMax;                         
    	uint16 DistanceMean;                        
    	uint16 DistanceMax;                         
    	uint32 DurationComplete;                    
    	uint32 DistanceComplete;                    
    	uint32 NoEventsComplete;                    
    	uint32 RunTimeEcu;                          
    } NvM_t_BlockStatBlockage;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint16 ui16_WheelBase;                      
    	uint16 ui16_TrackWidthFront;                
    	uint16 ui16_TrackWidthRear;                 
    	uint16 ui16_WhlToWhlOutsdFront;             
    	uint16 ui16_VehWeight;                      
    	uint16 ui16_WeightCenterAlt;                
    	uint16 ui16_WheelCircumDyn;                 
    	sint16 si16_CamPosX;                        
    	sint16 si16_CamPosY;                        
    	sint16 si16_CamPosZ;                        
    	sint16 si16_TargetPosX;                     
    	sint16 si16_TargetPosZ;                     
    	sint16 si16_Z0ToGround;                     
    	sint16 si16_VehLevelOffset;                 
    	sint16 si16_CarBodyZ0FrontX;                
    	sint16 si16_CarBodyZ0FrontY;                
    	sint16 si16_CarBodyZ0FrontZ;                
    	sint16 si16_CarBodyZ0RearX;                 
    	sint16 si16_CarBodyZ0RearY;                 
    	sint16 si16_CarBodyZ0RearZ;                 
    	uint16 ui16_TransmissionWindscreen;         
    	uint16 ui16_SteeringRatio;                  
    	uint16 ui16_WhlTicksPerRev;                 
    	sint16 si16_SteelSpringOffsFront;           
    	sint16 si16_SteelSpringOffsRear;            
    	uint16 ui16_NVAvailable;                    
    	uint16 ui16_HeatAvailability;               /* No heat, intern, extern */
    	uint16 ui16_VehicleLine;                    
    	uint16 ui16_BodyStyle;                      
    	uint16 ui16_SteeringVariant;                
    	uint16 ui16_GrazingAngle;                   /* @resolution:0.1 */
    	sint16 si16_PitchAngle;                     /* @resolution:0.1 */
    	sint16 si16_RollAngle;                      /* @resolution:0.1 */
    	sint16 si16_YawingAngle;                    /* @resolution:0.1 */
    	uint32 ui32_MiscCheckSum;                   
    } NvM_t_VCVehData;			/* SCN coded vehicle information (weight, size,...) */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint32 ui32_YwRateMisc;                     
    	uint32 ui32_SlfStGraMisc;                   
    	uint32 ui32_StwhlAngMisc;                   
    	uint32 ui32_VelCorrMisc;                    
    	uint32 ui32_LatAccMisc;                     
    } NvM_t_VdyMisc;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	aui8_VibIntens_array_t aui8_VibIntens;                      
    	uint16 ui16_MBStarInPicture;                
    	uint16 ui16_FAS_Switch;                     
    	uint32 ui32_MiscCheckSum;                   
    } NvM_t_VCAldw;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint16 ui16_VehicleWidth;                   
    	uint16 ui16_VehicleHeight;                  
    	uint32 ui32_MiscCheckSum;                   
    } NvM_t_VCStereo;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	af32_WindshieldCoefficients_array_t_0 af32_WindshieldCoefficients;         
    	uint32 ui32_MiscCheckSum;                   
    } NvM_t_VCStereoWindshield;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint32 ui32_MiscCheckSum;                   /* The MiscCheckSum which has to be calculated over the rest of the payload. */
    	RTE_t_Timestamp_64_Bit s_Timestamp_64_us;                   
    	uint32 ui32_CycleCounter;                   
    	uint32 ui32_AlgoTimestamp_ms;               
    	float32 f32_LongAccel;                       
    	float32 f32_RealSpeed;                       
    	float32 f32_YawRate;                         
    	float32 f32_YawRateOffset;                   
    	float32 f32_YawRateQuality;                  
    	float32 f32_YawRateVariance;                 
    	float32 f32_DrvIntCurve;                     
    	float32 f32_DrvIntCurveVariance;             
    	float32 f32_Curve;                           
    	uint32 ui32_VehicleMotionState;             
    	float32 f32_MotionStateConfidence;           
    	float32 f32_StWheelAngleOffset;              
    } RTE_t_VdyOutput;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	float32 ADC_MCU_TEMP;                        
    	float32 ADC_DEEP_TEMP;                       
    	float32 ADC_DSP_MONO_TEMP;                   
    	float32 ADC_HW_VERSION;                      
    	float32 ADC_1V5_LIN_OVP;                     
    	float32 ADC_HEAT;                            
    	float32 ADC_1V35_SMPS;                       
    	float32 ADC_2V8_LIN;                         
    	float32 ADC_5V_SMPS;                         
    	float32 ADC_UBATT;                           
    	float32 ADC_3V3_SW;                          
    	float32 ADC_1V8_SMPS;                        
    	float32 ADC_1V8_SW;                          
    	float32 ADC_1V2_SMPS;                        
    	float32 ADC_3V3_SMPS;                        
    	float32 ADC_DSP_STEREO_TEMP;                 
    	float32 ADC_FPGA_TEMP;                       
    	float32 ADC_3V3_SW_STEREO;                   
    	float32 ADC_1V1_SMPS;                        
    	float32 ADC_1V8_SW_STEREO;                   
    	float32 ADC_1V2_SW;                          
    	float32 ADC_2V8_LIN_STEREO;                  
    } RTE_t_AdcReads;			/* ADC measurement data */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	sint16 si16_MonoDSP;                        
    	sint16 si16_StereoDSP;                      
    	sint16 si16_FPGA;                           
    	sint16 si16_MCU;                            
    	sint16 si16_DEEP;                           
    	sint16 si16_ImagerRight;                    
    	sint16 si16_ImagerLeft;                     
    } RTE_t_MaxTemperature;			/* Max temperature measured */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	boolean b_ActvLDA_Avl;                       
    	boolean b_LaneRec_Avl;                       
    } RTE_t_AldwLdpCfgBits;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	boolean EVC_65_AddEquip_Avl;                 
    	boolean EVC_66_AddEquip_Avl;                 
    	boolean EVC_67_CMS_Avl;                      
    	boolean EVC_68_CMS_R_Avl;                    
    	boolean EVC_69_BrkEngg_PP_Avl;               
    	boolean EVC_6A_BasExtd_Avl;                  
    	boolean EVC_6B_MirrFld_Avl;                  
    	boolean EVC_6C_BSM_Avl;                      
    	boolean EVC_6D_ActvBSM_Avl;                  
    	boolean EVC_6E_TurnAss_Avl;                  
    	boolean EVC_6F_ADTR_Avl;                     
    	boolean EVC_70_DTR_Pro_Avl;                  
    	boolean EVC_71_ALS_Avl;                      
    	boolean EVC_72_ActvLDA_Avl;                  
    	boolean EVC_73_FCW_Avl;                      
    	boolean EVC_74_LaneRec_Avl;                  
    	boolean EVC_75_NV_Avl;                       
    	boolean EVC_76_RoadSignDtct_Avl;             
    	boolean EVC_77_RVC_Avl;                      
    	boolean EVC_78_SurrView_Avl;                 
    	boolean EVC_79_PTS_Avl;                      
    	boolean EVC_7A_APG_Avl;                      
    	boolean EVC_7B_ActPKAS_Avl;                  
    	boolean EVC_7C_IHC_Avl;                      
    	boolean EVC_7D_IHC_Plus_Avl;                 
    	boolean EVC_7E_BasPlusQ_Avl;                 
    	boolean EVC_7F_ECO_St_Avl;                   
    	boolean EVC_80_PSTS_Avl;                     
    	boolean EVC_81_ABC_Avl;                      
    	boolean EVC_82_SteelAirSusp_Avl;             
    	boolean EVC_83_AirSemiActv_Susp_Avl;         
    	boolean EVC_84_SportSusp_Avl;                
    	boolean EVC_85_SportPk_AMG_Avl;              
    	boolean EVC_86_SportPk_Avl;                  
    	boolean EVC_87_SportPk_Ext_Avl;              
    	boolean EVC_88_DualView_Avl;                 
    	boolean EVC_89_Entertain_R_Avl;              
    	boolean EVC_8A_DigTV_Avl;                    
    	boolean EVC_8B_DAB_Tun_Avl;                  
    	boolean EVC_8C_MTUS_Avl;                     
    	boolean EVC_8D_UCI_Avl;                      
    	boolean EVC_8E_SndSys_Avl;                   
    	boolean EVC_8F_WShViewWin_Avl;               
    	boolean EVC_90_WSh_Clr_Avl;                  
    	boolean EVC_91_WSh_Ht_Avl;                   
    	boolean EVC_92_WShBL_Prot_Avl;               
    	boolean EVC_93_WSh_Ht_Lcut_Avl;              
    	boolean EVC_94_OptPack_Clas_Avl;             
    	boolean EVC_95_OptPack_Avan_Avl;             
    	boolean EVC_96_OptPack_Eleg_Avl;             
    } RTE_t_EvcCfgBit65_96;			

typedef uint8                     	RTE_aui8_VIN[17];              /* Vehicle VIN */	/* [Satisfies_rte sws 1189] */


typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	sint16 BatteryVoltage;                      /* Battery voltage @resolution:0.01 */
    	sint8 EngCoolTemp;                         /* Engine cooling temperature */
    	EngRunState EngRunState;                         /* Engine running state */
    } RTE_t_VehAddSignals;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	float32 f32_FrontLeft;                       /* Front Left */
    	float32 f32_FrontRight;                      /* Front Right */
    	float32 f32_RearLeft;                        /* Rear Left */
    	float32 f32_RearRight;                       /* Rear Right */
    	e_SigStatus e_SigStat;                           /* signal quality of height car body */
    } RTE_t_VehicleLevel;			/* Vehicle level */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint8 ui8_WiperState;                      /* Wiper states 0..15 @min:0.15 @resolution:1.0 */
    	boolean b_WiperOutsideParkPos;               /* Wiper outside it's parking position (moving) */
    	e_WiperWasherSw e_WiperWasherSw;                     
    	e_WiperSw6Posn e_WiperSw6Posn;                      
    } RTE_t_WiperInfo;			/* Signals of the whiper */

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	uint16 ui16_VehSpdDisp;                     /* Displayed vehicle speed @resolution:0.01 */
    	uint8 ui8_VehSpdUnit;                      /* Unit of displayed vehicle speed */
    } RTE_t_VehSpdDisp;			

typedef struct 			/* [Satisfies_rte sws 1191] */
{
    	float32 f32_StWhlAngl;                       
    	float32 f32_StWhlAnglSpd;                    
    } RTE_t_StWhlAnglStat;			



/**********************************************/
/* Range data type limits                     */
/**********************************************/

#define SymbolicConstants_LowerLimit (-2147483648)
#define SymbolicConstants_UpperLimit (2147483647)

#define InterfaceVersion_LowerLimit (0U)
#define InterfaceVersion_UpperLimit (4294967295U)

#define RTE_t_TSAIFModeSelect_LowerLimit (0U)
#define RTE_t_TSAIFModeSelect_UpperLimit (7U)

#define RTE_t_TSAIFInputSignalState_LowerLimit (0U)
#define RTE_t_TSAIFInputSignalState_UpperLimit (2U)

#define RTE_t_TSAIFObjEdgeFlag_LowerLimit (0U)
#define RTE_t_TSAIFObjEdgeFlag_UpperLimit (2U)

#define RTE_t_TSAIFVehTrnIndState_LowerLimit (0U)
#define RTE_t_TSAIFVehTrnIndState_UpperLimit (3U)

#define RTE_t_TSAIFVehIgnSwState_LowerLimit (0U)
#define RTE_t_TSAIFVehIgnSwState_UpperLimit (4U)

#define RTE_t_TSAIFVehMotionState_LowerLimit (0U)
#define RTE_t_TSAIFVehMotionState_UpperLimit (3U)

#define RTE_t_TSAIFVehTrailerState_LowerLimit (0U)
#define RTE_t_TSAIFVehTrailerState_UpperLimit (3U)

#define RTE_t_TSAIFInputSRProcessState_LowerLimit (0U)
#define RTE_t_TSAIFInputSRProcessState_UpperLimit (7U)

#define RTE_t_TSAIFInputSRResultTrackState_LowerLimit (0U)
#define RTE_t_TSAIFInputSRResultTrackState_UpperLimit (3U)

#define RTE_t_TSAIFInputSRFunctionalSignClassId_LowerLimit (0U)
#define RTE_t_TSAIFInputSRFunctionalSignClassId_UpperLimit (999990U)

#define RTE_t_TSAIFInputSRCountryTrafficStyleResult_LowerLimit (0U)
#define RTE_t_TSAIFInputSRCountryTrafficStyleResult_UpperLimit (2U)

#define RTE_t_TSAIFInputSRCountrySpeedLimitUnitResult_LowerLimit (0U)
#define RTE_t_TSAIFInputSRCountrySpeedLimitUnitResult_UpperLimit (3U)

#define RTE_t_TSAIFMapProvider_LowerLimit (0U)
#define RTE_t_TSAIFMapProvider_UpperLimit (7U)

#define RTE_t_TSAIFMapTrafficStyle_LowerLimit (0U)
#define RTE_t_TSAIFMapTrafficStyle_UpperLimit (3U)

#define RTE_t_TSAIFMapSpeedUnit_LowerLimit (0U)
#define RTE_t_TSAIFMapSpeedUnit_UpperLimit (3U)

#define RTE_t_TSAIFMapLocationType_LowerLimit (0U)
#define RTE_t_TSAIFMapLocationType_UpperLimit (15U)

#define RTE_t_TSAIFMapBuildUpArea_LowerLimit (0U)
#define RTE_t_TSAIFMapBuildUpArea_UpperLimit (3U)

#define RTE_t_TSAIFMapFunctionalRoadClass_LowerLimit (0U)
#define RTE_t_TSAIFMapFunctionalRoadClass_UpperLimit (7U)

#define RTE_t_TSAIFMapNumLanesDrivingDir_LowerLimit (0U)
#define RTE_t_TSAIFMapNumLanesDrivingDir_UpperLimit (15U)

#define RTE_t_TSAIFMapNumLanesOppositeDir_LowerLimit (0U)
#define RTE_t_TSAIFMapNumLanesOppositeDir_UpperLimit (7U)

#define RTE_t_TSAIFMapFormOfWay_LowerLimit (0U)
#define RTE_t_TSAIFMapFormOfWay_UpperLimit (15U)

#define RTE_t_TSAIFMapSpeedLimitSignType_LowerLimit (0U)
#define RTE_t_TSAIFMapSpeedLimitSignType_UpperLimit (15U)

#define RTE_t_TSAIFMapSpeedLimitValidity_LowerLimit (0U)
#define RTE_t_TSAIFMapSpeedLimitValidity_UpperLimit (15U)

#define RTE_t_TSAIFMapSpeedLimitSide_LowerLimit (0U)
#define RTE_t_TSAIFMapSpeedLimitSide_UpperLimit (3U)

#define RTE_t_TSAIFMapContextChangeType_LowerLimit (0U)
#define RTE_t_TSAIFMapContextChangeType_UpperLimit (3U)

#define RTE_t_TSAIFMapRoadChangeType_LowerLimit (0U)
#define RTE_t_TSAIFMapRoadChangeType_UpperLimit (7U)

#define RTE_t_TSAIFInputLRLaneChangeState_LowerLimit (0U)
#define RTE_t_TSAIFInputLRLaneChangeState_UpperLimit (2U)

#define RTE_t_TSAIFInputLRMarkingColor_LowerLimit (0U)
#define RTE_t_TSAIFInputLRMarkingColor_UpperLimit (3U)

#define RTE_t_TSAIFInputLRMarkState_LowerLimit (0U)
#define RTE_t_TSAIFInputLRMarkState_UpperLimit (1U)

#define RTE_t_TSAIFInputLRMarkType_LowerLimit (0U)
#define RTE_t_TSAIFInputLRMarkType_UpperLimit (10U)

#define RTE_t_TSAIFInputLRSiteDtctStat_LowerLimit (0U)
#define RTE_t_TSAIFInputLRSiteDtctStat_UpperLimit (2U)

#define RTE_t_TSAIFBlockageState_LowerLimit (0U)
#define RTE_t_TSAIFBlockageState_UpperLimit (5U)

#define RTE_t_TSAIFModeRequest_LowerLimit (0U)
#define RTE_t_TSAIFModeRequest_UpperLimit (2U)

#define RTE_t_TSAIFSpdOffsetUnit_LowerLimit (0U)
#define RTE_t_TSAIFSpdOffsetUnit_UpperLimit (1U)

#define RTE_t_IFDiagDataSrc_LowerLimit (0U)
#define RTE_t_IFDiagDataSrc_UpperLimit (2U)

#define RTE_t_TSAIFOutputSignalState_LowerLimit (0U)
#define RTE_t_TSAIFOutputSignalState_UpperLimit (2U)

#define RTE_eTSACustomSpdWarnIconDisp_LowerLimit (0U)
#define RTE_eTSACustomSpdWarnIconDisp_UpperLimit (2U)

#define RTE_eTSAIFHmiSpdWarnType_LowerLimit (0U)
#define RTE_eTSAIFHmiSpdWarnType_UpperLimit (3U)

#define RTE_eTSAIFHmiSpdWarnDispType_LowerLimit (0U)
#define RTE_eTSAIFHmiSpdWarnDispType_UpperLimit (1U)

#define RTE_eTSAIFHmiSpdWarnUnit_LowerLimit (0U)
#define RTE_eTSAIFHmiSpdWarnUnit_UpperLimit (1U)

#define RTE_eTSAIFHmiTSAState_LowerLimit (0U)
#define RTE_eTSAIFHmiTSAState_UpperLimit (7U)

#define RTE_eTSAIFHmiSLAWarnReq_LowerLimit (0U)
#define RTE_eTSAIFHmiSLAWarnReq_UpperLimit (2U)

#define RTE_eTSAIFHmiNPAWarnReq_LowerLimit (0U)
#define RTE_eTSAIFHmiNPAWarnReq_UpperLimit (2U)

#define RTE_eTSAIFHmiNPANoPassWarnReq_LowerLimit (0U)
#define RTE_eTSAIFHmiNPANoPassWarnReq_UpperLimit (2U)

#define RTE_eTSAIFHmiWWAWarnReq_LowerLimit (0U)
#define RTE_eTSAIFHmiWWAWarnReq_UpperLimit (2U)

#define RTE_eTSAIFHmiRWFWarnReq_LowerLimit (0U)
#define RTE_eTSAIFHmiRWFWarnReq_UpperLimit (2U)

#define RTE_eTSAIFRWFStatus_LowerLimit (0U)
#define RTE_eTSAIFRWFStatus_UpperLimit (2U)

#define RTE_eTSAIFOutputProcessState_LowerLimit (0U)
#define RTE_eTSAIFOutputProcessState_UpperLimit (5U)

#define RTE_eTSAIFErrorId_LowerLimit (0U)
#define RTE_eTSAIFErrorId_UpperLimit (8U)

#define RTE_eTSAIFErrorStatus_LowerLimit (0U)
#define RTE_eTSAIFErrorStatus_UpperLimit (2U)


#define RTE_t_eSACSource_LowerLimit (0U)
#define RTE_t_eSACSource_UpperLimit (4294967295U)

#define RTE_t_MAPIFOuputSignalState_LowerLimit (0U)
#define RTE_t_MAPIFOuputSignalState_UpperLimit (2U)

#define RTE_t_MAPIFProvider_LowerLimit (0U)
#define RTE_t_MAPIFProvider_UpperLimit (7U)

#define RTE_t_MAPIFTrafficStyle_LowerLimit (0U)
#define RTE_t_MAPIFTrafficStyle_UpperLimit (3U)

#define RTE_t_MAPIFSpeedUnit_LowerLimit (0U)
#define RTE_t_MAPIFSpeedUnit_UpperLimit (3U)

#define RTE_t_MAPIFLocationType_LowerLimit (0U)
#define RTE_t_MAPIFLocationType_UpperLimit (15U)

#define RTE_t_MAPIFBuildUpArea_LowerLimit (0U)
#define RTE_t_MAPIFBuildUpArea_UpperLimit (3U)

#define RTE_t_MAPIFFunctionalRoadClass_LowerLimit (0U)
#define RTE_t_MAPIFFunctionalRoadClass_UpperLimit (7U)

#define RTE_t_MAPIFNumLanesDrivingDir_LowerLimit (0U)
#define RTE_t_MAPIFNumLanesDrivingDir_UpperLimit (15U)

#define RTE_t_MAPIFNumLanesOppositeDir_LowerLimit (0U)
#define RTE_t_MAPIFNumLanesOppositeDir_UpperLimit (7U)

#define RTE_t_MAPIFFormOfWay_LowerLimit (0U)
#define RTE_t_MAPIFFormOfWay_UpperLimit (15U)

#define RTE_t_MAPIFSpeedLimitSignType_LowerLimit (0U)
#define RTE_t_MAPIFSpeedLimitSignType_UpperLimit (15U)

#define RTE_t_MAPIFSpeedLimitValidity_LowerLimit (0U)
#define RTE_t_MAPIFSpeedLimitValidity_UpperLimit (15U)

#define RTE_t_MAPIFSpeedLimitSide_LowerLimit (0U)
#define RTE_t_MAPIFSpeedLimitSide_UpperLimit (3U)

#define RTE_t_MAPIFContextChangeType_LowerLimit (0U)
#define RTE_t_MAPIFContextChangeType_UpperLimit (3U)

#define RTE_t_MAPIFRoadChangeType_LowerLimit (0U)
#define RTE_t_MAPIFRoadChangeType_UpperLimit (7U)

#define RTE_eMAPIFOutputProcessState_LowerLimit (0U)
#define RTE_eMAPIFOutputProcessState_UpperLimit (5U)

#define RTE_eMAPIFErrorId_LowerLimit (0U)
#define RTE_eMAPIFErrorId_UpperLimit (8U)

#define RTE_eMAPIFErrorStatus_LowerLimit (0U)
#define RTE_eMAPIFErrorStatus_UpperLimit (2U)

#define RTE_t_MAPIFFuncRet_LowerLimit (0U)
#define RTE_t_MAPIFFuncRet_UpperLimit (4U)

#define RTE_t_MAPIFInputModeSelect_LowerLimit (0U)
#define RTE_t_MAPIFInputModeSelect_UpperLimit (7U)

#define RTE_t_MAPIFInputSignalState_LowerLimit (0U)
#define RTE_t_MAPIFInputSignalState_UpperLimit (2U)

#define RTE_t_MAPIFVehMotionState_LowerLimit (0U)
#define RTE_t_MAPIFVehMotionState_UpperLimit (3U)


#define RTE_t_MAPIFVPState_LowerLimit (0U)
#define RTE_t_MAPIFVPState_UpperLimit (7U)

#define RTE_t_MAPIFLane_LowerLimit (0U)
#define RTE_t_MAPIFLane_UpperLimit (7U)

#define RTE_t_MAPIFFuncRoadClass_LowerLimit (0U)
#define RTE_t_MAPIFFuncRoadClass_UpperLimit (7U)

#define RTE_t_MAPIFFormOfWaySeg_LowerLimit (0U)
#define RTE_t_MAPIFFormOfWaySeg_UpperLimit (15U)

#define RTE_t_MAPIFEffSpdLmtType_LowerLimit (0U)
#define RTE_t_MAPIFEffSpdLmtType_UpperLimit (7U)

#define RTE_t_MAPIFNumOfLanesDrivDir_LowerLimit (0U)
#define RTE_t_MAPIFNumOfLanesDrivDir_UpperLimit (7U)

#define RTE_t_MAPIFNumOfLanesOppDir_LowerLimit (0U)
#define RTE_t_MAPIFNumOfLanesOppDir_UpperLimit (3U)

#define RTE_t_MAPIFInMapProvider_LowerLimit (0U)
#define RTE_t_MAPIFInMapProvider_UpperLimit (7U)

#define RTE_t_eLDPlatform_LowerLimit (0U)
#define RTE_t_eLDPlatform_UpperLimit (3U)

#define RTE_t_eLDRoadType_LowerLimit (0U)
#define RTE_t_eLDRoadType_UpperLimit (4294967295U)

#define RTE_t_eLDMarkerType_LowerLimit (0U)
#define RTE_t_eLDMarkerType_UpperLimit (4294967295U)

#define RTE_t_eLDMarkerColor_LowerLimit (0U)
#define RTE_t_eLDMarkerColor_UpperLimit (4294967295U)

#define RTE_t_eLDEvent_LowerLimit (0U)
#define RTE_t_eLDEvent_UpperLimit (4294967295U)

#define RTE_t_eLDMarkerQualitiy_LowerLimit (0U)
#define RTE_t_eLDMarkerQualitiy_UpperLimit (4294967295U)

#define RTE_t_eLDMarkerRel_LowerLimit (0U)
#define RTE_t_eLDMarkerRel_UpperLimit (4294967295U)

#define RTE_t_eLDSensorID_LowerLimit (0U)
#define RTE_t_eLDSensorID_UpperLimit (3U)

#define RTE_HLA_t_eTrafficStyle_LowerLimit (0U)
#define RTE_HLA_t_eTrafficStyle_UpperLimit (4294967295U)

#define RTE_HLA_t_eHeadLightType_LowerLimit (0U)
#define RTE_HLA_t_eHeadLightType_UpperLimit (4U)

#define RTE_HLA_t_eHeadLightMechanics_LowerLimit (0U)
#define RTE_HLA_t_eHeadLightMechanics_UpperLimit (3U)

#define RTE_HLA_t_eHeadLightMode_LowerLimit (0U)
#define RTE_HLA_t_eHeadLightMode_UpperLimit (4U)

#define RTE_HLA_t_eSpotLight_LowerLimit (0U)
#define RTE_HLA_t_eSpotLight_UpperLimit (2U)

#define RTE_HLA_t_eWindshieldType_LowerLimit (0U)
#define RTE_HLA_t_eWindshieldType_UpperLimit (4U)

#define RTE_HLA_t_eSigStatus_t_LowerLimit (0U)
#define RTE_HLA_t_eSigStatus_t_UpperLimit (5U)

#define RTE_HLA_t_eType_LowerLimit (0U)
#define RTE_HLA_t_eType_UpperLimit (3U)

#define RTE_HLA_t_eState_LowerLimit (0U)
#define RTE_HLA_t_eState_UpperLimit (3U)

#define RTE_HLA_t_eLightStyle_LowerLimit (0U)
#define RTE_HLA_t_eLightStyle_UpperLimit (4U)

#define RTE_HLA_t_eHighBeamState_LowerLimit (0U)
#define RTE_HLA_t_eHighBeamState_UpperLimit (3U)

#define RTE_HLA_t_eLightModuleState_LowerLimit (0U)
#define RTE_HLA_t_eLightModuleState_UpperLimit (3U)

#define RTE_HLA_t_eGlareReductionState_LowerLimit (0U)
#define RTE_HLA_t_eGlareReductionState_UpperLimit (2U)

#define RTE_HLA_t_eExpCRTLState_LowerLimit (0U)
#define RTE_HLA_t_eExpCRTLState_UpperLimit (2U)

#define RTE_HLA_t_eActCharac_LowerLimit (0U)
#define RTE_HLA_t_eActCharac_UpperLimit (1U)

#define RTE_HLA_t_eMovementState_LowerLimit (0U)
#define RTE_HLA_t_eMovementState_UpperLimit (3U)

#define RTE_HLA_t_eWiperWasherState_LowerLimit (0U)
#define RTE_HLA_t_eWiperWasherState_UpperLimit (2U)

#define RTE_HLA_t_eWiperStage_LowerLimit (0U)
#define RTE_HLA_t_eWiperStage_UpperLimit (6U)

#define RTE_HLA_t_eBayerPatternType_LowerLimit (0U)
#define RTE_HLA_t_eBayerPatternType_UpperLimit (3U)

#define RTE_HLA_t_eLevelState_LowerLimit (0U)
#define RTE_HLA_t_eLevelState_UpperLimit (1U)

#define RTE_HLA_t_eDrivingDirection_LowerLimit (0U)
#define RTE_HLA_t_eDrivingDirection_UpperLimit (2U)

#define RTE_HLA_t_eCityState_LowerLimit (0U)
#define RTE_HLA_t_eCityState_UpperLimit (4294967295U)

#define RTE_HLA_t_eWeatherState_LowerLimit (0U)
#define RTE_HLA_t_eWeatherState_UpperLimit (4294967295U)

#define RTE_HLA_t_eTunnel_LowerLimit (0U)
#define RTE_HLA_t_eTunnel_UpperLimit (4294967295U)

#define RTE_HLA_t_eMotorwayState_LowerLimit (0U)
#define RTE_HLA_t_eMotorwayState_UpperLimit (2U)

#define RTE_HLA_t_eBrightnessState_LowerLimit (0U)
#define RTE_HLA_t_eBrightnessState_UpperLimit (4294967295U)

#define RTE_HLA_t_eLightOutput_LowerLimit (0U)
#define RTE_HLA_t_eLightOutput_UpperLimit (2U)

#define RTE_HLA_t_eExit_LowerLimit (0U)
#define RTE_HLA_t_eExit_UpperLimit (3U)

#define RTE_HLA_t_eICDefectType_LowerLimit (0U)
#define RTE_HLA_t_eICDefectType_UpperLimit (7U)

#define RTE_HLAF_t_eNightViewObjectType_LowerLimit (0U)
#define RTE_HLAF_t_eNightViewObjectType_UpperLimit (3U)

#define RTE_HLAF_t_eNightViewSpot_LowerLimit (0U)
#define RTE_HLAF_t_eNightViewSpot_UpperLimit (3U)

#define RTE_HLAR_t_eDebugSwitch_LowerLimit (0U)
#define RTE_HLAR_t_eDebugSwitch_UpperLimit (35U)

#define RTE_HLA_t_eHighwayRoadwayType_LowerLimit (0U)
#define RTE_HLA_t_eHighwayRoadwayType_UpperLimit (4294967295U)

#define RTE_HLA_t_eHighwayDetectionState_LowerLimit (0U)
#define RTE_HLA_t_eHighwayDetectionState_UpperLimit (4294967295U)

#define RTE_HLA_t_eHighwayOcclusionState_LowerLimit (0U)
#define RTE_HLA_t_eHighwayOcclusionState_UpperLimit (4294967295U)

#define RTE_HLA_t_eTrafficStyleState_LowerLimit (0U)
#define RTE_HLA_t_eTrafficStyleState_UpperLimit (4294967295U)

#define RTE_HLA_t_eRedReflectorArea_LowerLimit (0U)
#define RTE_HLA_t_eRedReflectorArea_UpperLimit (4294967295U)







#define RTE_GB_t_eMovementState_LowerLimit (0U)
#define RTE_GB_t_eMovementState_UpperLimit (3U)

#define RTE_GB_t_eBayerPatternType_LowerLimit (1U)
#define RTE_GB_t_eBayerPatternType_UpperLimit (4U)

#define RTE_GB_t_eFctId_LowerLimit (0U)
#define RTE_GB_t_eFctId_UpperLimit (6U)

#define RTE_GB_t_eBlockageStatus_LowerLimit (0U)
#define RTE_GB_t_eBlockageStatus_UpperLimit (6U)

#define RTE_GB_t_eLightStyle_LowerLimit (0U)
#define RTE_GB_t_eLightStyle_UpperLimit (4U)


#define RTE_GB_t_eHighBeamState_LowerLimit (0U)
#define RTE_GB_t_eHighBeamState_UpperLimit (3U)


#define b_FogLampFront_LowerLimit (0U)
#define b_FogLampFront_UpperLimit (1U)

#define b_FogLampRear_LowerLimit (0U)
#define b_FogLampRear_UpperLimit (1U)

#define RTE_CALI_t_eSigStatus_LowerLimit (0U)
#define RTE_CALI_t_eSigStatus_UpperLimit (5U)

#define RTE_CALI_t_eBayerPatType_LowerLimit (0U)
#define RTE_CALI_t_eBayerPatType_UpperLimit (3U)

#define RTE_CALI_t_eExit_LowerLimit (0U)
#define RTE_CALI_t_eExit_UpperLimit (3U)

#define RTE_CALI_t_eCALIMode_LowerLimit (0U)
#define RTE_CALI_t_eCALIMode_UpperLimit (1U)

#define RTE_CALI_t_eStatus_LowerLimit (0U)
#define RTE_CALI_t_eStatus_UpperLimit (1073741824U)

#define fDistance_t_LowerLimit (-500.0)
#define fDistance_t_UpperLimit (500.0)


#define fAngleDeg_t_LowerLimit (-360.0)
#define fAngleDeg_t_UpperLimit (360.0)


#define fVelocity_t_LowerLimit (-100.0)
#define fVelocity_t_UpperLimit (100.0)

#define fAccel_t_LowerLimit (-18.0)
#define fAccel_t_UpperLimit (18.0)

#define fVelocityAbs_t_LowerLimit (0.0U)
#define fVelocityAbs_t_UpperLimit (100.0U)

#define fAccelAbs_t_LowerLimit (-18.0)
#define fAccelAbs_t_UpperLimit (18.0)

#define fCurve_t_LowerLimit (-1.0)
#define fCurve_t_UpperLimit (1.0)

#define fRadius_t_LowerLimit (-100000.0)
#define fRadius_t_UpperLimit (100000.0)

#define fTime_t_LowerLimit (0.0U)

#define fQuality_t_LowerLimit (0.0U)
#define fQuality_t_UpperLimit (1.0U)

#define fProbability_t_LowerLimit (0.0U)
#define fProbability_t_UpperLimit (1.0U)

#define fConfidence_t_LowerLimit (0.0U)
#define fConfidence_t_UpperLimit (1.0U)

#define fUncertainty_t_LowerLimit (0.0U)
#define fUncertainty_t_UpperLimit (1.0U)

#define fTemperature_t_LowerLimit (-300.0)
#define fTemperature_t_UpperLimit (300.0)

#define fVariance_t_LowerLimit (-100000.0)
#define fVariance_t_UpperLimit (100000.0)

#define fWeight_t_LowerLimit (0.0U)
#define fWeight_t_UpperLimit (50000.0U)

#define fRatio_t_LowerLimit (0.0U)
#define fRatio_t_UpperLimit (10000.0U)

#define fStiffness_t_LowerLimit (0.0U)
#define fStiffness_t_UpperLimit (10000.0U)


#define uiTime_t_LowerLimit (0.0U)
#define uiTime_t_UpperLimit (62000.0U)

#define ucConfidence_t_LowerLimit (0.0U)
#define ucConfidence_t_UpperLimit (100.0U)

#define ObjNumber_t_LowerLimit (-1.0)

#define TraceID_t_LowerLimit (0.0U)

#define percentage_t_LowerLimit (0.0U)
#define percentage_t_UpperLimit (100.0U)

#define acceleration_t_LowerLimit (-32767.0)
#define acceleration_t_UpperLimit (32767.0)

#define times_t_LowerLimit (0.0U)
#define times_t_UpperLimit (65535.0U)

#define distance_t_LowerLimit (-32767.0)
#define distance_t_UpperLimit (32767.0)

#define velocity_t_LowerLimit (-32767.0)
#define velocity_t_UpperLimit (32767.0)

#define factor_t_LowerLimit (-32768.0)
#define factor_t_UpperLimit (32767.0)

#define confidence_t_LowerLimit (0.0U)
#define confidence_t_UpperLimit (255.0U)

#define VDYCaliState_t_LowerLimit (0U)
#define VDYCaliState_t_UpperLimit (128U)

#define VDYCtrlState_t_LowerLimit (0U)
#define VDYCtrlState_t_UpperLimit (2U)

#define AlgoDataTimeStamp_t_LowerLimit (0.0U)
#define AlgoDataTimeStamp_t_UpperLimit (65535.0U)

#define Algo64DataTimeStamp_t_LowerLimit (0.0U)
#define Algo64DataTimeStamp_t_UpperLimit (9.22337203685e+018U)

#define AlgoCycleCounter_t_LowerLimit (0.0U)
#define AlgoCycleCounter_t_UpperLimit (65535.0U)

#define SigState_t_LowerLimit (0U)
#define SigState_t_UpperLimit (1U)

#define quality_t_LowerLimit (0.0U)
#define quality_t_UpperLimit (100.0U)

#define FCTStateSig_t_LowerLimit (0U)
#define FCTStateSig_t_UpperLimit (2U)

#define OffsetCompState_t_LowerLimit (0U)
#define OffsetCompState_t_UpperLimit (4U)

#define ALDWMsgDispRq_t_LowerLimit (0U)
#define ALDWMsgDispRq_t_UpperLimit (7U)

#define ALDWIndLmpOnRq_t_LowerLimit (0U)
#define ALDWIndLmpOnRq_t_UpperLimit (3U)

#define ALDWBrkMsgDispRq_t_LowerLimit (0U)
#define ALDWBrkMsgDispRq_t_UpperLimit (3U)

#define ALDWWrnRq_t_LowerLimit (0U)
#define ALDWWrnRq_t_UpperLimit (2U)

#define ALDWWrnMdRq_t_LowerLimit (0U)
#define ALDWWrnMdRq_t_UpperLimit (1U)

#define ALDWPulseTmRq_t_LowerLimit (0U)
#define ALDWPulseTmRq_t_UpperLimit (3U)

#define ALDWDrvActvLDP_t_LowerLimit (0U)
#define ALDWDrvActvLDP_t_UpperLimit (2U)

#define ALDWLaneChgStatLDP_t_LowerLimit (0U)
#define ALDWLaneChgStatLDP_t_UpperLimit (2U)

#define ALDWWarnSuppStat_t_LowerLimit (0U)
#define ALDWWarnSuppStat_t_UpperLimit (9U)

#define VehParAddState_t_LowerLimit (0U)
#define VehParAddState_t_UpperLimit (1000000U)

#define VehParSenorMountingState_t_LowerLimit (0U)
#define VehParSenorMountingState_t_UpperLimit (1000000U)

#define Orientation_t_LowerLimit (0U)
#define Orientation_t_UpperLimit (1U)

#define VehParSenorState_t_LowerLimit (0U)
#define VehParSenorState_t_UpperLimit (1000000U)

#define eALDWMode_t_LowerLimit (0U)
#define eALDWMode_t_UpperLimit (3U)

#define eALDWOpMode_t_LowerLimit (0U)
#define eALDWOpMode_t_UpperLimit (10U)

#define eLkaMotorStatus_t_LowerLimit (0U)
#define eLkaMotorStatus_t_UpperLimit (8U)

#define LDPMsgDispRq_t_LowerLimit (0U)
#define LDPMsgDispRq_t_UpperLimit (3U)

#define LDPIndLmpOnRq_t_LowerLimit (0U)
#define LDPIndLmpOnRq_t_UpperLimit (3U)

#define LDPBrkMsgDispRq_t_LowerLimit (0U)
#define LDPBrkMsgDispRq_t_UpperLimit (3U)

#define FCT_OP_MODE_t_LowerLimit (0U)
#define FCT_OP_MODE_t_UpperLimit (7U)

#define eLaneMarkerType_LowerLimit (0U)
#define eLaneMarkerType_UpperLimit (3U)

#define eSpeedUnit_t_LowerLimit (0U)
#define eSpeedUnit_t_UpperLimit (1U)

#define ActGearPos_t_LowerLimit (0U)
#define ActGearPos_t_UpperLimit (3U)

#define ParkBrakeState_t_LowerLimit (0U)
#define ParkBrakeState_t_UpperLimit (1U)

#define VehLongMotStateExt_t_LowerLimit (0U)
#define VehLongMotStateExt_t_UpperLimit (2U)

#define TurnSignal_t_LowerLimit (0U)
#define TurnSignal_t_UpperLimit (3U)

#define TransmissionGear_t_LowerLimit (0U)
#define TransmissionGear_t_UpperLimit (10U)

#define LongDirState_t_LowerLimit (0U)
#define LongDirState_t_UpperLimit (2U)

#define VDYErrState_t_LowerLimit (0U)
#define VDYErrState_t_UpperLimit (2U)

#define MotState_t_LowerLimit (0U)
#define MotState_t_UpperLimit (3U)

#define eLDWState_t_LowerLimit (0U)
#define eLDWState_t_UpperLimit (2U)

#define MTS_VirtAddrs_LowerLimit (0U)
#define MTS_VirtAddrs_UpperLimit (4294967295U)

#define c08_0_255_1_SNA_na_LowerLimit (0U)
#define c08_0_255_1_SNA_na_UpperLimit (255U)

#define c24_0_16777215_1_SNA_na_LowerLimit (0U)
#define c24_0_16777215_1_SNA_na_UpperLimit (16777215U)

#define c32_0_4294967295_1_SNA_na_LowerLimit (0U)
#define c32_0_4294967295_1_SNA_na_UpperLimit (4294967295U)

#define uint32_LowerLimit (0U)
#define uint32_UpperLimit (4294967295U)

#define NORM_t_eIgnState_LowerLimit (0U)
#define NORM_t_eIgnState_UpperLimit (5U)

#define RequestResultType_LowerLimit (0.0U)
#define RequestResultType_UpperLimit (255.0U)

#define BlockIdType_LowerLimit (2.0U)
#define BlockIdType_UpperLimit (31.0U)

#define UserType_LowerLimit (0.0U)
#define UserType_UpperLimit (255.0U)

#define AppModeType_LowerLimit (0.0U)
#define AppModeType_UpperLimit (255.0U)

#define StateType_LowerLimit (0.0U)
#define StateType_UpperLimit (255.0U)

#define ShutdownTargetType_LowerLimit (0.0U)
#define ShutdownTargetType_UpperLimit (255.0U)

#define BootTargetType_LowerLimit (0.0U)
#define BootTargetType_UpperLimit (255.0U)

#define UInt1_LowerLimit (0U)
#define UInt1_UpperLimit (1U)

#define UInt4_LowerLimit (0U)
#define UInt4_UpperLimit (15U)

#define SInt4_LowerLimit (-8)
#define SInt4_UpperLimit (7)

#define UInt8_LowerLimit (0U)
#define UInt8_UpperLimit (255U)

#define SInt8_LowerLimit (-128)
#define SInt8_UpperLimit (127)

#define UInt16_LowerLimit (0U)
#define UInt16_UpperLimit (65535U)

#define SInt16_LowerLimit (-32768)
#define SInt16_UpperLimit (32767)

#define UInt32_LowerLimit (0U)
#define UInt32_UpperLimit (4294967295U)

#define SInt32_LowerLimit (-2147483648)
#define SInt32_UpperLimit (2147483647)

#define UInt64_LowerLimit (0U)
#define UInt64_UpperLimit (18446744073709551615U)


#define float32_LowerLimit (-1.175494351E38f)
#define float32_UpperLimit (3.402823466E38f)

#define Rte_StatusType_LowerLimit (0U)
#define Rte_StatusType_UpperLimit (1U)

#define uint16_LowerLimit (0U)
#define uint16_UpperLimit (65535U)

#define uint8_LowerLimit (0U)
#define uint8_UpperLimit (255U)

#define sint8_LowerLimit (-128)
#define sint8_UpperLimit (127)

#define sint32_LowerLimit (-2147483648)
#define sint32_UpperLimit (2147483647)

#define sint16_LowerLimit (-32768)
#define sint16_UpperLimit (32767)

#define ubit32_LowerLimit (0.0U)
#define ubit32_UpperLimit (4294967295U)

#define uint64_LowerLimit (0U)
#define uint64_UpperLimit (18446744073709551615U)

#define sint64_LowerLimit (-9223372036854775808)
#define sint64_UpperLimit (9223372036854775807)

#define E_EGO_LOGGING_SIGNAL_STATE_LowerLimit (0U)
#define E_EGO_LOGGING_SIGNAL_STATE_UpperLimit (1U)

#define E_EGO_LOGGING_SIGNAL_ID_LowerLimit (0U)
#define E_EGO_LOGGING_SIGNAL_ID_UpperLimit (33U)

#define E_SAC_SOURCE_VALID_MODE_LowerLimit (0U)
#define E_SAC_SOURCE_VALID_MODE_UpperLimit (80U)

#define E_IMAGE_REGISTER_CODE_LowerLimit (0U)
#define E_IMAGE_REGISTER_CODE_UpperLimit (3U)

#define E_ALGO_SIGNAL_STATE_LowerLimit (0U)
#define E_ALGO_SIGNAL_STATE_UpperLimit (2U)

#define E_MODE_STEREO_DSP_LowerLimit (0U)
#define E_MODE_STEREO_DSP_UpperLimit (9U)

#define E_MODE_MONO_DSP_LowerLimit (0U)
#define E_MODE_MONO_DSP_UpperLimit (3U)

#define E_FUSI_TEST_CHECK_LowerLimit (0U)
#define E_FUSI_TEST_CHECK_UpperLimit (1515870810U)

#define DC_BOOL_LowerLimit (0U)
#define DC_BOOL_UpperLimit (1U)

#define e_OffOnRequest_LowerLimit (0U)
#define e_OffOnRequest_UpperLimit (1U)

#define RTE_t_CalibPatternType_LowerLimit (0U)
#define RTE_t_CalibPatternType_UpperLimit (1U)

#define e_CaliMode_LowerLimit (0U)
#define e_CaliMode_UpperLimit (1U)

#define RTE_t_DiagHeatRq_LowerLimit (0U)
#define RTE_t_DiagHeatRq_UpperLimit (2U)

#define RTE_t_eAlgoDebugMode_LowerLimit (0U)
#define RTE_t_eAlgoDebugMode_UpperLimit (1U)

#define RTE_t_eTSADispTest_LowerLimit (0U)
#define RTE_t_eTSADispTest_UpperLimit (255U)

#define RTE_t_eALDWVibMotRq_LowerLimit (0U)
#define RTE_t_eALDWVibMotRq_UpperLimit (1U)

#define RTE_eTrueFalseNt_LowerLimit (0U)
#define RTE_eTrueFalseNt_UpperLimit (2U)

#define RTE_t_eAlgoId_LowerLimit (0U)
#define RTE_t_eAlgoId_UpperLimit (22U)

#define RTE_t_eDataValid_LowerLimit (0U)
#define RTE_t_eDataValid_UpperLimit (1U)

#define RTE_IC_E_DCG_STATE_LowerLimit (0U)
#define RTE_IC_E_DCG_STATE_UpperLimit (1U)

#define RTE_ICA_E_FRAME_TYPE_LowerLimit (0U)
#define RTE_ICA_E_FRAME_TYPE_UpperLimit (1U)

#define RTE_ICA_E_IMAGER_CONTROL_SCHEMA_LowerLimit (0U)
#define RTE_ICA_E_IMAGER_CONTROL_SCHEMA_UpperLimit (3U)

#define RTE_ICA_E_IMAGER_CFA_LowerLimit (0U)
#define RTE_ICA_E_IMAGER_CFA_UpperLimit (9U)

#define RTE_IC_E_INTRADAY_STATE_LowerLimit (0U)
#define RTE_IC_E_INTRADAY_STATE_UpperLimit (1U)

#define RTE_ICA_E_IMAGER_TYPE_LowerLimit (0U)
#define RTE_ICA_E_IMAGER_TYPE_UpperLimit (1U)

#define SwcDemSc_DebTimType_LowerLimit (0U)
#define SwcDemSc_DebTimType_UpperLimit (65535U)

#define SwcDemSc_ScStatusType_LowerLimit (0U)
#define SwcDemSc_ScStatusType_UpperLimit (1U)

#define SwcDemSc_glbScSigIndType_LowerLimit (0U)
#define SwcDemSc_glbScSigIndType_UpperLimit (255U)

#define SwcDemSc_FlReportType_LowerLimit (0U)
#define SwcDemSc_FlReportType_UpperLimit (255U)

#define SwcDemSc_StdReturnType_LowerLimit (0U)
#define SwcDemSc_StdReturnType_UpperLimit (255U)

#define c03_EngRun_Stat_LowerLimit (0U)
#define c03_EngRun_Stat_UpperLimit (7U)

#define c03_ISw_Stat_LowerLimit (0U)
#define c03_ISw_Stat_UpperLimit (7U)

#define c08_V_0_25k4_0k1_LowerLimit (0U)
#define c08_V_0_25k4_0k1_UpperLimit (255U)

#define c24_km_0_999999k9_0k1_LowerLimit (0U)
#define c24_km_0_999999k9_0k1_UpperLimit (16777215U)

#define c02_TransMd_Stat_LowerLimit (0U)
#define c02_TransMd_Stat_UpperLimit (3U)

#define RTE_t_eLCLaneValid_LowerLimit (0U)
#define RTE_t_eLCLaneValid_UpperLimit (2U)

#define RTE_t_eLCYawValid_LowerLimit (0U)
#define RTE_t_eLCYawValid_UpperLimit (3U)

#define RTE_t_eLCLaneDscrbSide_LowerLimit (0U)
#define RTE_t_eLCLaneDscrbSide_UpperLimit (3U)

#define NvM_ui32_HeatOnTime_LowerLimit (0U)
#define NvM_ui32_HeatOnTime_UpperLimit (4294967295U)

#define Nvm_t_NMDeactivationSwitch_LowerLimit (0U)
#define Nvm_t_NMDeactivationSwitch_UpperLimit (1U)

#define Dem_DTCStatusMaskType_LowerLimit (0U)
#define Dem_DTCStatusMaskType_UpperLimit (255U)

#define Dem_DTCType_LowerLimit (0U)
#define Dem_DTCType_UpperLimit (4294967295U)

#define Dem_EventIdType_LowerLimit (0U)
#define Dem_EventIdType_UpperLimit (65535U)

#define Dem_EventStatusExtendedType_LowerLimit (0U)
#define Dem_EventStatusExtendedType_UpperLimit (255U)

#define Dem_FaultDetectionCounterType_LowerLimit (-128)
#define Dem_FaultDetectionCounterType_UpperLimit (127)

#define Dem_OperationCycleIdType_LowerLimit (0U)
#define Dem_OperationCycleIdType_UpperLimit (255U)

#define Dem_DTCKindType_LowerLimit (1U)
#define Dem_DTCKindType_UpperLimit (2U)

#define Dem_EventStatusType_LowerLimit (0U)
#define Dem_EventStatusType_UpperLimit (3U)

#define Dem_IndicatorStatusType_LowerLimit (0U)
#define Dem_IndicatorStatusType_UpperLimit (3U)

#define Dem_OperationCycleStateType_LowerLimit (1U)
#define Dem_OperationCycleStateType_UpperLimit (2U)

#define RTE_t_SYSMultiRunTaskState_LowerLimit (0U)
#define RTE_t_SYSMultiRunTaskState_UpperLimit (12U)


#define EngRunState_LowerLimit (0U)
#define EngRunState_UpperLimit (7U)

#define e_SigStatus_LowerLimit (0U)
#define e_SigStatus_UpperLimit (5U)

#define e_WiperWasherSw_LowerLimit (0U)
#define e_WiperWasherSw_UpperLimit (2U)

#define e_WiperSw6Posn_LowerLimit (0U)
#define e_WiperSw6Posn_UpperLimit (7U)

#define RTE_b_RollTestMd_LowerLimit (0U)
#define RTE_b_RollTestMd_UpperLimit (1U)



/**********************************************/
/* Invalid Values data type                   */
/**********************************************/



/**********************************************/
/* Mode management types                      */
/**********************************************/


typedef uint8		Rte_ModeType_EcuM_Mode;      /* [Satisfies_rte sws 2627] */
	#define RTE_TRANSITION_EcuM_Mode ((Rte_ModeType_EcuM_Mode)  6)      /* [Satisfies_rte sws 2659] */
	#define RTE_MODE_EcuM_Mode_POST_RUN ((Rte_ModeType_EcuM_Mode) 0) /* [Satisfies_rte sws 2568] */
	#define RTE_MODE_EcuM_Mode_RUN ((Rte_ModeType_EcuM_Mode) 1) /* [Satisfies_rte sws 2568] */
	#define RTE_MODE_EcuM_Mode_SHUTDOWN ((Rte_ModeType_EcuM_Mode) 2) /* [Satisfies_rte sws 2568] */
	#define RTE_MODE_EcuM_Mode_SLEEP ((Rte_ModeType_EcuM_Mode) 3) /* [Satisfies_rte sws 2568] */
	#define RTE_MODE_EcuM_Mode_STARTUP ((Rte_ModeType_EcuM_Mode) 4) /* [Satisfies_rte sws 2568] */
	#define RTE_MODE_EcuM_Mode_WAKE_SLEEP ((Rte_ModeType_EcuM_Mode) 5) /* [Satisfies_rte sws 2568] */







/**********************************************/
/* Per instance memory (PIM)                  */
/**********************************************/

typedef SwcRoElite_MsgType Rte_PimType_SwcRoElite_SwcRoElite_MsgTypeU;			/* Typedef to Pim type [Satisfies_rte sws 2302], [Satisfies_rte sws 2304], [Satisfies_rte sws 3789] */

typedef SwcRoElite_QueueType Rte_PimType_SwcRoElite_SwcRoElite_QueueTypeU;			/* Typedef to Pim type [Satisfies_rte sws 2302], [Satisfies_rte sws 2304], [Satisfies_rte sws 3789] */



/**********************************************/
/* internal buffer for implicit communication */
/**********************************************/

typedef struct Rte_DE_NORM_t_eIgnState
{
	NORM_t_eIgnState value;
} Rte_DE_NORM_t_eIgnState;


typedef struct Rte_DES_NORM_t_eIgnState
{
	NORM_t_eIgnState value;
	Std_ReturnType status;
} Rte_DES_NORM_t_eIgnState;


typedef struct Rte_DE_RTE_t_VdyOutput
{
	RTE_t_VdyOutput value;
} Rte_DE_RTE_t_VdyOutput;


typedef struct Rte_DES_RTE_t_VdyOutput
{
	RTE_t_VdyOutput value;
	Std_ReturnType status;
} Rte_DES_RTE_t_VdyOutput;


typedef struct Rte_DE_VehSig_t
{
	VehSig_t value;
} Rte_DE_VehSig_t;


typedef struct Rte_DES_VehSig_t
{
	VehSig_t value;
	Std_ReturnType status;
} Rte_DES_VehSig_t;


typedef struct Rte_DE_RTE_t_CalibPatternType
{
	RTE_t_CalibPatternType value;
} Rte_DE_RTE_t_CalibPatternType;


typedef struct Rte_DES_RTE_t_CalibPatternType
{
	RTE_t_CalibPatternType value;
	Std_ReturnType status;
} Rte_DES_RTE_t_CalibPatternType;


typedef struct Rte_DE_RTE_CALI_t_HeightCarBody
{
	RTE_CALI_t_HeightCarBody value;
} Rte_DE_RTE_CALI_t_HeightCarBody;


typedef struct Rte_DES_RTE_CALI_t_HeightCarBody
{
	RTE_CALI_t_HeightCarBody value;
	Std_ReturnType status;
} Rte_DES_RTE_CALI_t_HeightCarBody;


typedef struct Rte_DE_RTE_t_PPARImagerIntrinsics
{
	RTE_t_PPARImagerIntrinsics value;
} Rte_DE_RTE_t_PPARImagerIntrinsics;


typedef struct Rte_DES_RTE_t_PPARImagerIntrinsics
{
	RTE_t_PPARImagerIntrinsics value;
	Std_ReturnType status;
} Rte_DES_RTE_t_PPARImagerIntrinsics;


typedef struct Rte_DE_RTE_t_VCVehicleData
{
	RTE_t_VCVehicleData value;
} Rte_DE_RTE_t_VCVehicleData;


typedef struct Rte_DES_RTE_t_VCVehicleData
{
	RTE_t_VCVehicleData value;
	Std_ReturnType status;
} Rte_DES_RTE_t_VCVehicleData;


typedef struct Rte_DE_RTE_t_VehicleLevel
{
	RTE_t_VehicleLevel value;
} Rte_DE_RTE_t_VehicleLevel;


typedef struct Rte_DES_RTE_t_VehicleLevel
{
	RTE_t_VehicleLevel value;
	Std_ReturnType status;
} Rte_DES_RTE_t_VehicleLevel;


typedef struct Rte_DE_RTE_aui8_VIN
{
	RTE_aui8_VIN value;
} Rte_DE_RTE_aui8_VIN;


typedef struct Rte_DES_RTE_aui8_VIN
{
	RTE_aui8_VIN value;
	Std_ReturnType status;
} Rte_DES_RTE_aui8_VIN;


typedef struct Rte_DE_RTE_t_AdcReads
{
	RTE_t_AdcReads value;
} Rte_DE_RTE_t_AdcReads;


typedef struct Rte_DES_RTE_t_AdcReads
{
	RTE_t_AdcReads value;
	Std_ReturnType status;
} Rte_DES_RTE_t_AdcReads;


typedef struct Rte_DE_RTE_t_DiagAlgoStates
{
	RTE_t_DiagAlgoStates value;
} Rte_DE_RTE_t_DiagAlgoStates;


typedef struct Rte_DES_RTE_t_DiagAlgoStates
{
	RTE_t_DiagAlgoStates value;
	Std_ReturnType status;
} Rte_DES_RTE_t_DiagAlgoStates;


typedef struct Rte_DE_RTE_CALI_t_EnvData
{
	RTE_CALI_t_EnvData value;
} Rte_DE_RTE_CALI_t_EnvData;


typedef struct Rte_DES_RTE_CALI_t_EnvData
{
	RTE_CALI_t_EnvData value;
	Std_ReturnType status;
} Rte_DES_RTE_CALI_t_EnvData;


typedef struct Rte_DE_RTE_CALI_t_eStatus
{
	RTE_CALI_t_eStatus value;
} Rte_DE_RTE_CALI_t_eStatus;


typedef struct Rte_DES_RTE_CALI_t_eStatus
{
	RTE_CALI_t_eStatus value;
	Std_ReturnType status;
} Rte_DES_RTE_CALI_t_eStatus;


typedef struct Rte_DE_S_CamPos_CALIOutput
{
	S_CamPos_CALIOutput value;
} Rte_DE_S_CamPos_CALIOutput;


typedef struct Rte_DES_S_CamPos_CALIOutput
{
	S_CamPos_CALIOutput value;
	Std_ReturnType status;
} Rte_DES_S_CamPos_CALIOutput;


typedef struct Rte_DE_RTE_t_HeatOutput
{
	RTE_t_HeatOutput value;
} Rte_DE_RTE_t_HeatOutput;


typedef struct Rte_DES_RTE_t_HeatOutput
{
	RTE_t_HeatOutput value;
	Std_ReturnType status;
} Rte_DES_RTE_t_HeatOutput;


typedef struct Rte_DE_RTE_t_HeatStatistics
{
	RTE_t_HeatStatistics value;
} Rte_DE_RTE_t_HeatStatistics;


typedef struct Rte_DES_RTE_t_HeatStatistics
{
	RTE_t_HeatStatistics value;
	Std_ReturnType status;
} Rte_DES_RTE_t_HeatStatistics;


typedef struct Rte_DE_RTE_t_MaxTemperature
{
	RTE_t_MaxTemperature value;
} Rte_DE_RTE_t_MaxTemperature;


typedef struct Rte_DES_RTE_t_MaxTemperature
{
	RTE_t_MaxTemperature value;
	Std_ReturnType status;
} Rte_DES_RTE_t_MaxTemperature;


typedef struct Rte_DE_S_SacDistTestFromToNVM
{
	S_SacDistTestFromToNVM value;
} Rte_DE_S_SacDistTestFromToNVM;


typedef struct Rte_DES_S_SacDistTestFromToNVM
{
	S_SacDistTestFromToNVM value;
	Std_ReturnType status;
} Rte_DES_S_SacDistTestFromToNVM;


typedef struct Rte_DE_RTE_t_SACOutput
{
	RTE_t_SACOutput value;
} Rte_DE_RTE_t_SACOutput;


typedef struct Rte_DES_RTE_t_SACOutput
{
	RTE_t_SACOutput value;
	Std_ReturnType status;
} Rte_DES_RTE_t_SACOutput;


typedef struct Rte_DE_lka_aldw_buttons_t
{
	lka_aldw_buttons_t value;
} Rte_DE_lka_aldw_buttons_t;


typedef struct Rte_DES_lka_aldw_buttons_t
{
	lka_aldw_buttons_t value;
	Std_ReturnType status;
} Rte_DES_lka_aldw_buttons_t;


typedef struct Rte_DE_eALDWMode_t
{
	eALDWMode_t value;
} Rte_DE_eALDWMode_t;


typedef struct Rte_DES_eALDWMode_t
{
	eALDWMode_t value;
	Std_ReturnType status;
} Rte_DES_eALDWMode_t;


typedef struct Rte_DE_eALDWOpMode_t
{
	eALDWOpMode_t value;
} Rte_DE_eALDWOpMode_t;


typedef struct Rte_DES_eALDWOpMode_t
{
	eALDWOpMode_t value;
	Std_ReturnType status;
} Rte_DES_eALDWOpMode_t;


typedef struct Rte_DE_RTE_GB_t_FctBlockageData
{
	RTE_GB_t_FctBlockageData value;
} Rte_DE_RTE_GB_t_FctBlockageData;


typedef struct Rte_DES_RTE_GB_t_FctBlockageData
{
	RTE_GB_t_FctBlockageData value;
	Std_ReturnType status;
} Rte_DES_RTE_GB_t_FctBlockageData;


typedef struct Rte_DE_RTE_t_LDOutput
{
	RTE_t_LDOutput value;
} Rte_DE_RTE_t_LDOutput;


typedef struct Rte_DES_RTE_t_LDOutput
{
	RTE_t_LDOutput value;
	Std_ReturnType status;
} Rte_DES_RTE_t_LDOutput;


typedef struct Rte_DE_S_MonoOnlineCalibration
{
	S_MonoOnlineCalibration value;
} Rte_DE_S_MonoOnlineCalibration;


typedef struct Rte_DES_S_MonoOnlineCalibration
{
	S_MonoOnlineCalibration value;
	Std_ReturnType status;
} Rte_DES_S_MonoOnlineCalibration;


typedef struct Rte_DE_lka_driver_input_t
{
	lka_driver_input_t value;
} Rte_DE_lka_driver_input_t;


typedef struct Rte_DES_lka_driver_input_t
{
	lka_driver_input_t value;
	Std_ReturnType status;
} Rte_DES_lka_driver_input_t;


typedef struct Rte_DE_RTE_t_SLEOutput
{
	RTE_t_SLEOutput value;
} Rte_DE_RTE_t_SLEOutput;


typedef struct Rte_DES_RTE_t_SLEOutput
{
	RTE_t_SLEOutput value;
	Std_ReturnType status;
} Rte_DES_RTE_t_SLEOutput;


typedef struct Rte_DE_RTE_t_VehAddSignals
{
	RTE_t_VehAddSignals value;
} Rte_DE_RTE_t_VehAddSignals;


typedef struct Rte_DES_RTE_t_VehAddSignals
{
	RTE_t_VehAddSignals value;
	Std_ReturnType status;
} Rte_DES_RTE_t_VehAddSignals;


typedef struct Rte_DE_RTE_HLA_t_EnvironmentData
{
	RTE_HLA_t_EnvironmentData value;
} Rte_DE_RTE_HLA_t_EnvironmentData;


typedef struct Rte_DES_RTE_HLA_t_EnvironmentData
{
	RTE_HLA_t_EnvironmentData value;
	Std_ReturnType status;
} Rte_DES_RTE_HLA_t_EnvironmentData;


typedef struct Rte_DE_RTE_HLA_t_ObjectList
{
	RTE_HLA_t_ObjectList value;
} Rte_DE_RTE_HLA_t_ObjectList;


typedef struct Rte_DES_RTE_HLA_t_ObjectList
{
	RTE_HLA_t_ObjectList value;
	Std_ReturnType status;
} Rte_DES_RTE_HLA_t_ObjectList;


typedef struct Rte_DE_RTE_HLA_t_HeadlightControl
{
	RTE_HLA_t_HeadlightControl value;
} Rte_DE_RTE_HLA_t_HeadlightControl;


typedef struct Rte_DES_RTE_HLA_t_HeadlightControl
{
	RTE_HLA_t_HeadlightControl value;
	Std_ReturnType status;
} Rte_DES_RTE_HLA_t_HeadlightControl;


typedef struct Rte_DE_RTE_b_RollTestMd
{
	RTE_b_RollTestMd value;
} Rte_DE_RTE_b_RollTestMd;


typedef struct Rte_DES_RTE_b_RollTestMd
{
	RTE_b_RollTestMd value;
	Std_ReturnType status;
} Rte_DES_RTE_b_RollTestMd;


typedef struct Rte_DE_RTE_t_WiperInfo
{
	RTE_t_WiperInfo value;
} Rte_DE_RTE_t_WiperInfo;


typedef struct Rte_DES_RTE_t_WiperInfo
{
	RTE_t_WiperInfo value;
	Std_ReturnType status;
} Rte_DES_RTE_t_WiperInfo;


typedef struct Rte_DE_RTE_f32_AirTempOutsd
{
	RTE_f32_AirTempOutsd value;
} Rte_DE_RTE_f32_AirTempOutsd;


typedef struct Rte_DES_RTE_f32_AirTempOutsd
{
	RTE_f32_AirTempOutsd value;
	Std_ReturnType status;
} Rte_DES_RTE_f32_AirTempOutsd;


typedef struct Rte_DE_uint8
{
	uint8 value;
} Rte_DE_uint8;


typedef struct Rte_DES_uint8
{
	uint8 value;
	Std_ReturnType status;
} Rte_DES_uint8;


typedef struct Rte_DE_RTE_t_DiagHeatRq
{
	RTE_t_DiagHeatRq value;
} Rte_DE_RTE_t_DiagHeatRq;


typedef struct Rte_DES_RTE_t_DiagHeatRq
{
	RTE_t_DiagHeatRq value;
	Std_ReturnType status;
} Rte_DES_RTE_t_DiagHeatRq;


typedef struct Rte_DE_RTE_HLA_t_VehicleParameter
{
	RTE_HLA_t_VehicleParameter value;
} Rte_DE_RTE_HLA_t_VehicleParameter;


typedef struct Rte_DES_RTE_HLA_t_VehicleParameter
{
	RTE_HLA_t_VehicleParameter value;
	Std_ReturnType status;
} Rte_DES_RTE_HLA_t_VehicleParameter;


typedef struct Rte_DE_RTE_t_ImageRegisterResponse
{
	RTE_t_ImageRegisterResponse value;
} Rte_DE_RTE_t_ImageRegisterResponse;


typedef struct Rte_DES_RTE_t_ImageRegisterResponse
{
	RTE_t_ImageRegisterResponse value;
	Std_ReturnType status;
} Rte_DES_RTE_t_ImageRegisterResponse;


typedef struct Rte_DE_RTE_t_TSAIFOutput
{
	RTE_t_TSAIFOutput value;
} Rte_DE_RTE_t_TSAIFOutput;


typedef struct Rte_DES_RTE_t_TSAIFOutput
{
	RTE_t_TSAIFOutput value;
	Std_ReturnType status;
} Rte_DES_RTE_t_TSAIFOutput;


typedef struct Rte_DE_RTE_t_MAPIFCuA
{
	RTE_t_MAPIFCuA value;
} Rte_DE_RTE_t_MAPIFCuA;


typedef struct Rte_DES_RTE_t_MAPIFCuA
{
	RTE_t_MAPIFCuA value;
	Std_ReturnType status;
} Rte_DES_RTE_t_MAPIFCuA;


typedef struct Rte_DE_RTE_t_TSAIFInputGPSPos
{
	RTE_t_TSAIFInputGPSPos value;
} Rte_DE_RTE_t_TSAIFInputGPSPos;


typedef struct Rte_DES_RTE_t_TSAIFInputGPSPos
{
	RTE_t_TSAIFInputGPSPos value;
	Std_ReturnType status;
} Rte_DES_RTE_t_TSAIFInputGPSPos;


typedef struct Rte_DE_RTE_t_MAPIFInput
{
	RTE_t_MAPIFInput value;
} Rte_DE_RTE_t_MAPIFInput;


typedef struct Rte_DES_RTE_t_MAPIFInput
{
	RTE_t_MAPIFInput value;
	Std_ReturnType status;
} Rte_DES_RTE_t_MAPIFInput;


typedef struct Rte_DE_RTE_t_MAPIFMetaData
{
	RTE_t_MAPIFMetaData value;
} Rte_DE_RTE_t_MAPIFMetaData;


typedef struct Rte_DES_RTE_t_MAPIFMetaData
{
	RTE_t_MAPIFMetaData value;
	Std_ReturnType status;
} Rte_DES_RTE_t_MAPIFMetaData;


typedef struct Rte_DE_RTE_t_MAPIFPosition
{
	RTE_t_MAPIFPosition value;
} Rte_DE_RTE_t_MAPIFPosition;


typedef struct Rte_DES_RTE_t_MAPIFPosition
{
	RTE_t_MAPIFPosition value;
	Std_ReturnType status;
} Rte_DES_RTE_t_MAPIFPosition;


typedef struct Rte_DE_RTE_t_MAPIFProfile
{
	RTE_t_MAPIFProfile value;
} Rte_DE_RTE_t_MAPIFProfile;


typedef struct Rte_DES_RTE_t_MAPIFProfile
{
	RTE_t_MAPIFProfile value;
	Std_ReturnType status;
} Rte_DES_RTE_t_MAPIFProfile;


typedef struct Rte_DE_RTE_t_MAPIFSegment
{
	RTE_t_MAPIFSegment value;
} Rte_DE_RTE_t_MAPIFSegment;


typedef struct Rte_DES_RTE_t_MAPIFSegment
{
	RTE_t_MAPIFSegment value;
	Std_ReturnType status;
} Rte_DES_RTE_t_MAPIFSegment;


typedef struct Rte_DE_RTE_t_MAPIFStub
{
	RTE_t_MAPIFStub value;
} Rte_DE_RTE_t_MAPIFStub;


typedef struct Rte_DES_RTE_t_MAPIFStub
{
	RTE_t_MAPIFStub value;
	Std_ReturnType status;
} Rte_DES_RTE_t_MAPIFStub;


typedef struct Rte_DE_RTE_t_MAPIFInputTimestamp
{
	RTE_t_MAPIFInputTimestamp value;
} Rte_DE_RTE_t_MAPIFInputTimestamp;


typedef struct Rte_DES_RTE_t_MAPIFInputTimestamp
{
	RTE_t_MAPIFInputTimestamp value;
	Std_ReturnType status;
} Rte_DES_RTE_t_MAPIFInputTimestamp;


typedef struct Rte_DE_LKAOutputCustom_t
{
	LKAOutputCustom_t value;
} Rte_DE_LKAOutputCustom_t;


typedef struct Rte_DES_LKAOutputCustom_t
{
	LKAOutputCustom_t value;
	Std_ReturnType status;
} Rte_DES_LKAOutputCustom_t;


typedef struct Rte_DE_RTE_HLA_t_CaliOnline
{
	RTE_HLA_t_CaliOnline value;
} Rte_DE_RTE_HLA_t_CaliOnline;


typedef struct Rte_DES_RTE_HLA_t_CaliOnline
{
	RTE_HLA_t_CaliOnline value;
	Std_ReturnType status;
} Rte_DES_RTE_HLA_t_CaliOnline;


typedef struct Rte_DE_RTE_CALI_t_TargetExtraction
{
	RTE_CALI_t_TargetExtraction value;
} Rte_DE_RTE_CALI_t_TargetExtraction;


typedef struct Rte_DES_RTE_CALI_t_TargetExtraction
{
	RTE_CALI_t_TargetExtraction value;
	Std_ReturnType status;
} Rte_DES_RTE_CALI_t_TargetExtraction;


typedef struct Rte_DE_RTE_t_ImageRegisterRequest
{
	RTE_t_ImageRegisterRequest value;
} Rte_DE_RTE_t_ImageRegisterRequest;


typedef struct Rte_DES_RTE_t_ImageRegisterRequest
{
	RTE_t_ImageRegisterRequest value;
	Std_ReturnType status;
} Rte_DES_RTE_t_ImageRegisterRequest;


typedef struct Rte_DE_RTE_t_MAPIFMapData
{
	RTE_t_MAPIFMapData value;
} Rte_DE_RTE_t_MAPIFMapData;


typedef struct Rte_DES_RTE_t_MAPIFMapData
{
	RTE_t_MAPIFMapData value;
	Std_ReturnType status;
} Rte_DES_RTE_t_MAPIFMapData;


typedef struct Rte_DE_S_SacDistTestInput
{
	S_SacDistTestInput value;
} Rte_DE_S_SacDistTestInput;


typedef struct Rte_DES_S_SacDistTestInput
{
	S_SacDistTestInput value;
	Std_ReturnType status;
} Rte_DES_S_SacDistTestInput;


typedef struct Rte_DE_RTE_t_LCOutput
{
	RTE_t_LCOutput value;
} Rte_DE_RTE_t_LCOutput;


typedef struct Rte_DES_RTE_t_LCOutput
{
	RTE_t_LCOutput value;
	Std_ReturnType status;
} Rte_DES_RTE_t_LCOutput;


typedef struct Rte_DE_RTE_t_TSAIFSRData
{
	RTE_t_TSAIFSRData value;
} Rte_DE_RTE_t_TSAIFSRData;


typedef struct Rte_DES_RTE_t_TSAIFSRData
{
	RTE_t_TSAIFSRData value;
	Std_ReturnType status;
} Rte_DES_RTE_t_TSAIFSRData;


typedef struct Rte_DE_boolean
{
	boolean value;
} Rte_DE_boolean;


typedef struct Rte_DES_boolean
{
	boolean value;
	Std_ReturnType status;
} Rte_DES_boolean;


typedef struct Rte_DE_RTE_t_MAPIFOutputSystemInfo
{
	RTE_t_MAPIFOutputSystemInfo value;
} Rte_DE_RTE_t_MAPIFOutputSystemInfo;


typedef struct Rte_DES_RTE_t_MAPIFOutputSystemInfo
{
	RTE_t_MAPIFOutputSystemInfo value;
	Std_ReturnType status;
} Rte_DES_RTE_t_MAPIFOutputSystemInfo;


typedef struct Rte_DE_RTE_t_TSAIFObjData
{
	RTE_t_TSAIFObjData value;
} Rte_DE_RTE_t_TSAIFObjData;


typedef struct Rte_DES_RTE_t_TSAIFObjData
{
	RTE_t_TSAIFObjData value;
	Std_ReturnType status;
} Rte_DES_RTE_t_TSAIFObjData;


typedef struct Rte_DE_RTE_t_TSAIFOnlineCalibrationInfo
{
	RTE_t_TSAIFOnlineCalibrationInfo value;
} Rte_DE_RTE_t_TSAIFOnlineCalibrationInfo;


typedef struct Rte_DES_RTE_t_TSAIFOnlineCalibrationInfo
{
	RTE_t_TSAIFOnlineCalibrationInfo value;
	Std_ReturnType status;
} Rte_DES_RTE_t_TSAIFOnlineCalibrationInfo;


typedef struct Rte_DE_RTE_t_TSAIFSettings
{
	RTE_t_TSAIFSettings value;
} Rte_DE_RTE_t_TSAIFSettings;


typedef struct Rte_DES_RTE_t_TSAIFSettings
{
	RTE_t_TSAIFSettings value;
	Std_ReturnType status;
} Rte_DES_RTE_t_TSAIFSettings;


typedef struct Rte_DE_uint64
{
	uint64 value;
} Rte_DE_uint64;


typedef struct Rte_DES_uint64
{
	uint64 value;
	Std_ReturnType status;
} Rte_DES_uint64;


typedef struct Rte_DE_RTE_t_StWhlAnglStat
{
	RTE_t_StWhlAnglStat value;
} Rte_DE_RTE_t_StWhlAnglStat;


typedef struct Rte_DES_RTE_t_StWhlAnglStat
{
	RTE_t_StWhlAnglStat value;
	Std_ReturnType status;
} Rte_DES_RTE_t_StWhlAnglStat;


typedef struct Rte_DE_RTE_t_TSAIFInputFloat32
{
	RTE_t_TSAIFInputFloat32 value;
} Rte_DE_RTE_t_TSAIFInputFloat32;


typedef struct Rte_DES_RTE_t_TSAIFInputFloat32
{
	RTE_t_TSAIFInputFloat32 value;
	Std_ReturnType status;
} Rte_DES_RTE_t_TSAIFInputFloat32;


typedef struct Rte_DE_RTE_t_TSAIFInputVehTrailerState
{
	RTE_t_TSAIFInputVehTrailerState value;
} Rte_DE_RTE_t_TSAIFInputVehTrailerState;


typedef struct Rte_DES_RTE_t_TSAIFInputVehTrailerState
{
	RTE_t_TSAIFInputVehTrailerState value;
	Std_ReturnType status;
} Rte_DES_RTE_t_TSAIFInputVehTrailerState;


typedef struct Rte_DE_BSW_s_VDYCtrlData_t
{
	BSW_s_VDYCtrlData_t value;
} Rte_DE_BSW_s_VDYCtrlData_t;


typedef struct Rte_DES_BSW_s_VDYCtrlData_t
{
	BSW_s_VDYCtrlData_t value;
	Std_ReturnType status;
} Rte_DES_BSW_s_VDYCtrlData_t;


typedef struct Rte_DE_RTE_CALI_t_FieldOfView
{

	RTE_CALI_t_FieldOfView value;

} Rte_DE_RTE_CALI_t_FieldOfView;

typedef struct Rte_DES_RTE_CALI_t_FieldOfView
{

	RTE_CALI_t_FieldOfView value;

	Std_ReturnType status;

} Rte_DES_RTE_CALI_t_FieldOfView;


typedef struct Rte_DE_RTE_CALI_t_eSigStatus
{

	RTE_CALI_t_eSigStatus value;

} Rte_DE_RTE_CALI_t_eSigStatus;

typedef struct Rte_DES_RTE_CALI_t_eSigStatus
{

	RTE_CALI_t_eSigStatus value;

	Std_ReturnType status;

} Rte_DES_RTE_CALI_t_eSigStatus;


typedef struct Rte_ImplWrBuf_SWCCaliAdapt_RunEntCaliAdaptExec_Type {
	Rte_DE_RTE_CALI_t_FieldOfView  PPortCaliFoV_DEP_CaliFoV; 
	Rte_DE_RTE_CALI_t_eSigStatus  PPortCaliSigState_DEP_CaliSigStatus; 
} Rte_ImplWrBuf_SWCCaliAdapt_RunEntCaliAdaptExec_Type;

typedef struct Rte_ImplWrBuf_SWCNorm_RunEntNormInitTx_Type {
	Rte_DE_RTE_t_PPARImagerIntrinsics  PPortNormPparImagerIntrinsRight_DEP_PPARImagerIntrinsRight; 
} Rte_ImplWrBuf_SWCNorm_RunEntNormInitTx_Type;

typedef struct Rte_ImplWrBuf_SWCNorm_RunEntNormRx_Type {
	Rte_DE_RTE_f32_AirTempOutsd  PPortAirTempOutside_DEP_AirTempOutside; 
	Rte_DE_uint8  PPortNormDefrostButton_DEPDefrostButton; 
	Rte_DE_uint8  PPortNormNightviewState_DEPNightviewState; 
	Rte_DE_RTE_b_RollTestMd  PPortRollTestMd_DEP_RollTestMd; 
	Rte_DE_RTE_t_WiperInfo  PPortWiperSignals_DEP_WiperSignals; 
} Rte_ImplWrBuf_SWCNorm_RunEntNormRx_Type;


typedef struct 
{
	Rte_ImplWrBuf_SWCCaliAdapt_RunEntCaliAdaptExec_Type  CompRefCaliAdapt_RunEntCaliAdaptExec;
} Rte_ImplWrBuf_TASK_RoiImageProc_Type;

typedef struct 
{
	Rte_ImplWrBuf_SWCNorm_RunEntNormRx_Type            CompRefNorm_RunEntNormRx;
} Rte_ImplWrBuf_TASK_VehicleAlgo_Type;






/**********************************************/
/* internal buffer for client server          */
/**********************************************/



/**********************************************/
/* Calibration (CData,CalPrm)                 */
/**********************************************/






/**********************************************/
/* Component data structure (CDS)             */

/*
 * Port Data Section (PDS) types for SW-C: EcuStateManager
 */

typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_SwitchFP_EcuStateManager_EcuM_CurrentMode_currentMode)(VAR(Rte_ModeType_EcuM_Mode,AUTOMATIC) data);
typedef P2FUNC(Rte_ModeType_EcuM_Mode,RTE_CODE,Rte_ModeFP_EcuStateManager_EcuM_CurrentMode_currentMode)(void);

typedef struct Rte_PDS_EcuStateManager_EcuM_CurrentMode_P /* [Satisfies_rte sws 3731]  */
{
	/*
	 *Rte Switch <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_SwitchFP_EcuStateManager_EcuM_CurrentMode_currentMode Switch_currentMode;
	/*
	 *Rte Mode <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_ModeFP_EcuStateManager_EcuM_CurrentMode_currentMode Mode_currentMode;

} Rte_PDS_EcuStateManager_EcuM_CurrentMode_P;




/*
 * Port Data Section (PDS) types for SW-C: NvM
 */

typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_CallFP_NvM_NvMNotify_JobFinished)(IN VAR(UInt8,AUTOMATIC) ServiceId, IN VAR(RequestResultType,AUTOMATIC) JobResult );


typedef struct Rte_PDS_NvM_NvMNotify_R /* [Satisfies_rte sws 3731] */
{
	/*
	 *Rte Call <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_CallFP_NvM_NvMNotify_JobFinished Call_JobFinished;

} Rte_PDS_NvM_NvMNotify_R;




/*
 * Port Data Section (PDS) types for SW-C: CDDTimer64
 */


/*
 * Port Data Section (PDS) types for SW-C: Dem
 */

typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_CallFP_Dem_CallbackControlDTCStatus_ControlDTCStatusChanged)(IN VAR(Boolean,AUTOMATIC) status );


typedef struct Rte_PDS_Dem_CallbackControlDTCStatus_R /* [Satisfies_rte sws 3731] */
{
	/*
	 *Rte Call <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_CallFP_Dem_CallbackControlDTCStatus_ControlDTCStatusChanged Call_ControlDTCStatusChanged;

} Rte_PDS_Dem_CallbackControlDTCStatus_R;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_CallFP_Dem_CallbackDTCStatusChange_DTCStatusChanged)(IN VAR(Dem_DTCType,AUTOMATIC) DTC, IN VAR(Dem_DTCKindType,AUTOMATIC) DTCKind, IN VAR(Dem_DTCStatusMaskType,AUTOMATIC) DTCStatusOld, IN VAR(Dem_DTCStatusMaskType,AUTOMATIC) DTCStatusNew );


typedef struct Rte_PDS_Dem_CallbackDTCStatusChange_R /* [Satisfies_rte sws 3731] */
{
	/*
	 *Rte Call <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_CallFP_Dem_CallbackDTCStatusChange_DTCStatusChanged Call_DTCStatusChanged;

} Rte_PDS_Dem_CallbackDTCStatusChange_R;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_CallFP_Dem_EnvironmentalValues_GetCurrentOdometer)(OUT P2VAR(UInt32,AUTOMATIC,RTE_APPL_DATA) odometer );
typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_CallFP_Dem_EnvironmentalValues_GetExternalTesterStatus)(OUT P2VAR(Boolean,AUTOMATIC,RTE_APPL_DATA) testerPresent );


typedef struct Rte_PDS_Dem_EnvironmentalValues_R /* [Satisfies_rte sws 3731] */
{
	/*
	 *Rte Call <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_CallFP_Dem_EnvironmentalValues_GetCurrentOdometer Call_GetCurrentOdometer;
	Rte_CallFP_Dem_EnvironmentalValues_GetExternalTesterStatus Call_GetExternalTesterStatus;

} Rte_PDS_Dem_EnvironmentalValues_R;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_CallFP_Dem_CSI_BswGetAdcData_OPGetAdcData)(IN VAR(uint8,AUTOMATIC) AdcChannel, OUT P2VAR(float32,AUTOMATIC,RTE_APPL_DATA) CalcVal, OUT P2VAR(uint32,AUTOMATIC,RTE_APPL_DATA) Timestamp );


typedef struct Rte_PDS_Dem_CSI_BswGetAdcData_R /* [Satisfies_rte sws 3731] */
{
	/*
	 *Rte Call <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_CallFP_Dem_CSI_BswGetAdcData_OPGetAdcData Call_OPGetAdcData;

} Rte_PDS_Dem_CSI_BswGetAdcData_R;




/*
 * Port Data Section (PDS) types for SW-C: DemSc_LocStub
 */

typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_WriteFP_DemSc_LocStub_SRI_LocIgnition_Ign_Stat)(VAR(c03_ISw_Stat,AUTOMATIC) data);

typedef struct Rte_PDS_DemSc_LocStub_SRI_LocIgnition_P /* [Satisfies_rte sws 3731]  */
{
	/*
	 *Rte Write <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_WriteFP_DemSc_LocStub_SRI_LocIgnition_Ign_Stat Write_Ign_Stat;

} Rte_PDS_DemSc_LocStub_SRI_LocIgnition_P;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_WriteFP_DemSc_LocStub_SRI_LocIoDevice_Io_Stat)(VAR(SwcDemSc_StdReturnType,AUTOMATIC) data);

typedef struct Rte_PDS_DemSc_LocStub_SRI_LocIoDevice_P /* [Satisfies_rte sws 3731]  */
{
	/*
	 *Rte Write <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_WriteFP_DemSc_LocStub_SRI_LocIoDevice_Io_Stat Write_Io_Stat;

} Rte_PDS_DemSc_LocStub_SRI_LocIoDevice_P;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_WriteFP_DemSc_LocStub_SRI_LocVoltage_SupBat_Volt)(VAR(c08_V_0_25k4_0k1,AUTOMATIC) data);

typedef struct Rte_PDS_DemSc_LocStub_SRI_LocVoltage_P /* [Satisfies_rte sws 3731]  */
{
	/*
	 *Rte Write <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_WriteFP_DemSc_LocStub_SRI_LocVoltage_SupBat_Volt Write_SupBat_Volt;

} Rte_PDS_DemSc_LocStub_SRI_LocVoltage_P;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_CallFP_DemSc_LocStub_CSI_BswGetAdcData_OPGetAdcData)(IN VAR(uint8,AUTOMATIC) AdcChannel, OUT P2VAR(float32,AUTOMATIC,RTE_APPL_DATA) CalcVal, OUT P2VAR(uint32,AUTOMATIC,RTE_APPL_DATA) Timestamp );


typedef struct Rte_PDS_DemSc_LocStub_CSI_BswGetAdcData_R /* [Satisfies_rte sws 3731] */
{
	/*
	 *Rte Call <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_CallFP_DemSc_LocStub_CSI_BswGetAdcData_OPGetAdcData Call_OPGetAdcData;

} Rte_PDS_DemSc_LocStub_CSI_BswGetAdcData_R;




/*
 * Port Data Section (PDS) types for SW-C: SWCActl
 */

typedef P2FUNC(Rte_ModeType_EcuM_Mode,RTE_CODE,Rte_ModeFP_SWCActl_EcuM_CurrentMode_currentMode)(void);


typedef struct Rte_PDS_SWCActl_EcuM_CurrentMode_R /* [Satisfies_rte sws 3731] */
{
	/*
	 *Rte Mode <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_ModeFP_SWCActl_EcuM_CurrentMode_currentMode Mode_currentMode;

} Rte_PDS_SWCActl_EcuM_CurrentMode_R;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_ReadFP_SWCActl_SRI_ClearanceMeasurement_DEPClearanceMeasurement)(CONSTP2VAR(uint32,AUTOMATIC,RTE_APPL_DATA) data);


typedef struct Rte_PDS_SWCActl_SRI_ClearanceMeasurement_R /* [Satisfies_rte sws 3731] */
{
	/*
	 *Rte Read <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_ReadFP_SWCActl_SRI_ClearanceMeasurement_DEPClearanceMeasurement Read_DEPClearanceMeasurement;

} Rte_PDS_SWCActl_SRI_ClearanceMeasurement_R;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_ReadFP_SWCActl_SRI_ControlDTCStatus_DEPCurDemCtrlDTCSetting)(CONSTP2VAR(SwcDemSc_ScStatusType,AUTOMATIC,RTE_APPL_DATA) data);


typedef struct Rte_PDS_SWCActl_SRI_ControlDTCStatus_R /* [Satisfies_rte sws 3731] */
{
	/*
	 *Rte Read <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_ReadFP_SWCActl_SRI_ControlDTCStatus_DEPCurDemCtrlDTCSetting Read_DEPCurDemCtrlDTCSetting;

} Rte_PDS_SWCActl_SRI_ControlDTCStatus_R;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_CallFP_SWCActl_CSI_NormGetMCUSystemData_OPNormGetMCUSystemData)(OUT P2VAR(RTE_t_MCUSystemData,AUTOMATIC,RTE_APPL_DATA) ps_mcusysdata );


typedef struct Rte_PDS_SWCActl_CSI_NormGetMCUSystemData_R /* [Satisfies_rte sws 3731] */
{
	/*
	 *Rte Call <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_CallFP_SWCActl_CSI_NormGetMCUSystemData_OPNormGetMCUSystemData Call_OPNormGetMCUSystemData;

} Rte_PDS_SWCActl_CSI_NormGetMCUSystemData_R;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_CallFP_SWCActl_CSI_NormGetMonoDSPSystemData_OPNormGetMonoDSPSystemData)(OUT P2VAR(RTE_t_DSPMonoSystemData,AUTOMATIC,RTE_APPL_DATA) ps_monosysdata );


typedef struct Rte_PDS_SWCActl_CSI_NormGetMonoDSPSystemData_R /* [Satisfies_rte sws 3731] */
{
	/*
	 *Rte Call <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_CallFP_SWCActl_CSI_NormGetMonoDSPSystemData_OPNormGetMonoDSPSystemData Call_OPNormGetMonoDSPSystemData;

} Rte_PDS_SWCActl_CSI_NormGetMonoDSPSystemData_R;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_CallFP_SWCActl_CSI_NormGetStereoDSPSystemData_OPNormGetStereoDSPSystemData)(OUT P2VAR(RTE_t_DSPStereoSystemData,AUTOMATIC,RTE_APPL_DATA) ps_stereosysdata );


typedef struct Rte_PDS_SWCActl_CSI_NormGetStereoDSPSystemData_R /* [Satisfies_rte sws 3731] */
{
	/*
	 *Rte Call <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_CallFP_SWCActl_CSI_NormGetStereoDSPSystemData_OPNormGetStereoDSPSystemData Call_OPNormGetStereoDSPSystemData;

} Rte_PDS_SWCActl_CSI_NormGetStereoDSPSystemData_R;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_CallFP_SWCActl_CSI_NormSetMCUSystemData_OPNormSetMCUSystemData)(IN VAR(uint8,AUTOMATIC) FillType );


typedef struct Rte_PDS_SWCActl_CSI_NormSetMCUSystemData_R /* [Satisfies_rte sws 3731] */
{
	/*
	 *Rte Call <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_CallFP_SWCActl_CSI_NormSetMCUSystemData_OPNormSetMCUSystemData Call_OPNormSetMCUSystemData;

} Rte_PDS_SWCActl_CSI_NormSetMCUSystemData_R;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_CallFP_SWCActl_CSI_NormSetReqMonoDspState_OPNormSetReqMonoDspState)(IN VAR(uint8,AUTOMATIC) NewState );


typedef struct Rte_PDS_SWCActl_CSI_NormSetReqMonoDspState_R /* [Satisfies_rte sws 3731] */
{
	/*
	 *Rte Call <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_CallFP_SWCActl_CSI_NormSetReqMonoDspState_OPNormSetReqMonoDspState Call_OPNormSetReqMonoDspState;

} Rte_PDS_SWCActl_CSI_NormSetReqMonoDspState_R;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_CallFP_SWCActl_CSI_NormSetReqStereoDspState_OPNormSetReqStereoDspState)(IN VAR(uint8,AUTOMATIC) NewState );


typedef struct Rte_PDS_SWCActl_CSI_NormSetReqStereoDspState_R /* [Satisfies_rte sws 3731] */
{
	/*
	 *Rte Call <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_CallFP_SWCActl_CSI_NormSetReqStereoDspState_OPNormSetReqStereoDspState Call_OPNormSetReqStereoDspState;

} Rte_PDS_SWCActl_CSI_NormSetReqStereoDspState_R;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_ReadFP_SWCActl_SRI_TsaProcessState_DEPTsaProcessState)(CONSTP2VAR(RTE_eTSAIFOutputProcessState,AUTOMATIC,RTE_APPL_DATA) data);


typedef struct Rte_PDS_SWCActl_SRI_TsaProcessState_R /* [Satisfies_rte sws 3731] */
{
	/*
	 *Rte Read <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_ReadFP_SWCActl_SRI_TsaProcessState_DEPTsaProcessState Read_DEPTsaProcessState;

} Rte_PDS_SWCActl_SRI_TsaProcessState_R;




/*
 * Port Data Section (PDS) types for SW-C: SWCBsw
 */

typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_WriteFP_SWCBsw_SRI_AdcData_DEPAdcData)(CONSTP2VAR(RTE_t_AdcReads,AUTOMATIC,RTE_APPL_DATA) data);

typedef struct Rte_PDS_SWCBsw_SRI_AdcData_P /* [Satisfies_rte sws 3731]  */
{
	/*
	 *Rte Write <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_WriteFP_SWCBsw_SRI_AdcData_DEPAdcData Write_DEPAdcData;

} Rte_PDS_SWCBsw_SRI_AdcData_P;



typedef P2FUNC(Rte_ModeType_EcuM_Mode,RTE_CODE,Rte_ModeFP_SWCBsw_EcuM_CurrentMode_currentMode)(void);


typedef struct Rte_PDS_SWCBsw_EcuM_CurrentMode_R /* [Satisfies_rte sws 3731] */
{
	/*
	 *Rte Mode <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_ModeFP_SWCBsw_EcuM_CurrentMode_currentMode Mode_currentMode;

} Rte_PDS_SWCBsw_EcuM_CurrentMode_R;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_CallFP_SWCBsw_CSI_NormSetSignal_OPNormSetSignalFrontWhlAngel)(IN VAR(uint8,AUTOMATIC) FrTick );
typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_CallFP_SWCBsw_CSI_NormSetSignal_OPNormSetSignalPreviewAccel)(IN VAR(uint8,AUTOMATIC) FrTick );
typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_CallFP_SWCBsw_CSI_NormSetSignal_OPNormSetSignalStWhlAngel)(IN VAR(uint8,AUTOMATIC) FrTick );
typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_CallFP_SWCBsw_CSI_NormSetSignal_OPNormSetSignalTachoSpd)(IN VAR(uint8,AUTOMATIC) FrTick );
typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_CallFP_SWCBsw_CSI_NormSetSignal_OPNormSetSignalVehDynAccel)(IN VAR(uint8,AUTOMATIC) FrTick );
typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_CallFP_SWCBsw_CSI_NormSetSignal_OPNormSetSignalWheelLT)(IN VAR(uint8,AUTOMATIC) FrTick );
typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_CallFP_SWCBsw_CSI_NormSetSignal_OPNormSetSignalWheelRT)(IN VAR(uint8,AUTOMATIC) FrTick );
typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_CallFP_SWCBsw_CSI_NormSetSignal_OPNormSetSignalYawRate)(IN VAR(uint8,AUTOMATIC) FrTick );


typedef struct Rte_PDS_SWCBsw_CSI_NormSetSignal_R /* [Satisfies_rte sws 3731] */
{
	/*
	 *Rte Call <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_CallFP_SWCBsw_CSI_NormSetSignal_OPNormSetSignalFrontWhlAngel Call_OPNormSetSignalFrontWhlAngel;
	Rte_CallFP_SWCBsw_CSI_NormSetSignal_OPNormSetSignalPreviewAccel Call_OPNormSetSignalPreviewAccel;
	Rte_CallFP_SWCBsw_CSI_NormSetSignal_OPNormSetSignalStWhlAngel Call_OPNormSetSignalStWhlAngel;
	Rte_CallFP_SWCBsw_CSI_NormSetSignal_OPNormSetSignalTachoSpd Call_OPNormSetSignalTachoSpd;
	Rte_CallFP_SWCBsw_CSI_NormSetSignal_OPNormSetSignalVehDynAccel Call_OPNormSetSignalVehDynAccel;
	Rte_CallFP_SWCBsw_CSI_NormSetSignal_OPNormSetSignalWheelLT Call_OPNormSetSignalWheelLT;
	Rte_CallFP_SWCBsw_CSI_NormSetSignal_OPNormSetSignalWheelRT Call_OPNormSetSignalWheelRT;
	Rte_CallFP_SWCBsw_CSI_NormSetSignal_OPNormSetSignalYawRate Call_OPNormSetSignalYawRate;

} Rte_PDS_SWCBsw_CSI_NormSetSignal_R;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_CallFP_SWCBsw_NvMService_ReadBlock)(IN P2CONST(UInt8,AUTOMATIC,RTE_APPL_DATA) DstPtr );


typedef struct Rte_PDS_SWCBsw_NvMService_R /* [Satisfies_rte sws 3731] */
{
	/*
	 *Rte Call <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_CallFP_SWCBsw_NvMService_ReadBlock Call_ReadBlock;

} Rte_PDS_SWCBsw_NvMService_R;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_ReadFP_SWCBsw_SRI_VehicleAlgoTaskState_DEP_VehicleAlgoTaskState)(CONSTP2VAR(RTE_t_SYSMultiRunTaskState,AUTOMATIC,RTE_APPL_DATA) data);


typedef struct Rte_PDS_SWCBsw_SRI_VehicleAlgoTaskState_R /* [Satisfies_rte sws 3731] */
{
	/*
	 *Rte Read <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_ReadFP_SWCBsw_SRI_VehicleAlgoTaskState_DEP_VehicleAlgoTaskState Read_DEP_VehicleAlgoTaskState;

} Rte_PDS_SWCBsw_SRI_VehicleAlgoTaskState_R;




/*
 * Port Data Section (PDS) types for SW-C: SWCCaliAdapt
 */

typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_WriteFP_SWCCaliAdapt_SRI_AlgoVersion_DEPAlgoVersion)(CONSTP2VAR(RTE_t_AlgoVersion,AUTOMATIC,RTE_APPL_DATA) data);

typedef struct Rte_PDS_SWCCaliAdapt_SRI_AlgoVersion_P /* [Satisfies_rte sws 3731]  */
{
	/*
	 *Rte Write <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_WriteFP_SWCCaliAdapt_SRI_AlgoVersion_DEPAlgoVersion Write_DEPAlgoVersion;

} Rte_PDS_SWCCaliAdapt_SRI_AlgoVersion_P;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_ReadFP_SWCCaliAdapt_SRI_CaliDiagCamSocket_DEP_CaliDiagCamSocket)(CONSTP2VAR(RTE_t_DiagCamSocket,AUTOMATIC,RTE_APPL_DATA) data);


typedef struct Rte_PDS_SWCCaliAdapt_SRI_CaliDiagCamSocket_R /* [Satisfies_rte sws 3731] */
{
	/*
	 *Rte Read <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_ReadFP_SWCCaliAdapt_SRI_CaliDiagCamSocket_DEP_CaliDiagCamSocket Read_DEP_CaliDiagCamSocket;

} Rte_PDS_SWCCaliAdapt_SRI_CaliDiagCamSocket_R;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_ReadFP_SWCCaliAdapt_SRI_IcImageCharacteristics_DEPIcImageCharacteristics)(CONSTP2VAR(RTE_t_IC_S_ImageCharacteristics,AUTOMATIC,RTE_APPL_DATA) data);


typedef struct Rte_PDS_SWCCaliAdapt_SRI_IcImageCharacteristics_R /* [Satisfies_rte sws 3731] */
{
	/*
	 *Rte Read <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_ReadFP_SWCCaliAdapt_SRI_IcImageCharacteristics_DEPIcImageCharacteristics Read_DEPIcImageCharacteristics;

} Rte_PDS_SWCCaliAdapt_SRI_IcImageCharacteristics_R;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_ReadFP_SWCCaliAdapt_SRI_IcStatisticalResults_DEPIcStatisticalResults)(CONSTP2VAR(RTE_t_IC_S_StatisticalResults,AUTOMATIC,RTE_APPL_DATA) data);


typedef struct Rte_PDS_SWCCaliAdapt_SRI_IcStatisticalResults_R /* [Satisfies_rte sws 3731] */
{
	/*
	 *Rte Read <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_ReadFP_SWCCaliAdapt_SRI_IcStatisticalResults_DEPIcStatisticalResults Read_DEPIcStatisticalResults;

} Rte_PDS_SWCCaliAdapt_SRI_IcStatisticalResults_R;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_ReadFP_SWCCaliAdapt_SRI_CaliMode_DEP_CaliMode)(CONSTP2VAR(RTE_CALI_t_eCALIMode,AUTOMATIC,RTE_APPL_DATA) data);


typedef struct Rte_PDS_SWCCaliAdapt_SRI_CaliMode_R /* [Satisfies_rte sws 3731] */
{
	/*
	 *Rte Read <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_ReadFP_SWCCaliAdapt_SRI_CaliMode_DEP_CaliMode Read_DEP_CaliMode;

} Rte_PDS_SWCCaliAdapt_SRI_CaliMode_R;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_ReadFP_SWCCaliAdapt_SRI_CaliPatternPosition_DEP_CaliPatternPosition)(CONSTP2VAR(RTE_t_DiagPatternPosition,AUTOMATIC,RTE_APPL_DATA) data);


typedef struct Rte_PDS_SWCCaliAdapt_SRI_CaliPatternPosition_R /* [Satisfies_rte sws 3731] */
{
	/*
	 *Rte Read <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_ReadFP_SWCCaliAdapt_SRI_CaliPatternPosition_DEP_CaliPatternPosition Read_DEP_CaliPatternPosition;

} Rte_PDS_SWCCaliAdapt_SRI_CaliPatternPosition_R;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_CallFP_SWCCaliAdapt_CSI_Timer64GetTimerValue_OPTimer64GetTimerValue)(OUT P2VAR(uint64,AUTOMATIC,RTE_APPL_DATA) timerValue );


typedef struct Rte_PDS_SWCCaliAdapt_CSI_Timer64GetTimerValue_R /* [Satisfies_rte sws 3731] */
{
	/*
	 *Rte Call <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_CallFP_SWCCaliAdapt_CSI_Timer64GetTimerValue_OPTimer64GetTimerValue Call_OPTimer64GetTimerValue;

} Rte_PDS_SWCCaliAdapt_CSI_Timer64GetTimerValue_R;



typedef P2FUNC(Rte_ModeType_EcuM_Mode,RTE_CODE,Rte_ModeFP_SWCCaliAdapt_EcuM_CurrentMode_currentMode)(void);


typedef struct Rte_PDS_SWCCaliAdapt_EcuM_CurrentMode_R /* [Satisfies_rte sws 3731] */
{
	/*
	 *Rte Mode <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_ModeFP_SWCCaliAdapt_EcuM_CurrentMode_currentMode Mode_currentMode;

} Rte_PDS_SWCCaliAdapt_EcuM_CurrentMode_R;




/*
 * Port Data Section (PDS) types for SW-C: SWCDiag
 */

typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_WriteFP_SWCDiag_SRI_FctAldwVibMotRq_DEPFctAldwVibMotRq)(VAR(RTE_t_eALDWVibMotRq,AUTOMATIC) data);

typedef struct Rte_PDS_SWCDiag_SRI_FctAldwVibMotRq_P /* [Satisfies_rte sws 3731]  */
{
	/*
	 *Rte Write <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_WriteFP_SWCDiag_SRI_FctAldwVibMotRq_DEPFctAldwVibMotRq Write_DEPFctAldwVibMotRq;

} Rte_PDS_SWCDiag_SRI_FctAldwVibMotRq_P;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_WriteFP_SWCDiag_SRI_AldwVibTm_DEPAldwVibTm)(VAR(uint16,AUTOMATIC) data);

typedef struct Rte_PDS_SWCDiag_SRI_AldwVibTm_P /* [Satisfies_rte sws 3731]  */
{
	/*
	 *Rte Write <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_WriteFP_SWCDiag_SRI_AldwVibTm_DEPAldwVibTm Write_DEPAldwVibTm;

} Rte_PDS_SWCDiag_SRI_AldwVibTm_P;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_WriteFP_SWCDiag_SRI_CaliMode_DEP_CaliMode)(VAR(RTE_CALI_t_eCALIMode,AUTOMATIC) data);

typedef struct Rte_PDS_SWCDiag_SRI_CaliMode_P /* [Satisfies_rte sws 3731]  */
{
	/*
	 *Rte Write <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_WriteFP_SWCDiag_SRI_CaliMode_DEP_CaliMode Write_DEP_CaliMode;

} Rte_PDS_SWCDiag_SRI_CaliMode_P;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_WriteFP_SWCDiag_SRI_CaliPatternPosition_DEP_CaliPatternPosition)(CONSTP2VAR(RTE_t_DiagPatternPosition,AUTOMATIC,RTE_APPL_DATA) data);

typedef struct Rte_PDS_SWCDiag_SRI_CaliPatternPosition_P /* [Satisfies_rte sws 3731]  */
{
	/*
	 *Rte Write <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_WriteFP_SWCDiag_SRI_CaliPatternPosition_DEP_CaliPatternPosition Write_DEP_CaliPatternPosition;

} Rte_PDS_SWCDiag_SRI_CaliPatternPosition_P;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_WriteFP_SWCDiag_SRI_CaliDiagCamSocket_DEP_CaliDiagCamSocket)(CONSTP2VAR(RTE_t_DiagCamSocket,AUTOMATIC,RTE_APPL_DATA) data);

typedef struct Rte_PDS_SWCDiag_SRI_CaliDiagCamSocket_P /* [Satisfies_rte sws 3731]  */
{
	/*
	 *Rte Write <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_WriteFP_SWCDiag_SRI_CaliDiagCamSocket_DEP_CaliDiagCamSocket Write_DEP_CaliDiagCamSocket;

} Rte_PDS_SWCDiag_SRI_CaliDiagCamSocket_P;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_WriteFP_SWCDiag_SRI_AlgoDebugMode_DEPAlgoDebugMode)(VAR(RTE_t_eAlgoDebugMode,AUTOMATIC) data);

typedef struct Rte_PDS_SWCDiag_SRI_AlgoDebugMode_P /* [Satisfies_rte sws 3731]  */
{
	/*
	 *Rte Write <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_WriteFP_SWCDiag_SRI_AlgoDebugMode_DEPAlgoDebugMode Write_DEPAlgoDebugMode;

} Rte_PDS_SWCDiag_SRI_AlgoDebugMode_P;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_WriteFP_SWCDiag_SRI_IcParameter_DEP_IcParameter)(CONSTP2VAR(NvM_t_ICParameter,AUTOMATIC,RTE_APPL_DATA) data);

typedef struct Rte_PDS_SWCDiag_SRI_IcParameter_P /* [Satisfies_rte sws 3731]  */
{
	/*
	 *Rte Write <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_WriteFP_SWCDiag_SRI_IcParameter_DEP_IcParameter Write_DEP_IcParameter;

} Rte_PDS_SWCDiag_SRI_IcParameter_P;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_WriteFP_SWCDiag_SRI_TsaDispTest_DEPTsaDispTest)(VAR(RTE_t_eTSADispTest,AUTOMATIC) data);

typedef struct Rte_PDS_SWCDiag_SRI_TsaDispTest_P /* [Satisfies_rte sws 3731]  */
{
	/*
	 *Rte Write <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_WriteFP_SWCDiag_SRI_TsaDispTest_DEPTsaDispTest Write_DEPTsaDispTest;

} Rte_PDS_SWCDiag_SRI_TsaDispTest_P;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_CallFP_SWCDiag_CSI_BswGetAdcData_OPGetAdcData)(IN VAR(uint8,AUTOMATIC) AdcChannel, OUT P2VAR(float32,AUTOMATIC,RTE_APPL_DATA) CalcVal, OUT P2VAR(uint32,AUTOMATIC,RTE_APPL_DATA) Timestamp );


typedef struct Rte_PDS_SWCDiag_CSI_BswGetAdcData_R /* [Satisfies_rte sws 3731] */
{
	/*
	 *Rte Call <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_CallFP_SWCDiag_CSI_BswGetAdcData_OPGetAdcData Call_OPGetAdcData;

} Rte_PDS_SWCDiag_CSI_BswGetAdcData_R;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_CallFP_SWCDiag_CSI_IcGetSensorIDs_OPIcGetSensorIDs)(IN VAR(RTE_ICA_E_IMAGER_TYPE,AUTOMATIC) e_Imager, OUT P2VAR(RTE_t_ICA_S_SensorIDs,AUTOMATIC,RTE_APPL_DATA) ps_SensIdOut );


typedef struct Rte_PDS_SWCDiag_CSI_IcGetSensorIDs_R /* [Satisfies_rte sws 3731] */
{
	/*
	 *Rte Call <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_CallFP_SWCDiag_CSI_IcGetSensorIDs_OPIcGetSensorIDs Call_OPIcGetSensorIDs;

} Rte_PDS_SWCDiag_CSI_IcGetSensorIDs_R;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_CallFP_SWCDiag_CSI_IcGetTemperature_OPIcGetTemperature)(IN VAR(RTE_ICA_E_IMAGER_TYPE,AUTOMATIC) e_Imager, OUT P2VAR(float32,AUTOMATIC,RTE_APPL_DATA) pf32_Temp );


typedef struct Rte_PDS_SWCDiag_CSI_IcGetTemperature_R /* [Satisfies_rte sws 3731] */
{
	/*
	 *Rte Call <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_CallFP_SWCDiag_CSI_IcGetTemperature_OPIcGetTemperature Call_OPIcGetTemperature;

} Rte_PDS_SWCDiag_CSI_IcGetTemperature_R;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_CallFP_SWCDiag_CSI_NormGetAlgoVersion_OPNormGetAlgoVersion)(IN VAR(RTE_t_eAlgoId,AUTOMATIC) AlgoId, OUT P2VAR(uint32,AUTOMATIC,RTE_APPL_DATA) Version );


typedef struct Rte_PDS_SWCDiag_CSI_NormGetAlgoVersion_R /* [Satisfies_rte sws 3731] */
{
	/*
	 *Rte Call <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_CallFP_SWCDiag_CSI_NormGetAlgoVersion_OPNormGetAlgoVersion Call_OPNormGetAlgoVersion;

} Rte_PDS_SWCDiag_CSI_NormGetAlgoVersion_R;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_CallFP_SWCDiag_CSI_Timer64GetTimerValue_OPTimer64GetTimerValue)(OUT P2VAR(uint64,AUTOMATIC,RTE_APPL_DATA) timerValue );


typedef struct Rte_PDS_SWCDiag_CSI_Timer64GetTimerValue_R /* [Satisfies_rte sws 3731] */
{
	/*
	 *Rte Call <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_CallFP_SWCDiag_CSI_Timer64GetTimerValue_OPTimer64GetTimerValue Call_OPTimer64GetTimerValue;

} Rte_PDS_SWCDiag_CSI_Timer64GetTimerValue_R;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_ReadFP_SWCDiag_SRI_TsaDispTest_DEPTsaDispTest)(CONSTP2VAR(RTE_t_eTSADispTest,AUTOMATIC,RTE_APPL_DATA) data);


typedef struct Rte_PDS_SWCDiag_SRI_TsaDispTest_R /* [Satisfies_rte sws 3731] */
{
	/*
	 *Rte Read <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_ReadFP_SWCDiag_SRI_TsaDispTest_DEPTsaDispTest Read_DEPTsaDispTest;

} Rte_PDS_SWCDiag_SRI_TsaDispTest_R;




/*
 * Port Data Section (PDS) types for SW-C: SWCFctAdapt
 */

typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_WriteFP_SWCFctAdapt_SRI_AlgoVersion_DEPAlgoVersion)(CONSTP2VAR(RTE_t_AlgoVersion,AUTOMATIC,RTE_APPL_DATA) data);

typedef struct Rte_PDS_SWCFctAdapt_SRI_AlgoVersion_P /* [Satisfies_rte sws 3731]  */
{
	/*
	 *Rte Write <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_WriteFP_SWCFctAdapt_SRI_AlgoVersion_DEPAlgoVersion Write_DEPAlgoVersion;

} Rte_PDS_SWCFctAdapt_SRI_AlgoVersion_P;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_WriteFP_SWCFctAdapt_SRI_VehicleAlgoTaskState_DEP_VehicleAlgoTaskState)(VAR(RTE_t_SYSMultiRunTaskState,AUTOMATIC) data);

typedef struct Rte_PDS_SWCFctAdapt_SRI_VehicleAlgoTaskState_P /* [Satisfies_rte sws 3731]  */
{
	/*
	 *Rte Write <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_WriteFP_SWCFctAdapt_SRI_VehicleAlgoTaskState_DEP_VehicleAlgoTaskState Write_DEP_VehicleAlgoTaskState;

} Rte_PDS_SWCFctAdapt_SRI_VehicleAlgoTaskState_P;



typedef P2FUNC(Rte_ModeType_EcuM_Mode,RTE_CODE,Rte_ModeFP_SWCFctAdapt_EcuM_CurrentMode_currentMode)(void);


typedef struct Rte_PDS_SWCFctAdapt_EcuM_CurrentMode_R /* [Satisfies_rte sws 3731] */
{
	/*
	 *Rte Mode <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_ModeFP_SWCFctAdapt_EcuM_CurrentMode_currentMode Mode_currentMode;

} Rte_PDS_SWCFctAdapt_EcuM_CurrentMode_R;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_ReadFP_SWCFctAdapt_SRI_AldwLdpCfgBits_DEPAldwLdpCfgBits)(CONSTP2VAR(RTE_t_AldwLdpCfgBits,AUTOMATIC,RTE_APPL_DATA) data);


typedef struct Rte_PDS_SWCFctAdapt_SRI_AldwLdpCfgBits_R /* [Satisfies_rte sws 3731] */
{
	/*
	 *Rte Read <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_ReadFP_SWCFctAdapt_SRI_AldwLdpCfgBits_DEPAldwLdpCfgBits Read_DEPAldwLdpCfgBits;

} Rte_PDS_SWCFctAdapt_SRI_AldwLdpCfgBits_R;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_ReadFP_SWCFctAdapt_SRI_FctAldwVibMotRq_DEPFctAldwVibMotRq)(CONSTP2VAR(RTE_t_eALDWVibMotRq,AUTOMATIC,RTE_APPL_DATA) data);


typedef struct Rte_PDS_SWCFctAdapt_SRI_FctAldwVibMotRq_R /* [Satisfies_rte sws 3731] */
{
	/*
	 *Rte Read <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_ReadFP_SWCFctAdapt_SRI_FctAldwVibMotRq_DEPFctAldwVibMotRq Read_DEPFctAldwVibMotRq;

} Rte_PDS_SWCFctAdapt_SRI_FctAldwVibMotRq_R;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_ReadFP_SWCFctAdapt_SRI_AldwVibTm_DEPAldwVibTm)(CONSTP2VAR(uint16,AUTOMATIC,RTE_APPL_DATA) data);


typedef struct Rte_PDS_SWCFctAdapt_SRI_AldwVibTm_R /* [Satisfies_rte sws 3731] */
{
	/*
	 *Rte Read <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_ReadFP_SWCFctAdapt_SRI_AldwVibTm_DEPAldwVibTm Read_DEPAldwVibTm;

} Rte_PDS_SWCFctAdapt_SRI_AldwVibTm_R;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_ReadFP_SWCFctAdapt_SRI_AlgoDebugMode_DEPAlgoDebugMode)(CONSTP2VAR(RTE_t_eAlgoDebugMode,AUTOMATIC,RTE_APPL_DATA) data);


typedef struct Rte_PDS_SWCFctAdapt_SRI_AlgoDebugMode_R /* [Satisfies_rte sws 3731] */
{
	/*
	 *Rte Read <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_ReadFP_SWCFctAdapt_SRI_AlgoDebugMode_DEPAlgoDebugMode Read_DEPAlgoDebugMode;

} Rte_PDS_SWCFctAdapt_SRI_AlgoDebugMode_R;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_ReadFP_SWCFctAdapt_SRI_LdpWarnRq_DEPLdpWarnRq)(CONSTP2VAR(LDPWarnRq_t,AUTOMATIC,RTE_APPL_DATA) data);


typedef struct Rte_PDS_SWCFctAdapt_SRI_LdpWarnRq_R /* [Satisfies_rte sws 3731] */
{
	/*
	 *Rte Read <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_ReadFP_SWCFctAdapt_SRI_LdpWarnRq_DEPLdpWarnRq Read_DEPLdpWarnRq;

} Rte_PDS_SWCFctAdapt_SRI_LdpWarnRq_R;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_CallFP_SWCFctAdapt_CSI_Timer64GetTimerValue_OPTimer64GetTimerValue)(OUT P2VAR(uint64,AUTOMATIC,RTE_APPL_DATA) timerValue );


typedef struct Rte_PDS_SWCFctAdapt_CSI_Timer64GetTimerValue_R /* [Satisfies_rte sws 3731] */
{
	/*
	 *Rte Call <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_CallFP_SWCFctAdapt_CSI_Timer64GetTimerValue_OPTimer64GetTimerValue Call_OPTimer64GetTimerValue;

} Rte_PDS_SWCFctAdapt_CSI_Timer64GetTimerValue_R;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_ReadFP_SWCFctAdapt_SRI_VehSpdDisp_DEP_VehSpdDisp)(CONSTP2VAR(RTE_t_VehSpdDisp,AUTOMATIC,RTE_APPL_DATA) data);


typedef struct Rte_PDS_SWCFctAdapt_SRI_VehSpdDisp_R /* [Satisfies_rte sws 3731] */
{
	/*
	 *Rte Read <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_ReadFP_SWCFctAdapt_SRI_VehSpdDisp_DEP_VehSpdDisp Read_DEP_VehSpdDisp;

} Rte_PDS_SWCFctAdapt_SRI_VehSpdDisp_R;




/*
 * Port Data Section (PDS) types for SW-C: SWCGbAdapt
 */

typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_WriteFP_SWCGbAdapt_SRI_AlgoVersion_DEPAlgoVersion)(CONSTP2VAR(RTE_t_AlgoVersion,AUTOMATIC,RTE_APPL_DATA) data);

typedef struct Rte_PDS_SWCGbAdapt_SRI_AlgoVersion_P /* [Satisfies_rte sws 3731]  */
{
	/*
	 *Rte Write <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_WriteFP_SWCGbAdapt_SRI_AlgoVersion_DEPAlgoVersion Write_DEPAlgoVersion;

} Rte_PDS_SWCGbAdapt_SRI_AlgoVersion_P;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_WriteFP_SWCGbAdapt_SRI_GbAoiBlockage_DEPGbAoiBlockage)(VAR(RTE_GB_t_AOIBlockage_array,AUTOMATIC) data);

typedef struct Rte_PDS_SWCGbAdapt_SRI_GbAoiBlockage_P /* [Satisfies_rte sws 3731]  */
{
	/*
	 *Rte Write <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_WriteFP_SWCGbAdapt_SRI_GbAoiBlockage_DEPGbAoiBlockage Write_DEPGbAoiBlockage;

} Rte_PDS_SWCGbAdapt_SRI_GbAoiBlockage_P;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_ReadFP_SWCGbAdapt_SRI_AlgoDebugMode_DEPAlgoDebugMode)(CONSTP2VAR(RTE_t_eAlgoDebugMode,AUTOMATIC,RTE_APPL_DATA) data);


typedef struct Rte_PDS_SWCGbAdapt_SRI_AlgoDebugMode_R /* [Satisfies_rte sws 3731] */
{
	/*
	 *Rte Read <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_ReadFP_SWCGbAdapt_SRI_AlgoDebugMode_DEPAlgoDebugMode Read_DEPAlgoDebugMode;

} Rte_PDS_SWCGbAdapt_SRI_AlgoDebugMode_R;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_ReadFP_SWCGbAdapt_SRI_HeadlightState_DEP_HeadlightState)(CONSTP2VAR(RTE_HLA_t_HeadlightState,AUTOMATIC,RTE_APPL_DATA) data);


typedef struct Rte_PDS_SWCGbAdapt_SRI_HeadlightState_R /* [Satisfies_rte sws 3731] */
{
	/*
	 *Rte Read <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_ReadFP_SWCGbAdapt_SRI_HeadlightState_DEP_HeadlightState Read_DEP_HeadlightState;

} Rte_PDS_SWCGbAdapt_SRI_HeadlightState_R;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_CallFP_SWCGbAdapt_CSI_IcGetTemperature_OPIcGetTemperature)(IN VAR(RTE_ICA_E_IMAGER_TYPE,AUTOMATIC) e_Imager, OUT P2VAR(float32,AUTOMATIC,RTE_APPL_DATA) pf32_Temp );


typedef struct Rte_PDS_SWCGbAdapt_CSI_IcGetTemperature_R /* [Satisfies_rte sws 3731] */
{
	/*
	 *Rte Call <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_CallFP_SWCGbAdapt_CSI_IcGetTemperature_OPIcGetTemperature Call_OPIcGetTemperature;

} Rte_PDS_SWCGbAdapt_CSI_IcGetTemperature_R;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_ReadFP_SWCGbAdapt_SRI_IcImageCharacteristics_DEPIcImageCharacteristics)(CONSTP2VAR(RTE_t_IC_S_ImageCharacteristics,AUTOMATIC,RTE_APPL_DATA) data);


typedef struct Rte_PDS_SWCGbAdapt_SRI_IcImageCharacteristics_R /* [Satisfies_rte sws 3731] */
{
	/*
	 *Rte Read <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_ReadFP_SWCGbAdapt_SRI_IcImageCharacteristics_DEPIcImageCharacteristics Read_DEPIcImageCharacteristics;

} Rte_PDS_SWCGbAdapt_SRI_IcImageCharacteristics_R;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_ReadFP_SWCGbAdapt_SRI_VehicleState_DEPVehicleState)(CONSTP2VAR(RTE_HLA_t_VehicleState,AUTOMATIC,RTE_APPL_DATA) data);


typedef struct Rte_PDS_SWCGbAdapt_SRI_VehicleState_R /* [Satisfies_rte sws 3731] */
{
	/*
	 *Rte Read <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_ReadFP_SWCGbAdapt_SRI_VehicleState_DEPVehicleState Read_DEPVehicleState;

} Rte_PDS_SWCGbAdapt_SRI_VehicleState_R;




/*
 * Port Data Section (PDS) types for SW-C: SWCHeatAdapt
 */

typedef P2FUNC(Rte_ModeType_EcuM_Mode,RTE_CODE,Rte_ModeFP_SWCHeatAdapt_EcuM_CurrentMode_currentMode)(void);


typedef struct Rte_PDS_SWCHeatAdapt_EcuM_CurrentMode_R /* [Satisfies_rte sws 3731] */
{
	/*
	 *Rte Mode <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_ModeFP_SWCHeatAdapt_EcuM_CurrentMode_currentMode Mode_currentMode;

} Rte_PDS_SWCHeatAdapt_EcuM_CurrentMode_R;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_CallFP_SWCHeatAdapt_CSI_BswGetAdcData_OPGetAdcData)(IN VAR(uint8,AUTOMATIC) AdcChannel, OUT P2VAR(float32,AUTOMATIC,RTE_APPL_DATA) CalcVal, OUT P2VAR(uint32,AUTOMATIC,RTE_APPL_DATA) Timestamp );


typedef struct Rte_PDS_SWCHeatAdapt_CSI_BswGetAdcData_R /* [Satisfies_rte sws 3731] */
{
	/*
	 *Rte Call <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_CallFP_SWCHeatAdapt_CSI_BswGetAdcData_OPGetAdcData Call_OPGetAdcData;

} Rte_PDS_SWCHeatAdapt_CSI_BswGetAdcData_R;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_CallFP_SWCHeatAdapt_CSI_Timer64GetTimerValue_OPTimer64GetTimerValue)(OUT P2VAR(uint64,AUTOMATIC,RTE_APPL_DATA) timerValue );


typedef struct Rte_PDS_SWCHeatAdapt_CSI_Timer64GetTimerValue_R /* [Satisfies_rte sws 3731] */
{
	/*
	 *Rte Call <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_CallFP_SWCHeatAdapt_CSI_Timer64GetTimerValue_OPTimer64GetTimerValue Call_OPTimer64GetTimerValue;

} Rte_PDS_SWCHeatAdapt_CSI_Timer64GetTimerValue_R;




/*
 * Port Data Section (PDS) types for SW-C: SWCHlaAdapt
 */

typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_WriteFP_SWCHlaAdapt_SRI_AlgoVersion_DEPAlgoVersion)(CONSTP2VAR(RTE_t_AlgoVersion,AUTOMATIC,RTE_APPL_DATA) data);

typedef struct Rte_PDS_SWCHlaAdapt_SRI_AlgoVersion_P /* [Satisfies_rte sws 3731]  */
{
	/*
	 *Rte Write <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_WriteFP_SWCHlaAdapt_SRI_AlgoVersion_DEPAlgoVersion Write_DEPAlgoVersion;

} Rte_PDS_SWCHlaAdapt_SRI_AlgoVersion_P;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_WriteFP_SWCHlaAdapt_SRI_ClearanceMeasurement_DEPClearanceMeasurement)(VAR(uint32,AUTOMATIC) data);

typedef struct Rte_PDS_SWCHlaAdapt_SRI_ClearanceMeasurement_P /* [Satisfies_rte sws 3731]  */
{
	/*
	 *Rte Write <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_WriteFP_SWCHlaAdapt_SRI_ClearanceMeasurement_DEPClearanceMeasurement Write_DEPClearanceMeasurement;

} Rte_PDS_SWCHlaAdapt_SRI_ClearanceMeasurement_P;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_WriteFP_SWCHlaAdapt_SRI_HlaNvObject_DEP_HlaNvObject)(CONSTP2VAR(RTE_HLAF_t_NightView,AUTOMATIC,RTE_APPL_DATA) data);

typedef struct Rte_PDS_SWCHlaAdapt_SRI_HlaNvObject_P /* [Satisfies_rte sws 3731]  */
{
	/*
	 *Rte Write <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_WriteFP_SWCHlaAdapt_SRI_HlaNvObject_DEP_HlaNvObject Write_DEP_HlaNvObject;

} Rte_PDS_SWCHlaAdapt_SRI_HlaNvObject_P;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_ReadFP_SWCHlaAdapt_SRI_HlaAvailability_DEPHlaAvailability)(CONSTP2VAR(RTE_HLA_t_Availability,AUTOMATIC,RTE_APPL_DATA) data);


typedef struct Rte_PDS_SWCHlaAdapt_SRI_HlaAvailability_R /* [Satisfies_rte sws 3731] */
{
	/*
	 *Rte Read <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_ReadFP_SWCHlaAdapt_SRI_HlaAvailability_DEPHlaAvailability Read_DEPHlaAvailability;

} Rte_PDS_SWCHlaAdapt_SRI_HlaAvailability_R;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_ReadFP_SWCHlaAdapt_SRI_AlgoDebugMode_DEPAlgoDebugMode)(CONSTP2VAR(RTE_t_eAlgoDebugMode,AUTOMATIC,RTE_APPL_DATA) data);


typedef struct Rte_PDS_SWCHlaAdapt_SRI_AlgoDebugMode_R /* [Satisfies_rte sws 3731] */
{
	/*
	 *Rte Read <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_ReadFP_SWCHlaAdapt_SRI_AlgoDebugMode_DEPAlgoDebugMode Read_DEPAlgoDebugMode;

} Rte_PDS_SWCHlaAdapt_SRI_AlgoDebugMode_R;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_ReadFP_SWCHlaAdapt_SRI_GbAoiBlockage_DEPGbAoiBlockage)(VAR(RTE_GB_t_AOIBlockage_array,AUTOMATIC) data);


typedef struct Rte_PDS_SWCHlaAdapt_SRI_GbAoiBlockage_R /* [Satisfies_rte sws 3731] */
{
	/*
	 *Rte Read <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_ReadFP_SWCHlaAdapt_SRI_GbAoiBlockage_DEPGbAoiBlockage Read_DEPGbAoiBlockage;

} Rte_PDS_SWCHlaAdapt_SRI_GbAoiBlockage_R;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_ReadFP_SWCHlaAdapt_SRI_HeadlightState_DEP_HeadlightState)(CONSTP2VAR(RTE_HLA_t_HeadlightState,AUTOMATIC,RTE_APPL_DATA) data);


typedef struct Rte_PDS_SWCHlaAdapt_SRI_HeadlightState_R /* [Satisfies_rte sws 3731] */
{
	/*
	 *Rte Read <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_ReadFP_SWCHlaAdapt_SRI_HeadlightState_DEP_HeadlightState Read_DEP_HeadlightState;

} Rte_PDS_SWCHlaAdapt_SRI_HeadlightState_R;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_ReadFP_SWCHlaAdapt_SRI_IcImageCharacteristics_DEPIcImageCharacteristics)(CONSTP2VAR(RTE_t_IC_S_ImageCharacteristics,AUTOMATIC,RTE_APPL_DATA) data);


typedef struct Rte_PDS_SWCHlaAdapt_SRI_IcImageCharacteristics_R /* [Satisfies_rte sws 3731] */
{
	/*
	 *Rte Read <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_ReadFP_SWCHlaAdapt_SRI_IcImageCharacteristics_DEPIcImageCharacteristics Read_DEPIcImageCharacteristics;

} Rte_PDS_SWCHlaAdapt_SRI_IcImageCharacteristics_R;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_ReadFP_SWCHlaAdapt_SRI_IcStatisticalResults_DEPIcStatisticalResults)(CONSTP2VAR(RTE_t_IC_S_StatisticalResults,AUTOMATIC,RTE_APPL_DATA) data);


typedef struct Rte_PDS_SWCHlaAdapt_SRI_IcStatisticalResults_R /* [Satisfies_rte sws 3731] */
{
	/*
	 *Rte Read <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_ReadFP_SWCHlaAdapt_SRI_IcStatisticalResults_DEPIcStatisticalResults Read_DEPIcStatisticalResults;

} Rte_PDS_SWCHlaAdapt_SRI_IcStatisticalResults_R;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_ReadFP_SWCHlaAdapt_SRI_HlaNvObject_DEP_HlaNvObject)(CONSTP2VAR(RTE_HLAF_t_NightView,AUTOMATIC,RTE_APPL_DATA) data);


typedef struct Rte_PDS_SWCHlaAdapt_SRI_HlaNvObject_R /* [Satisfies_rte sws 3731] */
{
	/*
	 *Rte Read <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_ReadFP_SWCHlaAdapt_SRI_HlaNvObject_DEP_HlaNvObject Read_DEP_HlaNvObject;

} Rte_PDS_SWCHlaAdapt_SRI_HlaNvObject_R;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_CallFP_SWCHlaAdapt_CSI_Timer64GetTimerValue_OPTimer64GetTimerValue)(OUT P2VAR(uint64,AUTOMATIC,RTE_APPL_DATA) timerValue );


typedef struct Rte_PDS_SWCHlaAdapt_CSI_Timer64GetTimerValue_R /* [Satisfies_rte sws 3731] */
{
	/*
	 *Rte Call <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_CallFP_SWCHlaAdapt_CSI_Timer64GetTimerValue_OPTimer64GetTimerValue Call_OPTimer64GetTimerValue;

} Rte_PDS_SWCHlaAdapt_CSI_Timer64GetTimerValue_R;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_ReadFP_SWCHlaAdapt_SRI_VehSpdDisp_DEP_VehSpdDisp)(CONSTP2VAR(RTE_t_VehSpdDisp,AUTOMATIC,RTE_APPL_DATA) data);


typedef struct Rte_PDS_SWCHlaAdapt_SRI_VehSpdDisp_R /* [Satisfies_rte sws 3731] */
{
	/*
	 *Rte Read <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_ReadFP_SWCHlaAdapt_SRI_VehSpdDisp_DEP_VehSpdDisp Read_DEP_VehSpdDisp;

} Rte_PDS_SWCHlaAdapt_SRI_VehSpdDisp_R;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_ReadFP_SWCHlaAdapt_SRI_VehicleState_DEPVehicleState)(CONSTP2VAR(RTE_HLA_t_VehicleState,AUTOMATIC,RTE_APPL_DATA) data);


typedef struct Rte_PDS_SWCHlaAdapt_SRI_VehicleState_R /* [Satisfies_rte sws 3731] */
{
	/*
	 *Rte Read <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_ReadFP_SWCHlaAdapt_SRI_VehicleState_DEPVehicleState Read_DEPVehicleState;

} Rte_PDS_SWCHlaAdapt_SRI_VehicleState_R;



typedef P2FUNC(Rte_ModeType_EcuM_Mode,RTE_CODE,Rte_ModeFP_SWCHlaAdapt_EcuM_CurrentMode_currentMode)(void);


typedef struct Rte_PDS_SWCHlaAdapt_EcuM_CurrentMode_R /* [Satisfies_rte sws 3731] */
{
	/*
	 *Rte Mode <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_ModeFP_SWCHlaAdapt_EcuM_CurrentMode_currentMode Mode_currentMode;

} Rte_PDS_SWCHlaAdapt_EcuM_CurrentMode_R;




/*
 * Port Data Section (PDS) types for SW-C: SWCImageCtrl
 */

typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_WriteFP_SWCImageCtrl_SRI_IcImageCharacteristics_DEPIcImageCharacteristics)(CONSTP2VAR(RTE_t_IC_S_ImageCharacteristics,AUTOMATIC,RTE_APPL_DATA) data);

typedef struct Rte_PDS_SWCImageCtrl_SRI_IcImageCharacteristics_P /* [Satisfies_rte sws 3731]  */
{
	/*
	 *Rte Write <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_WriteFP_SWCImageCtrl_SRI_IcImageCharacteristics_DEPIcImageCharacteristics Write_DEPIcImageCharacteristics;

} Rte_PDS_SWCImageCtrl_SRI_IcImageCharacteristics_P;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_WriteFP_SWCImageCtrl_SRI_IcStatisticalResults_DEPIcStatisticalResults)(CONSTP2VAR(RTE_t_IC_S_StatisticalResults,AUTOMATIC,RTE_APPL_DATA) data);

typedef struct Rte_PDS_SWCImageCtrl_SRI_IcStatisticalResults_P /* [Satisfies_rte sws 3731]  */
{
	/*
	 *Rte Write <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_WriteFP_SWCImageCtrl_SRI_IcStatisticalResults_DEPIcStatisticalResults Write_DEPIcStatisticalResults;

} Rte_PDS_SWCImageCtrl_SRI_IcStatisticalResults_P;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_WriteFP_SWCImageCtrl_SRI_AlgoVersion_DEPAlgoVersion)(CONSTP2VAR(RTE_t_AlgoVersion,AUTOMATIC,RTE_APPL_DATA) data);

typedef struct Rte_PDS_SWCImageCtrl_SRI_AlgoVersion_P /* [Satisfies_rte sws 3731]  */
{
	/*
	 *Rte Write <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_WriteFP_SWCImageCtrl_SRI_AlgoVersion_DEPAlgoVersion Write_DEPAlgoVersion;

} Rte_PDS_SWCImageCtrl_SRI_AlgoVersion_P;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_CallFP_SWCImageCtrl_CSI_HlaSetImageChar_OPHlaSetImageChar)(INOUT P2VAR(RTE_t_IC_S_ImageCharacteristics,AUTOMATIC,RTE_APPL_DATA) ImageChar );


typedef struct Rte_PDS_SWCImageCtrl_CSI_HlaSetImageChar_R /* [Satisfies_rte sws 3731] */
{
	/*
	 *Rte Call <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_CallFP_SWCImageCtrl_CSI_HlaSetImageChar_OPHlaSetImageChar Call_OPHlaSetImageChar;

} Rte_PDS_SWCImageCtrl_CSI_HlaSetImageChar_R;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_CallFP_SWCImageCtrl_CSI_Timer64AdjustTimerValue_OPTimer64AdjustTimerValue)(IN VAR(sint64,AUTOMATIC) offset );


typedef struct Rte_PDS_SWCImageCtrl_CSI_Timer64AdjustTimerValue_R /* [Satisfies_rte sws 3731] */
{
	/*
	 *Rte Call <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_CallFP_SWCImageCtrl_CSI_Timer64AdjustTimerValue_OPTimer64AdjustTimerValue Call_OPTimer64AdjustTimerValue;

} Rte_PDS_SWCImageCtrl_CSI_Timer64AdjustTimerValue_R;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_CallFP_SWCImageCtrl_CSI_Timer64GetTimerValue_OPTimer64GetTimerValue)(OUT P2VAR(uint64,AUTOMATIC,RTE_APPL_DATA) timerValue );


typedef struct Rte_PDS_SWCImageCtrl_CSI_Timer64GetTimerValue_R /* [Satisfies_rte sws 3731] */
{
	/*
	 *Rte Call <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_CallFP_SWCImageCtrl_CSI_Timer64GetTimerValue_OPTimer64GetTimerValue Call_OPTimer64GetTimerValue;

} Rte_PDS_SWCImageCtrl_CSI_Timer64GetTimerValue_R;



typedef P2FUNC(Rte_ModeType_EcuM_Mode,RTE_CODE,Rte_ModeFP_SWCImageCtrl_EcuM_CurrentMode_currentMode)(void);


typedef struct Rte_PDS_SWCImageCtrl_EcuM_CurrentMode_R /* [Satisfies_rte sws 3731] */
{
	/*
	 *Rte Mode <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_ModeFP_SWCImageCtrl_EcuM_CurrentMode_currentMode Mode_currentMode;

} Rte_PDS_SWCImageCtrl_EcuM_CurrentMode_R;




/*
 * Port Data Section (PDS) types for SW-C: SWCLdAdapt
 */

typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_WriteFP_SWCLdAdapt_SRI_AlgoVersion_DEPAlgoVersion)(CONSTP2VAR(RTE_t_AlgoVersion,AUTOMATIC,RTE_APPL_DATA) data);

typedef struct Rte_PDS_SWCLdAdapt_SRI_AlgoVersion_P /* [Satisfies_rte sws 3731]  */
{
	/*
	 *Rte Write <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_WriteFP_SWCLdAdapt_SRI_AlgoVersion_DEPAlgoVersion Write_DEPAlgoVersion;

} Rte_PDS_SWCLdAdapt_SRI_AlgoVersion_P;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_ReadFP_SWCLdAdapt_SRI_AlgoDebugMode_DEPAlgoDebugMode)(CONSTP2VAR(RTE_t_eAlgoDebugMode,AUTOMATIC,RTE_APPL_DATA) data);


typedef struct Rte_PDS_SWCLdAdapt_SRI_AlgoDebugMode_R /* [Satisfies_rte sws 3731] */
{
	/*
	 *Rte Read <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_ReadFP_SWCLdAdapt_SRI_AlgoDebugMode_DEPAlgoDebugMode Read_DEPAlgoDebugMode;

} Rte_PDS_SWCLdAdapt_SRI_AlgoDebugMode_R;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_ReadFP_SWCLdAdapt_SRI_IcImageCharacteristics_DEPIcImageCharacteristics)(CONSTP2VAR(RTE_t_IC_S_ImageCharacteristics,AUTOMATIC,RTE_APPL_DATA) data);


typedef struct Rte_PDS_SWCLdAdapt_SRI_IcImageCharacteristics_R /* [Satisfies_rte sws 3731] */
{
	/*
	 *Rte Read <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_ReadFP_SWCLdAdapt_SRI_IcImageCharacteristics_DEPIcImageCharacteristics Read_DEPIcImageCharacteristics;

} Rte_PDS_SWCLdAdapt_SRI_IcImageCharacteristics_R;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_ReadFP_SWCLdAdapt_SRI_IcStatisticalResults_DEPIcStatisticalResults)(CONSTP2VAR(RTE_t_IC_S_StatisticalResults,AUTOMATIC,RTE_APPL_DATA) data);


typedef struct Rte_PDS_SWCLdAdapt_SRI_IcStatisticalResults_R /* [Satisfies_rte sws 3731] */
{
	/*
	 *Rte Read <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_ReadFP_SWCLdAdapt_SRI_IcStatisticalResults_DEPIcStatisticalResults Read_DEPIcStatisticalResults;

} Rte_PDS_SWCLdAdapt_SRI_IcStatisticalResults_R;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_ReadFP_SWCLdAdapt_SRI_LdpWarnRq_DEPLdpWarnRq)(CONSTP2VAR(LDPWarnRq_t,AUTOMATIC,RTE_APPL_DATA) data);


typedef struct Rte_PDS_SWCLdAdapt_SRI_LdpWarnRq_R /* [Satisfies_rte sws 3731] */
{
	/*
	 *Rte Read <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_ReadFP_SWCLdAdapt_SRI_LdpWarnRq_DEPLdpWarnRq Read_DEPLdpWarnRq;

} Rte_PDS_SWCLdAdapt_SRI_LdpWarnRq_R;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_CallFP_SWCLdAdapt_CSI_NormLdStoreOnlineCali_OPNormLdStoreOnlineCali)(INOUT P2VAR(S_MonoOnlineCalibration,AUTOMATIC,RTE_APPL_DATA) OnlineCali );


typedef struct Rte_PDS_SWCLdAdapt_CSI_NormLdStoreOnlineCali_R /* [Satisfies_rte sws 3731] */
{
	/*
	 *Rte Call <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_CallFP_SWCLdAdapt_CSI_NormLdStoreOnlineCali_OPNormLdStoreOnlineCali Call_OPNormLdStoreOnlineCali;

} Rte_PDS_SWCLdAdapt_CSI_NormLdStoreOnlineCali_R;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_CallFP_SWCLdAdapt_CSI_Timer64GetTimerValue_OPTimer64GetTimerValue)(OUT P2VAR(uint64,AUTOMATIC,RTE_APPL_DATA) timerValue );


typedef struct Rte_PDS_SWCLdAdapt_CSI_Timer64GetTimerValue_R /* [Satisfies_rte sws 3731] */
{
	/*
	 *Rte Call <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_CallFP_SWCLdAdapt_CSI_Timer64GetTimerValue_OPTimer64GetTimerValue Call_OPTimer64GetTimerValue;

} Rte_PDS_SWCLdAdapt_CSI_Timer64GetTimerValue_R;



typedef P2FUNC(Rte_ModeType_EcuM_Mode,RTE_CODE,Rte_ModeFP_SWCLdAdapt_EcuM_CurrentMode_currentMode)(void);


typedef struct Rte_PDS_SWCLdAdapt_EcuM_CurrentMode_R /* [Satisfies_rte sws 3731] */
{
	/*
	 *Rte Mode <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_ModeFP_SWCLdAdapt_EcuM_CurrentMode_currentMode Mode_currentMode;

} Rte_PDS_SWCLdAdapt_EcuM_CurrentMode_R;




/*
 * Port Data Section (PDS) types for SW-C: SWCMapAdapt
 */

typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_WriteFP_SWCMapAdapt_SRI_AlgoVersion_DEPAlgoVersion)(CONSTP2VAR(RTE_t_AlgoVersion,AUTOMATIC,RTE_APPL_DATA) data);

typedef struct Rte_PDS_SWCMapAdapt_SRI_AlgoVersion_P /* [Satisfies_rte sws 3731]  */
{
	/*
	 *Rte Write <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_WriteFP_SWCMapAdapt_SRI_AlgoVersion_DEPAlgoVersion Write_DEPAlgoVersion;

} Rte_PDS_SWCMapAdapt_SRI_AlgoVersion_P;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_WriteFP_SWCMapAdapt_SRI_VehicleAlgoTaskState_DEP_VehicleAlgoTaskState)(VAR(RTE_t_SYSMultiRunTaskState,AUTOMATIC) data);

typedef struct Rte_PDS_SWCMapAdapt_SRI_VehicleAlgoTaskState_P /* [Satisfies_rte sws 3731]  */
{
	/*
	 *Rte Write <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_WriteFP_SWCMapAdapt_SRI_VehicleAlgoTaskState_DEP_VehicleAlgoTaskState Write_DEP_VehicleAlgoTaskState;

} Rte_PDS_SWCMapAdapt_SRI_VehicleAlgoTaskState_P;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_ReadFP_SWCMapAdapt_SRI_AlgoDebugMode_DEPAlgoDebugMode)(CONSTP2VAR(RTE_t_eAlgoDebugMode,AUTOMATIC,RTE_APPL_DATA) data);


typedef struct Rte_PDS_SWCMapAdapt_SRI_AlgoDebugMode_R /* [Satisfies_rte sws 3731] */
{
	/*
	 *Rte Read <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_ReadFP_SWCMapAdapt_SRI_AlgoDebugMode_DEPAlgoDebugMode Read_DEPAlgoDebugMode;

} Rte_PDS_SWCMapAdapt_SRI_AlgoDebugMode_R;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_CallFP_SWCMapAdapt_CSI_Timer64GetTimerValue_OPTimer64GetTimerValue)(OUT P2VAR(uint64,AUTOMATIC,RTE_APPL_DATA) timerValue );


typedef struct Rte_PDS_SWCMapAdapt_CSI_Timer64GetTimerValue_R /* [Satisfies_rte sws 3731] */
{
	/*
	 *Rte Call <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_CallFP_SWCMapAdapt_CSI_Timer64GetTimerValue_OPTimer64GetTimerValue Call_OPTimer64GetTimerValue;

} Rte_PDS_SWCMapAdapt_CSI_Timer64GetTimerValue_R;



typedef P2FUNC(Rte_ModeType_EcuM_Mode,RTE_CODE,Rte_ModeFP_SWCMapAdapt_EcuM_CurrentMode_currentMode)(void);


typedef struct Rte_PDS_SWCMapAdapt_EcuM_CurrentMode_R /* [Satisfies_rte sws 3731] */
{
	/*
	 *Rte Mode <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_ModeFP_SWCMapAdapt_EcuM_CurrentMode_currentMode Mode_currentMode;

} Rte_PDS_SWCMapAdapt_EcuM_CurrentMode_R;




/*
 * Port Data Section (PDS) types for SW-C: SWCNorm
 */

typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_WriteFP_SWCNorm_SRI_HeadlightState_DEP_HeadlightState)(CONSTP2VAR(RTE_HLA_t_HeadlightState,AUTOMATIC,RTE_APPL_DATA) data);

typedef struct Rte_PDS_SWCNorm_SRI_HeadlightState_P /* [Satisfies_rte sws 3731]  */
{
	/*
	 *Rte Write <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_WriteFP_SWCNorm_SRI_HeadlightState_DEP_HeadlightState Write_DEP_HeadlightState;

} Rte_PDS_SWCNorm_SRI_HeadlightState_P;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_WriteFP_SWCNorm_SRI_AldwLdpCfgBits_DEPAldwLdpCfgBits)(CONSTP2VAR(RTE_t_AldwLdpCfgBits,AUTOMATIC,RTE_APPL_DATA) data);

typedef struct Rte_PDS_SWCNorm_SRI_AldwLdpCfgBits_P /* [Satisfies_rte sws 3731]  */
{
	/*
	 *Rte Write <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_WriteFP_SWCNorm_SRI_AldwLdpCfgBits_DEPAldwLdpCfgBits Write_DEPAldwLdpCfgBits;

} Rte_PDS_SWCNorm_SRI_AldwLdpCfgBits_P;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_WriteFP_SWCNorm_SRI_HlaAvailability_DEPHlaAvailability)(CONSTP2VAR(RTE_HLA_t_Availability,AUTOMATIC,RTE_APPL_DATA) data);

typedef struct Rte_PDS_SWCNorm_SRI_HlaAvailability_P /* [Satisfies_rte sws 3731]  */
{
	/*
	 *Rte Write <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_WriteFP_SWCNorm_SRI_HlaAvailability_DEPHlaAvailability Write_DEPHlaAvailability;

} Rte_PDS_SWCNorm_SRI_HlaAvailability_P;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_WriteFP_SWCNorm_SRI_LdpWarnRq_DEPLdpWarnRq)(CONSTP2VAR(LDPWarnRq_t,AUTOMATIC,RTE_APPL_DATA) data);

typedef struct Rte_PDS_SWCNorm_SRI_LdpWarnRq_P /* [Satisfies_rte sws 3731]  */
{
	/*
	 *Rte Write <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_WriteFP_SWCNorm_SRI_LdpWarnRq_DEPLdpWarnRq Write_DEPLdpWarnRq;

} Rte_PDS_SWCNorm_SRI_LdpWarnRq_P;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_WriteFP_SWCNorm_SRI_HlaNvObject_DEP_HlaNvObject)(CONSTP2VAR(RTE_HLAF_t_NightView,AUTOMATIC,RTE_APPL_DATA) data);

typedef struct Rte_PDS_SWCNorm_SRI_HlaNvObject_P /* [Satisfies_rte sws 3731]  */
{
	/*
	 *Rte Write <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_WriteFP_SWCNorm_SRI_HlaNvObject_DEP_HlaNvObject Write_DEP_HlaNvObject;

} Rte_PDS_SWCNorm_SRI_HlaNvObject_P;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_WriteFP_SWCNorm_SRI_SysExtTester_DidA_ExtTest_Pres)(VAR(DC_BOOL,AUTOMATIC) data);

typedef struct Rte_PDS_SWCNorm_SRI_SysExtTester_P /* [Satisfies_rte sws 3731]  */
{
	/*
	 *Rte Write <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_WriteFP_SWCNorm_SRI_SysExtTester_DidA_ExtTest_Pres Write_DidA_ExtTest_Pres;

} Rte_PDS_SWCNorm_SRI_SysExtTester_P;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_WriteFP_SWCNorm_SRI_SysIgnition_Ign_Stat)(CONSTP2VAR(SwcDemSc_IgnStat_GrpType,AUTOMATIC,RTE_APPL_DATA) data);

typedef struct Rte_PDS_SWCNorm_SRI_SysIgnition_P /* [Satisfies_rte sws 3731]  */
{
	/*
	 *Rte Write <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_WriteFP_SWCNorm_SRI_SysIgnition_Ign_Stat Write_Ign_Stat;

} Rte_PDS_SWCNorm_SRI_SysIgnition_P;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_WriteFP_SWCNorm_SRI_SysOdometer_Odo)(VAR(c24_km_0_999999k9_0k1,AUTOMATIC) data);

typedef struct Rte_PDS_SWCNorm_SRI_SysOdometer_P /* [Satisfies_rte sws 3731]  */
{
	/*
	 *Rte Write <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_WriteFP_SWCNorm_SRI_SysOdometer_Odo Write_Odo;

} Rte_PDS_SWCNorm_SRI_SysOdometer_P;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_WriteFP_SWCNorm_SRI_SysTransportationMode_PN14_TransMd_Stat)(VAR(c02_TransMd_Stat,AUTOMATIC) data);

typedef struct Rte_PDS_SWCNorm_SRI_SysTransportationMode_P /* [Satisfies_rte sws 3731]  */
{
	/*
	 *Rte Write <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_WriteFP_SWCNorm_SRI_SysTransportationMode_PN14_TransMd_Stat Write_PN14_TransMd_Stat;

} Rte_PDS_SWCNorm_SRI_SysTransportationMode_P;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_WriteFP_SWCNorm_SRI_SysVehicleEngineStartup_Eng_Rs_EngCtrl)(CONSTP2VAR(SwcDemSc_EngRsEngCtrl_GrpType,AUTOMATIC,RTE_APPL_DATA) data);

typedef struct Rte_PDS_SWCNorm_SRI_SysVehicleEngineStartup_P /* [Satisfies_rte sws 3731]  */
{
	/*
	 *Rte Write <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_WriteFP_SWCNorm_SRI_SysVehicleEngineStartup_Eng_Rs_EngCtrl Write_Eng_Rs_EngCtrl;

} Rte_PDS_SWCNorm_SRI_SysVehicleEngineStartup_P;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_WriteFP_SWCNorm_SRI_SysVoltage_PN14_SupBat_Stat)(CONSTP2VAR(SwcDemSc_PN14SupBatStat_GrpType,AUTOMATIC,RTE_APPL_DATA) data);

typedef struct Rte_PDS_SWCNorm_SRI_SysVoltage_P /* [Satisfies_rte sws 3731]  */
{
	/*
	 *Rte Write <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_WriteFP_SWCNorm_SRI_SysVoltage_PN14_SupBat_Stat Write_PN14_SupBat_Stat;

} Rte_PDS_SWCNorm_SRI_SysVoltage_P;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_WriteFP_SWCNorm_SRI_TsaDate_DEPTsaDate)(CONSTP2VAR(RTE_t_TSAIFInputDate,AUTOMATIC,RTE_APPL_DATA) data);

typedef struct Rte_PDS_SWCNorm_SRI_TsaDate_P /* [Satisfies_rte sws 3731]  */
{
	/*
	 *Rte Write <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_WriteFP_SWCNorm_SRI_TsaDate_DEPTsaDate Write_DEPTsaDate;

} Rte_PDS_SWCNorm_SRI_TsaDate_P;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_WriteFP_SWCNorm_SRI_TsaModeSelect_DEPTsaModeSelect)(VAR(RTE_t_TSAIFModeSelect,AUTOMATIC) data);

typedef struct Rte_PDS_SWCNorm_SRI_TsaModeSelect_P /* [Satisfies_rte sws 3731]  */
{
	/*
	 *Rte Write <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_WriteFP_SWCNorm_SRI_TsaModeSelect_DEPTsaModeSelect Write_DEPTsaModeSelect;

} Rte_PDS_SWCNorm_SRI_TsaModeSelect_P;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_WriteFP_SWCNorm_SRI_TsaTime_DEPTsaTime)(CONSTP2VAR(RTE_t_TSAIFInputTime,AUTOMATIC,RTE_APPL_DATA) data);

typedef struct Rte_PDS_SWCNorm_SRI_TsaTime_P /* [Satisfies_rte sws 3731]  */
{
	/*
	 *Rte Write <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_WriteFP_SWCNorm_SRI_TsaTime_DEPTsaTime Write_DEPTsaTime;

} Rte_PDS_SWCNorm_SRI_TsaTime_P;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_WriteFP_SWCNorm_SRI_VehSpdDisp_DEP_VehSpdDisp)(CONSTP2VAR(RTE_t_VehSpdDisp,AUTOMATIC,RTE_APPL_DATA) data);

typedef struct Rte_PDS_SWCNorm_SRI_VehSpdDisp_P /* [Satisfies_rte sws 3731]  */
{
	/*
	 *Rte Write <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_WriteFP_SWCNorm_SRI_VehSpdDisp_DEP_VehSpdDisp Write_DEP_VehSpdDisp;

} Rte_PDS_SWCNorm_SRI_VehSpdDisp_P;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_WriteFP_SWCNorm_SRI_VehicleState_DEPVehicleState)(CONSTP2VAR(RTE_HLA_t_VehicleState,AUTOMATIC,RTE_APPL_DATA) data);

typedef struct Rte_PDS_SWCNorm_SRI_VehicleState_P /* [Satisfies_rte sws 3731]  */
{
	/*
	 *Rte Write <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_WriteFP_SWCNorm_SRI_VehicleState_DEPVehicleState Write_DEPVehicleState;

} Rte_PDS_SWCNorm_SRI_VehicleState_P;



typedef P2FUNC(Rte_ModeType_EcuM_Mode,RTE_CODE,Rte_ModeFP_SWCNorm_EcuM_CurrentMode_currentMode)(void);


typedef struct Rte_PDS_SWCNorm_EcuM_CurrentMode_R /* [Satisfies_rte sws 3731] */
{
	/*
	 *Rte Mode <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_ModeFP_SWCNorm_EcuM_CurrentMode_currentMode Mode_currentMode;

} Rte_PDS_SWCNorm_EcuM_CurrentMode_R;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_CallFP_SWCNorm_CSI_BswGetAdcData_OPGetAdcData)(IN VAR(uint8,AUTOMATIC) AdcChannel, OUT P2VAR(float32,AUTOMATIC,RTE_APPL_DATA) CalcVal, OUT P2VAR(uint32,AUTOMATIC,RTE_APPL_DATA) Timestamp );


typedef struct Rte_PDS_SWCNorm_CSI_BswGetAdcData_R /* [Satisfies_rte sws 3731] */
{
	/*
	 *Rte Call <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_CallFP_SWCNorm_CSI_BswGetAdcData_OPGetAdcData Call_OPGetAdcData;

} Rte_PDS_SWCNorm_CSI_BswGetAdcData_R;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_ReadFP_SWCNorm_SRI_AlgoVersion_DEPAlgoVersion)(CONSTP2VAR(RTE_t_AlgoVersion,AUTOMATIC,RTE_APPL_DATA) data);


typedef struct Rte_PDS_SWCNorm_SRI_AlgoVersion_R /* [Satisfies_rte sws 3731] */
{
	/*
	 *Rte Read <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_ReadFP_SWCNorm_SRI_AlgoVersion_DEPAlgoVersion Read_DEPAlgoVersion;

} Rte_PDS_SWCNorm_SRI_AlgoVersion_R;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_ReadFP_SWCNorm_SRI_CaliPatternPosition_DEP_CaliPatternPosition)(CONSTP2VAR(RTE_t_DiagPatternPosition,AUTOMATIC,RTE_APPL_DATA) data);


typedef struct Rte_PDS_SWCNorm_SRI_CaliPatternPosition_R /* [Satisfies_rte sws 3731] */
{
	/*
	 *Rte Read <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_ReadFP_SWCNorm_SRI_CaliPatternPosition_DEP_CaliPatternPosition Read_DEP_CaliPatternPosition;

} Rte_PDS_SWCNorm_SRI_CaliPatternPosition_R;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_ReadFP_SWCNorm_SRI_AlgoDebugMode_DEPAlgoDebugMode)(CONSTP2VAR(RTE_t_eAlgoDebugMode,AUTOMATIC,RTE_APPL_DATA) data);


typedef struct Rte_PDS_SWCNorm_SRI_AlgoDebugMode_R /* [Satisfies_rte sws 3731] */
{
	/*
	 *Rte Read <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_ReadFP_SWCNorm_SRI_AlgoDebugMode_DEPAlgoDebugMode Read_DEPAlgoDebugMode;

} Rte_PDS_SWCNorm_SRI_AlgoDebugMode_R;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_ReadFP_SWCNorm_SRI_GbAoiBlockage_DEPGbAoiBlockage)(VAR(RTE_GB_t_AOIBlockage_array,AUTOMATIC) data);


typedef struct Rte_PDS_SWCNorm_SRI_GbAoiBlockage_R /* [Satisfies_rte sws 3731] */
{
	/*
	 *Rte Read <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_ReadFP_SWCNorm_SRI_GbAoiBlockage_DEPGbAoiBlockage Read_DEPGbAoiBlockage;

} Rte_PDS_SWCNorm_SRI_GbAoiBlockage_R;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_ReadFP_SWCNorm_SRI_IcImageCharacteristics_DEPIcImageCharacteristics)(CONSTP2VAR(RTE_t_IC_S_ImageCharacteristics,AUTOMATIC,RTE_APPL_DATA) data);


typedef struct Rte_PDS_SWCNorm_SRI_IcImageCharacteristics_R /* [Satisfies_rte sws 3731] */
{
	/*
	 *Rte Read <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_ReadFP_SWCNorm_SRI_IcImageCharacteristics_DEPIcImageCharacteristics Read_DEPIcImageCharacteristics;

} Rte_PDS_SWCNorm_SRI_IcImageCharacteristics_R;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_ReadFP_SWCNorm_SRI_IcParameter_DEP_IcParameter)(CONSTP2VAR(NvM_t_ICParameter,AUTOMATIC,RTE_APPL_DATA) data);


typedef struct Rte_PDS_SWCNorm_SRI_IcParameter_R /* [Satisfies_rte sws 3731] */
{
	/*
	 *Rte Read <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_ReadFP_SWCNorm_SRI_IcParameter_DEP_IcParameter Read_DEP_IcParameter;

} Rte_PDS_SWCNorm_SRI_IcParameter_R;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_ReadFP_SWCNorm_SRI_IcStatisticalResults_DEPIcStatisticalResults)(CONSTP2VAR(RTE_t_IC_S_StatisticalResults,AUTOMATIC,RTE_APPL_DATA) data);


typedef struct Rte_PDS_SWCNorm_SRI_IcStatisticalResults_R /* [Satisfies_rte sws 3731] */
{
	/*
	 *Rte Read <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_ReadFP_SWCNorm_SRI_IcStatisticalResults_DEPIcStatisticalResults Read_DEPIcStatisticalResults;

} Rte_PDS_SWCNorm_SRI_IcStatisticalResults_R;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_ReadFP_SWCNorm_SRI_HlaNvObject_DEP_HlaNvObject)(CONSTP2VAR(RTE_HLAF_t_NightView,AUTOMATIC,RTE_APPL_DATA) data);


typedef struct Rte_PDS_SWCNorm_SRI_HlaNvObject_R /* [Satisfies_rte sws 3731] */
{
	/*
	 *Rte Read <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_ReadFP_SWCNorm_SRI_HlaNvObject_DEP_HlaNvObject Read_DEP_HlaNvObject;

} Rte_PDS_SWCNorm_SRI_HlaNvObject_R;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_CallFP_SWCNorm_CSI_Timer64GetTimerValue_OPTimer64GetTimerValue)(OUT P2VAR(uint64,AUTOMATIC,RTE_APPL_DATA) timerValue );


typedef struct Rte_PDS_SWCNorm_CSI_Timer64GetTimerValue_R /* [Satisfies_rte sws 3731] */
{
	/*
	 *Rte Call <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_CallFP_SWCNorm_CSI_Timer64GetTimerValue_OPTimer64GetTimerValue Call_OPTimer64GetTimerValue;

} Rte_PDS_SWCNorm_CSI_Timer64GetTimerValue_R;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_CallFP_SWCNorm_NvMService_ReadBlock)(IN P2CONST(UInt8,AUTOMATIC,RTE_APPL_DATA) DstPtr );


typedef struct Rte_PDS_SWCNorm_NvMService_R /* [Satisfies_rte sws 3731] */
{
	/*
	 *Rte Call <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_CallFP_SWCNorm_NvMService_ReadBlock Call_ReadBlock;

} Rte_PDS_SWCNorm_NvMService_R;




/*
 * Port Data Section (PDS) types for SW-C: SWCTsaAdapt
 */

typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_WriteFP_SWCTsaAdapt_SRI_AlgoVersion_DEPAlgoVersion)(CONSTP2VAR(RTE_t_AlgoVersion,AUTOMATIC,RTE_APPL_DATA) data);

typedef struct Rte_PDS_SWCTsaAdapt_SRI_AlgoVersion_P /* [Satisfies_rte sws 3731]  */
{
	/*
	 *Rte Write <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_WriteFP_SWCTsaAdapt_SRI_AlgoVersion_DEPAlgoVersion Write_DEPAlgoVersion;

} Rte_PDS_SWCTsaAdapt_SRI_AlgoVersion_P;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_WriteFP_SWCTsaAdapt_SRI_TsaDispTest_DEPTsaDispTest)(VAR(RTE_t_eTSADispTest,AUTOMATIC) data);

typedef struct Rte_PDS_SWCTsaAdapt_SRI_TsaDispTest_P /* [Satisfies_rte sws 3731]  */
{
	/*
	 *Rte Write <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_WriteFP_SWCTsaAdapt_SRI_TsaDispTest_DEPTsaDispTest Write_DEPTsaDispTest;

} Rte_PDS_SWCTsaAdapt_SRI_TsaDispTest_P;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_WriteFP_SWCTsaAdapt_SRI_TsaProcessState_DEPTsaProcessState)(VAR(RTE_eTSAIFOutputProcessState,AUTOMATIC) data);

typedef struct Rte_PDS_SWCTsaAdapt_SRI_TsaProcessState_P /* [Satisfies_rte sws 3731]  */
{
	/*
	 *Rte Write <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_WriteFP_SWCTsaAdapt_SRI_TsaProcessState_DEPTsaProcessState Write_DEPTsaProcessState;

} Rte_PDS_SWCTsaAdapt_SRI_TsaProcessState_P;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_WriteFP_SWCTsaAdapt_SRI_VehicleAlgoTaskState_DEP_VehicleAlgoTaskState)(VAR(RTE_t_SYSMultiRunTaskState,AUTOMATIC) data);

typedef struct Rte_PDS_SWCTsaAdapt_SRI_VehicleAlgoTaskState_P /* [Satisfies_rte sws 3731]  */
{
	/*
	 *Rte Write <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_WriteFP_SWCTsaAdapt_SRI_VehicleAlgoTaskState_DEP_VehicleAlgoTaskState Write_DEP_VehicleAlgoTaskState;

} Rte_PDS_SWCTsaAdapt_SRI_VehicleAlgoTaskState_P;



typedef P2FUNC(Rte_ModeType_EcuM_Mode,RTE_CODE,Rte_ModeFP_SWCTsaAdapt_EcuM_CurrentMode_currentMode)(void);


typedef struct Rte_PDS_SWCTsaAdapt_EcuM_CurrentMode_R /* [Satisfies_rte sws 3731] */
{
	/*
	 *Rte Mode <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_ModeFP_SWCTsaAdapt_EcuM_CurrentMode_currentMode Mode_currentMode;

} Rte_PDS_SWCTsaAdapt_EcuM_CurrentMode_R;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_ReadFP_SWCTsaAdapt_SRI_TsaDate_DEPTsaDate)(CONSTP2VAR(RTE_t_TSAIFInputDate,AUTOMATIC,RTE_APPL_DATA) data);


typedef struct Rte_PDS_SWCTsaAdapt_SRI_TsaDate_R /* [Satisfies_rte sws 3731] */
{
	/*
	 *Rte Read <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_ReadFP_SWCTsaAdapt_SRI_TsaDate_DEPTsaDate Read_DEPTsaDate;

} Rte_PDS_SWCTsaAdapt_SRI_TsaDate_R;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_ReadFP_SWCTsaAdapt_SRI_AlgoDebugMode_DEPAlgoDebugMode)(CONSTP2VAR(RTE_t_eAlgoDebugMode,AUTOMATIC,RTE_APPL_DATA) data);


typedef struct Rte_PDS_SWCTsaAdapt_SRI_AlgoDebugMode_R /* [Satisfies_rte sws 3731] */
{
	/*
	 *Rte Read <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_ReadFP_SWCTsaAdapt_SRI_AlgoDebugMode_DEPAlgoDebugMode Read_DEPAlgoDebugMode;

} Rte_PDS_SWCTsaAdapt_SRI_AlgoDebugMode_R;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_ReadFP_SWCTsaAdapt_SRI_TsaDispTest_DEPTsaDispTest)(CONSTP2VAR(RTE_t_eTSADispTest,AUTOMATIC,RTE_APPL_DATA) data);


typedef struct Rte_PDS_SWCTsaAdapt_SRI_TsaDispTest_R /* [Satisfies_rte sws 3731] */
{
	/*
	 *Rte Read <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_ReadFP_SWCTsaAdapt_SRI_TsaDispTest_DEPTsaDispTest Read_DEPTsaDispTest;

} Rte_PDS_SWCTsaAdapt_SRI_TsaDispTest_R;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_ReadFP_SWCTsaAdapt_SRI_TsaModeSelect_DEPTsaModeSelect)(CONSTP2VAR(RTE_t_TSAIFModeSelect,AUTOMATIC,RTE_APPL_DATA) data);


typedef struct Rte_PDS_SWCTsaAdapt_SRI_TsaModeSelect_R /* [Satisfies_rte sws 3731] */
{
	/*
	 *Rte Read <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_ReadFP_SWCTsaAdapt_SRI_TsaModeSelect_DEPTsaModeSelect Read_DEPTsaModeSelect;

} Rte_PDS_SWCTsaAdapt_SRI_TsaModeSelect_R;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_ReadFP_SWCTsaAdapt_SRI_TsaTime_DEPTsaTime)(CONSTP2VAR(RTE_t_TSAIFInputTime,AUTOMATIC,RTE_APPL_DATA) data);


typedef struct Rte_PDS_SWCTsaAdapt_SRI_TsaTime_R /* [Satisfies_rte sws 3731] */
{
	/*
	 *Rte Read <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_ReadFP_SWCTsaAdapt_SRI_TsaTime_DEPTsaTime Read_DEPTsaTime;

} Rte_PDS_SWCTsaAdapt_SRI_TsaTime_R;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_CallFP_SWCTsaAdapt_CSI_Timer64GetTimerValue_OPTimer64GetTimerValue)(OUT P2VAR(uint64,AUTOMATIC,RTE_APPL_DATA) timerValue );


typedef struct Rte_PDS_SWCTsaAdapt_CSI_Timer64GetTimerValue_R /* [Satisfies_rte sws 3731] */
{
	/*
	 *Rte Call <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_CallFP_SWCTsaAdapt_CSI_Timer64GetTimerValue_OPTimer64GetTimerValue Call_OPTimer64GetTimerValue;

} Rte_PDS_SWCTsaAdapt_CSI_Timer64GetTimerValue_R;




/*
 * Port Data Section (PDS) types for SW-C: SWCVdyAdapt
 */

typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_WriteFP_SWCVdyAdapt_SRI_AlgoVersion_DEPAlgoVersion)(CONSTP2VAR(RTE_t_AlgoVersion,AUTOMATIC,RTE_APPL_DATA) data);

typedef struct Rte_PDS_SWCVdyAdapt_SRI_AlgoVersion_P /* [Satisfies_rte sws 3731]  */
{
	/*
	 *Rte Write <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_WriteFP_SWCVdyAdapt_SRI_AlgoVersion_DEPAlgoVersion Write_DEPAlgoVersion;

} Rte_PDS_SWCVdyAdapt_SRI_AlgoVersion_P;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_WriteFP_SWCVdyAdapt_SRI_VehicleAlgoTaskState_DEP_VehicleAlgoTaskState)(VAR(RTE_t_SYSMultiRunTaskState,AUTOMATIC) data);

typedef struct Rte_PDS_SWCVdyAdapt_SRI_VehicleAlgoTaskState_P /* [Satisfies_rte sws 3731]  */
{
	/*
	 *Rte Write <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_WriteFP_SWCVdyAdapt_SRI_VehicleAlgoTaskState_DEP_VehicleAlgoTaskState Write_DEP_VehicleAlgoTaskState;

} Rte_PDS_SWCVdyAdapt_SRI_VehicleAlgoTaskState_P;



typedef P2FUNC(Rte_ModeType_EcuM_Mode,RTE_CODE,Rte_ModeFP_SWCVdyAdapt_EcuM_CurrentMode_currentMode)(void);


typedef struct Rte_PDS_SWCVdyAdapt_EcuM_CurrentMode_R /* [Satisfies_rte sws 3731] */
{
	/*
	 *Rte Mode <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_ModeFP_SWCVdyAdapt_EcuM_CurrentMode_currentMode Mode_currentMode;

} Rte_PDS_SWCVdyAdapt_EcuM_CurrentMode_R;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_CallFP_SWCVdyAdapt_NvMService_ReadBlock)(IN P2CONST(UInt8,AUTOMATIC,RTE_APPL_DATA) DstPtr );
typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_CallFP_SWCVdyAdapt_NvMService_WriteBlock)(IN P2CONST(UInt8,AUTOMATIC,RTE_APPL_DATA) SrcPtr );


typedef struct Rte_PDS_SWCVdyAdapt_NvMService_R /* [Satisfies_rte sws 3731] */
{
	/*
	 *Rte Call <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_CallFP_SWCVdyAdapt_NvMService_ReadBlock Call_ReadBlock;
	Rte_CallFP_SWCVdyAdapt_NvMService_WriteBlock Call_WriteBlock;

} Rte_PDS_SWCVdyAdapt_NvMService_R;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_ReadFP_SWCVdyAdapt_SRI_AlgoDebugMode_DEPAlgoDebugMode)(CONSTP2VAR(RTE_t_eAlgoDebugMode,AUTOMATIC,RTE_APPL_DATA) data);


typedef struct Rte_PDS_SWCVdyAdapt_SRI_AlgoDebugMode_R /* [Satisfies_rte sws 3731] */
{
	/*
	 *Rte Read <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_ReadFP_SWCVdyAdapt_SRI_AlgoDebugMode_DEPAlgoDebugMode Read_DEPAlgoDebugMode;

} Rte_PDS_SWCVdyAdapt_SRI_AlgoDebugMode_R;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_CallFP_SWCVdyAdapt_CSI_Timer64GetTimerValue_OPTimer64GetTimerValue)(OUT P2VAR(uint64,AUTOMATIC,RTE_APPL_DATA) timerValue );


typedef struct Rte_PDS_SWCVdyAdapt_CSI_Timer64GetTimerValue_R /* [Satisfies_rte sws 3731] */
{
	/*
	 *Rte Call <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_CallFP_SWCVdyAdapt_CSI_Timer64GetTimerValue_OPTimer64GetTimerValue Call_OPTimer64GetTimerValue;

} Rte_PDS_SWCVdyAdapt_CSI_Timer64GetTimerValue_R;




/*
 * Port Data Section (PDS) types for SW-C: SWCVln
 */

typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_WriteFP_SWCVln_SRI_AlgoVersion_DEPAlgoVersion)(CONSTP2VAR(RTE_t_AlgoVersion,AUTOMATIC,RTE_APPL_DATA) data);

typedef struct Rte_PDS_SWCVln_SRI_AlgoVersion_P /* [Satisfies_rte sws 3731]  */
{
	/*
	 *Rte Write <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_WriteFP_SWCVln_SRI_AlgoVersion_DEPAlgoVersion Write_DEPAlgoVersion;

} Rte_PDS_SWCVln_SRI_AlgoVersion_P;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_WriteFP_SWCVln_SRI_ClearanceMeasurement_DEPClearanceMeasurement)(VAR(uint32,AUTOMATIC) data);

typedef struct Rte_PDS_SWCVln_SRI_ClearanceMeasurement_P /* [Satisfies_rte sws 3731]  */
{
	/*
	 *Rte Write <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_WriteFP_SWCVln_SRI_ClearanceMeasurement_DEPClearanceMeasurement Write_DEPClearanceMeasurement;

} Rte_PDS_SWCVln_SRI_ClearanceMeasurement_P;



typedef P2FUNC(Rte_ModeType_EcuM_Mode,RTE_CODE,Rte_ModeFP_SWCVln_EcuM_CurrentMode_currentMode)(void);


typedef struct Rte_PDS_SWCVln_EcuM_CurrentMode_R /* [Satisfies_rte sws 3731] */
{
	/*
	 *Rte Mode <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_ModeFP_SWCVln_EcuM_CurrentMode_currentMode Mode_currentMode;

} Rte_PDS_SWCVln_EcuM_CurrentMode_R;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_ReadFP_SWCVln_SRI_AlgoDebugMode_DEPAlgoDebugMode)(CONSTP2VAR(RTE_t_eAlgoDebugMode,AUTOMATIC,RTE_APPL_DATA) data);


typedef struct Rte_PDS_SWCVln_SRI_AlgoDebugMode_R /* [Satisfies_rte sws 3731] */
{
	/*
	 *Rte Read <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_ReadFP_SWCVln_SRI_AlgoDebugMode_DEPAlgoDebugMode Read_DEPAlgoDebugMode;

} Rte_PDS_SWCVln_SRI_AlgoDebugMode_R;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_CallFP_SWCVln_CSI_Timer64GetTimerValue_OPTimer64GetTimerValue)(OUT P2VAR(uint64,AUTOMATIC,RTE_APPL_DATA) timerValue );


typedef struct Rte_PDS_SWCVln_CSI_Timer64GetTimerValue_R /* [Satisfies_rte sws 3731] */
{
	/*
	 *Rte Call <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_CallFP_SWCVln_CSI_Timer64GetTimerValue_OPTimer64GetTimerValue Call_OPTimer64GetTimerValue;

} Rte_PDS_SWCVln_CSI_Timer64GetTimerValue_R;




/*
 * Port Data Section (PDS) types for SW-C: SwcDemSc
 */

typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_WriteFP_SwcDemSc_SRI_ControlDTCStatus_DEPCurDemCtrlDTCSetting)(VAR(SwcDemSc_ScStatusType,AUTOMATIC) data);

typedef struct Rte_PDS_SwcDemSc_SRI_ControlDTCStatus_P /* [Satisfies_rte sws 3731]  */
{
	/*
	 *Rte Write <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_WriteFP_SwcDemSc_SRI_ControlDTCStatus_DEPCurDemCtrlDTCSetting Write_DEPCurDemCtrlDTCSetting;

} Rte_PDS_SwcDemSc_SRI_ControlDTCStatus_P;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_CallFP_SwcDemSc_EnableCondition_SetEnableCondition)(IN VAR(UInt8,AUTOMATIC) parg0, IN VAR(Boolean,AUTOMATIC) ConditionFulfilled );


typedef struct Rte_PDS_SwcDemSc_EnableCondition_R /* [Satisfies_rte sws 3731] */
{
	/*
	 *Rte Call <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_CallFP_SwcDemSc_EnableCondition_SetEnableCondition Call_SetEnableCondition;

} Rte_PDS_SwcDemSc_EnableCondition_R;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_CallFP_SwcDemSc_IndicatorStatus_GetIndicatorStatus)(IN VAR(UInt8,AUTOMATIC) parg0, OUT P2VAR(Dem_IndicatorStatusType,AUTOMATIC,RTE_APPL_DATA) IndicatorStatus );


typedef struct Rte_PDS_SwcDemSc_IndicatorStatus_R /* [Satisfies_rte sws 3731] */
{
	/*
	 *Rte Call <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_CallFP_SwcDemSc_IndicatorStatus_GetIndicatorStatus Call_GetIndicatorStatus;

} Rte_PDS_SwcDemSc_IndicatorStatus_R;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_CallFP_SwcDemSc_OperationCycle_SetOperationCycleState)(IN VAR(Dem_OperationCycleIdType,AUTOMATIC) parg0, IN VAR(Dem_OperationCycleStateType,AUTOMATIC) CycleState );


typedef struct Rte_PDS_SwcDemSc_OperationCycle_R /* [Satisfies_rte sws 3731] */
{
	/*
	 *Rte Call <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_CallFP_SwcDemSc_OperationCycle_SetOperationCycleState Call_SetOperationCycleState;

} Rte_PDS_SwcDemSc_OperationCycle_R;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_ReadFP_SwcDemSc_SRI_LocIgnition_Ign_Stat)(CONSTP2VAR(c03_ISw_Stat,AUTOMATIC,RTE_APPL_DATA) data);


typedef struct Rte_PDS_SwcDemSc_SRI_LocIgnition_R /* [Satisfies_rte sws 3731] */
{
	/*
	 *Rte Read <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_ReadFP_SwcDemSc_SRI_LocIgnition_Ign_Stat Read_Ign_Stat;

} Rte_PDS_SwcDemSc_SRI_LocIgnition_R;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_ReadFP_SwcDemSc_SRI_LocIoDevice_Io_Stat)(CONSTP2VAR(SwcDemSc_StdReturnType,AUTOMATIC,RTE_APPL_DATA) data);


typedef struct Rte_PDS_SwcDemSc_SRI_LocIoDevice_R /* [Satisfies_rte sws 3731] */
{
	/*
	 *Rte Read <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_ReadFP_SwcDemSc_SRI_LocIoDevice_Io_Stat Read_Io_Stat;

} Rte_PDS_SwcDemSc_SRI_LocIoDevice_R;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_ReadFP_SwcDemSc_SRI_LocVoltage_SupBat_Volt)(CONSTP2VAR(c08_V_0_25k4_0k1,AUTOMATIC,RTE_APPL_DATA) data);


typedef struct Rte_PDS_SwcDemSc_SRI_LocVoltage_R /* [Satisfies_rte sws 3731] */
{
	/*
	 *Rte Read <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_ReadFP_SwcDemSc_SRI_LocVoltage_SupBat_Volt Read_SupBat_Volt;

} Rte_PDS_SwcDemSc_SRI_LocVoltage_R;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_ReadFP_SwcDemSc_SRI_SysExtTester_DidA_ExtTest_Pres)(CONSTP2VAR(DC_BOOL,AUTOMATIC,RTE_APPL_DATA) data);


typedef struct Rte_PDS_SwcDemSc_SRI_SysExtTester_R /* [Satisfies_rte sws 3731] */
{
	/*
	 *Rte Read <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_ReadFP_SwcDemSc_SRI_SysExtTester_DidA_ExtTest_Pres Read_DidA_ExtTest_Pres;

} Rte_PDS_SwcDemSc_SRI_SysExtTester_R;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_ReadFP_SwcDemSc_SRI_SysIgnition_Ign_Stat)(CONSTP2VAR(SwcDemSc_IgnStat_GrpType,AUTOMATIC,RTE_APPL_DATA) data);


typedef struct Rte_PDS_SwcDemSc_SRI_SysIgnition_R /* [Satisfies_rte sws 3731] */
{
	/*
	 *Rte Read <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_ReadFP_SwcDemSc_SRI_SysIgnition_Ign_Stat Read_Ign_Stat;

} Rte_PDS_SwcDemSc_SRI_SysIgnition_R;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_ReadFP_SwcDemSc_SRI_SysOdometer_Odo)(CONSTP2VAR(c24_km_0_999999k9_0k1,AUTOMATIC,RTE_APPL_DATA) data);


typedef struct Rte_PDS_SwcDemSc_SRI_SysOdometer_R /* [Satisfies_rte sws 3731] */
{
	/*
	 *Rte Read <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_ReadFP_SwcDemSc_SRI_SysOdometer_Odo Read_Odo;

} Rte_PDS_SwcDemSc_SRI_SysOdometer_R;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_ReadFP_SwcDemSc_SRI_SysTransportationMode_PN14_TransMd_Stat)(CONSTP2VAR(c02_TransMd_Stat,AUTOMATIC,RTE_APPL_DATA) data);


typedef struct Rte_PDS_SwcDemSc_SRI_SysTransportationMode_R /* [Satisfies_rte sws 3731] */
{
	/*
	 *Rte Read <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_ReadFP_SwcDemSc_SRI_SysTransportationMode_PN14_TransMd_Stat Read_PN14_TransMd_Stat;

} Rte_PDS_SwcDemSc_SRI_SysTransportationMode_R;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_ReadFP_SwcDemSc_SRI_SysVehicleEngineStartup_Eng_Rs_EngCtrl)(CONSTP2VAR(SwcDemSc_EngRsEngCtrl_GrpType,AUTOMATIC,RTE_APPL_DATA) data);


typedef struct Rte_PDS_SwcDemSc_SRI_SysVehicleEngineStartup_R /* [Satisfies_rte sws 3731] */
{
	/*
	 *Rte Read <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_ReadFP_SwcDemSc_SRI_SysVehicleEngineStartup_Eng_Rs_EngCtrl Read_Eng_Rs_EngCtrl;

} Rte_PDS_SwcDemSc_SRI_SysVehicleEngineStartup_R;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_ReadFP_SwcDemSc_SRI_SysVoltage_PN14_SupBat_Stat)(CONSTP2VAR(SwcDemSc_PN14SupBatStat_GrpType,AUTOMATIC,RTE_APPL_DATA) data);


typedef struct Rte_PDS_SwcDemSc_SRI_SysVoltage_R /* [Satisfies_rte sws 3731] */
{
	/*
	 *Rte Read <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_ReadFP_SwcDemSc_SRI_SysVoltage_PN14_SupBat_Stat Read_PN14_SupBat_Stat;

} Rte_PDS_SwcDemSc_SRI_SysVoltage_R;




/*
 * Port Data Section (PDS) types for SW-C: SwcRoElite
 */

typedef P2FUNC(Rte_ModeType_EcuM_Mode,RTE_CODE,Rte_ModeFP_SwcRoElite_EcuM_CurrentMode_currentMode)(void);


typedef struct Rte_PDS_SwcRoElite_EcuM_CurrentMode_R /* [Satisfies_rte sws 3731] */
{
	/*
	 *Rte Mode <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_ModeFP_SwcRoElite_EcuM_CurrentMode_currentMode Mode_currentMode;

} Rte_PDS_SwcRoElite_EcuM_CurrentMode_R;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_CallFP_SwcRoElite_CSI_NormSendRoE_OPSendRoE)(INOUT P2VAR(SwcRoElite_MsgType,AUTOMATIC,RTE_APPL_DATA) data );


typedef struct Rte_PDS_SwcRoElite_CSI_NormSendRoE_R /* [Satisfies_rte sws 3731] */
{
	/*
	 *Rte Call <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_CallFP_SwcRoElite_CSI_NormSendRoE_OPSendRoE Call_OPSendRoE;

} Rte_PDS_SwcRoElite_CSI_NormSendRoE_R;



typedef P2FUNC(Std_ReturnType,RTE_CODE,Rte_CallFP_SwcRoElite_StatusAvailabilityMask_GetStatusMask)(OUT P2VAR(UInt8,AUTOMATIC,RTE_APPL_DATA) sam );


typedef struct Rte_PDS_SwcRoElite_StatusAvailabilityMask_R /* [Satisfies_rte sws 3731] */
{
	/*
	 *Rte Call <p> <d> [Satisfies_rte sws 3730]
	 */
	Rte_CallFP_SwcRoElite_StatusAvailabilityMask_GetStatusMask Call_GetStatusMask;

} Rte_PDS_SwcRoElite_StatusAvailabilityMask_R;




/****
 * Component Data Structure type (CDS) for SW-C: EcuStateManager
 ****/

typedef struct Rte_CDS_EcuStateManager 
{

    uint8 _dummy;			/* [Satisfies_rte sws 3724] */

} Rte_CDS_EcuStateManager;


/****
 * Component Data Structure type (CDS) for SW-C: NvM
 ****/

typedef struct Rte_CDS_NvM 
{

    uint8 _dummy;			/* [Satisfies_rte sws 3724] */

} Rte_CDS_NvM;


/****
 * Component Data Structure type (CDS) for SW-C: CDDTimer64
 ****/

typedef struct Rte_CDS_CDDTimer64 
{

    uint8 _dummy;			/* [Satisfies_rte sws 3724] */

} Rte_CDS_CDDTimer64;


/****
 * Component Data Structure type (CDS) for SW-C: Dem
 ****/

typedef struct Rte_CDS_Dem 
{

    uint8 _dummy;			/* [Satisfies_rte sws 3724] */

} Rte_CDS_Dem;


/****
 * Component Data Structure type (CDS) for SW-C: DemSc_LocStub
 ****/

typedef struct Rte_CDS_DemSc_LocStub 
{

    uint8 _dummy;			/* [Satisfies_rte sws 3724] */

} Rte_CDS_DemSc_LocStub;


/****
 * Component Data Structure type (CDS) for SW-C: SWCActl
 ****/

typedef struct Rte_CDS_SWCActl 
{

    uint8 _dummy;			/* [Satisfies_rte sws 3724] */

} Rte_CDS_SWCActl;


/****
 * Component Data Structure type (CDS) for SW-C: SWCBsw
 ****/

typedef struct Rte_CDS_SWCBsw 
{

    uint8 _dummy;			/* [Satisfies_rte sws 3724] */

} Rte_CDS_SWCBsw;


/****
 * Component Data Structure type (CDS) for SW-C: SWCCaliAdapt
 ****/

typedef struct Rte_CDS_SWCCaliAdapt 
{

    uint8 _dummy;			/* [Satisfies_rte sws 3724] */

} Rte_CDS_SWCCaliAdapt;


/****
 * Component Data Structure type (CDS) for SW-C: SWCDiag
 ****/

typedef struct Rte_CDS_SWCDiag 
{

    uint8 _dummy;			/* [Satisfies_rte sws 3724] */

} Rte_CDS_SWCDiag;


/****
 * Component Data Structure type (CDS) for SW-C: SWCFctAdapt
 ****/

typedef struct Rte_CDS_SWCFctAdapt 
{

    uint8 _dummy;			/* [Satisfies_rte sws 3724] */

} Rte_CDS_SWCFctAdapt;


/****
 * Component Data Structure type (CDS) for SW-C: SWCGbAdapt
 ****/

typedef struct Rte_CDS_SWCGbAdapt 
{

    uint8 _dummy;			/* [Satisfies_rte sws 3724] */

} Rte_CDS_SWCGbAdapt;


/****
 * Component Data Structure type (CDS) for SW-C: SWCHeatAdapt
 ****/

typedef struct Rte_CDS_SWCHeatAdapt 
{

    uint8 _dummy;			/* [Satisfies_rte sws 3724] */

} Rte_CDS_SWCHeatAdapt;


/****
 * Component Data Structure type (CDS) for SW-C: SWCHlaAdapt
 ****/

typedef struct Rte_CDS_SWCHlaAdapt 
{

    uint8 _dummy;			/* [Satisfies_rte sws 3724] */

} Rte_CDS_SWCHlaAdapt;


/****
 * Component Data Structure type (CDS) for SW-C: SWCImageCtrl
 ****/

typedef struct Rte_CDS_SWCImageCtrl 
{

    uint8 _dummy;			/* [Satisfies_rte sws 3724] */

} Rte_CDS_SWCImageCtrl;


/****
 * Component Data Structure type (CDS) for SW-C: SWCLdAdapt
 ****/

typedef struct Rte_CDS_SWCLdAdapt 
{

    uint8 _dummy;			/* [Satisfies_rte sws 3724] */

} Rte_CDS_SWCLdAdapt;


/****
 * Component Data Structure type (CDS) for SW-C: SWCMapAdapt
 ****/

typedef struct Rte_CDS_SWCMapAdapt 
{

    uint8 _dummy;			/* [Satisfies_rte sws 3724] */

} Rte_CDS_SWCMapAdapt;


/****
 * Component Data Structure type (CDS) for SW-C: SWCNorm
 ****/

typedef struct Rte_CDS_SWCNorm 
{

    uint8 _dummy;			/* [Satisfies_rte sws 3724] */

} Rte_CDS_SWCNorm;


/****
 * Component Data Structure type (CDS) for SW-C: SWCTsaAdapt
 ****/

typedef struct Rte_CDS_SWCTsaAdapt 
{

    uint8 _dummy;			/* [Satisfies_rte sws 3724] */

} Rte_CDS_SWCTsaAdapt;


/****
 * Component Data Structure type (CDS) for SW-C: SWCVdyAdapt
 ****/

typedef struct Rte_CDS_SWCVdyAdapt 
{

    uint8 _dummy;			/* [Satisfies_rte sws 3724] */

} Rte_CDS_SWCVdyAdapt;


/****
 * Component Data Structure type (CDS) for SW-C: SWCVln
 ****/

typedef struct Rte_CDS_SWCVln 
{

    uint8 _dummy;			/* [Satisfies_rte sws 3724] */

} Rte_CDS_SWCVln;


/****
 * Component Data Structure type (CDS) for SW-C: SwcDemSc
 ****/

typedef struct Rte_CDS_SwcDemSc 
{

    uint8 _dummy;			/* [Satisfies_rte sws 3724] */

} Rte_CDS_SwcDemSc;


/****
 * Component Data Structure type (CDS) for SW-C: SwcRoElite
 ****/

typedef struct Rte_CDS_SwcRoElite 
{
    /* Per-instance memory handle section [Satisfies_rte sws 3719] */
    Rte_PimType_SwcRoElite_SwcRoElite_MsgTypeU *Pim_SwcRoElite_DiagData;    			/* Handle forPer-instance Memory [Satisfies_rte sws 2301] with pointer to Pim type [Satisfies_rte sws 2302] */
    Rte_PimType_SwcRoElite_SwcRoElite_QueueTypeU *Pim_SwcRoElite_Queue;    			/* Handle forPer-instance Memory [Satisfies_rte sws 2301] with pointer to Pim type [Satisfies_rte sws 2302] */

    /* Exclusive - area handles Section [Satisfies_rte sws 3721] */
	P2FUNC(void, RTE_CODE, Enter_ExclusiveArea_FifoQueue) (void); /* [Satisfies_rte sws 3739]  */
	P2FUNC(void, RTE_CODE, Exit_ExclusiveArea_FifoQueue) (void); /* [Satisfies_rte sws 3739]  */


} Rte_CDS_SwcRoElite;

/**********************************************************************************************************************
 * END CESSAR_RTE
 *********************************************************************************************************************/



/**********************************************************************************************************************
 * Data type definitions
 *********************************************************************************************************************/

# define Rte_TypeDef_Boolean
//typedef boolean Boolean;

#ifndef FR_BUS_ARCHT_STAR_1
# define Rte_TypeDef_ComM_InhibitionStatusType
typedef uint8 ComM_InhibitionStatusType;
# define ComM_InhibitionStatusType_LowerLimit ((ComM_InhibitionStatusType)0u)
# define ComM_InhibitionStatusType_UpperLimit ((ComM_InhibitionStatusType)0u)

# define Rte_TypeDef_ComM_NetworkHandleType
typedef uint8 ComM_NetworkHandleType;
# define ComM_NetworkHandleType_LowerLimit ((ComM_NetworkHandleType)0u)
# define ComM_NetworkHandleType_UpperLimit ((ComM_NetworkHandleType)255u)

# define Rte_TypeDef_ComM_UserHandleType
typedef uint8 ComM_UserHandleType;
# define ComM_UserHandleType_LowerLimit ((ComM_UserHandleType)0u)
# define ComM_UserHandleType_UpperLimit ((ComM_UserHandleType)255u)

#endif

# define Rte_TypeDef_DC_BOOL
//typedef boolean DC_BOOL;

# define Rte_TypeDef_Dem_DTCStatusMaskType
//typedef uint8 Dem_DTCStatusMaskType;
//# define Dem_DTCStatusMaskType_LowerLimit ((Dem_DTCStatusMaskType)0u)
//# define Dem_DTCStatusMaskType_UpperLimit ((Dem_DTCStatusMaskType)255u)

# define Rte_TypeDef_Dem_DTCType
//typedef uint32 Dem_DTCType;
//# define Dem_DTCType_LowerLimit ((Dem_DTCType)0u)
//# define Dem_DTCType_UpperLimit ((Dem_DTCType)4294967295u)

# define Rte_TypeDef_Dem_EventIdType
//typedef uint16 Dem_EventIdType;
//# define Dem_EventIdType_LowerLimit ((Dem_EventIdType)0u)
//# define Dem_EventIdType_UpperLimit ((Dem_EventIdType)65535u)

# define Rte_TypeDef_Dem_EventStatusExtendedType
//typedef uint8 Dem_EventStatusExtendedType;
//# define Dem_EventStatusExtendedType_LowerLimit ((Dem_EventStatusExtendedType)0u)
//# define Dem_EventStatusExtendedType_UpperLimit ((Dem_EventStatusExtendedType)255u)

# define Rte_TypeDef_Dem_FaultDetectionCounterType
//typedef sint8 Dem_FaultDetectionCounterType;
//# define Dem_FaultDetectionCounterType_LowerLimit ((Dem_FaultDetectionCounterType)-128)
//# define Dem_FaultDetectionCounterType_UpperLimit ((Dem_FaultDetectionCounterType)127)

# define Rte_TypeDef_Dem_OperationCycleIdType
//typedef uint8 Dem_OperationCycleIdType;
//# define Dem_OperationCycleIdType_LowerLimit ((Dem_OperationCycleIdType)0u)
//# define Dem_OperationCycleIdType_UpperLimit ((Dem_OperationCycleIdType)255u)

# define Rte_TypeDef_Rsrv01
typedef uint8 Rsrv01;
# define Rsrv01_LowerLimit ((Rsrv01)0u)
# define Rsrv01_UpperLimit ((Rsrv01)1u)

# define Rte_TypeDef_Rsrv02
typedef uint8 Rsrv02;
# define Rsrv02_LowerLimit ((Rsrv02)0u)
# define Rsrv02_UpperLimit ((Rsrv02)3u)

# define Rte_TypeDef_Rsrv03
typedef uint8 Rsrv03;
# define Rsrv03_LowerLimit ((Rsrv03)0u)
# define Rsrv03_UpperLimit ((Rsrv03)7u)

# define Rte_TypeDef_Rsrv04
typedef uint8 Rsrv04;
# define Rsrv04_LowerLimit ((Rsrv04)0u)
# define Rsrv04_UpperLimit ((Rsrv04)15u)

# define Rte_TypeDef_Rsrv05
typedef uint8 Rsrv05;
# define Rsrv05_LowerLimit ((Rsrv05)0u)
# define Rsrv05_UpperLimit ((Rsrv05)31u)

# define Rte_TypeDef_Rsrv06
typedef uint8 Rsrv06;
# define Rsrv06_LowerLimit ((Rsrv06)0u)
# define Rsrv06_UpperLimit ((Rsrv06)63u)

# define Rte_TypeDef_Rsrv08
typedef uint8 Rsrv08;
# define Rsrv08_LowerLimit ((Rsrv08)0u)
# define Rsrv08_UpperLimit ((Rsrv08)255u)

# define Rte_TypeDef_Rsrv16
typedef uint16 Rsrv16;
# define Rsrv16_LowerLimit ((Rsrv16)0u)
# define Rsrv16_UpperLimit ((Rsrv16)65535u)

# define Rte_TypeDef_Rsrv32
typedef uint32 Rsrv32;
# define Rsrv32_LowerLimit ((Rsrv32)0u)
# define Rsrv32_UpperLimit ((Rsrv32)4294967295u)

# define Rte_TypeDef_SwcDemSc_DebTimType
//typedef uint16 SwcDemSc_DebTimType;
//# define SwcDemSc_DebTimType_LowerLimit ((SwcDemSc_DebTimType)0u)
//# define SwcDemSc_DebTimType_UpperLimit ((SwcDemSc_DebTimType)65535u)

# define Rte_TypeDef_SwcDemSc_ScStatusType
//typedef boolean SwcDemSc_ScStatusType;

# define Rte_TypeDef_SwcDemSc_glbScSigIndType
//typedef uint8 SwcDemSc_glbScSigIndType;
//# define SwcDemSc_glbScSigIndType_LowerLimit ((SwcDemSc_glbScSigIndType)0u)
//# define SwcDemSc_glbScSigIndType_UpperLimit ((SwcDemSc_glbScSigIndType)255u)

# define Rte_TypeDef_UInt16
//typedef uint16 UInt16;
//# define UInt16_LowerLimit ((UInt16)0u)
//# define UInt16_UpperLimit ((UInt16)65535u)

# define Rte_TypeDef_UInt32
//typedef uint32 UInt32;
//# define UInt32_LowerLimit ((UInt32)0u)
//# define UInt32_UpperLimit ((UInt32)4294967295u)

# define Rte_TypeDef_UInt8
//typedef uint8 UInt8;
//# define UInt8_LowerLimit ((UInt8)0u)
//# define UInt8_UpperLimit ((UInt8)255u)

# define Rte_TypeDef_c02_0_3_1_nSNA
typedef uint8 c02_0_3_1_nSNA;
# define c02_0_3_1_nSNA_LowerLimit ((c02_0_3_1_nSNA)0u)
# define c02_0_3_1_nSNA_UpperLimit ((c02_0_3_1_nSNA)3u)

# define Rte_TypeDef_c02_ADAS_MapVerQuar
typedef uint8 c02_ADAS_MapVerQuar;
# define c02_ADAS_MapVerQuar_LowerLimit ((c02_ADAS_MapVerQuar)0u)
# define c02_ADAS_MapVerQuar_UpperLimit ((c02_ADAS_MapVerQuar)3u)

# define Rte_TypeDef_c03_0_to_7_1_no_SNA
typedef uint8 c03_0_to_7_1_no_SNA;
# define c03_0_to_7_1_no_SNA_LowerLimit ((c03_0_to_7_1_no_SNA)0u)
# define c03_0_to_7_1_no_SNA_UpperLimit ((c03_0_to_7_1_no_SNA)7u)

# define Rte_TypeDef_c03_ADAS_Posn_Idx
typedef uint8 c03_ADAS_Posn_Idx;
# define c03_ADAS_Posn_Idx_LowerLimit ((c03_ADAS_Posn_Idx)0u)
# define c03_ADAS_Posn_Idx_UpperLimit ((c03_ADAS_Posn_Idx)3u)

# define Rte_TypeDef_c03_Steps_0_7_1_SNA_na
typedef uint8 c03_Steps_0_7_1_SNA_na;
# define c03_Steps_0_7_1_SNA_na_LowerLimit ((c03_Steps_0_7_1_SNA_na)0u)
# define c03_Steps_0_7_1_SNA_na_UpperLimit ((c03_Steps_0_7_1_SNA_na)7u)

# define Rte_TypeDef_c04_0_15_1_SNA_na
typedef uint8 c04_0_15_1_SNA_na;
# define c04_0_15_1_SNA_na_LowerLimit ((c04_0_15_1_SNA_na)0u)
# define c04_0_15_1_SNA_na_UpperLimit ((c04_0_15_1_SNA_na)15u)

# define Rte_TypeDef_c04_Steps_0_15_1_SNA_na
typedef uint8 c04_Steps_0_15_1_SNA_na;
# define c04_Steps_0_15_1_SNA_na_LowerLimit ((c04_Steps_0_15_1_SNA_na)0u)
# define c04_Steps_0_15_1_SNA_na_UpperLimit ((c04_Steps_0_15_1_SNA_na)15u)

# define Rte_TypeDef_c08_0_255_1_SNA_na
//typedef uint8 c08_0_255_1_SNA_na;
//# define c08_0_255_1_SNA_na_LowerLimit ((c08_0_255_1_SNA_na)0u)
//# define c08_0_255_1_SNA_na_UpperLimit ((c08_0_255_1_SNA_na)255u)

# define Rte_TypeDef_c08_CRC_woSNA
typedef uint8 c08_CRC_woSNA;
# define c08_CRC_woSNA_LowerLimit ((c08_CRC_woSNA)0u)
# define c08_CRC_woSNA_UpperLimit ((c08_CRC_woSNA)255u)

# define Rte_TypeDef_c08_UInt_SNA_na
typedef uint8 c08_UInt_SNA_na;
# define c08_UInt_SNA_na_LowerLimit ((c08_UInt_SNA_na)0u)
# define c08_UInt_SNA_na_UpperLimit ((c08_UInt_SNA_na)255u)

# define Rte_TypeDef_c16_m_0_3276k7_0k05
typedef uint16 c16_m_0_3276k7_0k05;
# define c16_m_0_3276k7_0k05_LowerLimit ((c16_m_0_3276k7_0k05)0u)
# define c16_m_0_3276k7_0k05_UpperLimit ((c16_m_0_3276k7_0k05)65534u)

# define Rte_TypeDef_c24_0_16777215_1_SNA_na
//typedef uint32 c24_0_16777215_1_SNA_na;
//# define c24_0_16777215_1_SNA_na_LowerLimit ((c24_0_16777215_1_SNA_na)0u)
//# define c24_0_16777215_1_SNA_na_UpperLimit ((c24_0_16777215_1_SNA_na)16777215u)

# define Rte_TypeDef_c32_0_4294967295_1_SNA_na
//typedef uint32 c32_0_4294967295_1_SNA_na;
//# define c32_0_4294967295_1_SNA_na_LowerLimit ((c32_0_4294967295_1_SNA_na)0u)
//# define c32_0_4294967295_1_SNA_na_UpperLimit ((c32_0_4294967295_1_SNA_na)4294967295u)

#ifndef FR_BUS_ARCHT_STAR_1
# define Rte_TypeDef_ComM_ModeType
typedef uint8 ComM_ModeType;
# define ComM_ModeType_LowerLimit ((ComM_ModeType)0u)
# define ComM_ModeType_UpperLimit ((ComM_ModeType)2u)
# if (defined RTE_CONST_COMM_NO_COMMUNICATION) || (defined COMM_NO_COMMUNICATION)
#  if (!defined RTE_CONST_COMM_NO_COMMUNICATION) || (RTE_CONST_COMM_NO_COMMUNICATION != 0u)
#   error "Enumeration constant <COMM_NO_COMMUNICATION> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_COMM_NO_COMMUNICATION (0u)
#  define COMM_NO_COMMUNICATION ((ComM_ModeType)0u)
# endif
# if (defined RTE_CONST_COMM_SILENT_COMMUNICATION) || (defined COMM_SILENT_COMMUNICATION)
#  if (!defined RTE_CONST_COMM_SILENT_COMMUNICATION) || (RTE_CONST_COMM_SILENT_COMMUNICATION != 1u)
#   error "Enumeration constant <COMM_SILENT_COMMUNICATION> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_COMM_SILENT_COMMUNICATION (1u)
#  define COMM_SILENT_COMMUNICATION ((ComM_ModeType)1u)
# endif
# if (defined RTE_CONST_COMM_FULL_COMMUNICATION) || (defined COMM_FULL_COMMUNICATION)
#  if (!defined RTE_CONST_COMM_FULL_COMMUNICATION) || (RTE_CONST_COMM_FULL_COMMUNICATION != 2u)
#   error "Enumeration constant <COMM_FULL_COMMUNICATION> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_COMM_FULL_COMMUNICATION (2u)
#  define COMM_FULL_COMMUNICATION ((ComM_ModeType)2u)
# endif

# define Rte_TypeDef_Dcm_ConfirmationStatusType
typedef uint8 Dcm_ConfirmationStatusType;
# define Dcm_ConfirmationStatusType_LowerLimit ((Dcm_ConfirmationStatusType)0u)
# define Dcm_ConfirmationStatusType_UpperLimit ((Dcm_ConfirmationStatusType)3u)
# if (defined RTE_CONST_DCM_RES_POS_OK) || (defined DCM_RES_POS_OK)
#  if (!defined RTE_CONST_DCM_RES_POS_OK) || (RTE_CONST_DCM_RES_POS_OK != 0u)
#   error "Enumeration constant <DCM_RES_POS_OK> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_DCM_RES_POS_OK (0u)
#  define DCM_RES_POS_OK ((Dcm_ConfirmationStatusType)0u)
# endif
# if (defined RTE_CONST_DCM_RES_POS_NOT_OK) || (defined DCM_RES_POS_NOT_OK)
#  if (!defined RTE_CONST_DCM_RES_POS_NOT_OK) || (RTE_CONST_DCM_RES_POS_NOT_OK != 1u)
#   error "Enumeration constant <DCM_RES_POS_NOT_OK> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_DCM_RES_POS_NOT_OK (1u)
#  define DCM_RES_POS_NOT_OK ((Dcm_ConfirmationStatusType)1u)
# endif
# if (defined RTE_CONST_DCM_RES_NEG_OK) || (defined DCM_RES_NEG_OK)
#  if (!defined RTE_CONST_DCM_RES_NEG_OK) || (RTE_CONST_DCM_RES_NEG_OK != 2u)
#   error "Enumeration constant <DCM_RES_NEG_OK> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_DCM_RES_NEG_OK (2u)
#  define DCM_RES_NEG_OK ((Dcm_ConfirmationStatusType)2u)
# endif
# if (defined RTE_CONST_DCM_RES_NEG_NOT_OK) || (defined DCM_RES_NEG_NOT_OK)
#  if (!defined RTE_CONST_DCM_RES_NEG_NOT_OK) || (RTE_CONST_DCM_RES_NEG_NOT_OK != 3u)
#   error "Enumeration constant <DCM_RES_NEG_NOT_OK> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_DCM_RES_NEG_NOT_OK (3u)
#  define DCM_RES_NEG_NOT_OK ((Dcm_ConfirmationStatusType)3u)
# endif

# define Rte_TypeDef_Dcm_NegativeResponseCodeType
typedef uint8 Dcm_NegativeResponseCodeType;
# define Dcm_NegativeResponseCodeType_LowerLimit ((Dcm_NegativeResponseCodeType)0u)
# define Dcm_NegativeResponseCodeType_UpperLimit ((Dcm_NegativeResponseCodeType)255u)
# if (defined RTE_CONST_DCM_E_GENERALREJECT) || (defined DCM_E_GENERALREJECT)
#  if (!defined RTE_CONST_DCM_E_GENERALREJECT) || (RTE_CONST_DCM_E_GENERALREJECT != 16u)
#   error "Enumeration constant <DCM_E_GENERALREJECT> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_DCM_E_GENERALREJECT (16u)
#  define DCM_E_GENERALREJECT ((Dcm_NegativeResponseCodeType)16u)
# endif
# if (defined RTE_CONST_DCM_E_SERVICENOTSUPPORTED) || (defined DCM_E_SERVICENOTSUPPORTED)
#  if (!defined RTE_CONST_DCM_E_SERVICENOTSUPPORTED) || (RTE_CONST_DCM_E_SERVICENOTSUPPORTED != 17u)
#   error "Enumeration constant <DCM_E_SERVICENOTSUPPORTED> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_DCM_E_SERVICENOTSUPPORTED (17u)
#  define DCM_E_SERVICENOTSUPPORTED ((Dcm_NegativeResponseCodeType)17u)
# endif
# if (defined RTE_CONST_DCM_E_SUBFUNCTIONNOTSUPPORTED) || (defined DCM_E_SUBFUNCTIONNOTSUPPORTED)
#  if (!defined RTE_CONST_DCM_E_SUBFUNCTIONNOTSUPPORTED) || (RTE_CONST_DCM_E_SUBFUNCTIONNOTSUPPORTED != 18u)
#   error "Enumeration constant <DCM_E_SUBFUNCTIONNOTSUPPORTED> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_DCM_E_SUBFUNCTIONNOTSUPPORTED (18u)
#  define DCM_E_SUBFUNCTIONNOTSUPPORTED ((Dcm_NegativeResponseCodeType)18u)
# endif
# if (defined RTE_CONST_DCM_E_INCORRECTMESSAGELENGTHORINVALIDFORMAT) || (defined DCM_E_INCORRECTMESSAGELENGTHORINVALIDFORMAT)
#  if (!defined RTE_CONST_DCM_E_INCORRECTMESSAGELENGTHORINVALIDFORMAT) || (RTE_CONST_DCM_E_INCORRECTMESSAGELENGTHORINVALIDFORMAT != 19u)
#   error "Enumeration constant <DCM_E_INCORRECTMESSAGELENGTHORINVALIDFORMAT> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_DCM_E_INCORRECTMESSAGELENGTHORINVALIDFORMAT (19u)
#  define DCM_E_INCORRECTMESSAGELENGTHORINVALIDFORMAT ((Dcm_NegativeResponseCodeType)19u)
# endif
# if (defined RTE_CONST_DCM_E_RESPONSE_TOO_LONG) || (defined DCM_E_RESPONSE_TOO_LONG)
#  if (!defined RTE_CONST_DCM_E_RESPONSE_TOO_LONG) || (RTE_CONST_DCM_E_RESPONSE_TOO_LONG != 20u)
#   error "Enumeration constant <DCM_E_RESPONSE_TOO_LONG> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_DCM_E_RESPONSE_TOO_LONG (20u)
#  define DCM_E_RESPONSE_TOO_LONG ((Dcm_NegativeResponseCodeType)20u)
# endif
# if (defined RTE_CONST_DCM_E_BUSYREPEATREQUEST) || (defined DCM_E_BUSYREPEATREQUEST)
#  if (!defined RTE_CONST_DCM_E_BUSYREPEATREQUEST) || (RTE_CONST_DCM_E_BUSYREPEATREQUEST != 33u)
#   error "Enumeration constant <DCM_E_BUSYREPEATREQUEST> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_DCM_E_BUSYREPEATREQUEST (33u)
#  define DCM_E_BUSYREPEATREQUEST ((Dcm_NegativeResponseCodeType)33u)
# endif
# if (defined RTE_CONST_DCM_E_CONDITIONSNOTCORRECT) || (defined DCM_E_CONDITIONSNOTCORRECT)
#  if (!defined RTE_CONST_DCM_E_CONDITIONSNOTCORRECT) || (RTE_CONST_DCM_E_CONDITIONSNOTCORRECT != 34u)
#   error "Enumeration constant <DCM_E_CONDITIONSNOTCORRECT> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_DCM_E_CONDITIONSNOTCORRECT (34u)
#  define DCM_E_CONDITIONSNOTCORRECT ((Dcm_NegativeResponseCodeType)34u)
# endif
# if (defined RTE_CONST_DCM_E_REQUESTSEQUENCEERROR) || (defined DCM_E_REQUESTSEQUENCEERROR)
#  if (!defined RTE_CONST_DCM_E_REQUESTSEQUENCEERROR) || (RTE_CONST_DCM_E_REQUESTSEQUENCEERROR != 36u)
#   error "Enumeration constant <DCM_E_REQUESTSEQUENCEERROR> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_DCM_E_REQUESTSEQUENCEERROR (36u)
#  define DCM_E_REQUESTSEQUENCEERROR ((Dcm_NegativeResponseCodeType)36u)
# endif
# if (defined RTE_CONST_DCM_E_REQUESTOUTOFRANGE) || (defined DCM_E_REQUESTOUTOFRANGE)
#  if (!defined RTE_CONST_DCM_E_REQUESTOUTOFRANGE) || (RTE_CONST_DCM_E_REQUESTOUTOFRANGE != 49u)
#   error "Enumeration constant <DCM_E_REQUESTOUTOFRANGE> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_DCM_E_REQUESTOUTOFRANGE (49u)
#  define DCM_E_REQUESTOUTOFRANGE ((Dcm_NegativeResponseCodeType)49u)
# endif
# if (defined RTE_CONST_DCM_E_SECURITYACCESSDENIED) || (defined DCM_E_SECURITYACCESSDENIED)
#  if (!defined RTE_CONST_DCM_E_SECURITYACCESSDENIED) || (RTE_CONST_DCM_E_SECURITYACCESSDENIED != 51u)
#   error "Enumeration constant <DCM_E_SECURITYACCESSDENIED> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_DCM_E_SECURITYACCESSDENIED (51u)
#  define DCM_E_SECURITYACCESSDENIED ((Dcm_NegativeResponseCodeType)51u)
# endif
# if (defined RTE_CONST_DCM_E_INVALIDKEY) || (defined DCM_E_INVALIDKEY)
#  if (!defined RTE_CONST_DCM_E_INVALIDKEY) || (RTE_CONST_DCM_E_INVALIDKEY != 53u)
#   error "Enumeration constant <DCM_E_INVALIDKEY> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_DCM_E_INVALIDKEY (53u)
#  define DCM_E_INVALIDKEY ((Dcm_NegativeResponseCodeType)53u)
# endif
# if (defined RTE_CONST_DCM_E_EXCEEDNUMBEROFATTEMPTS) || (defined DCM_E_EXCEEDNUMBEROFATTEMPTS)
#  if (!defined RTE_CONST_DCM_E_EXCEEDNUMBEROFATTEMPTS) || (RTE_CONST_DCM_E_EXCEEDNUMBEROFATTEMPTS != 54u)
#   error "Enumeration constant <DCM_E_EXCEEDNUMBEROFATTEMPTS> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_DCM_E_EXCEEDNUMBEROFATTEMPTS (54u)
#  define DCM_E_EXCEEDNUMBEROFATTEMPTS ((Dcm_NegativeResponseCodeType)54u)
# endif
# if (defined RTE_CONST_DCM_E_REQUIREDTIMEDELAYNOTEXPIRED) || (defined DCM_E_REQUIREDTIMEDELAYNOTEXPIRED)
#  if (!defined RTE_CONST_DCM_E_REQUIREDTIMEDELAYNOTEXPIRED) || (RTE_CONST_DCM_E_REQUIREDTIMEDELAYNOTEXPIRED != 55u)
#   error "Enumeration constant <DCM_E_REQUIREDTIMEDELAYNOTEXPIRED> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_DCM_E_REQUIREDTIMEDELAYNOTEXPIRED (55u)
#  define DCM_E_REQUIREDTIMEDELAYNOTEXPIRED ((Dcm_NegativeResponseCodeType)55u)
# endif
# if (defined RTE_CONST_DCM_E_UPLOADDOWNLOADNOTACCEPTED) || (defined DCM_E_UPLOADDOWNLOADNOTACCEPTED)
#  if (!defined RTE_CONST_DCM_E_UPLOADDOWNLOADNOTACCEPTED) || (RTE_CONST_DCM_E_UPLOADDOWNLOADNOTACCEPTED != 112u)
#   error "Enumeration constant <DCM_E_UPLOADDOWNLOADNOTACCEPTED> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_DCM_E_UPLOADDOWNLOADNOTACCEPTED (112u)
#  define DCM_E_UPLOADDOWNLOADNOTACCEPTED ((Dcm_NegativeResponseCodeType)112u)
# endif
# if (defined RTE_CONST_DCM_E_TRANSFERDATASUSPENDED) || (defined DCM_E_TRANSFERDATASUSPENDED)
#  if (!defined RTE_CONST_DCM_E_TRANSFERDATASUSPENDED) || (RTE_CONST_DCM_E_TRANSFERDATASUSPENDED != 113u)
#   error "Enumeration constant <DCM_E_TRANSFERDATASUSPENDED> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_DCM_E_TRANSFERDATASUSPENDED (113u)
#  define DCM_E_TRANSFERDATASUSPENDED ((Dcm_NegativeResponseCodeType)113u)
# endif
# if (defined RTE_CONST_DCM_E_GENERALPROGRAMMINGFAILURE) || (defined DCM_E_GENERALPROGRAMMINGFAILURE)
#  if (!defined RTE_CONST_DCM_E_GENERALPROGRAMMINGFAILURE) || (RTE_CONST_DCM_E_GENERALPROGRAMMINGFAILURE != 114u)
#   error "Enumeration constant <DCM_E_GENERALPROGRAMMINGFAILURE> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_DCM_E_GENERALPROGRAMMINGFAILURE (114u)
#  define DCM_E_GENERALPROGRAMMINGFAILURE ((Dcm_NegativeResponseCodeType)114u)
# endif
# if (defined RTE_CONST_DCM_E_WRONGBLOCKSEQUENCECOUNTER) || (defined DCM_E_WRONGBLOCKSEQUENCECOUNTER)
#  if (!defined RTE_CONST_DCM_E_WRONGBLOCKSEQUENCECOUNTER) || (RTE_CONST_DCM_E_WRONGBLOCKSEQUENCECOUNTER != 115u)
#   error "Enumeration constant <DCM_E_WRONGBLOCKSEQUENCECOUNTER> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_DCM_E_WRONGBLOCKSEQUENCECOUNTER (115u)
#  define DCM_E_WRONGBLOCKSEQUENCECOUNTER ((Dcm_NegativeResponseCodeType)115u)
# endif
# if (defined RTE_CONST_DCM_E_REQUESTCORRECTLYRECEIVED_RESPONSEPENDING) || (defined DCM_E_REQUESTCORRECTLYRECEIVED_RESPONSEPENDING)
#  if (!defined RTE_CONST_DCM_E_REQUESTCORRECTLYRECEIVED_RESPONSEPENDING) || (RTE_CONST_DCM_E_REQUESTCORRECTLYRECEIVED_RESPONSEPENDING != 120u)
#   error "Enumeration constant <DCM_E_REQUESTCORRECTLYRECEIVED_RESPONSEPENDING> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_DCM_E_REQUESTCORRECTLYRECEIVED_RESPONSEPENDING (120u)
#  define DCM_E_REQUESTCORRECTLYRECEIVED_RESPONSEPENDING ((Dcm_NegativeResponseCodeType)120u)
# endif
# if (defined RTE_CONST_DCM_E_SUBFUNCTIONNOTSUPPORTEDINACTIVESESSION) || (defined DCM_E_SUBFUNCTIONNOTSUPPORTEDINACTIVESESSION)
#  if (!defined RTE_CONST_DCM_E_SUBFUNCTIONNOTSUPPORTEDINACTIVESESSION) || (RTE_CONST_DCM_E_SUBFUNCTIONNOTSUPPORTEDINACTIVESESSION != 126u)
#   error "Enumeration constant <DCM_E_SUBFUNCTIONNOTSUPPORTEDINACTIVESESSION> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_DCM_E_SUBFUNCTIONNOTSUPPORTEDINACTIVESESSION (126u)
#  define DCM_E_SUBFUNCTIONNOTSUPPORTEDINACTIVESESSION ((Dcm_NegativeResponseCodeType)126u)
# endif
# if (defined RTE_CONST_DCM_E_SERVICENOTSUPPORTEDINACTIVESESSION) || (defined DCM_E_SERVICENOTSUPPORTEDINACTIVESESSION)
#  if (!defined RTE_CONST_DCM_E_SERVICENOTSUPPORTEDINACTIVESESSION) || (RTE_CONST_DCM_E_SERVICENOTSUPPORTEDINACTIVESESSION != 127u)
#   error "Enumeration constant <DCM_E_SERVICENOTSUPPORTEDINACTIVESESSION> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_DCM_E_SERVICENOTSUPPORTEDINACTIVESESSION (127u)
#  define DCM_E_SERVICENOTSUPPORTEDINACTIVESESSION ((Dcm_NegativeResponseCodeType)127u)
# endif
# if (defined RTE_CONST_DCM_E_RPMTOOHIGH) || (defined DCM_E_RPMTOOHIGH)
#  if (!defined RTE_CONST_DCM_E_RPMTOOHIGH) || (RTE_CONST_DCM_E_RPMTOOHIGH != 129u)
#   error "Enumeration constant <DCM_E_RPMTOOHIGH> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_DCM_E_RPMTOOHIGH (129u)
#  define DCM_E_RPMTOOHIGH ((Dcm_NegativeResponseCodeType)129u)
# endif
# if (defined RTE_CONST_DCM_E_RPMTOOLOW) || (defined DCM_E_RPMTOOLOW)
#  if (!defined RTE_CONST_DCM_E_RPMTOOLOW) || (RTE_CONST_DCM_E_RPMTOOLOW != 130u)
#   error "Enumeration constant <DCM_E_RPMTOOLOW> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_DCM_E_RPMTOOLOW (130u)
#  define DCM_E_RPMTOOLOW ((Dcm_NegativeResponseCodeType)130u)
# endif
# if (defined RTE_CONST_DCM_E_ENGINEISRUNNING) || (defined DCM_E_ENGINEISRUNNING)
#  if (!defined RTE_CONST_DCM_E_ENGINEISRUNNING) || (RTE_CONST_DCM_E_ENGINEISRUNNING != 131u)
#   error "Enumeration constant <DCM_E_ENGINEISRUNNING> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_DCM_E_ENGINEISRUNNING (131u)
#  define DCM_E_ENGINEISRUNNING ((Dcm_NegativeResponseCodeType)131u)
# endif
# if (defined RTE_CONST_DCM_E_ENGINEISNOTRUNNING) || (defined DCM_E_ENGINEISNOTRUNNING)
#  if (!defined RTE_CONST_DCM_E_ENGINEISNOTRUNNING) || (RTE_CONST_DCM_E_ENGINEISNOTRUNNING != 132u)
#   error "Enumeration constant <DCM_E_ENGINEISNOTRUNNING> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_DCM_E_ENGINEISNOTRUNNING (132u)
#  define DCM_E_ENGINEISNOTRUNNING ((Dcm_NegativeResponseCodeType)132u)
# endif
# if (defined RTE_CONST_DCM_E_ENGINERUNTIMETOOLOW) || (defined DCM_E_ENGINERUNTIMETOOLOW)
#  if (!defined RTE_CONST_DCM_E_ENGINERUNTIMETOOLOW) || (RTE_CONST_DCM_E_ENGINERUNTIMETOOLOW != 133u)
#   error "Enumeration constant <DCM_E_ENGINERUNTIMETOOLOW> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_DCM_E_ENGINERUNTIMETOOLOW (133u)
#  define DCM_E_ENGINERUNTIMETOOLOW ((Dcm_NegativeResponseCodeType)133u)
# endif
# if (defined RTE_CONST_DCM_E_TEMPERATURETOOHIGH) || (defined DCM_E_TEMPERATURETOOHIGH)
#  if (!defined RTE_CONST_DCM_E_TEMPERATURETOOHIGH) || (RTE_CONST_DCM_E_TEMPERATURETOOHIGH != 134u)
#   error "Enumeration constant <DCM_E_TEMPERATURETOOHIGH> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_DCM_E_TEMPERATURETOOHIGH (134u)
#  define DCM_E_TEMPERATURETOOHIGH ((Dcm_NegativeResponseCodeType)134u)
# endif
# if (defined RTE_CONST_DCM_E_TEMPERATURETOOLOW) || (defined DCM_E_TEMPERATURETOOLOW)
#  if (!defined RTE_CONST_DCM_E_TEMPERATURETOOLOW) || (RTE_CONST_DCM_E_TEMPERATURETOOLOW != 135u)
#   error "Enumeration constant <DCM_E_TEMPERATURETOOLOW> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_DCM_E_TEMPERATURETOOLOW (135u)
#  define DCM_E_TEMPERATURETOOLOW ((Dcm_NegativeResponseCodeType)135u)
# endif
# if (defined RTE_CONST_DCM_E_VEHICLESPEEDTOOHIGH) || (defined DCM_E_VEHICLESPEEDTOOHIGH)
#  if (!defined RTE_CONST_DCM_E_VEHICLESPEEDTOOHIGH) || (RTE_CONST_DCM_E_VEHICLESPEEDTOOHIGH != 136u)
#   error "Enumeration constant <DCM_E_VEHICLESPEEDTOOHIGH> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_DCM_E_VEHICLESPEEDTOOHIGH (136u)
#  define DCM_E_VEHICLESPEEDTOOHIGH ((Dcm_NegativeResponseCodeType)136u)
# endif
# if (defined RTE_CONST_DCM_E_VEHICLESPEEDTOOLOW) || (defined DCM_E_VEHICLESPEEDTOOLOW)
#  if (!defined RTE_CONST_DCM_E_VEHICLESPEEDTOOLOW) || (RTE_CONST_DCM_E_VEHICLESPEEDTOOLOW != 137u)
#   error "Enumeration constant <DCM_E_VEHICLESPEEDTOOLOW> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_DCM_E_VEHICLESPEEDTOOLOW (137u)
#  define DCM_E_VEHICLESPEEDTOOLOW ((Dcm_NegativeResponseCodeType)137u)
# endif
# if (defined RTE_CONST_DCM_E_THROTTLE_PEDALTOOHIGH) || (defined DCM_E_THROTTLE_PEDALTOOHIGH)
#  if (!defined RTE_CONST_DCM_E_THROTTLE_PEDALTOOHIGH) || (RTE_CONST_DCM_E_THROTTLE_PEDALTOOHIGH != 138u)
#   error "Enumeration constant <DCM_E_THROTTLE_PEDALTOOHIGH> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_DCM_E_THROTTLE_PEDALTOOHIGH (138u)
#  define DCM_E_THROTTLE_PEDALTOOHIGH ((Dcm_NegativeResponseCodeType)138u)
# endif
# if (defined RTE_CONST_DCM_E_THROTTLE_PEDALTOOLOW) || (defined DCM_E_THROTTLE_PEDALTOOLOW)
#  if (!defined RTE_CONST_DCM_E_THROTTLE_PEDALTOOLOW) || (RTE_CONST_DCM_E_THROTTLE_PEDALTOOLOW != 139u)
#   error "Enumeration constant <DCM_E_THROTTLE_PEDALTOOLOW> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_DCM_E_THROTTLE_PEDALTOOLOW (139u)
#  define DCM_E_THROTTLE_PEDALTOOLOW ((Dcm_NegativeResponseCodeType)139u)
# endif
# if (defined RTE_CONST_DCM_E_TRANSMISSIONRANGENOTINNEUTRAL) || (defined DCM_E_TRANSMISSIONRANGENOTINNEUTRAL)
#  if (!defined RTE_CONST_DCM_E_TRANSMISSIONRANGENOTINNEUTRAL) || (RTE_CONST_DCM_E_TRANSMISSIONRANGENOTINNEUTRAL != 140u)
#   error "Enumeration constant <DCM_E_TRANSMISSIONRANGENOTINNEUTRAL> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_DCM_E_TRANSMISSIONRANGENOTINNEUTRAL (140u)
#  define DCM_E_TRANSMISSIONRANGENOTINNEUTRAL ((Dcm_NegativeResponseCodeType)140u)
# endif
# if (defined RTE_CONST_DCM_E_TRANSMISSIONRANGENOTINGEAR) || (defined DCM_E_TRANSMISSIONRANGENOTINGEAR)
#  if (!defined RTE_CONST_DCM_E_TRANSMISSIONRANGENOTINGEAR) || (RTE_CONST_DCM_E_TRANSMISSIONRANGENOTINGEAR != 141u)
#   error "Enumeration constant <DCM_E_TRANSMISSIONRANGENOTINGEAR> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_DCM_E_TRANSMISSIONRANGENOTINGEAR (141u)
#  define DCM_E_TRANSMISSIONRANGENOTINGEAR ((Dcm_NegativeResponseCodeType)141u)
# endif
# if (defined RTE_CONST_DCM_E_BRAKESWITCH_NOTCLOSED) || (defined DCM_E_BRAKESWITCH_NOTCLOSED)
#  if (!defined RTE_CONST_DCM_E_BRAKESWITCH_NOTCLOSED) || (RTE_CONST_DCM_E_BRAKESWITCH_NOTCLOSED != 143u)
#   error "Enumeration constant <DCM_E_BRAKESWITCH_NOTCLOSED> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_DCM_E_BRAKESWITCH_NOTCLOSED (143u)
#  define DCM_E_BRAKESWITCH_NOTCLOSED ((Dcm_NegativeResponseCodeType)143u)
# endif
# if (defined RTE_CONST_DCM_E_SHIFTERLEVERNOTINPARK) || (defined DCM_E_SHIFTERLEVERNOTINPARK)
#  if (!defined RTE_CONST_DCM_E_SHIFTERLEVERNOTINPARK) || (RTE_CONST_DCM_E_SHIFTERLEVERNOTINPARK != 144u)
#   error "Enumeration constant <DCM_E_SHIFTERLEVERNOTINPARK> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_DCM_E_SHIFTERLEVERNOTINPARK (144u)
#  define DCM_E_SHIFTERLEVERNOTINPARK ((Dcm_NegativeResponseCodeType)144u)
# endif
# if (defined RTE_CONST_DCM_E_TORQUECONVERTERCLUTCHLOCKED) || (defined DCM_E_TORQUECONVERTERCLUTCHLOCKED)
#  if (!defined RTE_CONST_DCM_E_TORQUECONVERTERCLUTCHLOCKED) || (RTE_CONST_DCM_E_TORQUECONVERTERCLUTCHLOCKED != 145u)
#   error "Enumeration constant <DCM_E_TORQUECONVERTERCLUTCHLOCKED> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_DCM_E_TORQUECONVERTERCLUTCHLOCKED (145u)
#  define DCM_E_TORQUECONVERTERCLUTCHLOCKED ((Dcm_NegativeResponseCodeType)145u)
# endif
# if (defined RTE_CONST_DCM_E_VOLTAGETOOHIGH) || (defined DCM_E_VOLTAGETOOHIGH)
#  if (!defined RTE_CONST_DCM_E_VOLTAGETOOHIGH) || (RTE_CONST_DCM_E_VOLTAGETOOHIGH != 146u)
#   error "Enumeration constant <DCM_E_VOLTAGETOOHIGH> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_DCM_E_VOLTAGETOOHIGH (146u)
#  define DCM_E_VOLTAGETOOHIGH ((Dcm_NegativeResponseCodeType)146u)
# endif
# if (defined RTE_CONST_DCM_E_VOLTAGETOOLOW) || (defined DCM_E_VOLTAGETOOLOW)
#  if (!defined RTE_CONST_DCM_E_VOLTAGETOOLOW) || (RTE_CONST_DCM_E_VOLTAGETOOLOW != 147u)
#   error "Enumeration constant <DCM_E_VOLTAGETOOLOW> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_DCM_E_VOLTAGETOOLOW (147u)
#  define DCM_E_VOLTAGETOOLOW ((Dcm_NegativeResponseCodeType)147u)
# endif

# define Rte_TypeDef_Dcm_SecLevelType
typedef uint8 Dcm_SecLevelType;
# define Dcm_SecLevelType_LowerLimit ((Dcm_SecLevelType)0u)
# define Dcm_SecLevelType_UpperLimit ((Dcm_SecLevelType)255u)
# if (defined RTE_CONST_DCM_SEC_LEV_LOCKED) || (defined DCM_SEC_LEV_LOCKED)
#  if (!defined RTE_CONST_DCM_SEC_LEV_LOCKED) || (RTE_CONST_DCM_SEC_LEV_LOCKED != 0u)
#   error "Enumeration constant <DCM_SEC_LEV_LOCKED> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_DCM_SEC_LEV_LOCKED (0u)
#  define DCM_SEC_LEV_LOCKED ((Dcm_SecLevelType)0u)
# endif
# if (defined RTE_CONST_DCM_SEC_LEV_L1) || (defined DCM_SEC_LEV_L1)
#  if (!defined RTE_CONST_DCM_SEC_LEV_L1) || (RTE_CONST_DCM_SEC_LEV_L1 != 1u)
#   error "Enumeration constant <DCM_SEC_LEV_L1> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_DCM_SEC_LEV_L1 (1u)
#  define DCM_SEC_LEV_L1 ((Dcm_SecLevelType)1u)
# endif
# if (defined RTE_CONST_DCM_SEC_LEV_ALL) || (defined DCM_SEC_LEV_ALL)
#  if (!defined RTE_CONST_DCM_SEC_LEV_ALL) || (RTE_CONST_DCM_SEC_LEV_ALL != 255u)
#   error "Enumeration constant <DCM_SEC_LEV_ALL> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_DCM_SEC_LEV_ALL (255u)
#  define DCM_SEC_LEV_ALL ((Dcm_SecLevelType)255u)
# endif

# define Rte_TypeDef_Dcm_SesCtrlType
typedef uint8 Dcm_SesCtrlType;
# define Dcm_SesCtrlType_LowerLimit ((Dcm_SesCtrlType)1u)
# define Dcm_SesCtrlType_UpperLimit ((Dcm_SesCtrlType)255u)
# if (defined RTE_CONST_DCM_DEFAULT_SESSION) || (defined DCM_DEFAULT_SESSION)
#  if (!defined RTE_CONST_DCM_DEFAULT_SESSION) || (RTE_CONST_DCM_DEFAULT_SESSION != 1u)
#   error "Enumeration constant <DCM_DEFAULT_SESSION> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_DCM_DEFAULT_SESSION (1u)
#  define DCM_DEFAULT_SESSION ((Dcm_SesCtrlType)1u)
# endif
# if (defined RTE_CONST_DCM_PROGRAMMING_SESSION) || (defined DCM_PROGRAMMING_SESSION)
#  if (!defined RTE_CONST_DCM_PROGRAMMING_SESSION) || (RTE_CONST_DCM_PROGRAMMING_SESSION != 2u)
#   error "Enumeration constant <DCM_PROGRAMMING_SESSION> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_DCM_PROGRAMMING_SESSION (2u)
#  define DCM_PROGRAMMING_SESSION ((Dcm_SesCtrlType)2u)
# endif
# if (defined RTE_CONST_DCM_EXTENDED_DIAGNOSTIC_SESSION) || (defined DCM_EXTENDED_DIAGNOSTIC_SESSION)
#  if (!defined RTE_CONST_DCM_EXTENDED_DIAGNOSTIC_SESSION) || (RTE_CONST_DCM_EXTENDED_DIAGNOSTIC_SESSION != 3u)
#   error "Enumeration constant <DCM_EXTENDED_DIAGNOSTIC_SESSION> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_DCM_EXTENDED_DIAGNOSTIC_SESSION (3u)
#  define DCM_EXTENDED_DIAGNOSTIC_SESSION ((Dcm_SesCtrlType)3u)
# endif
# if (defined RTE_CONST_DCM_SAFETY_SYSTEM_DIAGNOSTIC_SESSION) || (defined DCM_SAFETY_SYSTEM_DIAGNOSTIC_SESSION)
#  if (!defined RTE_CONST_DCM_SAFETY_SYSTEM_DIAGNOSTIC_SESSION) || (RTE_CONST_DCM_SAFETY_SYSTEM_DIAGNOSTIC_SESSION != 4u)
#   error "Enumeration constant <DCM_SAFETY_SYSTEM_DIAGNOSTIC_SESSION> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_DCM_SAFETY_SYSTEM_DIAGNOSTIC_SESSION (4u)
#  define DCM_SAFETY_SYSTEM_DIAGNOSTIC_SESSION ((Dcm_SesCtrlType)4u)
# endif
# if (defined RTE_CONST_STAND_BY) || (defined STAND_BY)
#  if (!defined RTE_CONST_STAND_BY) || (RTE_CONST_STAND_BY != 73u)
#   error "Enumeration constant <STAND_BY> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_STAND_BY (73u)
#  define STAND_BY ((Dcm_SesCtrlType)73u)
# endif
# if (defined RTE_CONST_DCM_ALL_SESSION_LEVEL) || (defined DCM_ALL_SESSION_LEVEL)
#  if (!defined RTE_CONST_DCM_ALL_SESSION_LEVEL) || (RTE_CONST_DCM_ALL_SESSION_LEVEL != 255u)
#   error "Enumeration constant <DCM_ALL_SESSION_LEVEL> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_DCM_ALL_SESSION_LEVEL (255u)
#  define DCM_ALL_SESSION_LEVEL ((Dcm_SesCtrlType)255u)
# endif

#endif



# define Rte_TypeDef_Dem_DTCKindType
//typedef uint8 Dem_DTCKindType;
//# define Dem_DTCKindType_LowerLimit ((Dem_DTCKindType)1u)
//# define Dem_DTCKindType_UpperLimit ((Dem_DTCKindType)2u)
//# if (defined RTE_CONST_DEM_DTC_KIND_ALL_DTCS) || (defined DEM_DTC_KIND_ALL_DTCS)
//#  if (!defined RTE_CONST_DEM_DTC_KIND_ALL_DTCS) || (RTE_CONST_DEM_DTC_KIND_ALL_DTCS != 1u)
//#   error "Enumeration constant <DEM_DTC_KIND_ALL_DTCS> conflicts with another constant."
//#  endif
//# else
//#  define RTE_CONST_DEM_DTC_KIND_ALL_DTCS (1u)
//#  define DEM_DTC_KIND_ALL_DTCS ((Dem_DTCKindType)1u)
//# endif
//# if (defined RTE_CONST_DEM_DTC_KIND_EMISSION_REL_DTCS) || (defined DEM_DTC_KIND_EMISSION_REL_DTCS)
//#  if (!defined RTE_CONST_DEM_DTC_KIND_EMISSION_REL_DTCS) || (RTE_CONST_DEM_DTC_KIND_EMISSION_REL_DTCS != 2u)
//#   error "Enumeration constant <DEM_DTC_KIND_EMISSION_REL_DTCS> conflicts with another constant."
//#  endif
//# else
//#  define RTE_CONST_DEM_DTC_KIND_EMISSION_REL_DTCS (2u)
//#  define DEM_DTC_KIND_EMISSION_REL_DTCS ((Dem_DTCKindType)2u)
//# endif

# define Rte_TypeDef_Dem_EventStatusType
//typedef uint8 Dem_EventStatusType;
//# define Dem_EventStatusType_LowerLimit ((Dem_EventStatusType)0u)
//# define Dem_EventStatusType_UpperLimit ((Dem_EventStatusType)255u)
//# if (defined RTE_CONST_DEM_EVENT_STATUS_PASSED) || (defined DEM_EVENT_STATUS_PASSED)
//#  if (!defined RTE_CONST_DEM_EVENT_STATUS_PASSED) || (RTE_CONST_DEM_EVENT_STATUS_PASSED != 0u)
//#   error "Enumeration constant <DEM_EVENT_STATUS_PASSED> conflicts with another constant."
//#  endif
//# else
//#  define RTE_CONST_DEM_EVENT_STATUS_PASSED (0u)
//#  define DEM_EVENT_STATUS_PASSED ((Dem_EventStatusType)0u)
//# endif
//# if (defined RTE_CONST_DEM_EVENT_STATUS_FAILED) || (defined DEM_EVENT_STATUS_FAILED)
//#  if (!defined RTE_CONST_DEM_EVENT_STATUS_FAILED) || (RTE_CONST_DEM_EVENT_STATUS_FAILED != 1u)
//#   error "Enumeration constant <DEM_EVENT_STATUS_FAILED> conflicts with another constant."
//#  endif
//# else
//#  define RTE_CONST_DEM_EVENT_STATUS_FAILED (1u)
//#  define DEM_EVENT_STATUS_FAILED ((Dem_EventStatusType)1u)
//# endif
//# if (defined RTE_CONST_DEM_EVENT_STATUS_PREPASSED) || (defined DEM_EVENT_STATUS_PREPASSED)
//#  if (!defined RTE_CONST_DEM_EVENT_STATUS_PREPASSED) || (RTE_CONST_DEM_EVENT_STATUS_PREPASSED != 2u)
//#   error "Enumeration constant <DEM_EVENT_STATUS_PREPASSED> conflicts with another constant."
//#  endif
//# else
//#  define RTE_CONST_DEM_EVENT_STATUS_PREPASSED (2u)
//#  define DEM_EVENT_STATUS_PREPASSED ((Dem_EventStatusType)2u)
//# endif
//# if (defined RTE_CONST_DEM_EVENT_STATUS_PREFAILED) || (defined DEM_EVENT_STATUS_PREFAILED)
//#  if (!defined RTE_CONST_DEM_EVENT_STATUS_PREFAILED) || (RTE_CONST_DEM_EVENT_STATUS_PREFAILED != 3u)
//#   error "Enumeration constant <DEM_EVENT_STATUS_PREFAILED> conflicts with another constant."
//#  endif
//# else
//#  define RTE_CONST_DEM_EVENT_STATUS_PREFAILED (3u)
//#  define DEM_EVENT_STATUS_PREFAILED ((Dem_EventStatusType)3u)
//# endif

# define Rte_TypeDef_Dem_IndicatorStatusType
//typedef uint8 Dem_IndicatorStatusType;
//# define Dem_IndicatorStatusType_LowerLimit ((Dem_IndicatorStatusType)0u)
//# define Dem_IndicatorStatusType_UpperLimit ((Dem_IndicatorStatusType)3u)
//# if (defined RTE_CONST_DEM_INDICATOR_OFF) || (defined DEM_INDICATOR_OFF)
//#  if (!defined RTE_CONST_DEM_INDICATOR_OFF) || (RTE_CONST_DEM_INDICATOR_OFF != 0u)
//#   error "Enumeration constant <DEM_INDICATOR_OFF> conflicts with another constant."
//#  endif
//# else
//#  define RTE_CONST_DEM_INDICATOR_OFF (0u)
//#  define DEM_INDICATOR_OFF ((Dem_IndicatorStatusType)0u)
//# endif
//# if (defined RTE_CONST_DEM_INDICATOR_CONTINUOUS) || (defined DEM_INDICATOR_CONTINUOUS)
//#  if (!defined RTE_CONST_DEM_INDICATOR_CONTINUOUS) || (RTE_CONST_DEM_INDICATOR_CONTINUOUS != 1u)
//#   error "Enumeration constant <DEM_INDICATOR_CONTINUOUS> conflicts with another constant."
//#  endif
//# else
//#  define RTE_CONST_DEM_INDICATOR_CONTINUOUS (1u)
//#  define DEM_INDICATOR_CONTINUOUS ((Dem_IndicatorStatusType)1u)
//# endif
//# if (defined RTE_CONST_DEM_INDICATOR_BLINKING) || (defined DEM_INDICATOR_BLINKING)
//#  if (!defined RTE_CONST_DEM_INDICATOR_BLINKING) || (RTE_CONST_DEM_INDICATOR_BLINKING != 2u)
//#   error "Enumeration constant <DEM_INDICATOR_BLINKING> conflicts with another constant."
//#  endif
//# else
//#  define RTE_CONST_DEM_INDICATOR_BLINKING (2u)
//#  define DEM_INDICATOR_BLINKING ((Dem_IndicatorStatusType)2u)
//# endif
//# if (defined RTE_CONST_DEM_INDICATOR_BLINK_CONT) || (defined DEM_INDICATOR_BLINK_CONT)
//#  if (!defined RTE_CONST_DEM_INDICATOR_BLINK_CONT) || (RTE_CONST_DEM_INDICATOR_BLINK_CONT != 3u)
//#   error "Enumeration constant <DEM_INDICATOR_BLINK_CONT> conflicts with another constant."
//#  endif
//# else
//#  define RTE_CONST_DEM_INDICATOR_BLINK_CONT (3u)
//#  define DEM_INDICATOR_BLINK_CONT ((Dem_IndicatorStatusType)3u)
//# endif

# define Rte_TypeDef_Dem_OperationCycleStateType
//typedef uint8 Dem_OperationCycleStateType;
//# define Dem_OperationCycleStateType_LowerLimit ((Dem_OperationCycleStateType)1u)
//# define Dem_OperationCycleStateType_UpperLimit ((Dem_OperationCycleStateType)2u)
//# if (defined RTE_CONST_DEM_CYCLE_STATE_START) || (defined DEM_CYCLE_STATE_START)
//#  if (!defined RTE_CONST_DEM_CYCLE_STATE_START) || (RTE_CONST_DEM_CYCLE_STATE_START != 1u)
//#   error "Enumeration constant <DEM_CYCLE_STATE_START> conflicts with another constant."
//#  endif
//# else
//#  define RTE_CONST_DEM_CYCLE_STATE_START (1u)
//#  define DEM_CYCLE_STATE_START ((Dem_OperationCycleStateType)1u)
//# endif
//# if (defined RTE_CONST_DEM_CYCLE_STATE_END) || (defined DEM_CYCLE_STATE_END)
//#  if (!defined RTE_CONST_DEM_CYCLE_STATE_END) || (RTE_CONST_DEM_CYCLE_STATE_END != 2u)
//#   error "Enumeration constant <DEM_CYCLE_STATE_END> conflicts with another constant."
//#  endif
//# else
//#  define RTE_CONST_DEM_CYCLE_STATE_END (2u)
//#  define DEM_CYCLE_STATE_END ((Dem_OperationCycleStateType)2u)
//# endif

# define Rte_TypeDef_SwcDemSc_FlReportType
//typedef uint8 SwcDemSc_FlReportType;
//# define SwcDemSc_FlReportType_LowerLimit ((SwcDemSc_FlReportType)0u)
//# define SwcDemSc_FlReportType_UpperLimit ((SwcDemSc_FlReportType)255u)
//# define Rte_InvalidValue_SwcDemSc_FlReportType ((SwcDemSc_FlReportType)255u)
//# if (defined RTE_CONST_SWCDEMSC_STAT_FL_REPORT_CYCLIC) || (defined SWCDEMSC_STAT_FL_REPORT_CYCLIC)
//#  if (!defined RTE_CONST_SWCDEMSC_STAT_FL_REPORT_CYCLIC) || (RTE_CONST_SWCDEMSC_STAT_FL_REPORT_CYCLIC != 0u)
//#   error "Enumeration constant <SWCDEMSC_STAT_FL_REPORT_CYCLIC> conflicts with another constant."
//#  endif
//# else
//#  define RTE_CONST_SWCDEMSC_STAT_FL_REPORT_CYCLIC (0u)
//#  define SWCDEMSC_STAT_FL_REPORT_CYCLIC ((SwcDemSc_FlReportType)0u)
//# endif
//# if (defined RTE_CONST_SWCDEMSC_STAT_FL_REPORT_EVENT) || (defined SWCDEMSC_STAT_FL_REPORT_EVENT)
//#  if (!defined RTE_CONST_SWCDEMSC_STAT_FL_REPORT_EVENT) || (RTE_CONST_SWCDEMSC_STAT_FL_REPORT_EVENT != 1u)
//#   error "Enumeration constant <SWCDEMSC_STAT_FL_REPORT_EVENT> conflicts with another constant."
//#  endif
//# else
//#  define RTE_CONST_SWCDEMSC_STAT_FL_REPORT_EVENT (1u)
//#  define SWCDEMSC_STAT_FL_REPORT_EVENT ((SwcDemSc_FlReportType)1u)
//# endif
//# if (defined RTE_CONST_SWCDEMSC_STAT_FL_REPORT_INVALID) || (defined SWCDEMSC_STAT_FL_REPORT_INVALID)
//#  if (!defined RTE_CONST_SWCDEMSC_STAT_FL_REPORT_INVALID) || (RTE_CONST_SWCDEMSC_STAT_FL_REPORT_INVALID != 255u)
//#   error "Enumeration constant <SWCDEMSC_STAT_FL_REPORT_INVALID> conflicts with another constant."
//#  endif
//# else
//#  define RTE_CONST_SWCDEMSC_STAT_FL_REPORT_INVALID (255u)
//#  define SWCDEMSC_STAT_FL_REPORT_INVALID ((SwcDemSc_FlReportType)255u)
//# endif

# define Rte_TypeDef_SwcDemSc_StdReturnType
//typedef uint8 SwcDemSc_StdReturnType;
//# define SwcDemSc_StdReturnType_LowerLimit ((SwcDemSc_StdReturnType)0u)
//# define SwcDemSc_StdReturnType_UpperLimit ((SwcDemSc_StdReturnType)255u)
//# define Rte_InvalidValue_SwcDemSc_StdReturnType ((SwcDemSc_StdReturnType)255u)
//# if (defined RTE_CONST_SWCDEMSC_E_OK) || (defined SWCDEMSC_E_OK)
//#  if (!defined RTE_CONST_SWCDEMSC_E_OK) || (RTE_CONST_SWCDEMSC_E_OK != 0u)
//#   error "Enumeration constant <SWCDEMSC_E_OK> conflicts with another constant."
//#  endif
//# else
//#  define RTE_CONST_SWCDEMSC_E_OK (0u)
//#  define SWCDEMSC_E_OK ((SwcDemSc_StdReturnType)0u)
//# endif
//# if (defined RTE_CONST_SWCDEMSC_E_NOT_OK) || (defined SWCDEMSC_E_NOT_OK)
//#  if (!defined RTE_CONST_SWCDEMSC_E_NOT_OK) || (RTE_CONST_SWCDEMSC_E_NOT_OK != 1u)
//#   error "Enumeration constant <SWCDEMSC_E_NOT_OK> conflicts with another constant."
//#  endif
//# else
//#  define RTE_CONST_SWCDEMSC_E_NOT_OK (1u)
//#  define SWCDEMSC_E_NOT_OK ((SwcDemSc_StdReturnType)1u)
//# endif
//# if (defined RTE_CONST_SWCDEMSC_E_INVALID) || (defined SWCDEMSC_E_INVALID)
//#  if (!defined RTE_CONST_SWCDEMSC_E_INVALID) || (RTE_CONST_SWCDEMSC_E_INVALID != 255u)
//#   error "Enumeration constant <SWCDEMSC_E_INVALID> conflicts with another constant."
//#  endif
//# else
//#  define RTE_CONST_SWCDEMSC_E_INVALID (255u)
//#  define SWCDEMSC_E_INVALID ((SwcDemSc_StdReturnType)255u)
//# endif

# define Rte_TypeDef_c01_ALDW_WarnMd_Rq
typedef uint8 c01_ALDW_WarnMd_Rq;
# define c01_ALDW_WarnMd_Rq_LowerLimit ((c01_ALDW_WarnMd_Rq)0u)
# define c01_ALDW_WarnMd_Rq_UpperLimit ((c01_ALDW_WarnMd_Rq)1u)
# if (defined RTE_CONST_I_C01_ALDW_WARNMD_RQ_PLS) || (defined I_C01_ALDW_WARNMD_RQ_PLS)
#  if (!defined RTE_CONST_I_C01_ALDW_WARNMD_RQ_PLS) || (RTE_CONST_I_C01_ALDW_WARNMD_RQ_PLS != 0u)
#   error "Enumeration constant <I_C01_ALDW_WARNMD_RQ_PLS> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C01_ALDW_WARNMD_RQ_PLS (0u)
#  define I_C01_ALDW_WARNMD_RQ_PLS ((c01_ALDW_WarnMd_Rq)0u)
# endif
# if (defined RTE_CONST_I_C01_ALDW_WARNMD_RQ_CONT) || (defined I_C01_ALDW_WARNMD_RQ_CONT)
#  if (!defined RTE_CONST_I_C01_ALDW_WARNMD_RQ_CONT) || (RTE_CONST_I_C01_ALDW_WARNMD_RQ_CONT != 1u)
#   error "Enumeration constant <I_C01_ALDW_WARNMD_RQ_CONT> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C01_ALDW_WARNMD_RQ_CONT (1u)
#  define I_C01_ALDW_WARNMD_RQ_CONT ((c01_ALDW_WarnMd_Rq)1u)
# endif

# define Rte_TypeDef_c01_FalseTrue
typedef uint8 c01_FalseTrue;
# define c01_FalseTrue_LowerLimit ((c01_FalseTrue)0u)
# define c01_FalseTrue_UpperLimit ((c01_FalseTrue)1u)
# if (defined RTE_CONST_I_C01_FALSETRUE_FALSE) || (defined I_C01_FALSETRUE_FALSE)
#  if (!defined RTE_CONST_I_C01_FALSETRUE_FALSE) || (RTE_CONST_I_C01_FALSETRUE_FALSE != 0u)
#   error "Enumeration constant <I_C01_FALSETRUE_FALSE> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C01_FALSETRUE_FALSE (0u)
#  define I_C01_FALSETRUE_FALSE ((c01_FalseTrue)0u)
# endif
# if (defined RTE_CONST_I_C01_FALSETRUE_TRUE) || (defined I_C01_FALSETRUE_TRUE)
#  if (!defined RTE_CONST_I_C01_FALSETRUE_TRUE) || (RTE_CONST_I_C01_FALSETRUE_TRUE != 1u)
#   error "Enumeration constant <I_C01_FALSETRUE_TRUE> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C01_FALSETRUE_TRUE (1u)
#  define I_C01_FALSETRUE_TRUE ((c01_FalseTrue)1u)
# endif

# define Rte_TypeDef_c01_LgtSens_Night
typedef uint8 c01_LgtSens_Night;
# define c01_LgtSens_Night_LowerLimit ((c01_LgtSens_Night)0u)
# define c01_LgtSens_Night_UpperLimit ((c01_LgtSens_Night)1u)
# if (defined RTE_CONST_I_C01_LGTSENS_NIGHT_DAY) || (defined I_C01_LGTSENS_NIGHT_DAY)
#  if (!defined RTE_CONST_I_C01_LGTSENS_NIGHT_DAY) || (RTE_CONST_I_C01_LGTSENS_NIGHT_DAY != 0u)
#   error "Enumeration constant <I_C01_LGTSENS_NIGHT_DAY> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C01_LGTSENS_NIGHT_DAY (0u)
#  define I_C01_LGTSENS_NIGHT_DAY ((c01_LgtSens_Night)0u)
# endif
# if (defined RTE_CONST_I_C01_LGTSENS_NIGHT_NIGHT) || (defined I_C01_LGTSENS_NIGHT_NIGHT)
#  if (!defined RTE_CONST_I_C01_LGTSENS_NIGHT_NIGHT) || (RTE_CONST_I_C01_LGTSENS_NIGHT_NIGHT != 1u)
#   error "Enumeration constant <I_C01_LGTSENS_NIGHT_NIGHT> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C01_LGTSENS_NIGHT_NIGHT (1u)
#  define I_C01_LGTSENS_NIGHT_NIGHT ((c01_LgtSens_Night)1u)
# endif

# define Rte_TypeDef_c01_Off_On
typedef uint8 c01_Off_On;
# define c01_Off_On_LowerLimit ((c01_Off_On)0u)
# define c01_Off_On_UpperLimit ((c01_Off_On)1u)
# if (defined RTE_CONST_I_C01_OFF_ON_OFF) || (defined I_C01_OFF_ON_OFF)
#  if (!defined RTE_CONST_I_C01_OFF_ON_OFF) || (RTE_CONST_I_C01_OFF_ON_OFF != 0u)
#   error "Enumeration constant <I_C01_OFF_ON_OFF> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C01_OFF_ON_OFF (0u)
#  define I_C01_OFF_ON_OFF ((c01_Off_On)0u)
# endif
# if (defined RTE_CONST_I_C01_OFF_ON_ON) || (defined I_C01_OFF_ON_ON)
#  if (!defined RTE_CONST_I_C01_OFF_ON_ON) || (RTE_CONST_I_C01_OFF_ON_ON != 1u)
#   error "Enumeration constant <I_C01_OFF_ON_ON> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C01_OFF_ON_ON (1u)
#  define I_C01_OFF_ON_ON ((c01_Off_On)1u)
# endif

# define Rte_TypeDef_c01_Right_Left
typedef uint8 c01_Right_Left;
# define c01_Right_Left_LowerLimit ((c01_Right_Left)0u)
# define c01_Right_Left_UpperLimit ((c01_Right_Left)1u)
# if (defined RTE_CONST_I_C01_RIGHT_LEFT_LHD) || (defined I_C01_RIGHT_LEFT_LHD)
#  if (!defined RTE_CONST_I_C01_RIGHT_LEFT_LHD) || (RTE_CONST_I_C01_RIGHT_LEFT_LHD != 0u)
#   error "Enumeration constant <I_C01_RIGHT_LEFT_LHD> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C01_RIGHT_LEFT_LHD (0u)
#  define I_C01_RIGHT_LEFT_LHD ((c01_Right_Left)0u)
# endif
# if (defined RTE_CONST_I_C01_RIGHT_LEFT_RHD) || (defined I_C01_RIGHT_LEFT_RHD)
#  if (!defined RTE_CONST_I_C01_RIGHT_LEFT_RHD) || (RTE_CONST_I_C01_RIGHT_LEFT_RHD != 1u)
#   error "Enumeration constant <I_C01_RIGHT_LEFT_RHD> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C01_RIGHT_LEFT_RHD (1u)
#  define I_C01_RIGHT_LEFT_RHD ((c01_Right_Left)1u)
# endif

# define Rte_TypeDef_c01_UnitVehSpd
typedef uint8 c01_UnitVehSpd;
# define c01_UnitVehSpd_LowerLimit ((c01_UnitVehSpd)0u)
# define c01_UnitVehSpd_UpperLimit ((c01_UnitVehSpd)1u)
# if (defined RTE_CONST_I_C01_UNITVEHSPD_KMH) || (defined I_C01_UNITVEHSPD_KMH)
#  if (!defined RTE_CONST_I_C01_UNITVEHSPD_KMH) || (RTE_CONST_I_C01_UNITVEHSPD_KMH != 0u)
#   error "Enumeration constant <I_C01_UNITVEHSPD_KMH> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C01_UNITVEHSPD_KMH (0u)
#  define I_C01_UNITVEHSPD_KMH ((c01_UnitVehSpd)0u)
# endif
# if (defined RTE_CONST_I_C01_UNITVEHSPD_MPH) || (defined I_C01_UNITVEHSPD_MPH)
#  if (!defined RTE_CONST_I_C01_UNITVEHSPD_MPH) || (RTE_CONST_I_C01_UNITVEHSPD_MPH != 1u)
#   error "Enumeration constant <I_C01_UNITVEHSPD_MPH> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C01_UNITVEHSPD_MPH (1u)
#  define I_C01_UNITVEHSPD_MPH ((c01_UnitVehSpd)1u)
# endif

# define Rte_TypeDef_c01_UnitVehSpd_IC
typedef uint8 c01_UnitVehSpd_IC;
# define c01_UnitVehSpd_IC_LowerLimit ((c01_UnitVehSpd_IC)0u)
# define c01_UnitVehSpd_IC_UpperLimit ((c01_UnitVehSpd_IC)1u)
# if (defined RTE_CONST_I_C01_UNITVEHSPD_IC_KMH_KM) || (defined I_C01_UNITVEHSPD_IC_KMH_KM)
#  if (!defined RTE_CONST_I_C01_UNITVEHSPD_IC_KMH_KM) || (RTE_CONST_I_C01_UNITVEHSPD_IC_KMH_KM != 0u)
#   error "Enumeration constant <I_C01_UNITVEHSPD_IC_KMH_KM> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C01_UNITVEHSPD_IC_KMH_KM (0u)
#  define I_C01_UNITVEHSPD_IC_KMH_KM ((c01_UnitVehSpd_IC)0u)
# endif
# if (defined RTE_CONST_I_C01_UNITVEHSPD_IC_MPH_MI) || (defined I_C01_UNITVEHSPD_IC_MPH_MI)
#  if (!defined RTE_CONST_I_C01_UNITVEHSPD_IC_MPH_MI) || (RTE_CONST_I_C01_UNITVEHSPD_IC_MPH_MI != 1u)
#   error "Enumeration constant <I_C01_UNITVEHSPD_IC_MPH_MI> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C01_UNITVEHSPD_IC_MPH_MI (1u)
#  define I_C01_UNITVEHSPD_IC_MPH_MI ((c01_UnitVehSpd_IC)1u)
# endif

# define Rte_TypeDef_c02_ADAS_AreaBuildUp
typedef uint8 c02_ADAS_AreaBuildUp;
# define c02_ADAS_AreaBuildUp_LowerLimit ((c02_ADAS_AreaBuildUp)0u)
# define c02_ADAS_AreaBuildUp_UpperLimit ((c02_ADAS_AreaBuildUp)3u)
# define Rte_InvalidValue_c02_ADAS_AreaBuildUp ((c02_ADAS_AreaBuildUp)3u)
# if (defined RTE_CONST_I_C02_ADAS_AREABUILDUP_NPART_OF_BA) || (defined I_C02_ADAS_AREABUILDUP_NPART_OF_BA)
#  if (!defined RTE_CONST_I_C02_ADAS_AREABUILDUP_NPART_OF_BA) || (RTE_CONST_I_C02_ADAS_AREABUILDUP_NPART_OF_BA != 0u)
#   error "Enumeration constant <I_C02_ADAS_AREABUILDUP_NPART_OF_BA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_ADAS_AREABUILDUP_NPART_OF_BA (0u)
#  define I_C02_ADAS_AREABUILDUP_NPART_OF_BA ((c02_ADAS_AreaBuildUp)0u)
# endif
# if (defined RTE_CONST_I_C02_ADAS_AREABUILDUP_PART_OF_BA) || (defined I_C02_ADAS_AREABUILDUP_PART_OF_BA)
#  if (!defined RTE_CONST_I_C02_ADAS_AREABUILDUP_PART_OF_BA) || (RTE_CONST_I_C02_ADAS_AREABUILDUP_PART_OF_BA != 1u)
#   error "Enumeration constant <I_C02_ADAS_AREABUILDUP_PART_OF_BA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_ADAS_AREABUILDUP_PART_OF_BA (1u)
#  define I_C02_ADAS_AREABUILDUP_PART_OF_BA ((c02_ADAS_AreaBuildUp)1u)
# endif
# if (defined RTE_CONST_I_C02_ADAS_AREABUILDUP_UNKWN) || (defined I_C02_ADAS_AREABUILDUP_UNKWN)
#  if (!defined RTE_CONST_I_C02_ADAS_AREABUILDUP_UNKWN) || (RTE_CONST_I_C02_ADAS_AREABUILDUP_UNKWN != 2u)
#   error "Enumeration constant <I_C02_ADAS_AREABUILDUP_UNKWN> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_ADAS_AREABUILDUP_UNKWN (2u)
#  define I_C02_ADAS_AREABUILDUP_UNKWN ((c02_ADAS_AreaBuildUp)2u)
# endif
# if (defined RTE_CONST_I_C02_ADAS_AREABUILDUP_SNA) || (defined I_C02_ADAS_AREABUILDUP_SNA)
#  if (!defined RTE_CONST_I_C02_ADAS_AREABUILDUP_SNA) || (RTE_CONST_I_C02_ADAS_AREABUILDUP_SNA != 3u)
#   error "Enumeration constant <I_C02_ADAS_AREABUILDUP_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_ADAS_AREABUILDUP_SNA (3u)
#  define I_C02_ADAS_AREABUILDUP_SNA ((c02_ADAS_AreaBuildUp)3u)
# endif

# define Rte_TypeDef_c02_ADAS_Bridge
typedef uint8 c02_ADAS_Bridge;
# define c02_ADAS_Bridge_LowerLimit ((c02_ADAS_Bridge)0u)
# define c02_ADAS_Bridge_UpperLimit ((c02_ADAS_Bridge)3u)
# define Rte_InvalidValue_c02_ADAS_Bridge ((c02_ADAS_Bridge)3u)
# if (defined RTE_CONST_I_C02_ADAS_BRIDGE_NPART_OF_BRG) || (defined I_C02_ADAS_BRIDGE_NPART_OF_BRG)
#  if (!defined RTE_CONST_I_C02_ADAS_BRIDGE_NPART_OF_BRG) || (RTE_CONST_I_C02_ADAS_BRIDGE_NPART_OF_BRG != 0u)
#   error "Enumeration constant <I_C02_ADAS_BRIDGE_NPART_OF_BRG> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_ADAS_BRIDGE_NPART_OF_BRG (0u)
#  define I_C02_ADAS_BRIDGE_NPART_OF_BRG ((c02_ADAS_Bridge)0u)
# endif
# if (defined RTE_CONST_I_C02_ADAS_BRIDGE_PART_OF_BRG) || (defined I_C02_ADAS_BRIDGE_PART_OF_BRG)
#  if (!defined RTE_CONST_I_C02_ADAS_BRIDGE_PART_OF_BRG) || (RTE_CONST_I_C02_ADAS_BRIDGE_PART_OF_BRG != 1u)
#   error "Enumeration constant <I_C02_ADAS_BRIDGE_PART_OF_BRG> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_ADAS_BRIDGE_PART_OF_BRG (1u)
#  define I_C02_ADAS_BRIDGE_PART_OF_BRG ((c02_ADAS_Bridge)1u)
# endif
# if (defined RTE_CONST_I_C02_ADAS_BRIDGE_UNKWN) || (defined I_C02_ADAS_BRIDGE_UNKWN)
#  if (!defined RTE_CONST_I_C02_ADAS_BRIDGE_UNKWN) || (RTE_CONST_I_C02_ADAS_BRIDGE_UNKWN != 2u)
#   error "Enumeration constant <I_C02_ADAS_BRIDGE_UNKWN> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_ADAS_BRIDGE_UNKWN (2u)
#  define I_C02_ADAS_BRIDGE_UNKWN ((c02_ADAS_Bridge)2u)
# endif
# if (defined RTE_CONST_I_C02_ADAS_BRIDGE_SNA) || (defined I_C02_ADAS_BRIDGE_SNA)
#  if (!defined RTE_CONST_I_C02_ADAS_BRIDGE_SNA) || (RTE_CONST_I_C02_ADAS_BRIDGE_SNA != 3u)
#   error "Enumeration constant <I_C02_ADAS_BRIDGE_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_ADAS_BRIDGE_SNA (3u)
#  define I_C02_ADAS_BRIDGE_SNA ((c02_ADAS_Bridge)3u)
# endif

# define Rte_TypeDef_c02_ADAS_CmpxInsct
typedef uint8 c02_ADAS_CmpxInsct;
# define c02_ADAS_CmpxInsct_LowerLimit ((c02_ADAS_CmpxInsct)0u)
# define c02_ADAS_CmpxInsct_UpperLimit ((c02_ADAS_CmpxInsct)3u)
# define Rte_InvalidValue_c02_ADAS_CmpxInsct ((c02_ADAS_CmpxInsct)3u)
# if (defined RTE_CONST_I_C02_ADAS_CMPXINSCT_NPART_OF_CI) || (defined I_C02_ADAS_CMPXINSCT_NPART_OF_CI)
#  if (!defined RTE_CONST_I_C02_ADAS_CMPXINSCT_NPART_OF_CI) || (RTE_CONST_I_C02_ADAS_CMPXINSCT_NPART_OF_CI != 0u)
#   error "Enumeration constant <I_C02_ADAS_CMPXINSCT_NPART_OF_CI> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_ADAS_CMPXINSCT_NPART_OF_CI (0u)
#  define I_C02_ADAS_CMPXINSCT_NPART_OF_CI ((c02_ADAS_CmpxInsct)0u)
# endif
# if (defined RTE_CONST_I_C02_ADAS_CMPXINSCT_PART_OF_CI) || (defined I_C02_ADAS_CMPXINSCT_PART_OF_CI)
#  if (!defined RTE_CONST_I_C02_ADAS_CMPXINSCT_PART_OF_CI) || (RTE_CONST_I_C02_ADAS_CMPXINSCT_PART_OF_CI != 1u)
#   error "Enumeration constant <I_C02_ADAS_CMPXINSCT_PART_OF_CI> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_ADAS_CMPXINSCT_PART_OF_CI (1u)
#  define I_C02_ADAS_CMPXINSCT_PART_OF_CI ((c02_ADAS_CmpxInsct)1u)
# endif
# if (defined RTE_CONST_I_C02_ADAS_CMPXINSCT_UNKWN) || (defined I_C02_ADAS_CMPXINSCT_UNKWN)
#  if (!defined RTE_CONST_I_C02_ADAS_CMPXINSCT_UNKWN) || (RTE_CONST_I_C02_ADAS_CMPXINSCT_UNKWN != 2u)
#   error "Enumeration constant <I_C02_ADAS_CMPXINSCT_UNKWN> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_ADAS_CMPXINSCT_UNKWN (2u)
#  define I_C02_ADAS_CMPXINSCT_UNKWN ((c02_ADAS_CmpxInsct)2u)
# endif
# if (defined RTE_CONST_I_C02_ADAS_CMPXINSCT_SNA) || (defined I_C02_ADAS_CMPXINSCT_SNA)
#  if (!defined RTE_CONST_I_C02_ADAS_CMPXINSCT_SNA) || (RTE_CONST_I_C02_ADAS_CMPXINSCT_SNA != 3u)
#   error "Enumeration constant <I_C02_ADAS_CMPXINSCT_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_ADAS_CMPXINSCT_SNA (3u)
#  define I_C02_ADAS_CMPXINSCT_SNA ((c02_ADAS_CmpxInsct)3u)
# endif

# define Rte_TypeDef_c02_ADAS_NumOfLaneOppDir
typedef uint8 c02_ADAS_NumOfLaneOppDir;
# define c02_ADAS_NumOfLaneOppDir_LowerLimit ((c02_ADAS_NumOfLaneOppDir)0u)
# define c02_ADAS_NumOfLaneOppDir_UpperLimit ((c02_ADAS_NumOfLaneOppDir)3u)
# if (defined RTE_CONST_I_C02_ADAS_NUMOFLANEOPPDIR_DIR1_ROAD) || (defined I_C02_ADAS_NUMOFLANEOPPDIR_DIR1_ROAD)
#  if (!defined RTE_CONST_I_C02_ADAS_NUMOFLANEOPPDIR_DIR1_ROAD) || (RTE_CONST_I_C02_ADAS_NUMOFLANEOPPDIR_DIR1_ROAD != 0u)
#   error "Enumeration constant <I_C02_ADAS_NUMOFLANEOPPDIR_DIR1_ROAD> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_ADAS_NUMOFLANEOPPDIR_DIR1_ROAD (0u)
#  define I_C02_ADAS_NUMOFLANEOPPDIR_DIR1_ROAD ((c02_ADAS_NumOfLaneOppDir)0u)
# endif
# if (defined RTE_CONST_I_C02_ADAS_NUMOFLANEOPPDIR_L1) || (defined I_C02_ADAS_NUMOFLANEOPPDIR_L1)
#  if (!defined RTE_CONST_I_C02_ADAS_NUMOFLANEOPPDIR_L1) || (RTE_CONST_I_C02_ADAS_NUMOFLANEOPPDIR_L1 != 1u)
#   error "Enumeration constant <I_C02_ADAS_NUMOFLANEOPPDIR_L1> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_ADAS_NUMOFLANEOPPDIR_L1 (1u)
#  define I_C02_ADAS_NUMOFLANEOPPDIR_L1 ((c02_ADAS_NumOfLaneOppDir)1u)
# endif
# if (defined RTE_CONST_I_C02_ADAS_NUMOFLANEOPPDIR_L2_MORE) || (defined I_C02_ADAS_NUMOFLANEOPPDIR_L2_MORE)
#  if (!defined RTE_CONST_I_C02_ADAS_NUMOFLANEOPPDIR_L2_MORE) || (RTE_CONST_I_C02_ADAS_NUMOFLANEOPPDIR_L2_MORE != 2u)
#   error "Enumeration constant <I_C02_ADAS_NUMOFLANEOPPDIR_L2_MORE> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_ADAS_NUMOFLANEOPPDIR_L2_MORE (2u)
#  define I_C02_ADAS_NUMOFLANEOPPDIR_L2_MORE ((c02_ADAS_NumOfLaneOppDir)2u)
# endif
# if (defined RTE_CONST_I_C02_ADAS_NUMOFLANEOPPDIR_UNKWN) || (defined I_C02_ADAS_NUMOFLANEOPPDIR_UNKWN)
#  if (!defined RTE_CONST_I_C02_ADAS_NUMOFLANEOPPDIR_UNKWN) || (RTE_CONST_I_C02_ADAS_NUMOFLANEOPPDIR_UNKWN != 3u)
#   error "Enumeration constant <I_C02_ADAS_NUMOFLANEOPPDIR_UNKWN> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_ADAS_NUMOFLANEOPPDIR_UNKWN (3u)
#  define I_C02_ADAS_NUMOFLANEOPPDIR_UNKWN ((c02_ADAS_NumOfLaneOppDir)3u)
# endif

# define Rte_TypeDef_c02_ADAS_PartRoute
typedef uint8 c02_ADAS_PartRoute;
# define c02_ADAS_PartRoute_LowerLimit ((c02_ADAS_PartRoute)0u)
# define c02_ADAS_PartRoute_UpperLimit ((c02_ADAS_PartRoute)3u)
# define Rte_InvalidValue_c02_ADAS_PartRoute ((c02_ADAS_PartRoute)3u)
# if (defined RTE_CONST_I_C02_ADAS_PARTROUTE_NPART_OF_CR) || (defined I_C02_ADAS_PARTROUTE_NPART_OF_CR)
#  if (!defined RTE_CONST_I_C02_ADAS_PARTROUTE_NPART_OF_CR) || (RTE_CONST_I_C02_ADAS_PARTROUTE_NPART_OF_CR != 0u)
#   error "Enumeration constant <I_C02_ADAS_PARTROUTE_NPART_OF_CR> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_ADAS_PARTROUTE_NPART_OF_CR (0u)
#  define I_C02_ADAS_PARTROUTE_NPART_OF_CR ((c02_ADAS_PartRoute)0u)
# endif
# if (defined RTE_CONST_I_C02_ADAS_PARTROUTE_PART_OF_CR) || (defined I_C02_ADAS_PARTROUTE_PART_OF_CR)
#  if (!defined RTE_CONST_I_C02_ADAS_PARTROUTE_PART_OF_CR) || (RTE_CONST_I_C02_ADAS_PARTROUTE_PART_OF_CR != 1u)
#   error "Enumeration constant <I_C02_ADAS_PARTROUTE_PART_OF_CR> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_ADAS_PARTROUTE_PART_OF_CR (1u)
#  define I_C02_ADAS_PARTROUTE_PART_OF_CR ((c02_ADAS_PartRoute)1u)
# endif
# if (defined RTE_CONST_I_C02_ADAS_PARTROUTE_UNKWN) || (defined I_C02_ADAS_PARTROUTE_UNKWN)
#  if (!defined RTE_CONST_I_C02_ADAS_PARTROUTE_UNKWN) || (RTE_CONST_I_C02_ADAS_PARTROUTE_UNKWN != 2u)
#   error "Enumeration constant <I_C02_ADAS_PARTROUTE_UNKWN> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_ADAS_PARTROUTE_UNKWN (2u)
#  define I_C02_ADAS_PARTROUTE_UNKWN ((c02_ADAS_PartRoute)2u)
# endif
# if (defined RTE_CONST_I_C02_ADAS_PARTROUTE_SNA) || (defined I_C02_ADAS_PARTROUTE_SNA)
#  if (!defined RTE_CONST_I_C02_ADAS_PARTROUTE_SNA) || (RTE_CONST_I_C02_ADAS_PARTROUTE_SNA != 3u)
#   error "Enumeration constant <I_C02_ADAS_PARTROUTE_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_ADAS_PARTROUTE_SNA (3u)
#  define I_C02_ADAS_PARTROUTE_SNA ((c02_ADAS_PartRoute)3u)
# endif

# define Rte_TypeDef_c02_ADAS_RoadDivd
typedef uint8 c02_ADAS_RoadDivd;
# define c02_ADAS_RoadDivd_LowerLimit ((c02_ADAS_RoadDivd)0u)
# define c02_ADAS_RoadDivd_UpperLimit ((c02_ADAS_RoadDivd)3u)
# define Rte_InvalidValue_c02_ADAS_RoadDivd ((c02_ADAS_RoadDivd)3u)
# if (defined RTE_CONST_I_C02_ADAS_ROADDIVD_NPART_OF_DR) || (defined I_C02_ADAS_ROADDIVD_NPART_OF_DR)
#  if (!defined RTE_CONST_I_C02_ADAS_ROADDIVD_NPART_OF_DR) || (RTE_CONST_I_C02_ADAS_ROADDIVD_NPART_OF_DR != 0u)
#   error "Enumeration constant <I_C02_ADAS_ROADDIVD_NPART_OF_DR> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_ADAS_ROADDIVD_NPART_OF_DR (0u)
#  define I_C02_ADAS_ROADDIVD_NPART_OF_DR ((c02_ADAS_RoadDivd)0u)
# endif
# if (defined RTE_CONST_I_C02_ADAS_ROADDIVD_PART_OF_DR) || (defined I_C02_ADAS_ROADDIVD_PART_OF_DR)
#  if (!defined RTE_CONST_I_C02_ADAS_ROADDIVD_PART_OF_DR) || (RTE_CONST_I_C02_ADAS_ROADDIVD_PART_OF_DR != 1u)
#   error "Enumeration constant <I_C02_ADAS_ROADDIVD_PART_OF_DR> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_ADAS_ROADDIVD_PART_OF_DR (1u)
#  define I_C02_ADAS_ROADDIVD_PART_OF_DR ((c02_ADAS_RoadDivd)1u)
# endif
# if (defined RTE_CONST_I_C02_ADAS_ROADDIVD_UNKWN) || (defined I_C02_ADAS_ROADDIVD_UNKWN)
#  if (!defined RTE_CONST_I_C02_ADAS_ROADDIVD_UNKWN) || (RTE_CONST_I_C02_ADAS_ROADDIVD_UNKWN != 2u)
#   error "Enumeration constant <I_C02_ADAS_ROADDIVD_UNKWN> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_ADAS_ROADDIVD_UNKWN (2u)
#  define I_C02_ADAS_ROADDIVD_UNKWN ((c02_ADAS_RoadDivd)2u)
# endif
# if (defined RTE_CONST_I_C02_ADAS_ROADDIVD_SNA) || (defined I_C02_ADAS_ROADDIVD_SNA)
#  if (!defined RTE_CONST_I_C02_ADAS_ROADDIVD_SNA) || (RTE_CONST_I_C02_ADAS_ROADDIVD_SNA != 3u)
#   error "Enumeration constant <I_C02_ADAS_ROADDIVD_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_ADAS_ROADDIVD_SNA (3u)
#  define I_C02_ADAS_ROADDIVD_SNA ((c02_ADAS_RoadDivd)3u)
# endif

# define Rte_TypeDef_c02_ADAS_Tunnel
typedef uint8 c02_ADAS_Tunnel;
# define c02_ADAS_Tunnel_LowerLimit ((c02_ADAS_Tunnel)0u)
# define c02_ADAS_Tunnel_UpperLimit ((c02_ADAS_Tunnel)3u)
# define Rte_InvalidValue_c02_ADAS_Tunnel ((c02_ADAS_Tunnel)3u)
# if (defined RTE_CONST_I_C02_ADAS_TUNNEL_NPART_OF_TNL) || (defined I_C02_ADAS_TUNNEL_NPART_OF_TNL)
#  if (!defined RTE_CONST_I_C02_ADAS_TUNNEL_NPART_OF_TNL) || (RTE_CONST_I_C02_ADAS_TUNNEL_NPART_OF_TNL != 0u)
#   error "Enumeration constant <I_C02_ADAS_TUNNEL_NPART_OF_TNL> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_ADAS_TUNNEL_NPART_OF_TNL (0u)
#  define I_C02_ADAS_TUNNEL_NPART_OF_TNL ((c02_ADAS_Tunnel)0u)
# endif
# if (defined RTE_CONST_I_C02_ADAS_TUNNEL_PART_OF_TNL) || (defined I_C02_ADAS_TUNNEL_PART_OF_TNL)
#  if (!defined RTE_CONST_I_C02_ADAS_TUNNEL_PART_OF_TNL) || (RTE_CONST_I_C02_ADAS_TUNNEL_PART_OF_TNL != 1u)
#   error "Enumeration constant <I_C02_ADAS_TUNNEL_PART_OF_TNL> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_ADAS_TUNNEL_PART_OF_TNL (1u)
#  define I_C02_ADAS_TUNNEL_PART_OF_TNL ((c02_ADAS_Tunnel)1u)
# endif
# if (defined RTE_CONST_I_C02_ADAS_TUNNEL_UNKWN) || (defined I_C02_ADAS_TUNNEL_UNKWN)
#  if (!defined RTE_CONST_I_C02_ADAS_TUNNEL_UNKWN) || (RTE_CONST_I_C02_ADAS_TUNNEL_UNKWN != 2u)
#   error "Enumeration constant <I_C02_ADAS_TUNNEL_UNKWN> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_ADAS_TUNNEL_UNKWN (2u)
#  define I_C02_ADAS_TUNNEL_UNKWN ((c02_ADAS_Tunnel)2u)
# endif
# if (defined RTE_CONST_I_C02_ADAS_TUNNEL_SNA) || (defined I_C02_ADAS_TUNNEL_SNA)
#  if (!defined RTE_CONST_I_C02_ADAS_TUNNEL_SNA) || (RTE_CONST_I_C02_ADAS_TUNNEL_SNA != 3u)
#   error "Enumeration constant <I_C02_ADAS_TUNNEL_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_ADAS_TUNNEL_SNA (3u)
#  define I_C02_ADAS_TUNNEL_SNA ((c02_ADAS_Tunnel)3u)
# endif

# define Rte_TypeDef_c02_ADAS_WayRt
typedef uint8 c02_ADAS_WayRt;
# define c02_ADAS_WayRt_LowerLimit ((c02_ADAS_WayRt)0u)
# define c02_ADAS_WayRt_UpperLimit ((c02_ADAS_WayRt)3u)
# define Rte_InvalidValue_c02_ADAS_WayRt ((c02_ADAS_WayRt)3u)
# if (defined RTE_CONST_I_C02_ADAS_WAYRT_RT_OF_WAY) || (defined I_C02_ADAS_WAYRT_RT_OF_WAY)
#  if (!defined RTE_CONST_I_C02_ADAS_WAYRT_RT_OF_WAY) || (RTE_CONST_I_C02_ADAS_WAYRT_RT_OF_WAY != 0u)
#   error "Enumeration constant <I_C02_ADAS_WAYRT_RT_OF_WAY> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_ADAS_WAYRT_RT_OF_WAY (0u)
#  define I_C02_ADAS_WAYRT_RT_OF_WAY ((c02_ADAS_WayRt)0u)
# endif
# if (defined RTE_CONST_I_C02_ADAS_WAYRT_GIVE_WAY) || (defined I_C02_ADAS_WAYRT_GIVE_WAY)
#  if (!defined RTE_CONST_I_C02_ADAS_WAYRT_GIVE_WAY) || (RTE_CONST_I_C02_ADAS_WAYRT_GIVE_WAY != 1u)
#   error "Enumeration constant <I_C02_ADAS_WAYRT_GIVE_WAY> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_ADAS_WAYRT_GIVE_WAY (1u)
#  define I_C02_ADAS_WAYRT_GIVE_WAY ((c02_ADAS_WayRt)1u)
# endif
# if (defined RTE_CONST_I_C02_ADAS_WAYRT_UNKWN) || (defined I_C02_ADAS_WAYRT_UNKWN)
#  if (!defined RTE_CONST_I_C02_ADAS_WAYRT_UNKWN) || (RTE_CONST_I_C02_ADAS_WAYRT_UNKWN != 2u)
#   error "Enumeration constant <I_C02_ADAS_WAYRT_UNKWN> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_ADAS_WAYRT_UNKWN (2u)
#  define I_C02_ADAS_WAYRT_UNKWN ((c02_ADAS_WayRt)2u)
# endif
# if (defined RTE_CONST_I_C02_ADAS_WAYRT_SNA) || (defined I_C02_ADAS_WAYRT_SNA)
#  if (!defined RTE_CONST_I_C02_ADAS_WAYRT_SNA) || (RTE_CONST_I_C02_ADAS_WAYRT_SNA != 3u)
#   error "Enumeration constant <I_C02_ADAS_WAYRT_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_ADAS_WAYRT_SNA (3u)
#  define I_C02_ADAS_WAYRT_SNA ((c02_ADAS_WayRt)3u)
# endif

# define Rte_TypeDef_c02_ALDW_IndLmp_On_Rq
typedef uint8 c02_ALDW_IndLmp_On_Rq;
# define c02_ALDW_IndLmp_On_Rq_LowerLimit ((c02_ALDW_IndLmp_On_Rq)0u)
# define c02_ALDW_IndLmp_On_Rq_UpperLimit ((c02_ALDW_IndLmp_On_Rq)3u)
# define Rte_InvalidValue_c02_ALDW_IndLmp_On_Rq ((c02_ALDW_IndLmp_On_Rq)3u)
# if (defined RTE_CONST_I_C02_ALDW_INDLMP_ON_RQ_OFF) || (defined I_C02_ALDW_INDLMP_ON_RQ_OFF)
#  if (!defined RTE_CONST_I_C02_ALDW_INDLMP_ON_RQ_OFF) || (RTE_CONST_I_C02_ALDW_INDLMP_ON_RQ_OFF != 0u)
#   error "Enumeration constant <I_C02_ALDW_INDLMP_ON_RQ_OFF> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_ALDW_INDLMP_ON_RQ_OFF (0u)
#  define I_C02_ALDW_INDLMP_ON_RQ_OFF ((c02_ALDW_IndLmp_On_Rq)0u)
# endif
# if (defined RTE_CONST_I_C02_ALDW_INDLMP_ON_RQ_ON) || (defined I_C02_ALDW_INDLMP_ON_RQ_ON)
#  if (!defined RTE_CONST_I_C02_ALDW_INDLMP_ON_RQ_ON) || (RTE_CONST_I_C02_ALDW_INDLMP_ON_RQ_ON != 1u)
#   error "Enumeration constant <I_C02_ALDW_INDLMP_ON_RQ_ON> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_ALDW_INDLMP_ON_RQ_ON (1u)
#  define I_C02_ALDW_INDLMP_ON_RQ_ON ((c02_ALDW_IndLmp_On_Rq)1u)
# endif
# if (defined RTE_CONST_I_C02_ALDW_INDLMP_ON_RQ_READY) || (defined I_C02_ALDW_INDLMP_ON_RQ_READY)
#  if (!defined RTE_CONST_I_C02_ALDW_INDLMP_ON_RQ_READY) || (RTE_CONST_I_C02_ALDW_INDLMP_ON_RQ_READY != 2u)
#   error "Enumeration constant <I_C02_ALDW_INDLMP_ON_RQ_READY> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_ALDW_INDLMP_ON_RQ_READY (2u)
#  define I_C02_ALDW_INDLMP_ON_RQ_READY ((c02_ALDW_IndLmp_On_Rq)2u)
# endif
# if (defined RTE_CONST_I_C02_ALDW_INDLMP_ON_RQ_SNA) || (defined I_C02_ALDW_INDLMP_ON_RQ_SNA)
#  if (!defined RTE_CONST_I_C02_ALDW_INDLMP_ON_RQ_SNA) || (RTE_CONST_I_C02_ALDW_INDLMP_ON_RQ_SNA != 3u)
#   error "Enumeration constant <I_C02_ALDW_INDLMP_ON_RQ_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_ALDW_INDLMP_ON_RQ_SNA (3u)
#  define I_C02_ALDW_INDLMP_ON_RQ_SNA ((c02_ALDW_IndLmp_On_Rq)3u)
# endif

# define Rte_TypeDef_c02_ALDW_LaneChg_Stat
typedef uint8 c02_ALDW_LaneChg_Stat;
# define c02_ALDW_LaneChg_Stat_LowerLimit ((c02_ALDW_LaneChg_Stat)0u)
# define c02_ALDW_LaneChg_Stat_UpperLimit ((c02_ALDW_LaneChg_Stat)3u)
# define Rte_InvalidValue_c02_ALDW_LaneChg_Stat ((c02_ALDW_LaneChg_Stat)3u)
# if (defined RTE_CONST_I_C02_ALDW_LANECHG_STAT_IDLE) || (defined I_C02_ALDW_LANECHG_STAT_IDLE)
#  if (!defined RTE_CONST_I_C02_ALDW_LANECHG_STAT_IDLE) || (RTE_CONST_I_C02_ALDW_LANECHG_STAT_IDLE != 0u)
#   error "Enumeration constant <I_C02_ALDW_LANECHG_STAT_IDLE> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_ALDW_LANECHG_STAT_IDLE (0u)
#  define I_C02_ALDW_LANECHG_STAT_IDLE ((c02_ALDW_LaneChg_Stat)0u)
# endif
# if (defined RTE_CONST_I_C02_ALDW_LANECHG_STAT_LT) || (defined I_C02_ALDW_LANECHG_STAT_LT)
#  if (!defined RTE_CONST_I_C02_ALDW_LANECHG_STAT_LT) || (RTE_CONST_I_C02_ALDW_LANECHG_STAT_LT != 1u)
#   error "Enumeration constant <I_C02_ALDW_LANECHG_STAT_LT> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_ALDW_LANECHG_STAT_LT (1u)
#  define I_C02_ALDW_LANECHG_STAT_LT ((c02_ALDW_LaneChg_Stat)1u)
# endif
# if (defined RTE_CONST_I_C02_ALDW_LANECHG_STAT_RT) || (defined I_C02_ALDW_LANECHG_STAT_RT)
#  if (!defined RTE_CONST_I_C02_ALDW_LANECHG_STAT_RT) || (RTE_CONST_I_C02_ALDW_LANECHG_STAT_RT != 2u)
#   error "Enumeration constant <I_C02_ALDW_LANECHG_STAT_RT> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_ALDW_LANECHG_STAT_RT (2u)
#  define I_C02_ALDW_LANECHG_STAT_RT ((c02_ALDW_LaneChg_Stat)2u)
# endif
# if (defined RTE_CONST_I_C02_ALDW_LANECHG_STAT_SNA) || (defined I_C02_ALDW_LANECHG_STAT_SNA)
#  if (!defined RTE_CONST_I_C02_ALDW_LANECHG_STAT_SNA) || (RTE_CONST_I_C02_ALDW_LANECHG_STAT_SNA != 3u)
#   error "Enumeration constant <I_C02_ALDW_LANECHG_STAT_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_ALDW_LANECHG_STAT_SNA (3u)
#  define I_C02_ALDW_LANECHG_STAT_SNA ((c02_ALDW_LaneChg_Stat)3u)
# endif

# define Rte_TypeDef_c02_ALDW_LaneDscrb_Side
typedef uint8 c02_ALDW_LaneDscrb_Side;
# define c02_ALDW_LaneDscrb_Side_LowerLimit ((c02_ALDW_LaneDscrb_Side)0u)
# define c02_ALDW_LaneDscrb_Side_UpperLimit ((c02_ALDW_LaneDscrb_Side)3u)
# if (defined RTE_CONST_I_C02_ALDW_LANEDSCRB_SIDE_NO) || (defined I_C02_ALDW_LANEDSCRB_SIDE_NO)
#  if (!defined RTE_CONST_I_C02_ALDW_LANEDSCRB_SIDE_NO) || (RTE_CONST_I_C02_ALDW_LANEDSCRB_SIDE_NO != 0u)
#   error "Enumeration constant <I_C02_ALDW_LANEDSCRB_SIDE_NO> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_ALDW_LANEDSCRB_SIDE_NO (0u)
#  define I_C02_ALDW_LANEDSCRB_SIDE_NO ((c02_ALDW_LaneDscrb_Side)0u)
# endif
# if (defined RTE_CONST_I_C02_ALDW_LANEDSCRB_SIDE_LEFT) || (defined I_C02_ALDW_LANEDSCRB_SIDE_LEFT)
#  if (!defined RTE_CONST_I_C02_ALDW_LANEDSCRB_SIDE_LEFT) || (RTE_CONST_I_C02_ALDW_LANEDSCRB_SIDE_LEFT != 1u)
#   error "Enumeration constant <I_C02_ALDW_LANEDSCRB_SIDE_LEFT> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_ALDW_LANEDSCRB_SIDE_LEFT (1u)
#  define I_C02_ALDW_LANEDSCRB_SIDE_LEFT ((c02_ALDW_LaneDscrb_Side)1u)
# endif
# if (defined RTE_CONST_I_C02_ALDW_LANEDSCRB_SIDE_RIGHT) || (defined I_C02_ALDW_LANEDSCRB_SIDE_RIGHT)
#  if (!defined RTE_CONST_I_C02_ALDW_LANEDSCRB_SIDE_RIGHT) || (RTE_CONST_I_C02_ALDW_LANEDSCRB_SIDE_RIGHT != 2u)
#   error "Enumeration constant <I_C02_ALDW_LANEDSCRB_SIDE_RIGHT> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_ALDW_LANEDSCRB_SIDE_RIGHT (2u)
#  define I_C02_ALDW_LANEDSCRB_SIDE_RIGHT ((c02_ALDW_LaneDscrb_Side)2u)
# endif
# if (defined RTE_CONST_I_C02_ALDW_LANEDSCRB_SIDE_BOTH) || (defined I_C02_ALDW_LANEDSCRB_SIDE_BOTH)
#  if (!defined RTE_CONST_I_C02_ALDW_LANEDSCRB_SIDE_BOTH) || (RTE_CONST_I_C02_ALDW_LANEDSCRB_SIDE_BOTH != 3u)
#   error "Enumeration constant <I_C02_ALDW_LANEDSCRB_SIDE_BOTH> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_ALDW_LANEDSCRB_SIDE_BOTH (3u)
#  define I_C02_ALDW_LANEDSCRB_SIDE_BOTH ((c02_ALDW_LaneDscrb_Side)3u)
# endif

# define Rte_TypeDef_c02_ALDW_LaneSiteDtct_Stat
typedef uint8 c02_ALDW_LaneSiteDtct_Stat;
# define c02_ALDW_LaneSiteDtct_Stat_LowerLimit ((c02_ALDW_LaneSiteDtct_Stat)0u)
# define c02_ALDW_LaneSiteDtct_Stat_UpperLimit ((c02_ALDW_LaneSiteDtct_Stat)3u)
# define Rte_InvalidValue_c02_ALDW_LaneSiteDtct_Stat ((c02_ALDW_LaneSiteDtct_Stat)3u)
# if (defined RTE_CONST_I_C02_ALDW_LANESITEDTCT_STAT_IDLE) || (defined I_C02_ALDW_LANESITEDTCT_STAT_IDLE)
#  if (!defined RTE_CONST_I_C02_ALDW_LANESITEDTCT_STAT_IDLE) || (RTE_CONST_I_C02_ALDW_LANESITEDTCT_STAT_IDLE != 0u)
#   error "Enumeration constant <I_C02_ALDW_LANESITEDTCT_STAT_IDLE> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_ALDW_LANESITEDTCT_STAT_IDLE (0u)
#  define I_C02_ALDW_LANESITEDTCT_STAT_IDLE ((c02_ALDW_LaneSiteDtct_Stat)0u)
# endif
# if (defined RTE_CONST_I_C02_ALDW_LANESITEDTCT_STAT_SITE) || (defined I_C02_ALDW_LANESITEDTCT_STAT_SITE)
#  if (!defined RTE_CONST_I_C02_ALDW_LANESITEDTCT_STAT_SITE) || (RTE_CONST_I_C02_ALDW_LANESITEDTCT_STAT_SITE != 1u)
#   error "Enumeration constant <I_C02_ALDW_LANESITEDTCT_STAT_SITE> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_ALDW_LANESITEDTCT_STAT_SITE (1u)
#  define I_C02_ALDW_LANESITEDTCT_STAT_SITE ((c02_ALDW_LaneSiteDtct_Stat)1u)
# endif
# if (defined RTE_CONST_I_C02_ALDW_LANESITEDTCT_STAT_AMBIGOUS) || (defined I_C02_ALDW_LANESITEDTCT_STAT_AMBIGOUS)
#  if (!defined RTE_CONST_I_C02_ALDW_LANESITEDTCT_STAT_AMBIGOUS) || (RTE_CONST_I_C02_ALDW_LANESITEDTCT_STAT_AMBIGOUS != 2u)
#   error "Enumeration constant <I_C02_ALDW_LANESITEDTCT_STAT_AMBIGOUS> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_ALDW_LANESITEDTCT_STAT_AMBIGOUS (2u)
#  define I_C02_ALDW_LANESITEDTCT_STAT_AMBIGOUS ((c02_ALDW_LaneSiteDtct_Stat)2u)
# endif
# if (defined RTE_CONST_I_C02_ALDW_LANESITEDTCT_STAT_SNA) || (defined I_C02_ALDW_LANESITEDTCT_STAT_SNA)
#  if (!defined RTE_CONST_I_C02_ALDW_LANESITEDTCT_STAT_SNA) || (RTE_CONST_I_C02_ALDW_LANESITEDTCT_STAT_SNA != 3u)
#   error "Enumeration constant <I_C02_ALDW_LANESITEDTCT_STAT_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_ALDW_LANESITEDTCT_STAT_SNA (3u)
#  define I_C02_ALDW_LANESITEDTCT_STAT_SNA ((c02_ALDW_LaneSiteDtct_Stat)3u)
# endif

# define Rte_TypeDef_c02_ALDW_NumParallelLine
typedef uint8 c02_ALDW_NumParallelLine;
# define c02_ALDW_NumParallelLine_LowerLimit ((c02_ALDW_NumParallelLine)0u)
# define c02_ALDW_NumParallelLine_UpperLimit ((c02_ALDW_NumParallelLine)3u)
# if (defined RTE_CONST_I_C02_ALDW_NUMPARALLELLINE_NONE) || (defined I_C02_ALDW_NUMPARALLELLINE_NONE)
#  if (!defined RTE_CONST_I_C02_ALDW_NUMPARALLELLINE_NONE) || (RTE_CONST_I_C02_ALDW_NUMPARALLELLINE_NONE != 0u)
#   error "Enumeration constant <I_C02_ALDW_NUMPARALLELLINE_NONE> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_ALDW_NUMPARALLELLINE_NONE (0u)
#  define I_C02_ALDW_NUMPARALLELLINE_NONE ((c02_ALDW_NumParallelLine)0u)
# endif
# if (defined RTE_CONST_I_C02_ALDW_NUMPARALLELLINE_ONE) || (defined I_C02_ALDW_NUMPARALLELLINE_ONE)
#  if (!defined RTE_CONST_I_C02_ALDW_NUMPARALLELLINE_ONE) || (RTE_CONST_I_C02_ALDW_NUMPARALLELLINE_ONE != 1u)
#   error "Enumeration constant <I_C02_ALDW_NUMPARALLELLINE_ONE> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_ALDW_NUMPARALLELLINE_ONE (1u)
#  define I_C02_ALDW_NUMPARALLELLINE_ONE ((c02_ALDW_NumParallelLine)1u)
# endif
# if (defined RTE_CONST_I_C02_ALDW_NUMPARALLELLINE_TWO) || (defined I_C02_ALDW_NUMPARALLELLINE_TWO)
#  if (!defined RTE_CONST_I_C02_ALDW_NUMPARALLELLINE_TWO) || (RTE_CONST_I_C02_ALDW_NUMPARALLELLINE_TWO != 2u)
#   error "Enumeration constant <I_C02_ALDW_NUMPARALLELLINE_TWO> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_ALDW_NUMPARALLELLINE_TWO (2u)
#  define I_C02_ALDW_NUMPARALLELLINE_TWO ((c02_ALDW_NumParallelLine)2u)
# endif
# if (defined RTE_CONST_I_C02_ALDW_NUMPARALLELLINE_THREE_PLUS) || (defined I_C02_ALDW_NUMPARALLELLINE_THREE_PLUS)
#  if (!defined RTE_CONST_I_C02_ALDW_NUMPARALLELLINE_THREE_PLUS) || (RTE_CONST_I_C02_ALDW_NUMPARALLELLINE_THREE_PLUS != 3u)
#   error "Enumeration constant <I_C02_ALDW_NUMPARALLELLINE_THREE_PLUS> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_ALDW_NUMPARALLELLINE_THREE_PLUS (3u)
#  define I_C02_ALDW_NUMPARALLELLINE_THREE_PLUS ((c02_ALDW_NumParallelLine)3u)
# endif

# define Rte_TypeDef_c02_ALDW_PulseTm_Rq
typedef uint8 c02_ALDW_PulseTm_Rq;
# define c02_ALDW_PulseTm_Rq_LowerLimit ((c02_ALDW_PulseTm_Rq)0u)
# define c02_ALDW_PulseTm_Rq_UpperLimit ((c02_ALDW_PulseTm_Rq)3u)
# if (defined RTE_CONST_I_C02_ALDW_PULSETM_RQ_TM500) || (defined I_C02_ALDW_PULSETM_RQ_TM500)
#  if (!defined RTE_CONST_I_C02_ALDW_PULSETM_RQ_TM500) || (RTE_CONST_I_C02_ALDW_PULSETM_RQ_TM500 != 0u)
#   error "Enumeration constant <I_C02_ALDW_PULSETM_RQ_TM500> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_ALDW_PULSETM_RQ_TM500 (0u)
#  define I_C02_ALDW_PULSETM_RQ_TM500 ((c02_ALDW_PulseTm_Rq)0u)
# endif
# if (defined RTE_CONST_I_C02_ALDW_PULSETM_RQ_TM400) || (defined I_C02_ALDW_PULSETM_RQ_TM400)
#  if (!defined RTE_CONST_I_C02_ALDW_PULSETM_RQ_TM400) || (RTE_CONST_I_C02_ALDW_PULSETM_RQ_TM400 != 1u)
#   error "Enumeration constant <I_C02_ALDW_PULSETM_RQ_TM400> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_ALDW_PULSETM_RQ_TM400 (1u)
#  define I_C02_ALDW_PULSETM_RQ_TM400 ((c02_ALDW_PulseTm_Rq)1u)
# endif
# if (defined RTE_CONST_I_C02_ALDW_PULSETM_RQ_TM300) || (defined I_C02_ALDW_PULSETM_RQ_TM300)
#  if (!defined RTE_CONST_I_C02_ALDW_PULSETM_RQ_TM300) || (RTE_CONST_I_C02_ALDW_PULSETM_RQ_TM300 != 2u)
#   error "Enumeration constant <I_C02_ALDW_PULSETM_RQ_TM300> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_ALDW_PULSETM_RQ_TM300 (2u)
#  define I_C02_ALDW_PULSETM_RQ_TM300 ((c02_ALDW_PulseTm_Rq)2u)
# endif
# if (defined RTE_CONST_I_C02_ALDW_PULSETM_RQ_TM200) || (defined I_C02_ALDW_PULSETM_RQ_TM200)
#  if (!defined RTE_CONST_I_C02_ALDW_PULSETM_RQ_TM200) || (RTE_CONST_I_C02_ALDW_PULSETM_RQ_TM200 != 3u)
#   error "Enumeration constant <I_C02_ALDW_PULSETM_RQ_TM200> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_ALDW_PULSETM_RQ_TM200 (3u)
#  define I_C02_ALDW_PULSETM_RQ_TM200 ((c02_ALDW_PulseTm_Rq)3u)
# endif

# define Rte_TypeDef_c02_ALDW_RoadExit_Stat
typedef uint8 c02_ALDW_RoadExit_Stat;
# define c02_ALDW_RoadExit_Stat_LowerLimit ((c02_ALDW_RoadExit_Stat)0u)
# define c02_ALDW_RoadExit_Stat_UpperLimit ((c02_ALDW_RoadExit_Stat)3u)
# define Rte_InvalidValue_c02_ALDW_RoadExit_Stat ((c02_ALDW_RoadExit_Stat)3u)
# if (defined RTE_CONST_I_C02_ALDW_ROADEXIT_STAT_IDLE) || (defined I_C02_ALDW_ROADEXIT_STAT_IDLE)
#  if (!defined RTE_CONST_I_C02_ALDW_ROADEXIT_STAT_IDLE) || (RTE_CONST_I_C02_ALDW_ROADEXIT_STAT_IDLE != 0u)
#   error "Enumeration constant <I_C02_ALDW_ROADEXIT_STAT_IDLE> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_ALDW_ROADEXIT_STAT_IDLE (0u)
#  define I_C02_ALDW_ROADEXIT_STAT_IDLE ((c02_ALDW_RoadExit_Stat)0u)
# endif
# if (defined RTE_CONST_I_C02_ALDW_ROADEXIT_STAT_LT) || (defined I_C02_ALDW_ROADEXIT_STAT_LT)
#  if (!defined RTE_CONST_I_C02_ALDW_ROADEXIT_STAT_LT) || (RTE_CONST_I_C02_ALDW_ROADEXIT_STAT_LT != 1u)
#   error "Enumeration constant <I_C02_ALDW_ROADEXIT_STAT_LT> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_ALDW_ROADEXIT_STAT_LT (1u)
#  define I_C02_ALDW_ROADEXIT_STAT_LT ((c02_ALDW_RoadExit_Stat)1u)
# endif
# if (defined RTE_CONST_I_C02_ALDW_ROADEXIT_STAT_RT) || (defined I_C02_ALDW_ROADEXIT_STAT_RT)
#  if (!defined RTE_CONST_I_C02_ALDW_ROADEXIT_STAT_RT) || (RTE_CONST_I_C02_ALDW_ROADEXIT_STAT_RT != 2u)
#   error "Enumeration constant <I_C02_ALDW_ROADEXIT_STAT_RT> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_ALDW_ROADEXIT_STAT_RT (2u)
#  define I_C02_ALDW_ROADEXIT_STAT_RT ((c02_ALDW_RoadExit_Stat)2u)
# endif
# if (defined RTE_CONST_I_C02_ALDW_ROADEXIT_STAT_SNA) || (defined I_C02_ALDW_ROADEXIT_STAT_SNA)
#  if (!defined RTE_CONST_I_C02_ALDW_ROADEXIT_STAT_SNA) || (RTE_CONST_I_C02_ALDW_ROADEXIT_STAT_SNA != 3u)
#   error "Enumeration constant <I_C02_ALDW_ROADEXIT_STAT_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_ALDW_ROADEXIT_STAT_SNA (3u)
#  define I_C02_ALDW_ROADEXIT_STAT_SNA ((c02_ALDW_RoadExit_Stat)3u)
# endif

# define Rte_TypeDef_c02_BatCutSw_Stat
typedef uint8 c02_BatCutSw_Stat;
# define c02_BatCutSw_Stat_LowerLimit ((c02_BatCutSw_Stat)0u)
# define c02_BatCutSw_Stat_UpperLimit ((c02_BatCutSw_Stat)3u)
# define Rte_InvalidValue_c02_BatCutSw_Stat ((c02_BatCutSw_Stat)3u)
# if (defined RTE_CONST_I_C02_BATCUTSW_STAT_CLS) || (defined I_C02_BATCUTSW_STAT_CLS)
#  if (!defined RTE_CONST_I_C02_BATCUTSW_STAT_CLS) || (RTE_CONST_I_C02_BATCUTSW_STAT_CLS != 0u)
#   error "Enumeration constant <I_C02_BATCUTSW_STAT_CLS> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_BATCUTSW_STAT_CLS (0u)
#  define I_C02_BATCUTSW_STAT_CLS ((c02_BatCutSw_Stat)0u)
# endif
# if (defined RTE_CONST_I_C02_BATCUTSW_STAT_PREOPN) || (defined I_C02_BATCUTSW_STAT_PREOPN)
#  if (!defined RTE_CONST_I_C02_BATCUTSW_STAT_PREOPN) || (RTE_CONST_I_C02_BATCUTSW_STAT_PREOPN != 1u)
#   error "Enumeration constant <I_C02_BATCUTSW_STAT_PREOPN> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_BATCUTSW_STAT_PREOPN (1u)
#  define I_C02_BATCUTSW_STAT_PREOPN ((c02_BatCutSw_Stat)1u)
# endif
# if (defined RTE_CONST_I_C02_BATCUTSW_STAT_OPN) || (defined I_C02_BATCUTSW_STAT_OPN)
#  if (!defined RTE_CONST_I_C02_BATCUTSW_STAT_OPN) || (RTE_CONST_I_C02_BATCUTSW_STAT_OPN != 2u)
#   error "Enumeration constant <I_C02_BATCUTSW_STAT_OPN> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_BATCUTSW_STAT_OPN (2u)
#  define I_C02_BATCUTSW_STAT_OPN ((c02_BatCutSw_Stat)2u)
# endif
# if (defined RTE_CONST_I_C02_BATCUTSW_STAT_SNA) || (defined I_C02_BATCUTSW_STAT_SNA)
#  if (!defined RTE_CONST_I_C02_BATCUTSW_STAT_SNA) || (RTE_CONST_I_C02_BATCUTSW_STAT_SNA != 3u)
#   error "Enumeration constant <I_C02_BATCUTSW_STAT_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_BATCUTSW_STAT_SNA (3u)
#  define I_C02_BATCUTSW_STAT_SNA ((c02_BatCutSw_Stat)3u)
# endif

# define Rte_TypeDef_c02_BrkRq_PT_Enbl
typedef uint8 c02_BrkRq_PT_Enbl;
# define c02_BrkRq_PT_Enbl_LowerLimit ((c02_BrkRq_PT_Enbl)0u)
# define c02_BrkRq_PT_Enbl_UpperLimit ((c02_BrkRq_PT_Enbl)3u)
# if (defined RTE_CONST_IDLE) || (defined IDLE)
#  if (!defined RTE_CONST_IDLE) || (RTE_CONST_IDLE != 0u)
#   error "Enumeration constant <IDLE> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_IDLE (0u)
#  define IDLE_ ((c02_BrkRq_PT_Enbl)0u)
# endif
# if (defined RTE_CONST_THS_RDY) || (defined THS_RDY)
#  if (!defined RTE_CONST_THS_RDY) || (RTE_CONST_THS_RDY != 1u)
#   error "Enumeration constant <THS_RDY> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_THS_RDY (1u)
#  define THS_RDY ((c02_BrkRq_PT_Enbl)1u)
# endif
# if (defined RTE_CONST_THS_ACTV) || (defined THS_ACTV)
#  if (!defined RTE_CONST_THS_ACTV) || (RTE_CONST_THS_ACTV != 2u)
#   error "Enumeration constant <THS_ACTV> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_THS_ACTV (2u)
#  define THS_ACTV ((c02_BrkRq_PT_Enbl)2u)
# endif
# if (defined RTE_CONST_THS_ACTV_RDY) || (defined THS_ACTV_RDY)
#  if (!defined RTE_CONST_THS_ACTV_RDY) || (RTE_CONST_THS_ACTV_RDY != 3u)
#   error "Enumeration constant <THS_ACTV_RDY> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_THS_ACTV_RDY (3u)
#  define THS_ACTV_RDY ((c02_BrkRq_PT_Enbl)3u)
# endif

# define Rte_TypeDef_c02_Brk_Stat
typedef uint8 c02_Brk_Stat;
# define c02_Brk_Stat_LowerLimit ((c02_Brk_Stat)0u)
# define c02_Brk_Stat_UpperLimit ((c02_Brk_Stat)3u)
# define Rte_InvalidValue_c02_Brk_Stat ((c02_Brk_Stat)3u)
# if (defined RTE_CONST_I_C02_BRK_STAT_IDLE) || (defined I_C02_BRK_STAT_IDLE)
#  if (!defined RTE_CONST_I_C02_BRK_STAT_IDLE) || (RTE_CONST_I_C02_BRK_STAT_IDLE != 0u)
#   error "Enumeration constant <I_C02_BRK_STAT_IDLE> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_BRK_STAT_IDLE (0u)
#  define I_C02_BRK_STAT_IDLE ((c02_Brk_Stat)0u)
# endif
# if (defined RTE_CONST_I_C02_BRK_STAT_BRAKING) || (defined I_C02_BRK_STAT_BRAKING)
#  if (!defined RTE_CONST_I_C02_BRK_STAT_BRAKING) || (RTE_CONST_I_C02_BRK_STAT_BRAKING != 1u)
#   error "Enumeration constant <I_C02_BRK_STAT_BRAKING> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_BRK_STAT_BRAKING (1u)
#  define I_C02_BRK_STAT_BRAKING ((c02_Brk_Stat)1u)
# endif
# if (defined RTE_CONST_I_C02_BRK_STAT_NDEF2) || (defined I_C02_BRK_STAT_NDEF2)
#  if (!defined RTE_CONST_I_C02_BRK_STAT_NDEF2) || (RTE_CONST_I_C02_BRK_STAT_NDEF2 != 2u)
#   error "Enumeration constant <I_C02_BRK_STAT_NDEF2> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_BRK_STAT_NDEF2 (2u)
#  define I_C02_BRK_STAT_NDEF2 ((c02_Brk_Stat)2u)
# endif
# if (defined RTE_CONST_I_C02_BRK_STAT_SNA) || (defined I_C02_BRK_STAT_SNA)
#  if (!defined RTE_CONST_I_C02_BRK_STAT_SNA) || (RTE_CONST_I_C02_BRK_STAT_SNA != 3u)
#   error "Enumeration constant <I_C02_BRK_STAT_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_BRK_STAT_SNA (3u)
#  define I_C02_BRK_STAT_SNA ((c02_Brk_Stat)3u)
# endif

# define Rte_TypeDef_c02_CAM_Polyg_Conf
typedef uint8 c02_CAM_Polyg_Conf;
# define c02_CAM_Polyg_Conf_LowerLimit ((c02_CAM_Polyg_Conf)0u)
# define c02_CAM_Polyg_Conf_UpperLimit ((c02_CAM_Polyg_Conf)3u)
# if (defined RTE_CONST_I_C02_CAM_POLYG_CONF_NO_OBJ_DTCT) || (defined I_C02_CAM_POLYG_CONF_NO_OBJ_DTCT)
#  if (!defined RTE_CONST_I_C02_CAM_POLYG_CONF_NO_OBJ_DTCT) || (RTE_CONST_I_C02_CAM_POLYG_CONF_NO_OBJ_DTCT != 0u)
#   error "Enumeration constant <I_C02_CAM_POLYG_CONF_NO_OBJ_DTCT> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_CAM_POLYG_CONF_NO_OBJ_DTCT (0u)
#  define I_C02_CAM_POLYG_CONF_NO_OBJ_DTCT ((c02_CAM_Polyg_Conf)0u)
# endif
# if (defined RTE_CONST_I_C02_CAM_POLYG_CONF_OBJ_DTCT_5M) || (defined I_C02_CAM_POLYG_CONF_OBJ_DTCT_5M)
#  if (!defined RTE_CONST_I_C02_CAM_POLYG_CONF_OBJ_DTCT_5M) || (RTE_CONST_I_C02_CAM_POLYG_CONF_OBJ_DTCT_5M != 1u)
#   error "Enumeration constant <I_C02_CAM_POLYG_CONF_OBJ_DTCT_5M> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_CAM_POLYG_CONF_OBJ_DTCT_5M (1u)
#  define I_C02_CAM_POLYG_CONF_OBJ_DTCT_5M ((c02_CAM_Polyg_Conf)1u)
# endif
# if (defined RTE_CONST_I_C02_CAM_POLYG_CONF_OBJ_DTCT_2M) || (defined I_C02_CAM_POLYG_CONF_OBJ_DTCT_2M)
#  if (!defined RTE_CONST_I_C02_CAM_POLYG_CONF_OBJ_DTCT_2M) || (RTE_CONST_I_C02_CAM_POLYG_CONF_OBJ_DTCT_2M != 2u)
#   error "Enumeration constant <I_C02_CAM_POLYG_CONF_OBJ_DTCT_2M> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_CAM_POLYG_CONF_OBJ_DTCT_2M (2u)
#  define I_C02_CAM_POLYG_CONF_OBJ_DTCT_2M ((c02_CAM_Polyg_Conf)2u)
# endif
# if (defined RTE_CONST_I_C02_CAM_POLYG_CONF_OBJ_DTCT_1M) || (defined I_C02_CAM_POLYG_CONF_OBJ_DTCT_1M)
#  if (!defined RTE_CONST_I_C02_CAM_POLYG_CONF_OBJ_DTCT_1M) || (RTE_CONST_I_C02_CAM_POLYG_CONF_OBJ_DTCT_1M != 3u)
#   error "Enumeration constant <I_C02_CAM_POLYG_CONF_OBJ_DTCT_1M> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_CAM_POLYG_CONF_OBJ_DTCT_1M (3u)
#  define I_C02_CAM_POLYG_CONF_OBJ_DTCT_1M ((c02_CAM_Polyg_Conf)3u)
# endif

# define Rte_TypeDef_c02_CamObj_BPQ_PedestArea
typedef uint8 c02_CamObj_BPQ_PedestArea;
# define c02_CamObj_BPQ_PedestArea_LowerLimit ((c02_CamObj_BPQ_PedestArea)0u)
# define c02_CamObj_BPQ_PedestArea_UpperLimit ((c02_CamObj_BPQ_PedestArea)3u)
# if (defined RTE_CONST_I_C02_CAMOBJ_BPQ_PEDESTAREA_NO_PEDEST) || (defined I_C02_CAMOBJ_BPQ_PEDESTAREA_NO_PEDEST)
#  if (!defined RTE_CONST_I_C02_CAMOBJ_BPQ_PEDESTAREA_NO_PEDEST) || (RTE_CONST_I_C02_CAMOBJ_BPQ_PEDESTAREA_NO_PEDEST != 0u)
#   error "Enumeration constant <I_C02_CAMOBJ_BPQ_PEDESTAREA_NO_PEDEST> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_CAMOBJ_BPQ_PEDESTAREA_NO_PEDEST (0u)
#  define I_C02_CAMOBJ_BPQ_PEDESTAREA_NO_PEDEST ((c02_CamObj_BPQ_PedestArea)0u)
# endif
# if (defined RTE_CONST_I_C02_CAMOBJ_BPQ_PEDESTAREA_ZONE_C) || (defined I_C02_CAMOBJ_BPQ_PEDESTAREA_ZONE_C)
#  if (!defined RTE_CONST_I_C02_CAMOBJ_BPQ_PEDESTAREA_ZONE_C) || (RTE_CONST_I_C02_CAMOBJ_BPQ_PEDESTAREA_ZONE_C != 1u)
#   error "Enumeration constant <I_C02_CAMOBJ_BPQ_PEDESTAREA_ZONE_C> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_CAMOBJ_BPQ_PEDESTAREA_ZONE_C (1u)
#  define I_C02_CAMOBJ_BPQ_PEDESTAREA_ZONE_C ((c02_CamObj_BPQ_PedestArea)1u)
# endif
# if (defined RTE_CONST_I_C02_CAMOBJ_BPQ_PEDESTAREA_ZONE_B) || (defined I_C02_CAMOBJ_BPQ_PEDESTAREA_ZONE_B)
#  if (!defined RTE_CONST_I_C02_CAMOBJ_BPQ_PEDESTAREA_ZONE_B) || (RTE_CONST_I_C02_CAMOBJ_BPQ_PEDESTAREA_ZONE_B != 2u)
#   error "Enumeration constant <I_C02_CAMOBJ_BPQ_PEDESTAREA_ZONE_B> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_CAMOBJ_BPQ_PEDESTAREA_ZONE_B (2u)
#  define I_C02_CAMOBJ_BPQ_PEDESTAREA_ZONE_B ((c02_CamObj_BPQ_PedestArea)2u)
# endif
# if (defined RTE_CONST_I_C02_CAMOBJ_BPQ_PEDESTAREA_ZONE_A) || (defined I_C02_CAMOBJ_BPQ_PEDESTAREA_ZONE_A)
#  if (!defined RTE_CONST_I_C02_CAMOBJ_BPQ_PEDESTAREA_ZONE_A) || (RTE_CONST_I_C02_CAMOBJ_BPQ_PEDESTAREA_ZONE_A != 3u)
#   error "Enumeration constant <I_C02_CAMOBJ_BPQ_PEDESTAREA_ZONE_A> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_CAMOBJ_BPQ_PEDESTAREA_ZONE_A (3u)
#  define I_C02_CAMOBJ_BPQ_PEDESTAREA_ZONE_A ((c02_CamObj_BPQ_PedestArea)3u)
# endif

# define Rte_TypeDef_c02_CamObj_BPQ_PedestClass
typedef uint8 c02_CamObj_BPQ_PedestClass;
# define c02_CamObj_BPQ_PedestClass_LowerLimit ((c02_CamObj_BPQ_PedestClass)0u)
# define c02_CamObj_BPQ_PedestClass_UpperLimit ((c02_CamObj_BPQ_PedestClass)3u)
# if (defined RTE_CONST_I_C02_CAMOBJ_BPQ_PEDESTCLASS_NO_PEDEST) || (defined I_C02_CAMOBJ_BPQ_PEDESTCLASS_NO_PEDEST)
#  if (!defined RTE_CONST_I_C02_CAMOBJ_BPQ_PEDESTCLASS_NO_PEDEST) || (RTE_CONST_I_C02_CAMOBJ_BPQ_PEDESTCLASS_NO_PEDEST != 0u)
#   error "Enumeration constant <I_C02_CAMOBJ_BPQ_PEDESTCLASS_NO_PEDEST> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_CAMOBJ_BPQ_PEDESTCLASS_NO_PEDEST (0u)
#  define I_C02_CAMOBJ_BPQ_PEDESTCLASS_NO_PEDEST ((c02_CamObj_BPQ_PedestClass)0u)
# endif
# if (defined RTE_CONST_I_C02_CAMOBJ_BPQ_PEDESTCLASS_LOW_PROBB) || (defined I_C02_CAMOBJ_BPQ_PEDESTCLASS_LOW_PROBB)
#  if (!defined RTE_CONST_I_C02_CAMOBJ_BPQ_PEDESTCLASS_LOW_PROBB) || (RTE_CONST_I_C02_CAMOBJ_BPQ_PEDESTCLASS_LOW_PROBB != 1u)
#   error "Enumeration constant <I_C02_CAMOBJ_BPQ_PEDESTCLASS_LOW_PROBB> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_CAMOBJ_BPQ_PEDESTCLASS_LOW_PROBB (1u)
#  define I_C02_CAMOBJ_BPQ_PEDESTCLASS_LOW_PROBB ((c02_CamObj_BPQ_PedestClass)1u)
# endif
# if (defined RTE_CONST_I_C02_CAMOBJ_BPQ_PEDESTCLASS_MID_PROBB) || (defined I_C02_CAMOBJ_BPQ_PEDESTCLASS_MID_PROBB)
#  if (!defined RTE_CONST_I_C02_CAMOBJ_BPQ_PEDESTCLASS_MID_PROBB) || (RTE_CONST_I_C02_CAMOBJ_BPQ_PEDESTCLASS_MID_PROBB != 2u)
#   error "Enumeration constant <I_C02_CAMOBJ_BPQ_PEDESTCLASS_MID_PROBB> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_CAMOBJ_BPQ_PEDESTCLASS_MID_PROBB (2u)
#  define I_C02_CAMOBJ_BPQ_PEDESTCLASS_MID_PROBB ((c02_CamObj_BPQ_PedestClass)2u)
# endif
# if (defined RTE_CONST_I_C02_CAMOBJ_BPQ_PEDESTCLASS_HIGH_PROBB) || (defined I_C02_CAMOBJ_BPQ_PEDESTCLASS_HIGH_PROBB)
#  if (!defined RTE_CONST_I_C02_CAMOBJ_BPQ_PEDESTCLASS_HIGH_PROBB) || (RTE_CONST_I_C02_CAMOBJ_BPQ_PEDESTCLASS_HIGH_PROBB != 3u)
#   error "Enumeration constant <I_C02_CAMOBJ_BPQ_PEDESTCLASS_HIGH_PROBB> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_CAMOBJ_BPQ_PEDESTCLASS_HIGH_PROBB (3u)
#  define I_C02_CAMOBJ_BPQ_PEDESTCLASS_HIGH_PROBB ((c02_CamObj_BPQ_PedestClass)3u)
# endif

# define Rte_TypeDef_c02_CamObj_BPQ_VY_Conf
typedef uint8 c02_CamObj_BPQ_VY_Conf;
# define c02_CamObj_BPQ_VY_Conf_LowerLimit ((c02_CamObj_BPQ_VY_Conf)0u)
# define c02_CamObj_BPQ_VY_Conf_UpperLimit ((c02_CamObj_BPQ_VY_Conf)3u)
# define Rte_InvalidValue_c02_CamObj_BPQ_VY_Conf ((c02_CamObj_BPQ_VY_Conf)3u)
# if (defined RTE_CONST_I_C02_CAMOBJ_BPQ_VY_CONF_PERCENT33) || (defined I_C02_CAMOBJ_BPQ_VY_CONF_PERCENT33)
#  if (!defined RTE_CONST_I_C02_CAMOBJ_BPQ_VY_CONF_PERCENT33) || (RTE_CONST_I_C02_CAMOBJ_BPQ_VY_CONF_PERCENT33 != 0u)
#   error "Enumeration constant <I_C02_CAMOBJ_BPQ_VY_CONF_PERCENT33> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_CAMOBJ_BPQ_VY_CONF_PERCENT33 (0u)
#  define I_C02_CAMOBJ_BPQ_VY_CONF_PERCENT33 ((c02_CamObj_BPQ_VY_Conf)0u)
# endif
# if (defined RTE_CONST_I_C02_CAMOBJ_BPQ_VY_CONF_PERCENT66) || (defined I_C02_CAMOBJ_BPQ_VY_CONF_PERCENT66)
#  if (!defined RTE_CONST_I_C02_CAMOBJ_BPQ_VY_CONF_PERCENT66) || (RTE_CONST_I_C02_CAMOBJ_BPQ_VY_CONF_PERCENT66 != 1u)
#   error "Enumeration constant <I_C02_CAMOBJ_BPQ_VY_CONF_PERCENT66> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_CAMOBJ_BPQ_VY_CONF_PERCENT66 (1u)
#  define I_C02_CAMOBJ_BPQ_VY_CONF_PERCENT66 ((c02_CamObj_BPQ_VY_Conf)1u)
# endif
# if (defined RTE_CONST_I_C02_CAMOBJ_BPQ_VY_CONF_PERCENT100) || (defined I_C02_CAMOBJ_BPQ_VY_CONF_PERCENT100)
#  if (!defined RTE_CONST_I_C02_CAMOBJ_BPQ_VY_CONF_PERCENT100) || (RTE_CONST_I_C02_CAMOBJ_BPQ_VY_CONF_PERCENT100 != 2u)
#   error "Enumeration constant <I_C02_CAMOBJ_BPQ_VY_CONF_PERCENT100> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_CAMOBJ_BPQ_VY_CONF_PERCENT100 (2u)
#  define I_C02_CAMOBJ_BPQ_VY_CONF_PERCENT100 ((c02_CamObj_BPQ_VY_Conf)2u)
# endif
# if (defined RTE_CONST_I_C02_CAMOBJ_BPQ_VY_CONF_SNA) || (defined I_C02_CAMOBJ_BPQ_VY_CONF_SNA)
#  if (!defined RTE_CONST_I_C02_CAMOBJ_BPQ_VY_CONF_SNA) || (RTE_CONST_I_C02_CAMOBJ_BPQ_VY_CONF_SNA != 3u)
#   error "Enumeration constant <I_C02_CAMOBJ_BPQ_VY_CONF_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_CAMOBJ_BPQ_VY_CONF_SNA (3u)
#  define I_C02_CAMOBJ_BPQ_VY_CONF_SNA ((c02_CamObj_BPQ_VY_Conf)3u)
# endif

# define Rte_TypeDef_c02_Cam_LnMark_Offset_Y_Qual
typedef uint8 c02_Cam_LnMark_Offset_Y_Qual;
# define c02_Cam_LnMark_Offset_Y_Qual_LowerLimit ((c02_Cam_LnMark_Offset_Y_Qual)0u)
# define c02_Cam_LnMark_Offset_Y_Qual_UpperLimit ((c02_Cam_LnMark_Offset_Y_Qual)3u)
# define Rte_InvalidValue_c02_Cam_LnMark_Offset_Y_Qual ((c02_Cam_LnMark_Offset_Y_Qual)3u)
# if (defined RTE_CONST_I_C02_CAM_LNMARK_OFFSET_Y_QUAL_NOT_VLD) || (defined I_C02_CAM_LNMARK_OFFSET_Y_QUAL_NOT_VLD)
#  if (!defined RTE_CONST_I_C02_CAM_LNMARK_OFFSET_Y_QUAL_NOT_VLD) || (RTE_CONST_I_C02_CAM_LNMARK_OFFSET_Y_QUAL_NOT_VLD != 0u)
#   error "Enumeration constant <I_C02_CAM_LNMARK_OFFSET_Y_QUAL_NOT_VLD> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_CAM_LNMARK_OFFSET_Y_QUAL_NOT_VLD (0u)
#  define I_C02_CAM_LNMARK_OFFSET_Y_QUAL_NOT_VLD ((c02_Cam_LnMark_Offset_Y_Qual)0u)
# endif
# if (defined RTE_CONST_I_C02_CAM_LNMARK_OFFSET_Y_QUAL_VLD_MEAS) || (defined I_C02_CAM_LNMARK_OFFSET_Y_QUAL_VLD_MEAS)
#  if (!defined RTE_CONST_I_C02_CAM_LNMARK_OFFSET_Y_QUAL_VLD_MEAS) || (RTE_CONST_I_C02_CAM_LNMARK_OFFSET_Y_QUAL_VLD_MEAS != 1u)
#   error "Enumeration constant <I_C02_CAM_LNMARK_OFFSET_Y_QUAL_VLD_MEAS> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_CAM_LNMARK_OFFSET_Y_QUAL_VLD_MEAS (1u)
#  define I_C02_CAM_LNMARK_OFFSET_Y_QUAL_VLD_MEAS ((c02_Cam_LnMark_Offset_Y_Qual)1u)
# endif
# if (defined RTE_CONST_I_C02_CAM_LNMARK_OFFSET_Y_QUAL_VLD_EXTPOL) || (defined I_C02_CAM_LNMARK_OFFSET_Y_QUAL_VLD_EXTPOL)
#  if (!defined RTE_CONST_I_C02_CAM_LNMARK_OFFSET_Y_QUAL_VLD_EXTPOL) || (RTE_CONST_I_C02_CAM_LNMARK_OFFSET_Y_QUAL_VLD_EXTPOL != 2u)
#   error "Enumeration constant <I_C02_CAM_LNMARK_OFFSET_Y_QUAL_VLD_EXTPOL> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_CAM_LNMARK_OFFSET_Y_QUAL_VLD_EXTPOL (2u)
#  define I_C02_CAM_LNMARK_OFFSET_Y_QUAL_VLD_EXTPOL ((c02_Cam_LnMark_Offset_Y_Qual)2u)
# endif
# if (defined RTE_CONST_I_C02_CAM_LNMARK_OFFSET_Y_QUAL_SNA) || (defined I_C02_CAM_LNMARK_OFFSET_Y_QUAL_SNA)
#  if (!defined RTE_CONST_I_C02_CAM_LNMARK_OFFSET_Y_QUAL_SNA) || (RTE_CONST_I_C02_CAM_LNMARK_OFFSET_Y_QUAL_SNA != 3u)
#   error "Enumeration constant <I_C02_CAM_LNMARK_OFFSET_Y_QUAL_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_CAM_LNMARK_OFFSET_Y_QUAL_SNA (3u)
#  define I_C02_CAM_LNMARK_OFFSET_Y_QUAL_SNA ((c02_Cam_LnMark_Offset_Y_Qual)3u)
# endif

# define Rte_TypeDef_c02_City_Dtct
typedef uint8 c02_City_Dtct;
# define c02_City_Dtct_LowerLimit ((c02_City_Dtct)0u)
# define c02_City_Dtct_UpperLimit ((c02_City_Dtct)3u)
# define Rte_InvalidValue_c02_City_Dtct ((c02_City_Dtct)3u)
# if (defined RTE_CONST_I_C02_CITY_DTCT_NO_DTCT) || (defined I_C02_CITY_DTCT_NO_DTCT)
#  if (!defined RTE_CONST_I_C02_CITY_DTCT_NO_DTCT) || (RTE_CONST_I_C02_CITY_DTCT_NO_DTCT != 0u)
#   error "Enumeration constant <I_C02_CITY_DTCT_NO_DTCT> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_CITY_DTCT_NO_DTCT (0u)
#  define I_C02_CITY_DTCT_NO_DTCT ((c02_City_Dtct)0u)
# endif
# if (defined RTE_CONST_I_C02_CITY_DTCT_CITY_DTCT) || (defined I_C02_CITY_DTCT_CITY_DTCT)
#  if (!defined RTE_CONST_I_C02_CITY_DTCT_CITY_DTCT) || (RTE_CONST_I_C02_CITY_DTCT_CITY_DTCT != 1u)
#   error "Enumeration constant <I_C02_CITY_DTCT_CITY_DTCT> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_CITY_DTCT_CITY_DTCT (1u)
#  define I_C02_CITY_DTCT_CITY_DTCT ((c02_City_Dtct)1u)
# endif
# if (defined RTE_CONST_I_C02_CITY_DTCT_NDEF2) || (defined I_C02_CITY_DTCT_NDEF2)
#  if (!defined RTE_CONST_I_C02_CITY_DTCT_NDEF2) || (RTE_CONST_I_C02_CITY_DTCT_NDEF2 != 2u)
#   error "Enumeration constant <I_C02_CITY_DTCT_NDEF2> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_CITY_DTCT_NDEF2 (2u)
#  define I_C02_CITY_DTCT_NDEF2 ((c02_City_Dtct)2u)
# endif
# if (defined RTE_CONST_I_C02_CITY_DTCT_SNA) || (defined I_C02_CITY_DTCT_SNA)
#  if (!defined RTE_CONST_I_C02_CITY_DTCT_SNA) || (RTE_CONST_I_C02_CITY_DTCT_SNA != 3u)
#   error "Enumeration constant <I_C02_CITY_DTCT_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_CITY_DTCT_SNA (3u)
#  define I_C02_CITY_DTCT_SNA ((c02_City_Dtct)3u)
# endif

# define Rte_TypeDef_c02_DGL_Obj_Type
typedef uint8 c02_DGL_Obj_Type;
# define c02_DGL_Obj_Type_LowerLimit ((c02_DGL_Obj_Type)0u)
# define c02_DGL_Obj_Type_UpperLimit ((c02_DGL_Obj_Type)3u)
# if (defined RTE_CONST_I_C02_DGL_OBJ_TYPE_IDLE) || (defined I_C02_DGL_OBJ_TYPE_IDLE)
#  if (!defined RTE_CONST_I_C02_DGL_OBJ_TYPE_IDLE) || (RTE_CONST_I_C02_DGL_OBJ_TYPE_IDLE != 0u)
#   error "Enumeration constant <I_C02_DGL_OBJ_TYPE_IDLE> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_DGL_OBJ_TYPE_IDLE (0u)
#  define I_C02_DGL_OBJ_TYPE_IDLE ((c02_DGL_Obj_Type)0u)
# endif
# if (defined RTE_CONST_I_C02_DGL_OBJ_TYPE_PEDESTRIAN) || (defined I_C02_DGL_OBJ_TYPE_PEDESTRIAN)
#  if (!defined RTE_CONST_I_C02_DGL_OBJ_TYPE_PEDESTRIAN) || (RTE_CONST_I_C02_DGL_OBJ_TYPE_PEDESTRIAN != 1u)
#   error "Enumeration constant <I_C02_DGL_OBJ_TYPE_PEDESTRIAN> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_DGL_OBJ_TYPE_PEDESTRIAN (1u)
#  define I_C02_DGL_OBJ_TYPE_PEDESTRIAN ((c02_DGL_Obj_Type)1u)
# endif
# if (defined RTE_CONST_I_C02_DGL_OBJ_TYPE_ANIMAL_SMALL) || (defined I_C02_DGL_OBJ_TYPE_ANIMAL_SMALL)
#  if (!defined RTE_CONST_I_C02_DGL_OBJ_TYPE_ANIMAL_SMALL) || (RTE_CONST_I_C02_DGL_OBJ_TYPE_ANIMAL_SMALL != 2u)
#   error "Enumeration constant <I_C02_DGL_OBJ_TYPE_ANIMAL_SMALL> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_DGL_OBJ_TYPE_ANIMAL_SMALL (2u)
#  define I_C02_DGL_OBJ_TYPE_ANIMAL_SMALL ((c02_DGL_Obj_Type)2u)
# endif
# if (defined RTE_CONST_I_C02_DGL_OBJ_TYPE_ANIMAL_BIG) || (defined I_C02_DGL_OBJ_TYPE_ANIMAL_BIG)
#  if (!defined RTE_CONST_I_C02_DGL_OBJ_TYPE_ANIMAL_BIG) || (RTE_CONST_I_C02_DGL_OBJ_TYPE_ANIMAL_BIG != 3u)
#   error "Enumeration constant <I_C02_DGL_OBJ_TYPE_ANIMAL_BIG> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_DGL_OBJ_TYPE_ANIMAL_BIG (3u)
#  define I_C02_DGL_OBJ_TYPE_ANIMAL_BIG ((c02_DGL_Obj_Type)3u)
# endif

# define Rte_TypeDef_c02_DTQ_ObjType
typedef uint8 c02_DTQ_ObjType;
# define c02_DTQ_ObjType_LowerLimit ((c02_DTQ_ObjType)0u)
# define c02_DTQ_ObjType_UpperLimit ((c02_DTQ_ObjType)3u)
# define Rte_InvalidValue_c02_DTQ_ObjType ((c02_DTQ_ObjType)3u)
# if (defined RTE_CONST_I_C02_DTQ_OBJTYPE_REL) || (defined I_C02_DTQ_OBJTYPE_REL)
#  if (!defined RTE_CONST_I_C02_DTQ_OBJTYPE_REL) || (RTE_CONST_I_C02_DTQ_OBJTYPE_REL != 0u)
#   error "Enumeration constant <I_C02_DTQ_OBJTYPE_REL> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_DTQ_OBJTYPE_REL (0u)
#  define I_C02_DTQ_OBJTYPE_REL ((c02_DTQ_ObjType)0u)
# endif
# if (defined RTE_CONST_I_C02_DTQ_OBJTYPE_LEFT) || (defined I_C02_DTQ_OBJTYPE_LEFT)
#  if (!defined RTE_CONST_I_C02_DTQ_OBJTYPE_LEFT) || (RTE_CONST_I_C02_DTQ_OBJTYPE_LEFT != 1u)
#   error "Enumeration constant <I_C02_DTQ_OBJTYPE_LEFT> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_DTQ_OBJTYPE_LEFT (1u)
#  define I_C02_DTQ_OBJTYPE_LEFT ((c02_DTQ_ObjType)1u)
# endif
# if (defined RTE_CONST_I_C02_DTQ_OBJTYPE_RIGHT) || (defined I_C02_DTQ_OBJTYPE_RIGHT)
#  if (!defined RTE_CONST_I_C02_DTQ_OBJTYPE_RIGHT) || (RTE_CONST_I_C02_DTQ_OBJTYPE_RIGHT != 2u)
#   error "Enumeration constant <I_C02_DTQ_OBJTYPE_RIGHT> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_DTQ_OBJTYPE_RIGHT (2u)
#  define I_C02_DTQ_OBJTYPE_RIGHT ((c02_DTQ_ObjType)2u)
# endif
# if (defined RTE_CONST_I_C02_DTQ_OBJTYPE_SNA) || (defined I_C02_DTQ_OBJTYPE_SNA)
#  if (!defined RTE_CONST_I_C02_DTQ_OBJTYPE_SNA) || (RTE_CONST_I_C02_DTQ_OBJTYPE_SNA != 3u)
#   error "Enumeration constant <I_C02_DTQ_OBJTYPE_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_DTQ_OBJTYPE_SNA (3u)
#  define I_C02_DTQ_OBJTYPE_SNA ((c02_DTQ_ObjType)3u)
# endif

# define Rte_TypeDef_c02_Disengg_Engg
typedef uint8 c02_Disengg_Engg;
# define c02_Disengg_Engg_LowerLimit ((c02_Disengg_Engg)0u)
# define c02_Disengg_Engg_UpperLimit ((c02_Disengg_Engg)3u)
# define Rte_InvalidValue_c02_Disengg_Engg ((c02_Disengg_Engg)3u)
# if (defined RTE_CONST_I_C02_DISENGG_ENGG_DISENGG) || (defined I_C02_DISENGG_ENGG_DISENGG)
#  if (!defined RTE_CONST_I_C02_DISENGG_ENGG_DISENGG) || (RTE_CONST_I_C02_DISENGG_ENGG_DISENGG != 0u)
#   error "Enumeration constant <I_C02_DISENGG_ENGG_DISENGG> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_DISENGG_ENGG_DISENGG (0u)
#  define I_C02_DISENGG_ENGG_DISENGG ((c02_Disengg_Engg)0u)
# endif
# if (defined RTE_CONST_I_C02_DISENGG_ENGG_ENGG) || (defined I_C02_DISENGG_ENGG_ENGG)
#  if (!defined RTE_CONST_I_C02_DISENGG_ENGG_ENGG) || (RTE_CONST_I_C02_DISENGG_ENGG_ENGG != 1u)
#   error "Enumeration constant <I_C02_DISENGG_ENGG_ENGG> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_DISENGG_ENGG_ENGG (1u)
#  define I_C02_DISENGG_ENGG_ENGG ((c02_Disengg_Engg)1u)
# endif
# if (defined RTE_CONST_I_C02_DISENGG_ENGG_NDEF2) || (defined I_C02_DISENGG_ENGG_NDEF2)
#  if (!defined RTE_CONST_I_C02_DISENGG_ENGG_NDEF2) || (RTE_CONST_I_C02_DISENGG_ENGG_NDEF2 != 2u)
#   error "Enumeration constant <I_C02_DISENGG_ENGG_NDEF2> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_DISENGG_ENGG_NDEF2 (2u)
#  define I_C02_DISENGG_ENGG_NDEF2 ((c02_Disengg_Engg)2u)
# endif
# if (defined RTE_CONST_I_C02_DISENGG_ENGG_SNA) || (defined I_C02_DISENGG_ENGG_SNA)
#  if (!defined RTE_CONST_I_C02_DISENGG_ENGG_SNA) || (RTE_CONST_I_C02_DISENGG_ENGG_SNA != 3u)
#   error "Enumeration constant <I_C02_DISENGG_ENGG_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_DISENGG_ENGG_SNA (3u)
#  define I_C02_DISENGG_ENGG_SNA ((c02_Disengg_Engg)3u)
# endif

# define Rte_TypeDef_c02_DrvActvty
typedef uint8 c02_DrvActvty;
# define c02_DrvActvty_LowerLimit ((c02_DrvActvty)0u)
# define c02_DrvActvty_UpperLimit ((c02_DrvActvty)3u)
# define Rte_InvalidValue_c02_DrvActvty ((c02_DrvActvty)3u)
# if (defined RTE_CONST_I_C02_DRVACTVTY_NODRVAKTVTY) || (defined I_C02_DRVACTVTY_NODRVAKTVTY)
#  if (!defined RTE_CONST_I_C02_DRVACTVTY_NODRVAKTVTY) || (RTE_CONST_I_C02_DRVACTVTY_NODRVAKTVTY != 0u)
#   error "Enumeration constant <I_C02_DRVACTVTY_NODRVAKTVTY> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_DRVACTVTY_NODRVAKTVTY (0u)
#  define I_C02_DRVACTVTY_NODRVAKTVTY ((c02_DrvActvty)0u)
# endif
# if (defined RTE_CONST_I_C02_DRVACTVTY_DRVAKTVTY) || (defined I_C02_DRVACTVTY_DRVAKTVTY)
#  if (!defined RTE_CONST_I_C02_DRVACTVTY_DRVAKTVTY) || (RTE_CONST_I_C02_DRVACTVTY_DRVAKTVTY != 1u)
#   error "Enumeration constant <I_C02_DRVACTVTY_DRVAKTVTY> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_DRVACTVTY_DRVAKTVTY (1u)
#  define I_C02_DRVACTVTY_DRVAKTVTY ((c02_DrvActvty)1u)
# endif
# if (defined RTE_CONST_I_C02_DRVACTVTY_NDEF2) || (defined I_C02_DRVACTVTY_NDEF2)
#  if (!defined RTE_CONST_I_C02_DRVACTVTY_NDEF2) || (RTE_CONST_I_C02_DRVACTVTY_NDEF2 != 2u)
#   error "Enumeration constant <I_C02_DRVACTVTY_NDEF2> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_DRVACTVTY_NDEF2 (2u)
#  define I_C02_DRVACTVTY_NDEF2 ((c02_DrvActvty)2u)
# endif
# if (defined RTE_CONST_I_C02_DRVACTVTY_SNA) || (defined I_C02_DRVACTVTY_SNA)
#  if (!defined RTE_CONST_I_C02_DRVACTVTY_SNA) || (RTE_CONST_I_C02_DRVACTVTY_SNA != 3u)
#   error "Enumeration constant <I_C02_DRVACTVTY_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_DRVACTVTY_SNA (3u)
#  define I_C02_DRVACTVTY_SNA ((c02_DrvActvty)3u)
# endif

# define Rte_TypeDef_c02_DrvDir
typedef uint8 c02_DrvDir;
# define c02_DrvDir_LowerLimit ((c02_DrvDir)0u)
# define c02_DrvDir_UpperLimit ((c02_DrvDir)3u)
# define Rte_InvalidValue_c02_DrvDir ((c02_DrvDir)3u)
# if (defined RTE_CONST_I_C02_DRVDIR_DRV_DIR_UNKWN) || (defined I_C02_DRVDIR_DRV_DIR_UNKWN)
#  if (!defined RTE_CONST_I_C02_DRVDIR_DRV_DIR_UNKWN) || (RTE_CONST_I_C02_DRVDIR_DRV_DIR_UNKWN != 0u)
#   error "Enumeration constant <I_C02_DRVDIR_DRV_DIR_UNKWN> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_DRVDIR_DRV_DIR_UNKWN (0u)
#  define I_C02_DRVDIR_DRV_DIR_UNKWN ((c02_DrvDir)0u)
# endif
# if (defined RTE_CONST_I_C02_DRVDIR_APPRCH_VEH) || (defined I_C02_DRVDIR_APPRCH_VEH)
#  if (!defined RTE_CONST_I_C02_DRVDIR_APPRCH_VEH) || (RTE_CONST_I_C02_DRVDIR_APPRCH_VEH != 1u)
#   error "Enumeration constant <I_C02_DRVDIR_APPRCH_VEH> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_DRVDIR_APPRCH_VEH (1u)
#  define I_C02_DRVDIR_APPRCH_VEH ((c02_DrvDir)1u)
# endif
# if (defined RTE_CONST_I_C02_DRVDIR_PREC_VEH) || (defined I_C02_DRVDIR_PREC_VEH)
#  if (!defined RTE_CONST_I_C02_DRVDIR_PREC_VEH) || (RTE_CONST_I_C02_DRVDIR_PREC_VEH != 2u)
#   error "Enumeration constant <I_C02_DRVDIR_PREC_VEH> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_DRVDIR_PREC_VEH (2u)
#  define I_C02_DRVDIR_PREC_VEH ((c02_DrvDir)2u)
# endif
# if (defined RTE_CONST_I_C02_DRVDIR_SNA) || (defined I_C02_DRVDIR_SNA)
#  if (!defined RTE_CONST_I_C02_DRVDIR_SNA) || (RTE_CONST_I_C02_DRVDIR_SNA != 3u)
#   error "Enumeration constant <I_C02_DRVDIR_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_DRVDIR_SNA (3u)
#  define I_C02_DRVDIR_SNA ((c02_DrvDir)3u)
# endif

# define Rte_TypeDef_c02_EBL_Stat
typedef uint8 c02_EBL_Stat;
# define c02_EBL_Stat_LowerLimit ((c02_EBL_Stat)0u)
# define c02_EBL_Stat_UpperLimit ((c02_EBL_Stat)3u)
# if (defined RTE_CONST_I_C02_EBL_STAT_OFF) || (defined I_C02_EBL_STAT_OFF)
#  if (!defined RTE_CONST_I_C02_EBL_STAT_OFF) || (RTE_CONST_I_C02_EBL_STAT_OFF != 0u)
#   error "Enumeration constant <I_C02_EBL_STAT_OFF> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_EBL_STAT_OFF (0u)
#  define I_C02_EBL_STAT_OFF ((c02_EBL_Stat)0u)
# endif
# if (defined RTE_CONST_I_C02_EBL_STAT_MAN_ON) || (defined I_C02_EBL_STAT_MAN_ON)
#  if (!defined RTE_CONST_I_C02_EBL_STAT_MAN_ON) || (RTE_CONST_I_C02_EBL_STAT_MAN_ON != 1u)
#   error "Enumeration constant <I_C02_EBL_STAT_MAN_ON> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_EBL_STAT_MAN_ON (1u)
#  define I_C02_EBL_STAT_MAN_ON ((c02_EBL_Stat)1u)
# endif
# if (defined RTE_CONST_I_C02_EBL_STAT_NDEF2) || (defined I_C02_EBL_STAT_NDEF2)
#  if (!defined RTE_CONST_I_C02_EBL_STAT_NDEF2) || (RTE_CONST_I_C02_EBL_STAT_NDEF2 != 2u)
#   error "Enumeration constant <I_C02_EBL_STAT_NDEF2> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_EBL_STAT_NDEF2 (2u)
#  define I_C02_EBL_STAT_NDEF2 ((c02_EBL_Stat)2u)
# endif
# if (defined RTE_CONST_I_C02_EBL_STAT_LOW_VOLT) || (defined I_C02_EBL_STAT_LOW_VOLT)
#  if (!defined RTE_CONST_I_C02_EBL_STAT_LOW_VOLT) || (RTE_CONST_I_C02_EBL_STAT_LOW_VOLT != 3u)
#   error "Enumeration constant <I_C02_EBL_STAT_LOW_VOLT> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_EBL_STAT_LOW_VOLT (3u)
#  define I_C02_EBL_STAT_LOW_VOLT ((c02_EBL_Stat)3u)
# endif

# define Rte_TypeDef_c02_ESL_Lk_Rq
typedef uint8 c02_ESL_Lk_Rq;
# define c02_ESL_Lk_Rq_LowerLimit ((c02_ESL_Lk_Rq)0u)
# define c02_ESL_Lk_Rq_UpperLimit ((c02_ESL_Lk_Rq)3u)
# if (defined RTE_CONST_I_C02_ESL_LK_RQ_DEFAULT) || (defined I_C02_ESL_LK_RQ_DEFAULT)
#  if (!defined RTE_CONST_I_C02_ESL_LK_RQ_DEFAULT) || (RTE_CONST_I_C02_ESL_LK_RQ_DEFAULT != 0u)
#   error "Enumeration constant <I_C02_ESL_LK_RQ_DEFAULT> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_ESL_LK_RQ_DEFAULT (0u)
#  define I_C02_ESL_LK_RQ_DEFAULT ((c02_ESL_Lk_Rq)0u)
# endif
# if (defined RTE_CONST_I_C02_ESL_LK_RQ_ORC_RQ) || (defined I_C02_ESL_LK_RQ_ORC_RQ)
#  if (!defined RTE_CONST_I_C02_ESL_LK_RQ_ORC_RQ) || (RTE_CONST_I_C02_ESL_LK_RQ_ORC_RQ != 1u)
#   error "Enumeration constant <I_C02_ESL_LK_RQ_ORC_RQ> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_ESL_LK_RQ_ORC_RQ (1u)
#  define I_C02_ESL_LK_RQ_ORC_RQ ((c02_ESL_Lk_Rq)1u)
# endif
# if (defined RTE_CONST_I_C02_ESL_LK_RQ_SAM_F_RQ) || (defined I_C02_ESL_LK_RQ_SAM_F_RQ)
#  if (!defined RTE_CONST_I_C02_ESL_LK_RQ_SAM_F_RQ) || (RTE_CONST_I_C02_ESL_LK_RQ_SAM_F_RQ != 2u)
#   error "Enumeration constant <I_C02_ESL_LK_RQ_SAM_F_RQ> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_ESL_LK_RQ_SAM_F_RQ (2u)
#  define I_C02_ESL_LK_RQ_SAM_F_RQ ((c02_ESL_Lk_Rq)2u)
# endif
# if (defined RTE_CONST_I_C02_ESL_LK_RQ_ORC_SAM_F_RQ) || (defined I_C02_ESL_LK_RQ_ORC_SAM_F_RQ)
#  if (!defined RTE_CONST_I_C02_ESL_LK_RQ_ORC_SAM_F_RQ) || (RTE_CONST_I_C02_ESL_LK_RQ_ORC_SAM_F_RQ != 3u)
#   error "Enumeration constant <I_C02_ESL_LK_RQ_ORC_SAM_F_RQ> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_ESL_LK_RQ_ORC_SAM_F_RQ (3u)
#  define I_C02_ESL_LK_RQ_ORC_SAM_F_RQ ((c02_ESL_Lk_Rq)3u)
# endif

# define Rte_TypeDef_c02_EVC_AddEquip
typedef uint8 c02_EVC_AddEquip;
# define c02_EVC_AddEquip_LowerLimit ((c02_EVC_AddEquip)0u)
# define c02_EVC_AddEquip_UpperLimit ((c02_EVC_AddEquip)3u)
# if (defined RTE_CONST_I_C02_EVC_ADDEQUIP_VAR_0) || (defined I_C02_EVC_ADDEQUIP_VAR_0)
#  if (!defined RTE_CONST_I_C02_EVC_ADDEQUIP_VAR_0) || (RTE_CONST_I_C02_EVC_ADDEQUIP_VAR_0 != 0u)
#   error "Enumeration constant <I_C02_EVC_ADDEQUIP_VAR_0> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_EVC_ADDEQUIP_VAR_0 (0u)
#  define I_C02_EVC_ADDEQUIP_VAR_0 ((c02_EVC_AddEquip)0u)
# endif
# if (defined RTE_CONST_I_C02_EVC_ADDEQUIP_SNA) || (defined I_C02_EVC_ADDEQUIP_SNA)
#  if (!defined RTE_CONST_I_C02_EVC_ADDEQUIP_SNA) || (RTE_CONST_I_C02_EVC_ADDEQUIP_SNA != 3u)
#   error "Enumeration constant <I_C02_EVC_ADDEQUIP_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_EVC_ADDEQUIP_SNA (3u)
#  define I_C02_EVC_ADDEQUIP_SNA ((c02_EVC_AddEquip)3u)
# endif

# define Rte_TypeDef_c02_EVC_Stat
typedef uint8 c02_EVC_Stat;
# define c02_EVC_Stat_LowerLimit ((c02_EVC_Stat)0u)
# define c02_EVC_Stat_UpperLimit ((c02_EVC_Stat)3u)
# define Rte_InvalidValue_c02_EVC_Stat ((c02_EVC_Stat)3u)
# if (defined RTE_CONST_I_C02_EVC_STAT_NDEF0) || (defined I_C02_EVC_STAT_NDEF0)
#  if (!defined RTE_CONST_I_C02_EVC_STAT_NDEF0) || (RTE_CONST_I_C02_EVC_STAT_NDEF0 != 0u)
#   error "Enumeration constant <I_C02_EVC_STAT_NDEF0> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_EVC_STAT_NDEF0 (0u)
#  define I_C02_EVC_STAT_NDEF0 ((c02_EVC_Stat)0u)
# endif
# if (defined RTE_CONST_I_C02_EVC_STAT_PROG) || (defined I_C02_EVC_STAT_PROG)
#  if (!defined RTE_CONST_I_C02_EVC_STAT_PROG) || (RTE_CONST_I_C02_EVC_STAT_PROG != 1u)
#   error "Enumeration constant <I_C02_EVC_STAT_PROG> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_EVC_STAT_PROG (1u)
#  define I_C02_EVC_STAT_PROG ((c02_EVC_Stat)1u)
# endif
# if (defined RTE_CONST_I_C02_EVC_STAT_REQ) || (defined I_C02_EVC_STAT_REQ)
#  if (!defined RTE_CONST_I_C02_EVC_STAT_REQ) || (RTE_CONST_I_C02_EVC_STAT_REQ != 2u)
#   error "Enumeration constant <I_C02_EVC_STAT_REQ> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_EVC_STAT_REQ (2u)
#  define I_C02_EVC_STAT_REQ ((c02_EVC_Stat)2u)
# endif
# if (defined RTE_CONST_I_C02_EVC_STAT_SNA) || (defined I_C02_EVC_STAT_SNA)
#  if (!defined RTE_CONST_I_C02_EVC_STAT_SNA) || (RTE_CONST_I_C02_EVC_STAT_SNA != 3u)
#   error "Enumeration constant <I_C02_EVC_STAT_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_EVC_STAT_SNA (3u)
#  define I_C02_EVC_STAT_SNA ((c02_EVC_Stat)3u)
# endif

# define Rte_TypeDef_c02_FtWhlAngl_Stat
typedef uint8 c02_FtWhlAngl_Stat;
# define c02_FtWhlAngl_Stat_LowerLimit ((c02_FtWhlAngl_Stat)0u)
# define c02_FtWhlAngl_Stat_UpperLimit ((c02_FtWhlAngl_Stat)3u)
# define Rte_InvalidValue_c02_FtWhlAngl_Stat ((c02_FtWhlAngl_Stat)3u)
# if (defined RTE_CONST_I_C02_FTWHLANGL_STAT_OK) || (defined I_C02_FTWHLANGL_STAT_OK)
#  if (!defined RTE_CONST_I_C02_FTWHLANGL_STAT_OK) || (RTE_CONST_I_C02_FTWHLANGL_STAT_OK != 0u)
#   error "Enumeration constant <I_C02_FTWHLANGL_STAT_OK> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_FTWHLANGL_STAT_OK (0u)
#  define I_C02_FTWHLANGL_STAT_OK ((c02_FtWhlAngl_Stat)0u)
# endif
# if (defined RTE_CONST_I_C02_FTWHLANGL_STAT_NOT_INIT) || (defined I_C02_FTWHLANGL_STAT_NOT_INIT)
#  if (!defined RTE_CONST_I_C02_FTWHLANGL_STAT_NOT_INIT) || (RTE_CONST_I_C02_FTWHLANGL_STAT_NOT_INIT != 1u)
#   error "Enumeration constant <I_C02_FTWHLANGL_STAT_NOT_INIT> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_FTWHLANGL_STAT_NOT_INIT (1u)
#  define I_C02_FTWHLANGL_STAT_NOT_INIT ((c02_FtWhlAngl_Stat)1u)
# endif
# if (defined RTE_CONST_I_C02_FTWHLANGL_STAT_FLT) || (defined I_C02_FTWHLANGL_STAT_FLT)
#  if (!defined RTE_CONST_I_C02_FTWHLANGL_STAT_FLT) || (RTE_CONST_I_C02_FTWHLANGL_STAT_FLT != 2u)
#   error "Enumeration constant <I_C02_FTWHLANGL_STAT_FLT> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_FTWHLANGL_STAT_FLT (2u)
#  define I_C02_FTWHLANGL_STAT_FLT ((c02_FtWhlAngl_Stat)2u)
# endif
# if (defined RTE_CONST_I_C02_FTWHLANGL_STAT_SNA) || (defined I_C02_FTWHLANGL_STAT_SNA)
#  if (!defined RTE_CONST_I_C02_FTWHLANGL_STAT_SNA) || (RTE_CONST_I_C02_FTWHLANGL_STAT_SNA != 3u)
#   error "Enumeration constant <I_C02_FTWHLANGL_STAT_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_FTWHLANGL_STAT_SNA (3u)
#  define I_C02_FTWHLANGL_STAT_SNA ((c02_FtWhlAngl_Stat)3u)
# endif

# define Rte_TypeDef_c02_IHC_MotorWay_Dtct
typedef uint8 c02_IHC_MotorWay_Dtct;
# define c02_IHC_MotorWay_Dtct_LowerLimit ((c02_IHC_MotorWay_Dtct)0u)
# define c02_IHC_MotorWay_Dtct_UpperLimit ((c02_IHC_MotorWay_Dtct)3u)
# define Rte_InvalidValue_c02_IHC_MotorWay_Dtct ((c02_IHC_MotorWay_Dtct)3u)
# if (defined RTE_CONST_I_C02_IHC_MOTORWAY_DTCT_STREET_UNKWN) || (defined I_C02_IHC_MOTORWAY_DTCT_STREET_UNKWN)
#  if (!defined RTE_CONST_I_C02_IHC_MOTORWAY_DTCT_STREET_UNKWN) || (RTE_CONST_I_C02_IHC_MOTORWAY_DTCT_STREET_UNKWN != 0u)
#   error "Enumeration constant <I_C02_IHC_MOTORWAY_DTCT_STREET_UNKWN> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_IHC_MOTORWAY_DTCT_STREET_UNKWN (0u)
#  define I_C02_IHC_MOTORWAY_DTCT_STREET_UNKWN ((c02_IHC_MotorWay_Dtct)0u)
# endif
# if (defined RTE_CONST_I_C02_IHC_MOTORWAY_DTCT_STRT_NO_DTCT) || (defined I_C02_IHC_MOTORWAY_DTCT_STRT_NO_DTCT)
#  if (!defined RTE_CONST_I_C02_IHC_MOTORWAY_DTCT_STRT_NO_DTCT) || (RTE_CONST_I_C02_IHC_MOTORWAY_DTCT_STRT_NO_DTCT != 1u)
#   error "Enumeration constant <I_C02_IHC_MOTORWAY_DTCT_STRT_NO_DTCT> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_IHC_MOTORWAY_DTCT_STRT_NO_DTCT (1u)
#  define I_C02_IHC_MOTORWAY_DTCT_STRT_NO_DTCT ((c02_IHC_MotorWay_Dtct)1u)
# endif
# if (defined RTE_CONST_I_C02_IHC_MOTORWAY_DTCT_MTW_DTCT) || (defined I_C02_IHC_MOTORWAY_DTCT_MTW_DTCT)
#  if (!defined RTE_CONST_I_C02_IHC_MOTORWAY_DTCT_MTW_DTCT) || (RTE_CONST_I_C02_IHC_MOTORWAY_DTCT_MTW_DTCT != 2u)
#   error "Enumeration constant <I_C02_IHC_MOTORWAY_DTCT_MTW_DTCT> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_IHC_MOTORWAY_DTCT_MTW_DTCT (2u)
#  define I_C02_IHC_MOTORWAY_DTCT_MTW_DTCT ((c02_IHC_MotorWay_Dtct)2u)
# endif
# if (defined RTE_CONST_I_C02_IHC_MOTORWAY_DTCT_SNA) || (defined I_C02_IHC_MOTORWAY_DTCT_SNA)
#  if (!defined RTE_CONST_I_C02_IHC_MOTORWAY_DTCT_SNA) || (RTE_CONST_I_C02_IHC_MOTORWAY_DTCT_SNA != 3u)
#   error "Enumeration constant <I_C02_IHC_MOTORWAY_DTCT_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_IHC_MOTORWAY_DTCT_SNA (3u)
#  define I_C02_IHC_MOTORWAY_DTCT_SNA ((c02_IHC_MotorWay_Dtct)3u)
# endif

# define Rte_TypeDef_c02_IHC_Plus_HL_LgtOut
typedef uint8 c02_IHC_Plus_HL_LgtOut;
# define c02_IHC_Plus_HL_LgtOut_LowerLimit ((c02_IHC_Plus_HL_LgtOut)0u)
# define c02_IHC_Plus_HL_LgtOut_UpperLimit ((c02_IHC_Plus_HL_LgtOut)3u)
# define Rte_InvalidValue_c02_IHC_Plus_HL_LgtOut ((c02_IHC_Plus_HL_LgtOut)3u)
# if (defined RTE_CONST_I_C02_IHC_PLUS_HL_LGTOUT_LGTOUTSTD) || (defined I_C02_IHC_PLUS_HL_LGTOUT_LGTOUTSTD)
#  if (!defined RTE_CONST_I_C02_IHC_PLUS_HL_LGTOUT_LGTOUTSTD) || (RTE_CONST_I_C02_IHC_PLUS_HL_LGTOUT_LGTOUTSTD != 0u)
#   error "Enumeration constant <I_C02_IHC_PLUS_HL_LGTOUT_LGTOUTSTD> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_IHC_PLUS_HL_LGTOUT_LGTOUTSTD (0u)
#  define I_C02_IHC_PLUS_HL_LGTOUT_LGTOUTSTD ((c02_IHC_Plus_HL_LgtOut)0u)
# endif
# if (defined RTE_CONST_I_C02_IHC_PLUS_HL_LGTOUT_LGTOUTMIN) || (defined I_C02_IHC_PLUS_HL_LGTOUT_LGTOUTMIN)
#  if (!defined RTE_CONST_I_C02_IHC_PLUS_HL_LGTOUT_LGTOUTMIN) || (RTE_CONST_I_C02_IHC_PLUS_HL_LGTOUT_LGTOUTMIN != 1u)
#   error "Enumeration constant <I_C02_IHC_PLUS_HL_LGTOUT_LGTOUTMIN> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_IHC_PLUS_HL_LGTOUT_LGTOUTMIN (1u)
#  define I_C02_IHC_PLUS_HL_LGTOUT_LGTOUTMIN ((c02_IHC_Plus_HL_LgtOut)1u)
# endif
# if (defined RTE_CONST_I_C02_IHC_PLUS_HL_LGTOUT_LGTOUTMAX) || (defined I_C02_IHC_PLUS_HL_LGTOUT_LGTOUTMAX)
#  if (!defined RTE_CONST_I_C02_IHC_PLUS_HL_LGTOUT_LGTOUTMAX) || (RTE_CONST_I_C02_IHC_PLUS_HL_LGTOUT_LGTOUTMAX != 2u)
#   error "Enumeration constant <I_C02_IHC_PLUS_HL_LGTOUT_LGTOUTMAX> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_IHC_PLUS_HL_LGTOUT_LGTOUTMAX (2u)
#  define I_C02_IHC_PLUS_HL_LGTOUT_LGTOUTMAX ((c02_IHC_Plus_HL_LgtOut)2u)
# endif
# if (defined RTE_CONST_I_C02_IHC_PLUS_HL_LGTOUT_SNA) || (defined I_C02_IHC_PLUS_HL_LGTOUT_SNA)
#  if (!defined RTE_CONST_I_C02_IHC_PLUS_HL_LGTOUT_SNA) || (RTE_CONST_I_C02_IHC_PLUS_HL_LGTOUT_SNA != 3u)
#   error "Enumeration constant <I_C02_IHC_PLUS_HL_LGTOUT_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_IHC_PLUS_HL_LGTOUT_SNA (3u)
#  define I_C02_IHC_PLUS_HL_LGTOUT_SNA ((c02_IHC_Plus_HL_LgtOut)3u)
# endif

# define Rte_TypeDef_c02_IHC_Stat
typedef uint8 c02_IHC_Stat;
# define c02_IHC_Stat_LowerLimit ((c02_IHC_Stat)0u)
# define c02_IHC_Stat_UpperLimit ((c02_IHC_Stat)3u)
# define Rte_InvalidValue_c02_IHC_Stat ((c02_IHC_Stat)3u)
# if (defined RTE_CONST_I_C02_IHC_STAT_IHC_ACTV) || (defined I_C02_IHC_STAT_IHC_ACTV)
#  if (!defined RTE_CONST_I_C02_IHC_STAT_IHC_ACTV) || (RTE_CONST_I_C02_IHC_STAT_IHC_ACTV != 0u)
#   error "Enumeration constant <I_C02_IHC_STAT_IHC_ACTV> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_IHC_STAT_IHC_ACTV (0u)
#  define I_C02_IHC_STAT_IHC_ACTV ((c02_IHC_Stat)0u)
# endif
# if (defined RTE_CONST_I_C02_IHC_STAT_IHC_FLT) || (defined I_C02_IHC_STAT_IHC_FLT)
#  if (!defined RTE_CONST_I_C02_IHC_STAT_IHC_FLT) || (RTE_CONST_I_C02_IHC_STAT_IHC_FLT != 1u)
#   error "Enumeration constant <I_C02_IHC_STAT_IHC_FLT> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_IHC_STAT_IHC_FLT (1u)
#  define I_C02_IHC_STAT_IHC_FLT ((c02_IHC_Stat)1u)
# endif
# if (defined RTE_CONST_I_C02_IHC_STAT_TEMP_NAVL) || (defined I_C02_IHC_STAT_TEMP_NAVL)
#  if (!defined RTE_CONST_I_C02_IHC_STAT_TEMP_NAVL) || (RTE_CONST_I_C02_IHC_STAT_TEMP_NAVL != 2u)
#   error "Enumeration constant <I_C02_IHC_STAT_TEMP_NAVL> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_IHC_STAT_TEMP_NAVL (2u)
#  define I_C02_IHC_STAT_TEMP_NAVL ((c02_IHC_Stat)2u)
# endif
# if (defined RTE_CONST_I_C02_IHC_STAT_SNA) || (defined I_C02_IHC_STAT_SNA)
#  if (!defined RTE_CONST_I_C02_IHC_STAT_SNA) || (RTE_CONST_I_C02_IHC_STAT_SNA != 3u)
#   error "Enumeration constant <I_C02_IHC_STAT_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_IHC_STAT_SNA (3u)
#  define I_C02_IHC_STAT_SNA ((c02_IHC_Stat)3u)
# endif

# define Rte_TypeDef_c02_IHC_Stat_HLM_LT
typedef uint8 c02_IHC_Stat_HLM_LT;
# define c02_IHC_Stat_HLM_LT_LowerLimit ((c02_IHC_Stat_HLM_LT)0u)
# define c02_IHC_Stat_HLM_LT_UpperLimit ((c02_IHC_Stat_HLM_LT)3u)
# define Rte_InvalidValue_c02_IHC_Stat_HLM_LT ((c02_IHC_Stat_HLM_LT)3u)
# if (defined RTE_CONST_I_C02_IHC_STAT_HLM_LT_IDLE) || (defined I_C02_IHC_STAT_HLM_LT_IDLE)
#  if (!defined RTE_CONST_I_C02_IHC_STAT_HLM_LT_IDLE) || (RTE_CONST_I_C02_IHC_STAT_HLM_LT_IDLE != 0u)
#   error "Enumeration constant <I_C02_IHC_STAT_HLM_LT_IDLE> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_IHC_STAT_HLM_LT_IDLE (0u)
#  define I_C02_IHC_STAT_HLM_LT_IDLE ((c02_IHC_Stat_HLM_LT)0u)
# endif
# if (defined RTE_CONST_I_C02_IHC_STAT_HLM_LT_HLM_FLT) || (defined I_C02_IHC_STAT_HLM_LT_HLM_FLT)
#  if (!defined RTE_CONST_I_C02_IHC_STAT_HLM_LT_HLM_FLT) || (RTE_CONST_I_C02_IHC_STAT_HLM_LT_HLM_FLT != 1u)
#   error "Enumeration constant <I_C02_IHC_STAT_HLM_LT_HLM_FLT> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_IHC_STAT_HLM_LT_HLM_FLT (1u)
#  define I_C02_IHC_STAT_HLM_LT_HLM_FLT ((c02_IHC_Stat_HLM_LT)1u)
# endif
# if (defined RTE_CONST_I_C02_IHC_STAT_HLM_LT_DEACT) || (defined I_C02_IHC_STAT_HLM_LT_DEACT)
#  if (!defined RTE_CONST_I_C02_IHC_STAT_HLM_LT_DEACT) || (RTE_CONST_I_C02_IHC_STAT_HLM_LT_DEACT != 2u)
#   error "Enumeration constant <I_C02_IHC_STAT_HLM_LT_DEACT> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_IHC_STAT_HLM_LT_DEACT (2u)
#  define I_C02_IHC_STAT_HLM_LT_DEACT ((c02_IHC_Stat_HLM_LT)2u)
# endif
# if (defined RTE_CONST_I_C02_IHC_STAT_HLM_LT_SNA) || (defined I_C02_IHC_STAT_HLM_LT_SNA)
#  if (!defined RTE_CONST_I_C02_IHC_STAT_HLM_LT_SNA) || (RTE_CONST_I_C02_IHC_STAT_HLM_LT_SNA != 3u)
#   error "Enumeration constant <I_C02_IHC_STAT_HLM_LT_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_IHC_STAT_HLM_LT_SNA (3u)
#  define I_C02_IHC_STAT_HLM_LT_SNA ((c02_IHC_Stat_HLM_LT)3u)
# endif

# define Rte_TypeDef_c02_IHC_Sys_Stat
typedef uint8 c02_IHC_Sys_Stat;
# define c02_IHC_Sys_Stat_LowerLimit ((c02_IHC_Sys_Stat)0u)
# define c02_IHC_Sys_Stat_UpperLimit ((c02_IHC_Sys_Stat)3u)
# define Rte_InvalidValue_c02_IHC_Sys_Stat ((c02_IHC_Sys_Stat)3u)
# if (defined RTE_CONST_I_C02_IHC_SYS_STAT_IHC_OFF) || (defined I_C02_IHC_SYS_STAT_IHC_OFF)
#  if (!defined RTE_CONST_I_C02_IHC_SYS_STAT_IHC_OFF) || (RTE_CONST_I_C02_IHC_SYS_STAT_IHC_OFF != 0u)
#   error "Enumeration constant <I_C02_IHC_SYS_STAT_IHC_OFF> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_IHC_SYS_STAT_IHC_OFF (0u)
#  define I_C02_IHC_SYS_STAT_IHC_OFF ((c02_IHC_Sys_Stat)0u)
# endif
# if (defined RTE_CONST_I_C02_IHC_SYS_STAT_IHC_ACTV) || (defined I_C02_IHC_SYS_STAT_IHC_ACTV)
#  if (!defined RTE_CONST_I_C02_IHC_SYS_STAT_IHC_ACTV) || (RTE_CONST_I_C02_IHC_SYS_STAT_IHC_ACTV != 1u)
#   error "Enumeration constant <I_C02_IHC_SYS_STAT_IHC_ACTV> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_IHC_SYS_STAT_IHC_ACTV (1u)
#  define I_C02_IHC_SYS_STAT_IHC_ACTV ((c02_IHC_Sys_Stat)1u)
# endif
# if (defined RTE_CONST_I_C02_IHC_SYS_STAT_TEMP_NAVL) || (defined I_C02_IHC_SYS_STAT_TEMP_NAVL)
#  if (!defined RTE_CONST_I_C02_IHC_SYS_STAT_TEMP_NAVL) || (RTE_CONST_I_C02_IHC_SYS_STAT_TEMP_NAVL != 2u)
#   error "Enumeration constant <I_C02_IHC_SYS_STAT_TEMP_NAVL> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_IHC_SYS_STAT_TEMP_NAVL (2u)
#  define I_C02_IHC_SYS_STAT_TEMP_NAVL ((c02_IHC_Sys_Stat)2u)
# endif
# if (defined RTE_CONST_I_C02_IHC_SYS_STAT_SNA) || (defined I_C02_IHC_SYS_STAT_SNA)
#  if (!defined RTE_CONST_I_C02_IHC_SYS_STAT_SNA) || (RTE_CONST_I_C02_IHC_SYS_STAT_SNA != 3u)
#   error "Enumeration constant <I_C02_IHC_SYS_STAT_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_IHC_SYS_STAT_SNA (3u)
#  define I_C02_IHC_SYS_STAT_SNA ((c02_IHC_Sys_Stat)3u)
# endif

# define Rte_TypeDef_c02_IHC_Tunnel_Det
typedef uint8 c02_IHC_Tunnel_Det;
# define c02_IHC_Tunnel_Det_LowerLimit ((c02_IHC_Tunnel_Det)0u)
# define c02_IHC_Tunnel_Det_UpperLimit ((c02_IHC_Tunnel_Det)3u)
# define Rte_InvalidValue_c02_IHC_Tunnel_Det ((c02_IHC_Tunnel_Det)3u)
# if (defined RTE_CONST_I_C02_IHC_TUNNEL_DET_NO_TUNNEL) || (defined I_C02_IHC_TUNNEL_DET_NO_TUNNEL)
#  if (!defined RTE_CONST_I_C02_IHC_TUNNEL_DET_NO_TUNNEL) || (RTE_CONST_I_C02_IHC_TUNNEL_DET_NO_TUNNEL != 0u)
#   error "Enumeration constant <I_C02_IHC_TUNNEL_DET_NO_TUNNEL> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_IHC_TUNNEL_DET_NO_TUNNEL (0u)
#  define I_C02_IHC_TUNNEL_DET_NO_TUNNEL ((c02_IHC_Tunnel_Det)0u)
# endif
# if (defined RTE_CONST_I_C02_IHC_TUNNEL_DET_TUNNEL_AHEAD) || (defined I_C02_IHC_TUNNEL_DET_TUNNEL_AHEAD)
#  if (!defined RTE_CONST_I_C02_IHC_TUNNEL_DET_TUNNEL_AHEAD) || (RTE_CONST_I_C02_IHC_TUNNEL_DET_TUNNEL_AHEAD != 1u)
#   error "Enumeration constant <I_C02_IHC_TUNNEL_DET_TUNNEL_AHEAD> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_IHC_TUNNEL_DET_TUNNEL_AHEAD (1u)
#  define I_C02_IHC_TUNNEL_DET_TUNNEL_AHEAD ((c02_IHC_Tunnel_Det)1u)
# endif
# if (defined RTE_CONST_I_C02_IHC_TUNNEL_DET_INSD_TUNNEL) || (defined I_C02_IHC_TUNNEL_DET_INSD_TUNNEL)
#  if (!defined RTE_CONST_I_C02_IHC_TUNNEL_DET_INSD_TUNNEL) || (RTE_CONST_I_C02_IHC_TUNNEL_DET_INSD_TUNNEL != 2u)
#   error "Enumeration constant <I_C02_IHC_TUNNEL_DET_INSD_TUNNEL> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_IHC_TUNNEL_DET_INSD_TUNNEL (2u)
#  define I_C02_IHC_TUNNEL_DET_INSD_TUNNEL ((c02_IHC_Tunnel_Det)2u)
# endif
# if (defined RTE_CONST_I_C02_IHC_TUNNEL_DET_SNA) || (defined I_C02_IHC_TUNNEL_DET_SNA)
#  if (!defined RTE_CONST_I_C02_IHC_TUNNEL_DET_SNA) || (RTE_CONST_I_C02_IHC_TUNNEL_DET_SNA != 3u)
#   error "Enumeration constant <I_C02_IHC_TUNNEL_DET_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_IHC_TUNNEL_DET_SNA (3u)
#  define I_C02_IHC_TUNNEL_DET_SNA ((c02_IHC_Tunnel_Det)3u)
# endif

# define Rte_TypeDef_c02_Inact_Act
typedef uint8 c02_Inact_Act;
# define c02_Inact_Act_LowerLimit ((c02_Inact_Act)0u)
# define c02_Inact_Act_UpperLimit ((c02_Inact_Act)3u)
# define Rte_InvalidValue_c02_Inact_Act ((c02_Inact_Act)3u)
# if (defined RTE_CONST_I_C02_INACT_ACT_INACTIVE) || (defined I_C02_INACT_ACT_INACTIVE)
#  if (!defined RTE_CONST_I_C02_INACT_ACT_INACTIVE) || (RTE_CONST_I_C02_INACT_ACT_INACTIVE != 0u)
#   error "Enumeration constant <I_C02_INACT_ACT_INACTIVE> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_INACT_ACT_INACTIVE (0u)
#  define I_C02_INACT_ACT_INACTIVE ((c02_Inact_Act)0u)
# endif
# if (defined RTE_CONST_I_C02_INACT_ACT_ACTIVE) || (defined I_C02_INACT_ACT_ACTIVE)
#  if (!defined RTE_CONST_I_C02_INACT_ACT_ACTIVE) || (RTE_CONST_I_C02_INACT_ACT_ACTIVE != 1u)
#   error "Enumeration constant <I_C02_INACT_ACT_ACTIVE> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_INACT_ACT_ACTIVE (1u)
#  define I_C02_INACT_ACT_ACTIVE ((c02_Inact_Act)1u)
# endif
# if (defined RTE_CONST_I_C02_INACT_ACT_NDEF2) || (defined I_C02_INACT_ACT_NDEF2)
#  if (!defined RTE_CONST_I_C02_INACT_ACT_NDEF2) || (RTE_CONST_I_C02_INACT_ACT_NDEF2 != 2u)
#   error "Enumeration constant <I_C02_INACT_ACT_NDEF2> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_INACT_ACT_NDEF2 (2u)
#  define I_C02_INACT_ACT_NDEF2 ((c02_Inact_Act)2u)
# endif
# if (defined RTE_CONST_I_C02_INACT_ACT_SNA) || (defined I_C02_INACT_ACT_SNA)
#  if (!defined RTE_CONST_I_C02_INACT_ACT_SNA) || (RTE_CONST_I_C02_INACT_ACT_SNA != 3u)
#   error "Enumeration constant <I_C02_INACT_ACT_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_INACT_ACT_SNA (3u)
#  define I_C02_INACT_ACT_SNA ((c02_Inact_Act)3u)
# endif

# define Rte_TypeDef_c02_Lt_Rt_InBet
typedef uint8 c02_Lt_Rt_InBet;
# define c02_Lt_Rt_InBet_LowerLimit ((c02_Lt_Rt_InBet)0u)
# define c02_Lt_Rt_InBet_UpperLimit ((c02_Lt_Rt_InBet)3u)
# define Rte_InvalidValue_c02_Lt_Rt_InBet ((c02_Lt_Rt_InBet)3u)
# if (defined RTE_CONST_I_C02_LT_RT_INBET_LEFT) || (defined I_C02_LT_RT_INBET_LEFT)
#  if (!defined RTE_CONST_I_C02_LT_RT_INBET_LEFT) || (RTE_CONST_I_C02_LT_RT_INBET_LEFT != 0u)
#   error "Enumeration constant <I_C02_LT_RT_INBET_LEFT> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_LT_RT_INBET_LEFT (0u)
#  define I_C02_LT_RT_INBET_LEFT ((c02_Lt_Rt_InBet)0u)
# endif
# if (defined RTE_CONST_I_C02_LT_RT_INBET_RIGHT) || (defined I_C02_LT_RT_INBET_RIGHT)
#  if (!defined RTE_CONST_I_C02_LT_RT_INBET_RIGHT) || (RTE_CONST_I_C02_LT_RT_INBET_RIGHT != 1u)
#   error "Enumeration constant <I_C02_LT_RT_INBET_RIGHT> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_LT_RT_INBET_RIGHT (1u)
#  define I_C02_LT_RT_INBET_RIGHT ((c02_Lt_Rt_InBet)1u)
# endif
# if (defined RTE_CONST_I_C02_LT_RT_INBET_IN_BET) || (defined I_C02_LT_RT_INBET_IN_BET)
#  if (!defined RTE_CONST_I_C02_LT_RT_INBET_IN_BET) || (RTE_CONST_I_C02_LT_RT_INBET_IN_BET != 2u)
#   error "Enumeration constant <I_C02_LT_RT_INBET_IN_BET> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_LT_RT_INBET_IN_BET (2u)
#  define I_C02_LT_RT_INBET_IN_BET ((c02_Lt_Rt_InBet)2u)
# endif
# if (defined RTE_CONST_I_C02_LT_RT_INBET_SNA) || (defined I_C02_LT_RT_INBET_SNA)
#  if (!defined RTE_CONST_I_C02_LT_RT_INBET_SNA) || (RTE_CONST_I_C02_LT_RT_INBET_SNA != 3u)
#   error "Enumeration constant <I_C02_LT_RT_INBET_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_LT_RT_INBET_SNA (3u)
#  define I_C02_LT_RT_INBET_SNA ((c02_Lt_Rt_InBet)3u)
# endif

# define Rte_TypeDef_c02_Lt_Rt_NDef_SNA
typedef uint8 c02_Lt_Rt_NDef_SNA;
# define c02_Lt_Rt_NDef_SNA_LowerLimit ((c02_Lt_Rt_NDef_SNA)0u)
# define c02_Lt_Rt_NDef_SNA_UpperLimit ((c02_Lt_Rt_NDef_SNA)3u)
# define Rte_InvalidValue_c02_Lt_Rt_NDef_SNA ((c02_Lt_Rt_NDef_SNA)3u)
# if (defined RTE_CONST_I_C02_LT_RT_NDEF_SNA_LT) || (defined I_C02_LT_RT_NDEF_SNA_LT)
#  if (!defined RTE_CONST_I_C02_LT_RT_NDEF_SNA_LT) || (RTE_CONST_I_C02_LT_RT_NDEF_SNA_LT != 0u)
#   error "Enumeration constant <I_C02_LT_RT_NDEF_SNA_LT> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_LT_RT_NDEF_SNA_LT (0u)
#  define I_C02_LT_RT_NDEF_SNA_LT ((c02_Lt_Rt_NDef_SNA)0u)
# endif
# if (defined RTE_CONST_I_C02_LT_RT_NDEF_SNA_RT) || (defined I_C02_LT_RT_NDEF_SNA_RT)
#  if (!defined RTE_CONST_I_C02_LT_RT_NDEF_SNA_RT) || (RTE_CONST_I_C02_LT_RT_NDEF_SNA_RT != 1u)
#   error "Enumeration constant <I_C02_LT_RT_NDEF_SNA_RT> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_LT_RT_NDEF_SNA_RT (1u)
#  define I_C02_LT_RT_NDEF_SNA_RT ((c02_Lt_Rt_NDef_SNA)1u)
# endif
# if (defined RTE_CONST_I_C02_LT_RT_NDEF_SNA_NDEF2) || (defined I_C02_LT_RT_NDEF_SNA_NDEF2)
#  if (!defined RTE_CONST_I_C02_LT_RT_NDEF_SNA_NDEF2) || (RTE_CONST_I_C02_LT_RT_NDEF_SNA_NDEF2 != 2u)
#   error "Enumeration constant <I_C02_LT_RT_NDEF_SNA_NDEF2> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_LT_RT_NDEF_SNA_NDEF2 (2u)
#  define I_C02_LT_RT_NDEF_SNA_NDEF2 ((c02_Lt_Rt_NDef_SNA)2u)
# endif
# if (defined RTE_CONST_I_C02_LT_RT_NDEF_SNA_SNA) || (defined I_C02_LT_RT_NDEF_SNA_SNA)
#  if (!defined RTE_CONST_I_C02_LT_RT_NDEF_SNA_SNA) || (RTE_CONST_I_C02_LT_RT_NDEF_SNA_SNA != 3u)
#   error "Enumeration constant <I_C02_LT_RT_NDEF_SNA_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_LT_RT_NDEF_SNA_SNA (3u)
#  define I_C02_LT_RT_NDEF_SNA_SNA ((c02_Lt_Rt_NDef_SNA)3u)
# endif

# define Rte_TypeDef_c02_Md_Rq
typedef uint8 c02_Md_Rq;
# define c02_Md_Rq_LowerLimit ((c02_Md_Rq)0u)
# define c02_Md_Rq_UpperLimit ((c02_Md_Rq)3u)
# define Rte_InvalidValue_c02_Md_Rq ((c02_Md_Rq)3u)
# if (defined RTE_CONST_I_C02_MD_RQ_OFF) || (defined I_C02_MD_RQ_OFF)
#  if (!defined RTE_CONST_I_C02_MD_RQ_OFF) || (RTE_CONST_I_C02_MD_RQ_OFF != 0u)
#   error "Enumeration constant <I_C02_MD_RQ_OFF> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_MD_RQ_OFF (0u)
#  define I_C02_MD_RQ_OFF ((c02_Md_Rq)0u)
# endif
# if (defined RTE_CONST_I_C02_MD_RQ_ON_NO_WARN) || (defined I_C02_MD_RQ_ON_NO_WARN)
#  if (!defined RTE_CONST_I_C02_MD_RQ_ON_NO_WARN) || (RTE_CONST_I_C02_MD_RQ_ON_NO_WARN != 1u)
#   error "Enumeration constant <I_C02_MD_RQ_ON_NO_WARN> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_MD_RQ_ON_NO_WARN (1u)
#  define I_C02_MD_RQ_ON_NO_WARN ((c02_Md_Rq)1u)
# endif
# if (defined RTE_CONST_I_C02_MD_RQ_ON_WARN) || (defined I_C02_MD_RQ_ON_WARN)
#  if (!defined RTE_CONST_I_C02_MD_RQ_ON_WARN) || (RTE_CONST_I_C02_MD_RQ_ON_WARN != 2u)
#   error "Enumeration constant <I_C02_MD_RQ_ON_WARN> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_MD_RQ_ON_WARN (2u)
#  define I_C02_MD_RQ_ON_WARN ((c02_Md_Rq)2u)
# endif
# if (defined RTE_CONST_I_C02_MD_RQ_SNA) || (defined I_C02_MD_RQ_SNA)
#  if (!defined RTE_CONST_I_C02_MD_RQ_SNA) || (RTE_CONST_I_C02_MD_RQ_SNA != 3u)
#   error "Enumeration constant <I_C02_MD_RQ_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_MD_RQ_SNA (3u)
#  define I_C02_MD_RQ_SNA ((c02_Md_Rq)3u)
# endif

# define Rte_TypeDef_c02_MirrAdjSw_Stat
typedef uint8 c02_MirrAdjSw_Stat;
# define c02_MirrAdjSw_Stat_LowerLimit ((c02_MirrAdjSw_Stat)0u)
# define c02_MirrAdjSw_Stat_UpperLimit ((c02_MirrAdjSw_Stat)3u)
# define Rte_InvalidValue_c02_MirrAdjSw_Stat ((c02_MirrAdjSw_Stat)3u)
# if (defined RTE_CONST_I_C02_MIRRADJSW_STAT_NO_SEL) || (defined I_C02_MIRRADJSW_STAT_NO_SEL)
#  if (!defined RTE_CONST_I_C02_MIRRADJSW_STAT_NO_SEL) || (RTE_CONST_I_C02_MIRRADJSW_STAT_NO_SEL != 0u)
#   error "Enumeration constant <I_C02_MIRRADJSW_STAT_NO_SEL> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_MIRRADJSW_STAT_NO_SEL (0u)
#  define I_C02_MIRRADJSW_STAT_NO_SEL ((c02_MirrAdjSw_Stat)0u)
# endif
# if (defined RTE_CONST_I_C02_MIRRADJSW_STAT_DRV) || (defined I_C02_MIRRADJSW_STAT_DRV)
#  if (!defined RTE_CONST_I_C02_MIRRADJSW_STAT_DRV) || (RTE_CONST_I_C02_MIRRADJSW_STAT_DRV != 1u)
#   error "Enumeration constant <I_C02_MIRRADJSW_STAT_DRV> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_MIRRADJSW_STAT_DRV (1u)
#  define I_C02_MIRRADJSW_STAT_DRV ((c02_MirrAdjSw_Stat)1u)
# endif
# if (defined RTE_CONST_I_C02_MIRRADJSW_STAT_PSG) || (defined I_C02_MIRRADJSW_STAT_PSG)
#  if (!defined RTE_CONST_I_C02_MIRRADJSW_STAT_PSG) || (RTE_CONST_I_C02_MIRRADJSW_STAT_PSG != 2u)
#   error "Enumeration constant <I_C02_MIRRADJSW_STAT_PSG> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_MIRRADJSW_STAT_PSG (2u)
#  define I_C02_MIRRADJSW_STAT_PSG ((c02_MirrAdjSw_Stat)2u)
# endif
# if (defined RTE_CONST_I_C02_MIRRADJSW_STAT_SNA) || (defined I_C02_MIRRADJSW_STAT_SNA)
#  if (!defined RTE_CONST_I_C02_MIRRADJSW_STAT_SNA) || (RTE_CONST_I_C02_MIRRADJSW_STAT_SNA != 3u)
#   error "Enumeration constant <I_C02_MIRRADJSW_STAT_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_MIRRADJSW_STAT_SNA (3u)
#  define I_C02_MIRRADJSW_STAT_SNA ((c02_MirrAdjSw_Stat)3u)
# endif

# define Rte_TypeDef_c02_MirrFld_Rq
typedef uint8 c02_MirrFld_Rq;
# define c02_MirrFld_Rq_LowerLimit ((c02_MirrFld_Rq)0u)
# define c02_MirrFld_Rq_UpperLimit ((c02_MirrFld_Rq)3u)
# if (defined RTE_CONST_I_C02_MIRRFLD_RQ_IDLE) || (defined I_C02_MIRRFLD_RQ_IDLE)
#  if (!defined RTE_CONST_I_C02_MIRRFLD_RQ_IDLE) || (RTE_CONST_I_C02_MIRRFLD_RQ_IDLE != 0u)
#   error "Enumeration constant <I_C02_MIRRFLD_RQ_IDLE> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_MIRRFLD_RQ_IDLE (0u)
#  define I_C02_MIRRFLD_RQ_IDLE ((c02_MirrFld_Rq)0u)
# endif
# if (defined RTE_CONST_I_C02_MIRRFLD_RQ_EXTEND) || (defined I_C02_MIRRFLD_RQ_EXTEND)
#  if (!defined RTE_CONST_I_C02_MIRRFLD_RQ_EXTEND) || (RTE_CONST_I_C02_MIRRFLD_RQ_EXTEND != 1u)
#   error "Enumeration constant <I_C02_MIRRFLD_RQ_EXTEND> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_MIRRFLD_RQ_EXTEND (1u)
#  define I_C02_MIRRFLD_RQ_EXTEND ((c02_MirrFld_Rq)1u)
# endif
# if (defined RTE_CONST_I_C02_MIRRFLD_RQ_RETRACT) || (defined I_C02_MIRRFLD_RQ_RETRACT)
#  if (!defined RTE_CONST_I_C02_MIRRFLD_RQ_RETRACT) || (RTE_CONST_I_C02_MIRRFLD_RQ_RETRACT != 2u)
#   error "Enumeration constant <I_C02_MIRRFLD_RQ_RETRACT> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_MIRRFLD_RQ_RETRACT (2u)
#  define I_C02_MIRRFLD_RQ_RETRACT ((c02_MirrFld_Rq)2u)
# endif
# if (defined RTE_CONST_I_C02_MIRRFLD_RQ_NDEF3) || (defined I_C02_MIRRFLD_RQ_NDEF3)
#  if (!defined RTE_CONST_I_C02_MIRRFLD_RQ_NDEF3) || (RTE_CONST_I_C02_MIRRFLD_RQ_NDEF3 != 3u)
#   error "Enumeration constant <I_C02_MIRRFLD_RQ_NDEF3> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_MIRRFLD_RQ_NDEF3 (3u)
#  define I_C02_MIRRFLD_RQ_NDEF3 ((c02_MirrFld_Rq)3u)
# endif

# define Rte_TypeDef_c02_NPsd_NDefORDown_PsdORUp
typedef uint8 c02_NPsd_NDefORDown_PsdORUp;
# define c02_NPsd_NDefORDown_PsdORUp_LowerLimit ((c02_NPsd_NDefORDown_PsdORUp)0u)
# define c02_NPsd_NDefORDown_PsdORUp_UpperLimit ((c02_NPsd_NDefORDown_PsdORUp)3u)
# define Rte_InvalidValue_c02_NPsd_NDefORDown_PsdORUp ((c02_NPsd_NDefORDown_PsdORUp)3u)
# if (defined RTE_CONST_I_C02_NPSD_NDEFORDOWN_PSDORUP_NPSD) || (defined I_C02_NPSD_NDEFORDOWN_PSDORUP_NPSD)
#  if (!defined RTE_CONST_I_C02_NPSD_NDEFORDOWN_PSDORUP_NPSD) || (RTE_CONST_I_C02_NPSD_NDEFORDOWN_PSDORUP_NPSD != 0u)
#   error "Enumeration constant <I_C02_NPSD_NDEFORDOWN_PSDORUP_NPSD> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_NPSD_NDEFORDOWN_PSDORUP_NPSD (0u)
#  define I_C02_NPSD_NDEFORDOWN_PSDORUP_NPSD ((c02_NPsd_NDefORDown_PsdORUp)0u)
# endif
# if (defined RTE_CONST_I_C02_NPSD_NDEFORDOWN_PSDORUP_NDEF1_DN_PSD) || (defined I_C02_NPSD_NDEFORDOWN_PSDORUP_NDEF1_DN_PSD)
#  if (!defined RTE_CONST_I_C02_NPSD_NDEFORDOWN_PSDORUP_NDEF1_DN_PSD) || (RTE_CONST_I_C02_NPSD_NDEFORDOWN_PSDORUP_NDEF1_DN_PSD != 1u)
#   error "Enumeration constant <I_C02_NPSD_NDEFORDOWN_PSDORUP_NDEF1_DN_PSD> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_NPSD_NDEFORDOWN_PSDORUP_NDEF1_DN_PSD (1u)
#  define I_C02_NPSD_NDEFORDOWN_PSDORUP_NDEF1_DN_PSD ((c02_NPsd_NDefORDown_PsdORUp)1u)
# endif
# if (defined RTE_CONST_I_C02_NPSD_NDEFORDOWN_PSDORUP_PSD_UP_PSD) || (defined I_C02_NPSD_NDEFORDOWN_PSDORUP_PSD_UP_PSD)
#  if (!defined RTE_CONST_I_C02_NPSD_NDEFORDOWN_PSDORUP_PSD_UP_PSD) || (RTE_CONST_I_C02_NPSD_NDEFORDOWN_PSDORUP_PSD_UP_PSD != 2u)
#   error "Enumeration constant <I_C02_NPSD_NDEFORDOWN_PSDORUP_PSD_UP_PSD> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_NPSD_NDEFORDOWN_PSDORUP_PSD_UP_PSD (2u)
#  define I_C02_NPSD_NDEFORDOWN_PSDORUP_PSD_UP_PSD ((c02_NPsd_NDefORDown_PsdORUp)2u)
# endif
# if (defined RTE_CONST_I_C02_NPSD_NDEFORDOWN_PSDORUP_SNA) || (defined I_C02_NPSD_NDEFORDOWN_PSDORUP_SNA)
#  if (!defined RTE_CONST_I_C02_NPSD_NDEFORDOWN_PSDORUP_SNA) || (RTE_CONST_I_C02_NPSD_NDEFORDOWN_PSDORUP_SNA != 3u)
#   error "Enumeration constant <I_C02_NPSD_NDEFORDOWN_PSDORUP_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_NPSD_NDEFORDOWN_PSDORUP_SNA (3u)
#  define I_C02_NPSD_NDEFORDOWN_PSDORUP_SNA ((c02_NPsd_NDefORDown_PsdORUp)3u)
# endif

# define Rte_TypeDef_c02_NPsd_Psd_NDef
typedef uint8 c02_NPsd_Psd_NDef;
# define c02_NPsd_Psd_NDef_LowerLimit ((c02_NPsd_Psd_NDef)0u)
# define c02_NPsd_Psd_NDef_UpperLimit ((c02_NPsd_Psd_NDef)3u)
# define Rte_InvalidValue_c02_NPsd_Psd_NDef ((c02_NPsd_Psd_NDef)3u)
# if (defined RTE_CONST_I_C02_NPSD_PSD_NDEF_NPSD) || (defined I_C02_NPSD_PSD_NDEF_NPSD)
#  if (!defined RTE_CONST_I_C02_NPSD_PSD_NDEF_NPSD) || (RTE_CONST_I_C02_NPSD_PSD_NDEF_NPSD != 0u)
#   error "Enumeration constant <I_C02_NPSD_PSD_NDEF_NPSD> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_NPSD_PSD_NDEF_NPSD (0u)
#  define I_C02_NPSD_PSD_NDEF_NPSD ((c02_NPsd_Psd_NDef)0u)
# endif
# if (defined RTE_CONST_I_C02_NPSD_PSD_NDEF_PSD) || (defined I_C02_NPSD_PSD_NDEF_PSD)
#  if (!defined RTE_CONST_I_C02_NPSD_PSD_NDEF_PSD) || (RTE_CONST_I_C02_NPSD_PSD_NDEF_PSD != 1u)
#   error "Enumeration constant <I_C02_NPSD_PSD_NDEF_PSD> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_NPSD_PSD_NDEF_PSD (1u)
#  define I_C02_NPSD_PSD_NDEF_PSD ((c02_NPsd_Psd_NDef)1u)
# endif
# if (defined RTE_CONST_I_C02_NPSD_PSD_NDEF_NDEF2) || (defined I_C02_NPSD_PSD_NDEF_NDEF2)
#  if (!defined RTE_CONST_I_C02_NPSD_PSD_NDEF_NDEF2) || (RTE_CONST_I_C02_NPSD_PSD_NDEF_NDEF2 != 2u)
#   error "Enumeration constant <I_C02_NPSD_PSD_NDEF_NDEF2> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_NPSD_PSD_NDEF_NDEF2 (2u)
#  define I_C02_NPSD_PSD_NDEF_NDEF2 ((c02_NPsd_Psd_NDef)2u)
# endif
# if (defined RTE_CONST_I_C02_NPSD_PSD_NDEF_SNA) || (defined I_C02_NPSD_PSD_NDEF_SNA)
#  if (!defined RTE_CONST_I_C02_NPSD_PSD_NDEF_SNA) || (RTE_CONST_I_C02_NPSD_PSD_NDEF_SNA != 3u)
#   error "Enumeration constant <I_C02_NPSD_PSD_NDEF_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_NPSD_PSD_NDEF_SNA (3u)
#  define I_C02_NPSD_PSD_NDEF_SNA ((c02_NPsd_Psd_NDef)3u)
# endif

# define Rte_TypeDef_c02_NPsd_Up_Down
typedef uint8 c02_NPsd_Up_Down;
# define c02_NPsd_Up_Down_LowerLimit ((c02_NPsd_Up_Down)0u)
# define c02_NPsd_Up_Down_UpperLimit ((c02_NPsd_Up_Down)3u)
# define Rte_InvalidValue_c02_NPsd_Up_Down ((c02_NPsd_Up_Down)3u)
# if (defined RTE_CONST_I_C02_NPSD_UP_DOWN_NPSD) || (defined I_C02_NPSD_UP_DOWN_NPSD)
#  if (!defined RTE_CONST_I_C02_NPSD_UP_DOWN_NPSD) || (RTE_CONST_I_C02_NPSD_UP_DOWN_NPSD != 0u)
#   error "Enumeration constant <I_C02_NPSD_UP_DOWN_NPSD> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_NPSD_UP_DOWN_NPSD (0u)
#  define I_C02_NPSD_UP_DOWN_NPSD ((c02_NPsd_Up_Down)0u)
# endif
# if (defined RTE_CONST_I_C02_NPSD_UP_DOWN_UP) || (defined I_C02_NPSD_UP_DOWN_UP)
#  if (!defined RTE_CONST_I_C02_NPSD_UP_DOWN_UP) || (RTE_CONST_I_C02_NPSD_UP_DOWN_UP != 1u)
#   error "Enumeration constant <I_C02_NPSD_UP_DOWN_UP> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_NPSD_UP_DOWN_UP (1u)
#  define I_C02_NPSD_UP_DOWN_UP ((c02_NPsd_Up_Down)1u)
# endif
# if (defined RTE_CONST_I_C02_NPSD_UP_DOWN_DOWN) || (defined I_C02_NPSD_UP_DOWN_DOWN)
#  if (!defined RTE_CONST_I_C02_NPSD_UP_DOWN_DOWN) || (RTE_CONST_I_C02_NPSD_UP_DOWN_DOWN != 2u)
#   error "Enumeration constant <I_C02_NPSD_UP_DOWN_DOWN> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_NPSD_UP_DOWN_DOWN (2u)
#  define I_C02_NPSD_UP_DOWN_DOWN ((c02_NPsd_Up_Down)2u)
# endif
# if (defined RTE_CONST_I_C02_NPSD_UP_DOWN_SNA) || (defined I_C02_NPSD_UP_DOWN_SNA)
#  if (!defined RTE_CONST_I_C02_NPSD_UP_DOWN_SNA) || (RTE_CONST_I_C02_NPSD_UP_DOWN_SNA != 3u)
#   error "Enumeration constant <I_C02_NPSD_UP_DOWN_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_NPSD_UP_DOWN_SNA (3u)
#  define I_C02_NPSD_UP_DOWN_SNA ((c02_NPsd_Up_Down)3u)
# endif

# define Rte_TypeDef_c02_Ndef_Off_On
typedef uint8 c02_Ndef_Off_On;
# define c02_Ndef_Off_On_LowerLimit ((c02_Ndef_Off_On)0u)
# define c02_Ndef_Off_On_UpperLimit ((c02_Ndef_Off_On)3u)
# define Rte_InvalidValue_c02_Ndef_Off_On ((c02_Ndef_Off_On)3u)
# if (defined RTE_CONST_I_C02_NDEF_OFF_ON_NDEF0) || (defined I_C02_NDEF_OFF_ON_NDEF0)
#  if (!defined RTE_CONST_I_C02_NDEF_OFF_ON_NDEF0) || (RTE_CONST_I_C02_NDEF_OFF_ON_NDEF0 != 0u)
#   error "Enumeration constant <I_C02_NDEF_OFF_ON_NDEF0> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_NDEF_OFF_ON_NDEF0 (0u)
#  define I_C02_NDEF_OFF_ON_NDEF0 ((c02_Ndef_Off_On)0u)
# endif
# if (defined RTE_CONST_I_C02_NDEF_OFF_ON_OFF) || (defined I_C02_NDEF_OFF_ON_OFF)
#  if (!defined RTE_CONST_I_C02_NDEF_OFF_ON_OFF) || (RTE_CONST_I_C02_NDEF_OFF_ON_OFF != 1u)
#   error "Enumeration constant <I_C02_NDEF_OFF_ON_OFF> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_NDEF_OFF_ON_OFF (1u)
#  define I_C02_NDEF_OFF_ON_OFF ((c02_Ndef_Off_On)1u)
# endif
# if (defined RTE_CONST_I_C02_NDEF_OFF_ON_ON) || (defined I_C02_NDEF_OFF_ON_ON)
#  if (!defined RTE_CONST_I_C02_NDEF_OFF_ON_ON) || (RTE_CONST_I_C02_NDEF_OFF_ON_ON != 2u)
#   error "Enumeration constant <I_C02_NDEF_OFF_ON_ON> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_NDEF_OFF_ON_ON (2u)
#  define I_C02_NDEF_OFF_ON_ON ((c02_Ndef_Off_On)2u)
# endif
# if (defined RTE_CONST_I_C02_NDEF_OFF_ON_SNA) || (defined I_C02_NDEF_OFF_ON_SNA)
#  if (!defined RTE_CONST_I_C02_NDEF_OFF_ON_SNA) || (RTE_CONST_I_C02_NDEF_OFF_ON_SNA != 3u)
#   error "Enumeration constant <I_C02_NDEF_OFF_ON_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_NDEF_OFF_ON_SNA (3u)
#  define I_C02_NDEF_OFF_ON_SNA ((c02_Ndef_Off_On)3u)
# endif

# define Rte_TypeDef_c02_Off_On
typedef uint8 c02_Off_On;
# define c02_Off_On_LowerLimit ((c02_Off_On)0u)
# define c02_Off_On_UpperLimit ((c02_Off_On)3u)
# define Rte_InvalidValue_c02_Off_On ((c02_Off_On)3u)
# if (defined RTE_CONST_I_C02_OFF_ON_OFF) || (defined I_C02_OFF_ON_OFF)
#  if (!defined RTE_CONST_I_C02_OFF_ON_OFF) || (RTE_CONST_I_C02_OFF_ON_OFF != 0u)
#   error "Enumeration constant <I_C02_OFF_ON_OFF> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_OFF_ON_OFF (0u)
#  define I_C02_OFF_ON_OFF ((c02_Off_On)0u)
# endif
# if (defined RTE_CONST_I_C02_OFF_ON_ON) || (defined I_C02_OFF_ON_ON)
#  if (!defined RTE_CONST_I_C02_OFF_ON_ON) || (RTE_CONST_I_C02_OFF_ON_ON != 1u)
#   error "Enumeration constant <I_C02_OFF_ON_ON> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_OFF_ON_ON (1u)
#  define I_C02_OFF_ON_ON ((c02_Off_On)1u)
# endif
# if (defined RTE_CONST_I_C02_OFF_ON_NDEF2) || (defined I_C02_OFF_ON_NDEF2)
#  if (!defined RTE_CONST_I_C02_OFF_ON_NDEF2) || (RTE_CONST_I_C02_OFF_ON_NDEF2 != 2u)
#   error "Enumeration constant <I_C02_OFF_ON_NDEF2> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_OFF_ON_NDEF2 (2u)
#  define I_C02_OFF_ON_NDEF2 ((c02_Off_On)2u)
# endif
# if (defined RTE_CONST_I_C02_OFF_ON_SNA) || (defined I_C02_OFF_ON_SNA)
#  if (!defined RTE_CONST_I_C02_OFF_ON_SNA) || (RTE_CONST_I_C02_OFF_ON_SNA != 3u)
#   error "Enumeration constant <I_C02_OFF_ON_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_OFF_ON_SNA (3u)
#  define I_C02_OFF_ON_SNA ((c02_Off_On)3u)
# endif

# define Rte_TypeDef_c02_Off_On_Fail_SNA
typedef uint8 c02_Off_On_Fail_SNA;
# define c02_Off_On_Fail_SNA_LowerLimit ((c02_Off_On_Fail_SNA)0u)
# define c02_Off_On_Fail_SNA_UpperLimit ((c02_Off_On_Fail_SNA)3u)
# define Rte_InvalidValue_c02_Off_On_Fail_SNA ((c02_Off_On_Fail_SNA)3u)
# if (defined RTE_CONST_I_C02_OFF_ON_FAIL_SNA_OFF) || (defined I_C02_OFF_ON_FAIL_SNA_OFF)
#  if (!defined RTE_CONST_I_C02_OFF_ON_FAIL_SNA_OFF) || (RTE_CONST_I_C02_OFF_ON_FAIL_SNA_OFF != 0u)
#   error "Enumeration constant <I_C02_OFF_ON_FAIL_SNA_OFF> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_OFF_ON_FAIL_SNA_OFF (0u)
#  define I_C02_OFF_ON_FAIL_SNA_OFF ((c02_Off_On_Fail_SNA)0u)
# endif
# if (defined RTE_CONST_I_C02_OFF_ON_FAIL_SNA_ON) || (defined I_C02_OFF_ON_FAIL_SNA_ON)
#  if (!defined RTE_CONST_I_C02_OFF_ON_FAIL_SNA_ON) || (RTE_CONST_I_C02_OFF_ON_FAIL_SNA_ON != 1u)
#   error "Enumeration constant <I_C02_OFF_ON_FAIL_SNA_ON> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_OFF_ON_FAIL_SNA_ON (1u)
#  define I_C02_OFF_ON_FAIL_SNA_ON ((c02_Off_On_Fail_SNA)1u)
# endif
# if (defined RTE_CONST_I_C02_OFF_ON_FAIL_SNA_FAIL) || (defined I_C02_OFF_ON_FAIL_SNA_FAIL)
#  if (!defined RTE_CONST_I_C02_OFF_ON_FAIL_SNA_FAIL) || (RTE_CONST_I_C02_OFF_ON_FAIL_SNA_FAIL != 2u)
#   error "Enumeration constant <I_C02_OFF_ON_FAIL_SNA_FAIL> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_OFF_ON_FAIL_SNA_FAIL (2u)
#  define I_C02_OFF_ON_FAIL_SNA_FAIL ((c02_Off_On_Fail_SNA)2u)
# endif
# if (defined RTE_CONST_I_C02_OFF_ON_FAIL_SNA_SNA) || (defined I_C02_OFF_ON_FAIL_SNA_SNA)
#  if (!defined RTE_CONST_I_C02_OFF_ON_FAIL_SNA_SNA) || (RTE_CONST_I_C02_OFF_ON_FAIL_SNA_SNA != 3u)
#   error "Enumeration constant <I_C02_OFF_ON_FAIL_SNA_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_OFF_ON_FAIL_SNA_SNA (3u)
#  define I_C02_OFF_ON_FAIL_SNA_SNA ((c02_Off_On_Fail_SNA)3u)
# endif

# define Rte_TypeDef_c02_PMA_Pass_Warn_Rq
typedef uint8 c02_PMA_Pass_Warn_Rq;
# define c02_PMA_Pass_Warn_Rq_LowerLimit ((c02_PMA_Pass_Warn_Rq)0u)
# define c02_PMA_Pass_Warn_Rq_UpperLimit ((c02_PMA_Pass_Warn_Rq)3u)
# define Rte_InvalidValue_c02_PMA_Pass_Warn_Rq ((c02_PMA_Pass_Warn_Rq)3u)
# if (defined RTE_CONST_I_C02_PMA_PASS_WARN_RQ_IDLE) || (defined I_C02_PMA_PASS_WARN_RQ_IDLE)
#  if (!defined RTE_CONST_I_C02_PMA_PASS_WARN_RQ_IDLE) || (RTE_CONST_I_C02_PMA_PASS_WARN_RQ_IDLE != 0u)
#   error "Enumeration constant <I_C02_PMA_PASS_WARN_RQ_IDLE> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_PMA_PASS_WARN_RQ_IDLE (0u)
#  define I_C02_PMA_PASS_WARN_RQ_IDLE ((c02_PMA_Pass_Warn_Rq)0u)
# endif
# if (defined RTE_CONST_I_C02_PMA_PASS_WARN_RQ_NO_PASS) || (defined I_C02_PMA_PASS_WARN_RQ_NO_PASS)
#  if (!defined RTE_CONST_I_C02_PMA_PASS_WARN_RQ_NO_PASS) || (RTE_CONST_I_C02_PMA_PASS_WARN_RQ_NO_PASS != 1u)
#   error "Enumeration constant <I_C02_PMA_PASS_WARN_RQ_NO_PASS> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_PMA_PASS_WARN_RQ_NO_PASS (1u)
#  define I_C02_PMA_PASS_WARN_RQ_NO_PASS ((c02_PMA_Pass_Warn_Rq)1u)
# endif
# if (defined RTE_CONST_I_C02_PMA_PASS_WARN_RQ_PASS) || (defined I_C02_PMA_PASS_WARN_RQ_PASS)
#  if (!defined RTE_CONST_I_C02_PMA_PASS_WARN_RQ_PASS) || (RTE_CONST_I_C02_PMA_PASS_WARN_RQ_PASS != 2u)
#   error "Enumeration constant <I_C02_PMA_PASS_WARN_RQ_PASS> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_PMA_PASS_WARN_RQ_PASS (2u)
#  define I_C02_PMA_PASS_WARN_RQ_PASS ((c02_PMA_Pass_Warn_Rq)2u)
# endif
# if (defined RTE_CONST_I_C02_PMA_PASS_WARN_RQ_SNA) || (defined I_C02_PMA_PASS_WARN_RQ_SNA)
#  if (!defined RTE_CONST_I_C02_PMA_PASS_WARN_RQ_SNA) || (RTE_CONST_I_C02_PMA_PASS_WARN_RQ_SNA != 3u)
#   error "Enumeration constant <I_C02_PMA_PASS_WARN_RQ_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_PMA_PASS_WARN_RQ_SNA (3u)
#  define I_C02_PMA_PASS_WARN_RQ_SNA ((c02_PMA_Pass_Warn_Rq)3u)
# endif

# define Rte_TypeDef_c02_PMA_Warn_Rq
typedef uint8 c02_PMA_Warn_Rq;
# define c02_PMA_Warn_Rq_LowerLimit ((c02_PMA_Warn_Rq)0u)
# define c02_PMA_Warn_Rq_UpperLimit ((c02_PMA_Warn_Rq)3u)
# define Rte_InvalidValue_c02_PMA_Warn_Rq ((c02_PMA_Warn_Rq)3u)
# if (defined RTE_CONST_I_C02_PMA_WARN_RQ_IDLE) || (defined I_C02_PMA_WARN_RQ_IDLE)
#  if (!defined RTE_CONST_I_C02_PMA_WARN_RQ_IDLE) || (RTE_CONST_I_C02_PMA_WARN_RQ_IDLE != 0u)
#   error "Enumeration constant <I_C02_PMA_WARN_RQ_IDLE> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_PMA_WARN_RQ_IDLE (0u)
#  define I_C02_PMA_WARN_RQ_IDLE ((c02_PMA_Warn_Rq)0u)
# endif
# if (defined RTE_CONST_I_C02_PMA_WARN_RQ_LANE_CHNG_ALERT) || (defined I_C02_PMA_WARN_RQ_LANE_CHNG_ALERT)
#  if (!defined RTE_CONST_I_C02_PMA_WARN_RQ_LANE_CHNG_ALERT) || (RTE_CONST_I_C02_PMA_WARN_RQ_LANE_CHNG_ALERT != 1u)
#   error "Enumeration constant <I_C02_PMA_WARN_RQ_LANE_CHNG_ALERT> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_PMA_WARN_RQ_LANE_CHNG_ALERT (1u)
#  define I_C02_PMA_WARN_RQ_LANE_CHNG_ALERT ((c02_PMA_Warn_Rq)1u)
# endif
# if (defined RTE_CONST_I_C02_PMA_WARN_RQ_IND_ALERT) || (defined I_C02_PMA_WARN_RQ_IND_ALERT)
#  if (!defined RTE_CONST_I_C02_PMA_WARN_RQ_IND_ALERT) || (RTE_CONST_I_C02_PMA_WARN_RQ_IND_ALERT != 2u)
#   error "Enumeration constant <I_C02_PMA_WARN_RQ_IND_ALERT> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_PMA_WARN_RQ_IND_ALERT (2u)
#  define I_C02_PMA_WARN_RQ_IND_ALERT ((c02_PMA_Warn_Rq)2u)
# endif
# if (defined RTE_CONST_I_C02_PMA_WARN_RQ_SNA) || (defined I_C02_PMA_WARN_RQ_SNA)
#  if (!defined RTE_CONST_I_C02_PMA_WARN_RQ_SNA) || (RTE_CONST_I_C02_PMA_WARN_RQ_SNA != 3u)
#   error "Enumeration constant <I_C02_PMA_WARN_RQ_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_PMA_WARN_RQ_SNA (3u)
#  define I_C02_PMA_WARN_RQ_SNA ((c02_PMA_Warn_Rq)3u)
# endif

# define Rte_TypeDef_c02_Pdl_Stat
typedef uint8 c02_Pdl_Stat;
# define c02_Pdl_Stat_LowerLimit ((c02_Pdl_Stat)0u)
# define c02_Pdl_Stat_UpperLimit ((c02_Pdl_Stat)3u)
# define Rte_InvalidValue_c02_Pdl_Stat ((c02_Pdl_Stat)3u)
# if (defined RTE_CONST_I_C02_PDL_STAT_UPSTOP) || (defined I_C02_PDL_STAT_UPSTOP)
#  if (!defined RTE_CONST_I_C02_PDL_STAT_UPSTOP) || (RTE_CONST_I_C02_PDL_STAT_UPSTOP != 0u)
#   error "Enumeration constant <I_C02_PDL_STAT_UPSTOP> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_PDL_STAT_UPSTOP (0u)
#  define I_C02_PDL_STAT_UPSTOP ((c02_Pdl_Stat)0u)
# endif
# if (defined RTE_CONST_I_C02_PDL_STAT_PSD) || (defined I_C02_PDL_STAT_PSD)
#  if (!defined RTE_CONST_I_C02_PDL_STAT_PSD) || (RTE_CONST_I_C02_PDL_STAT_PSD != 1u)
#   error "Enumeration constant <I_C02_PDL_STAT_PSD> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_PDL_STAT_PSD (1u)
#  define I_C02_PDL_STAT_PSD ((c02_Pdl_Stat)1u)
# endif
# if (defined RTE_CONST_I_C02_PDL_STAT_NDEF2) || (defined I_C02_PDL_STAT_NDEF2)
#  if (!defined RTE_CONST_I_C02_PDL_STAT_NDEF2) || (RTE_CONST_I_C02_PDL_STAT_NDEF2 != 2u)
#   error "Enumeration constant <I_C02_PDL_STAT_NDEF2> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_PDL_STAT_NDEF2 (2u)
#  define I_C02_PDL_STAT_NDEF2 ((c02_Pdl_Stat)2u)
# endif
# if (defined RTE_CONST_I_C02_PDL_STAT_SNA) || (defined I_C02_PDL_STAT_SNA)
#  if (!defined RTE_CONST_I_C02_PDL_STAT_SNA) || (RTE_CONST_I_C02_PDL_STAT_SNA != 3u)
#   error "Enumeration constant <I_C02_PDL_STAT_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_PDL_STAT_SNA (3u)
#  define I_C02_PDL_STAT_SNA ((c02_Pdl_Stat)3u)
# endif

# define Rte_TypeDef_c02_PkBrk_Rq_ESP
typedef uint8 c02_PkBrk_Rq_ESP;
# define c02_PkBrk_Rq_ESP_LowerLimit ((c02_PkBrk_Rq_ESP)0u)
# define c02_PkBrk_Rq_ESP_UpperLimit ((c02_PkBrk_Rq_ESP)3u)
# define Rte_InvalidValue_c02_PkBrk_Rq_ESP ((c02_PkBrk_Rq_ESP)3u)
# if (defined RTE_CONST_I_C02_PKBRK_RQ_ESP_IDLE) || (defined I_C02_PKBRK_RQ_ESP_IDLE)
#  if (!defined RTE_CONST_I_C02_PKBRK_RQ_ESP_IDLE) || (RTE_CONST_I_C02_PKBRK_RQ_ESP_IDLE != 0u)
#   error "Enumeration constant <I_C02_PKBRK_RQ_ESP_IDLE> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_PKBRK_RQ_ESP_IDLE (0u)
#  define I_C02_PKBRK_RQ_ESP_IDLE ((c02_PkBrk_Rq_ESP)0u)
# endif
# if (defined RTE_CONST_I_C02_PKBRK_RQ_ESP_ENGG) || (defined I_C02_PKBRK_RQ_ESP_ENGG)
#  if (!defined RTE_CONST_I_C02_PKBRK_RQ_ESP_ENGG) || (RTE_CONST_I_C02_PKBRK_RQ_ESP_ENGG != 1u)
#   error "Enumeration constant <I_C02_PKBRK_RQ_ESP_ENGG> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_PKBRK_RQ_ESP_ENGG (1u)
#  define I_C02_PKBRK_RQ_ESP_ENGG ((c02_PkBrk_Rq_ESP)1u)
# endif
# if (defined RTE_CONST_I_C02_PKBRK_RQ_ESP_RELS) || (defined I_C02_PKBRK_RQ_ESP_RELS)
#  if (!defined RTE_CONST_I_C02_PKBRK_RQ_ESP_RELS) || (RTE_CONST_I_C02_PKBRK_RQ_ESP_RELS != 2u)
#   error "Enumeration constant <I_C02_PKBRK_RQ_ESP_RELS> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_PKBRK_RQ_ESP_RELS (2u)
#  define I_C02_PKBRK_RQ_ESP_RELS ((c02_PkBrk_Rq_ESP)2u)
# endif
# if (defined RTE_CONST_I_C02_PKBRK_RQ_ESP_SNA) || (defined I_C02_PKBRK_RQ_ESP_SNA)
#  if (!defined RTE_CONST_I_C02_PKBRK_RQ_ESP_SNA) || (RTE_CONST_I_C02_PKBRK_RQ_ESP_SNA != 3u)
#   error "Enumeration constant <I_C02_PKBRK_RQ_ESP_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_PKBRK_RQ_ESP_SNA (3u)
#  define I_C02_PKBRK_RQ_ESP_SNA ((c02_PkBrk_Rq_ESP)3u)
# endif

# define Rte_TypeDef_c02_PreviewTrk_Stat
typedef uint8 c02_PreviewTrk_Stat;
# define c02_PreviewTrk_Stat_LowerLimit ((c02_PreviewTrk_Stat)0u)
# define c02_PreviewTrk_Stat_UpperLimit ((c02_PreviewTrk_Stat)3u)
# define Rte_InvalidValue_c02_PreviewTrk_Stat ((c02_PreviewTrk_Stat)3u)
# if (defined RTE_CONST_I_C02_PREVIEWTRK_STAT_INIT) || (defined I_C02_PREVIEWTRK_STAT_INIT)
#  if (!defined RTE_CONST_I_C02_PREVIEWTRK_STAT_INIT) || (RTE_CONST_I_C02_PREVIEWTRK_STAT_INIT != 0u)
#   error "Enumeration constant <I_C02_PREVIEWTRK_STAT_INIT> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_PREVIEWTRK_STAT_INIT (0u)
#  define I_C02_PREVIEWTRK_STAT_INIT ((c02_PreviewTrk_Stat)0u)
# endif
# if (defined RTE_CONST_I_C02_PREVIEWTRK_STAT_RUN) || (defined I_C02_PREVIEWTRK_STAT_RUN)
#  if (!defined RTE_CONST_I_C02_PREVIEWTRK_STAT_RUN) || (RTE_CONST_I_C02_PREVIEWTRK_STAT_RUN != 1u)
#   error "Enumeration constant <I_C02_PREVIEWTRK_STAT_RUN> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_PREVIEWTRK_STAT_RUN (1u)
#  define I_C02_PREVIEWTRK_STAT_RUN ((c02_PreviewTrk_Stat)1u)
# endif
# if (defined RTE_CONST_I_C02_PREVIEWTRK_STAT_ERROR) || (defined I_C02_PREVIEWTRK_STAT_ERROR)
#  if (!defined RTE_CONST_I_C02_PREVIEWTRK_STAT_ERROR) || (RTE_CONST_I_C02_PREVIEWTRK_STAT_ERROR != 2u)
#   error "Enumeration constant <I_C02_PREVIEWTRK_STAT_ERROR> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_PREVIEWTRK_STAT_ERROR (2u)
#  define I_C02_PREVIEWTRK_STAT_ERROR ((c02_PreviewTrk_Stat)2u)
# endif
# if (defined RTE_CONST_I_C02_PREVIEWTRK_STAT_SNA) || (defined I_C02_PREVIEWTRK_STAT_SNA)
#  if (!defined RTE_CONST_I_C02_PREVIEWTRK_STAT_SNA) || (RTE_CONST_I_C02_PREVIEWTRK_STAT_SNA != 3u)
#   error "Enumeration constant <I_C02_PREVIEWTRK_STAT_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_PREVIEWTRK_STAT_SNA (3u)
#  define I_C02_PREVIEWTRK_STAT_SNA ((c02_PreviewTrk_Stat)3u)
# endif

# define Rte_TypeDef_c02_RDU_DTQ_PLObj_RelFlg
typedef uint8 c02_RDU_DTQ_PLObj_RelFlg;
# define c02_RDU_DTQ_PLObj_RelFlg_LowerLimit ((c02_RDU_DTQ_PLObj_RelFlg)0u)
# define c02_RDU_DTQ_PLObj_RelFlg_UpperLimit ((c02_RDU_DTQ_PLObj_RelFlg)3u)
# if (defined RTE_CONST_I_C02_RDU_DTQ_PLOBJ_RELFLG_OBJ_LT_OF_ADTROBJ) || (defined I_C02_RDU_DTQ_PLOBJ_RELFLG_OBJ_LT_OF_ADTROBJ)
#  if (!defined RTE_CONST_I_C02_RDU_DTQ_PLOBJ_RELFLG_OBJ_LT_OF_ADTROBJ) || (RTE_CONST_I_C02_RDU_DTQ_PLOBJ_RELFLG_OBJ_LT_OF_ADTROBJ != 0u)
#   error "Enumeration constant <I_C02_RDU_DTQ_PLOBJ_RELFLG_OBJ_LT_OF_ADTROBJ> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_RDU_DTQ_PLOBJ_RELFLG_OBJ_LT_OF_ADTROBJ (0u)
#  define I_C02_RDU_DTQ_PLOBJ_RELFLG_OBJ_LT_OF_ADTROBJ ((c02_RDU_DTQ_PLObj_RelFlg)0u)
# endif
# if (defined RTE_CONST_I_C02_RDU_DTQ_PLOBJ_RELFLG_OBJ_IS_ADTROBJ) || (defined I_C02_RDU_DTQ_PLOBJ_RELFLG_OBJ_IS_ADTROBJ)
#  if (!defined RTE_CONST_I_C02_RDU_DTQ_PLOBJ_RELFLG_OBJ_IS_ADTROBJ) || (RTE_CONST_I_C02_RDU_DTQ_PLOBJ_RELFLG_OBJ_IS_ADTROBJ != 1u)
#   error "Enumeration constant <I_C02_RDU_DTQ_PLOBJ_RELFLG_OBJ_IS_ADTROBJ> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_RDU_DTQ_PLOBJ_RELFLG_OBJ_IS_ADTROBJ (1u)
#  define I_C02_RDU_DTQ_PLOBJ_RELFLG_OBJ_IS_ADTROBJ ((c02_RDU_DTQ_PLObj_RelFlg)1u)
# endif
# if (defined RTE_CONST_I_C02_RDU_DTQ_PLOBJ_RELFLG_OBJ_RT_OF_ADTROBJ) || (defined I_C02_RDU_DTQ_PLOBJ_RELFLG_OBJ_RT_OF_ADTROBJ)
#  if (!defined RTE_CONST_I_C02_RDU_DTQ_PLOBJ_RELFLG_OBJ_RT_OF_ADTROBJ) || (RTE_CONST_I_C02_RDU_DTQ_PLOBJ_RELFLG_OBJ_RT_OF_ADTROBJ != 2u)
#   error "Enumeration constant <I_C02_RDU_DTQ_PLOBJ_RELFLG_OBJ_RT_OF_ADTROBJ> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_RDU_DTQ_PLOBJ_RELFLG_OBJ_RT_OF_ADTROBJ (2u)
#  define I_C02_RDU_DTQ_PLOBJ_RELFLG_OBJ_RT_OF_ADTROBJ ((c02_RDU_DTQ_PLObj_RelFlg)2u)
# endif
# if (defined RTE_CONST_I_C02_RDU_DTQ_PLOBJ_RELFLG_OBJ_NO_ADTROBJ) || (defined I_C02_RDU_DTQ_PLOBJ_RELFLG_OBJ_NO_ADTROBJ)
#  if (!defined RTE_CONST_I_C02_RDU_DTQ_PLOBJ_RELFLG_OBJ_NO_ADTROBJ) || (RTE_CONST_I_C02_RDU_DTQ_PLOBJ_RELFLG_OBJ_NO_ADTROBJ != 3u)
#   error "Enumeration constant <I_C02_RDU_DTQ_PLOBJ_RELFLG_OBJ_NO_ADTROBJ> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_RDU_DTQ_PLOBJ_RELFLG_OBJ_NO_ADTROBJ (3u)
#  define I_C02_RDU_DTQ_PLOBJ_RELFLG_OBJ_NO_ADTROBJ ((c02_RDU_DTQ_PLObj_RelFlg)3u)
# endif

# define Rte_TypeDef_c02_RoadWork_Warn_Rq
typedef uint8 c02_RoadWork_Warn_Rq;
# define c02_RoadWork_Warn_Rq_LowerLimit ((c02_RoadWork_Warn_Rq)0u)
# define c02_RoadWork_Warn_Rq_UpperLimit ((c02_RoadWork_Warn_Rq)3u)
# define Rte_InvalidValue_c02_RoadWork_Warn_Rq ((c02_RoadWork_Warn_Rq)3u)
# if (defined RTE_CONST_I_C02_ROADWORK_WARN_RQ_IDLE) || (defined I_C02_ROADWORK_WARN_RQ_IDLE)
#  if (!defined RTE_CONST_I_C02_ROADWORK_WARN_RQ_IDLE) || (RTE_CONST_I_C02_ROADWORK_WARN_RQ_IDLE != 0u)
#   error "Enumeration constant <I_C02_ROADWORK_WARN_RQ_IDLE> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_ROADWORK_WARN_RQ_IDLE (0u)
#  define I_C02_ROADWORK_WARN_RQ_IDLE ((c02_RoadWork_Warn_Rq)0u)
# endif
# if (defined RTE_CONST_I_C02_ROADWORK_WARN_RQ_NO_ROAD_WORK) || (defined I_C02_ROADWORK_WARN_RQ_NO_ROAD_WORK)
#  if (!defined RTE_CONST_I_C02_ROADWORK_WARN_RQ_NO_ROAD_WORK) || (RTE_CONST_I_C02_ROADWORK_WARN_RQ_NO_ROAD_WORK != 1u)
#   error "Enumeration constant <I_C02_ROADWORK_WARN_RQ_NO_ROAD_WORK> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_ROADWORK_WARN_RQ_NO_ROAD_WORK (1u)
#  define I_C02_ROADWORK_WARN_RQ_NO_ROAD_WORK ((c02_RoadWork_Warn_Rq)1u)
# endif
# if (defined RTE_CONST_I_C02_ROADWORK_WARN_RQ_ROAD_WORK) || (defined I_C02_ROADWORK_WARN_RQ_ROAD_WORK)
#  if (!defined RTE_CONST_I_C02_ROADWORK_WARN_RQ_ROAD_WORK) || (RTE_CONST_I_C02_ROADWORK_WARN_RQ_ROAD_WORK != 2u)
#   error "Enumeration constant <I_C02_ROADWORK_WARN_RQ_ROAD_WORK> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_ROADWORK_WARN_RQ_ROAD_WORK (2u)
#  define I_C02_ROADWORK_WARN_RQ_ROAD_WORK ((c02_RoadWork_Warn_Rq)2u)
# endif
# if (defined RTE_CONST_I_C02_ROADWORK_WARN_RQ_SNA) || (defined I_C02_ROADWORK_WARN_RQ_SNA)
#  if (!defined RTE_CONST_I_C02_ROADWORK_WARN_RQ_SNA) || (RTE_CONST_I_C02_ROADWORK_WARN_RQ_SNA != 3u)
#   error "Enumeration constant <I_C02_ROADWORK_WARN_RQ_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_ROADWORK_WARN_RQ_SNA (3u)
#  define I_C02_ROADWORK_WARN_RQ_SNA ((c02_RoadWork_Warn_Rq)3u)
# endif

# define Rte_TypeDef_c02_SLA_Md_Rq
typedef uint8 c02_SLA_Md_Rq;
# define c02_SLA_Md_Rq_LowerLimit ((c02_SLA_Md_Rq)0u)
# define c02_SLA_Md_Rq_UpperLimit ((c02_SLA_Md_Rq)3u)
# define Rte_InvalidValue_c02_SLA_Md_Rq ((c02_SLA_Md_Rq)3u)
# if (defined RTE_CONST_I_C02_SLA_MD_RQ_OFF) || (defined I_C02_SLA_MD_RQ_OFF)
#  if (!defined RTE_CONST_I_C02_SLA_MD_RQ_OFF) || (RTE_CONST_I_C02_SLA_MD_RQ_OFF != 0u)
#   error "Enumeration constant <I_C02_SLA_MD_RQ_OFF> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_SLA_MD_RQ_OFF (0u)
#  define I_C02_SLA_MD_RQ_OFF ((c02_SLA_Md_Rq)0u)
# endif
# if (defined RTE_CONST_I_C02_SLA_MD_RQ_ON_NO_WARN) || (defined I_C02_SLA_MD_RQ_ON_NO_WARN)
#  if (!defined RTE_CONST_I_C02_SLA_MD_RQ_ON_NO_WARN) || (RTE_CONST_I_C02_SLA_MD_RQ_ON_NO_WARN != 1u)
#   error "Enumeration constant <I_C02_SLA_MD_RQ_ON_NO_WARN> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_SLA_MD_RQ_ON_NO_WARN (1u)
#  define I_C02_SLA_MD_RQ_ON_NO_WARN ((c02_SLA_Md_Rq)1u)
# endif
# if (defined RTE_CONST_I_C02_SLA_MD_RQ_ON_WARN) || (defined I_C02_SLA_MD_RQ_ON_WARN)
#  if (!defined RTE_CONST_I_C02_SLA_MD_RQ_ON_WARN) || (RTE_CONST_I_C02_SLA_MD_RQ_ON_WARN != 2u)
#   error "Enumeration constant <I_C02_SLA_MD_RQ_ON_WARN> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_SLA_MD_RQ_ON_WARN (2u)
#  define I_C02_SLA_MD_RQ_ON_WARN ((c02_SLA_Md_Rq)2u)
# endif
# if (defined RTE_CONST_I_C02_SLA_MD_RQ_SNA) || (defined I_C02_SLA_MD_RQ_SNA)
#  if (!defined RTE_CONST_I_C02_SLA_MD_RQ_SNA) || (RTE_CONST_I_C02_SLA_MD_RQ_SNA != 3u)
#   error "Enumeration constant <I_C02_SLA_MD_RQ_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_SLA_MD_RQ_SNA (3u)
#  define I_C02_SLA_MD_RQ_SNA ((c02_SLA_Md_Rq)3u)
# endif

# define Rte_TypeDef_c02_SLA_SpdWarn_Rq
typedef uint8 c02_SLA_SpdWarn_Rq;
# define c02_SLA_SpdWarn_Rq_LowerLimit ((c02_SLA_SpdWarn_Rq)0u)
# define c02_SLA_SpdWarn_Rq_UpperLimit ((c02_SLA_SpdWarn_Rq)3u)
# if (defined RTE_CONST_I_C02_SLA_SPDWARN_RQ_OFF) || (defined I_C02_SLA_SPDWARN_RQ_OFF)
#  if (!defined RTE_CONST_I_C02_SLA_SPDWARN_RQ_OFF) || (RTE_CONST_I_C02_SLA_SPDWARN_RQ_OFF != 0u)
#   error "Enumeration constant <I_C02_SLA_SPDWARN_RQ_OFF> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_SLA_SPDWARN_RQ_OFF (0u)
#  define I_C02_SLA_SPDWARN_RQ_OFF ((c02_SLA_SpdWarn_Rq)0u)
# endif
# if (defined RTE_CONST_I_C02_SLA_SPDWARN_RQ_FLASH) || (defined I_C02_SLA_SPDWARN_RQ_FLASH)
#  if (!defined RTE_CONST_I_C02_SLA_SPDWARN_RQ_FLASH) || (RTE_CONST_I_C02_SLA_SPDWARN_RQ_FLASH != 1u)
#   error "Enumeration constant <I_C02_SLA_SPDWARN_RQ_FLASH> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_SLA_SPDWARN_RQ_FLASH (1u)
#  define I_C02_SLA_SPDWARN_RQ_FLASH ((c02_SLA_SpdWarn_Rq)1u)
# endif
# if (defined RTE_CONST_I_C02_SLA_SPDWARN_RQ_STEADY) || (defined I_C02_SLA_SPDWARN_RQ_STEADY)
#  if (!defined RTE_CONST_I_C02_SLA_SPDWARN_RQ_STEADY) || (RTE_CONST_I_C02_SLA_SPDWARN_RQ_STEADY != 2u)
#   error "Enumeration constant <I_C02_SLA_SPDWARN_RQ_STEADY> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_SLA_SPDWARN_RQ_STEADY (2u)
#  define I_C02_SLA_SPDWARN_RQ_STEADY ((c02_SLA_SpdWarn_Rq)2u)
# endif
# if (defined RTE_CONST_I_C02_SLA_SPDWARN_RQ_NDEF3) || (defined I_C02_SLA_SPDWARN_RQ_NDEF3)
#  if (!defined RTE_CONST_I_C02_SLA_SPDWARN_RQ_NDEF3) || (RTE_CONST_I_C02_SLA_SPDWARN_RQ_NDEF3 != 3u)
#   error "Enumeration constant <I_C02_SLA_SPDWARN_RQ_NDEF3> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_SLA_SPDWARN_RQ_NDEF3 (3u)
#  define I_C02_SLA_SPDWARN_RQ_NDEF3 ((c02_SLA_SpdWarn_Rq)3u)
# endif

# define Rte_TypeDef_c02_SLA_Warn_Rq
typedef uint8 c02_SLA_Warn_Rq;
# define c02_SLA_Warn_Rq_LowerLimit ((c02_SLA_Warn_Rq)0u)
# define c02_SLA_Warn_Rq_UpperLimit ((c02_SLA_Warn_Rq)3u)
# define Rte_InvalidValue_c02_SLA_Warn_Rq ((c02_SLA_Warn_Rq)3u)
# if (defined RTE_CONST_I_C02_SLA_WARN_RQ_IDLE) || (defined I_C02_SLA_WARN_RQ_IDLE)
#  if (!defined RTE_CONST_I_C02_SLA_WARN_RQ_IDLE) || (RTE_CONST_I_C02_SLA_WARN_RQ_IDLE != 0u)
#   error "Enumeration constant <I_C02_SLA_WARN_RQ_IDLE> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_SLA_WARN_RQ_IDLE (0u)
#  define I_C02_SLA_WARN_RQ_IDLE ((c02_SLA_Warn_Rq)0u)
# endif
# if (defined RTE_CONST_I_C02_SLA_WARN_RQ_SPEED_OK) || (defined I_C02_SLA_WARN_RQ_SPEED_OK)
#  if (!defined RTE_CONST_I_C02_SLA_WARN_RQ_SPEED_OK) || (RTE_CONST_I_C02_SLA_WARN_RQ_SPEED_OK != 1u)
#   error "Enumeration constant <I_C02_SLA_WARN_RQ_SPEED_OK> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_SLA_WARN_RQ_SPEED_OK (1u)
#  define I_C02_SLA_WARN_RQ_SPEED_OK ((c02_SLA_Warn_Rq)1u)
# endif
# if (defined RTE_CONST_I_C02_SLA_WARN_RQ_SPEED_EXCD) || (defined I_C02_SLA_WARN_RQ_SPEED_EXCD)
#  if (!defined RTE_CONST_I_C02_SLA_WARN_RQ_SPEED_EXCD) || (RTE_CONST_I_C02_SLA_WARN_RQ_SPEED_EXCD != 2u)
#   error "Enumeration constant <I_C02_SLA_WARN_RQ_SPEED_EXCD> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_SLA_WARN_RQ_SPEED_EXCD (2u)
#  define I_C02_SLA_WARN_RQ_SPEED_EXCD ((c02_SLA_Warn_Rq)2u)
# endif
# if (defined RTE_CONST_I_C02_SLA_WARN_RQ_SNA) || (defined I_C02_SLA_WARN_RQ_SNA)
#  if (!defined RTE_CONST_I_C02_SLA_WARN_RQ_SNA) || (RTE_CONST_I_C02_SLA_WARN_RQ_SNA != 3u)
#   error "Enumeration constant <I_C02_SLA_WARN_RQ_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_SLA_WARN_RQ_SNA (3u)
#  define I_C02_SLA_WARN_RQ_SNA ((c02_SLA_Warn_Rq)3u)
# endif

# define Rte_TypeDef_c02_SMPC_Cam_Stat_FOD
typedef uint8 c02_SMPC_Cam_Stat_FOD;
# define c02_SMPC_Cam_Stat_FOD_LowerLimit ((c02_SMPC_Cam_Stat_FOD)0u)
# define c02_SMPC_Cam_Stat_FOD_UpperLimit ((c02_SMPC_Cam_Stat_FOD)3u)
# if (defined RTE_CONST_I_C02_SMPC_CAM_STAT_FOD_FOD_FLT) || (defined I_C02_SMPC_CAM_STAT_FOD_FOD_FLT)
#  if (!defined RTE_CONST_I_C02_SMPC_CAM_STAT_FOD_FOD_FLT) || (RTE_CONST_I_C02_SMPC_CAM_STAT_FOD_FOD_FLT != 0u)
#   error "Enumeration constant <I_C02_SMPC_CAM_STAT_FOD_FOD_FLT> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_SMPC_CAM_STAT_FOD_FOD_FLT (0u)
#  define I_C02_SMPC_CAM_STAT_FOD_FOD_FLT ((c02_SMPC_Cam_Stat_FOD)0u)
# endif
# if (defined RTE_CONST_I_C02_SMPC_CAM_STAT_FOD_FOD_OK) || (defined I_C02_SMPC_CAM_STAT_FOD_FOD_OK)
#  if (!defined RTE_CONST_I_C02_SMPC_CAM_STAT_FOD_FOD_OK) || (RTE_CONST_I_C02_SMPC_CAM_STAT_FOD_FOD_OK != 1u)
#   error "Enumeration constant <I_C02_SMPC_CAM_STAT_FOD_FOD_OK> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_SMPC_CAM_STAT_FOD_FOD_OK (1u)
#  define I_C02_SMPC_CAM_STAT_FOD_FOD_OK ((c02_SMPC_Cam_Stat_FOD)1u)
# endif
# if (defined RTE_CONST_I_C02_SMPC_CAM_STAT_FOD_FOD_TEMP_NA) || (defined I_C02_SMPC_CAM_STAT_FOD_FOD_TEMP_NA)
#  if (!defined RTE_CONST_I_C02_SMPC_CAM_STAT_FOD_FOD_TEMP_NA) || (RTE_CONST_I_C02_SMPC_CAM_STAT_FOD_FOD_TEMP_NA != 2u)
#   error "Enumeration constant <I_C02_SMPC_CAM_STAT_FOD_FOD_TEMP_NA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_SMPC_CAM_STAT_FOD_FOD_TEMP_NA (2u)
#  define I_C02_SMPC_CAM_STAT_FOD_FOD_TEMP_NA ((c02_SMPC_Cam_Stat_FOD)2u)
# endif
# if (defined RTE_CONST_I_C02_SMPC_CAM_STAT_FOD_IDLE_SNA) || (defined I_C02_SMPC_CAM_STAT_FOD_IDLE_SNA)
#  if (!defined RTE_CONST_I_C02_SMPC_CAM_STAT_FOD_IDLE_SNA) || (RTE_CONST_I_C02_SMPC_CAM_STAT_FOD_IDLE_SNA != 3u)
#   error "Enumeration constant <I_C02_SMPC_CAM_STAT_FOD_IDLE_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_SMPC_CAM_STAT_FOD_IDLE_SNA (3u)
#  define I_C02_SMPC_CAM_STAT_FOD_IDLE_SNA ((c02_SMPC_Cam_Stat_FOD)3u)
# endif

# define Rte_TypeDef_c02_SMPC_Cam_Stat_POD
typedef uint8 c02_SMPC_Cam_Stat_POD;
# define c02_SMPC_Cam_Stat_POD_LowerLimit ((c02_SMPC_Cam_Stat_POD)0u)
# define c02_SMPC_Cam_Stat_POD_UpperLimit ((c02_SMPC_Cam_Stat_POD)3u)
# if (defined RTE_CONST_I_C02_SMPC_CAM_STAT_POD_POD_FLT) || (defined I_C02_SMPC_CAM_STAT_POD_POD_FLT)
#  if (!defined RTE_CONST_I_C02_SMPC_CAM_STAT_POD_POD_FLT) || (RTE_CONST_I_C02_SMPC_CAM_STAT_POD_POD_FLT != 0u)
#   error "Enumeration constant <I_C02_SMPC_CAM_STAT_POD_POD_FLT> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_SMPC_CAM_STAT_POD_POD_FLT (0u)
#  define I_C02_SMPC_CAM_STAT_POD_POD_FLT ((c02_SMPC_Cam_Stat_POD)0u)
# endif
# if (defined RTE_CONST_I_C02_SMPC_CAM_STAT_POD_POD_OK) || (defined I_C02_SMPC_CAM_STAT_POD_POD_OK)
#  if (!defined RTE_CONST_I_C02_SMPC_CAM_STAT_POD_POD_OK) || (RTE_CONST_I_C02_SMPC_CAM_STAT_POD_POD_OK != 1u)
#   error "Enumeration constant <I_C02_SMPC_CAM_STAT_POD_POD_OK> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_SMPC_CAM_STAT_POD_POD_OK (1u)
#  define I_C02_SMPC_CAM_STAT_POD_POD_OK ((c02_SMPC_Cam_Stat_POD)1u)
# endif
# if (defined RTE_CONST_I_C02_SMPC_CAM_STAT_POD_POD_TEMP_NA) || (defined I_C02_SMPC_CAM_STAT_POD_POD_TEMP_NA)
#  if (!defined RTE_CONST_I_C02_SMPC_CAM_STAT_POD_POD_TEMP_NA) || (RTE_CONST_I_C02_SMPC_CAM_STAT_POD_POD_TEMP_NA != 2u)
#   error "Enumeration constant <I_C02_SMPC_CAM_STAT_POD_POD_TEMP_NA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_SMPC_CAM_STAT_POD_POD_TEMP_NA (2u)
#  define I_C02_SMPC_CAM_STAT_POD_POD_TEMP_NA ((c02_SMPC_Cam_Stat_POD)2u)
# endif
# if (defined RTE_CONST_I_C02_SMPC_CAM_STAT_POD_IDLE_SNA) || (defined I_C02_SMPC_CAM_STAT_POD_IDLE_SNA)
#  if (!defined RTE_CONST_I_C02_SMPC_CAM_STAT_POD_IDLE_SNA) || (RTE_CONST_I_C02_SMPC_CAM_STAT_POD_IDLE_SNA != 3u)
#   error "Enumeration constant <I_C02_SMPC_CAM_STAT_POD_IDLE_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_SMPC_CAM_STAT_POD_IDLE_SNA (3u)
#  define I_C02_SMPC_CAM_STAT_POD_IDLE_SNA ((c02_SMPC_Cam_Stat_POD)3u)
# endif

# define Rte_TypeDef_c02_SPCR_AS_Dsabl
typedef uint8 c02_SPCR_AS_Dsabl;
# define c02_SPCR_AS_Dsabl_LowerLimit ((c02_SPCR_AS_Dsabl)0u)
# define c02_SPCR_AS_Dsabl_UpperLimit ((c02_SPCR_AS_Dsabl)3u)
# define Rte_InvalidValue_c02_SPCR_AS_Dsabl ((c02_SPCR_AS_Dsabl)3u)
# if (defined RTE_CONST_I_C02_SPCR_AS_DSABL_IDLE) || (defined I_C02_SPCR_AS_DSABL_IDLE)
#  if (!defined RTE_CONST_I_C02_SPCR_AS_DSABL_IDLE) || (RTE_CONST_I_C02_SPCR_AS_DSABL_IDLE != 0u)
#   error "Enumeration constant <I_C02_SPCR_AS_DSABL_IDLE> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_SPCR_AS_DSABL_IDLE (0u)
#  define I_C02_SPCR_AS_DSABL_IDLE ((c02_SPCR_AS_Dsabl)0u)
# endif
# if (defined RTE_CONST_I_C02_SPCR_AS_DSABL_AS_NOT_ENBL) || (defined I_C02_SPCR_AS_DSABL_AS_NOT_ENBL)
#  if (!defined RTE_CONST_I_C02_SPCR_AS_DSABL_AS_NOT_ENBL) || (RTE_CONST_I_C02_SPCR_AS_DSABL_AS_NOT_ENBL != 1u)
#   error "Enumeration constant <I_C02_SPCR_AS_DSABL_AS_NOT_ENBL> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_SPCR_AS_DSABL_AS_NOT_ENBL (1u)
#  define I_C02_SPCR_AS_DSABL_AS_NOT_ENBL ((c02_SPCR_AS_Dsabl)1u)
# endif
# if (defined RTE_CONST_I_C02_SPCR_AS_DSABL_AS_DSABL) || (defined I_C02_SPCR_AS_DSABL_AS_DSABL)
#  if (!defined RTE_CONST_I_C02_SPCR_AS_DSABL_AS_DSABL) || (RTE_CONST_I_C02_SPCR_AS_DSABL_AS_DSABL != 2u)
#   error "Enumeration constant <I_C02_SPCR_AS_DSABL_AS_DSABL> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_SPCR_AS_DSABL_AS_DSABL (2u)
#  define I_C02_SPCR_AS_DSABL_AS_DSABL ((c02_SPCR_AS_Dsabl)2u)
# endif
# if (defined RTE_CONST_I_C02_SPCR_AS_DSABL_SNA) || (defined I_C02_SPCR_AS_DSABL_SNA)
#  if (!defined RTE_CONST_I_C02_SPCR_AS_DSABL_SNA) || (RTE_CONST_I_C02_SPCR_AS_DSABL_SNA != 3u)
#   error "Enumeration constant <I_C02_SPCR_AS_DSABL_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_SPCR_AS_DSABL_SNA (3u)
#  define I_C02_SPCR_AS_DSABL_SNA ((c02_SPCR_AS_Dsabl)3u)
# endif

# define Rte_TypeDef_c02_SPCR_AS_Off_Rq
typedef uint8 c02_SPCR_AS_Off_Rq;
# define c02_SPCR_AS_Off_Rq_LowerLimit ((c02_SPCR_AS_Off_Rq)0u)
# define c02_SPCR_AS_Off_Rq_UpperLimit ((c02_SPCR_AS_Off_Rq)3u)
# if (defined RTE_CONST_I_C02_SPCR_AS_OFF_RQ_IDLE) || (defined I_C02_SPCR_AS_OFF_RQ_IDLE)
#  if (!defined RTE_CONST_I_C02_SPCR_AS_OFF_RQ_IDLE) || (RTE_CONST_I_C02_SPCR_AS_OFF_RQ_IDLE != 0u)
#   error "Enumeration constant <I_C02_SPCR_AS_OFF_RQ_IDLE> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_SPCR_AS_OFF_RQ_IDLE (0u)
#  define I_C02_SPCR_AS_OFF_RQ_IDLE ((c02_SPCR_AS_Off_Rq)0u)
# endif
# if (defined RTE_CONST_I_C02_SPCR_AS_OFF_RQ_AS_TMP_OFF) || (defined I_C02_SPCR_AS_OFF_RQ_AS_TMP_OFF)
#  if (!defined RTE_CONST_I_C02_SPCR_AS_OFF_RQ_AS_TMP_OFF) || (RTE_CONST_I_C02_SPCR_AS_OFF_RQ_AS_TMP_OFF != 1u)
#   error "Enumeration constant <I_C02_SPCR_AS_OFF_RQ_AS_TMP_OFF> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_SPCR_AS_OFF_RQ_AS_TMP_OFF (1u)
#  define I_C02_SPCR_AS_OFF_RQ_AS_TMP_OFF ((c02_SPCR_AS_Off_Rq)1u)
# endif
# if (defined RTE_CONST_I_C02_SPCR_AS_OFF_RQ_AS_CNTS_OFF) || (defined I_C02_SPCR_AS_OFF_RQ_AS_CNTS_OFF)
#  if (!defined RTE_CONST_I_C02_SPCR_AS_OFF_RQ_AS_CNTS_OFF) || (RTE_CONST_I_C02_SPCR_AS_OFF_RQ_AS_CNTS_OFF != 2u)
#   error "Enumeration constant <I_C02_SPCR_AS_OFF_RQ_AS_CNTS_OFF> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_SPCR_AS_OFF_RQ_AS_CNTS_OFF (2u)
#  define I_C02_SPCR_AS_OFF_RQ_AS_CNTS_OFF ((c02_SPCR_AS_Off_Rq)2u)
# endif
# if (defined RTE_CONST_I_C02_SPCR_AS_OFF_RQ_SPCR_NA) || (defined I_C02_SPCR_AS_OFF_RQ_SPCR_NA)
#  if (!defined RTE_CONST_I_C02_SPCR_AS_OFF_RQ_SPCR_NA) || (RTE_CONST_I_C02_SPCR_AS_OFF_RQ_SPCR_NA != 3u)
#   error "Enumeration constant <I_C02_SPCR_AS_OFF_RQ_SPCR_NA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_SPCR_AS_OFF_RQ_SPCR_NA (3u)
#  define I_C02_SPCR_AS_OFF_RQ_SPCR_NA ((c02_SPCR_AS_Off_Rq)3u)
# endif

# define Rte_TypeDef_c02_SPCR_Conf
typedef uint8 c02_SPCR_Conf;
# define c02_SPCR_Conf_LowerLimit ((c02_SPCR_Conf)0u)
# define c02_SPCR_Conf_UpperLimit ((c02_SPCR_Conf)3u)
# define Rte_InvalidValue_c02_SPCR_Conf ((c02_SPCR_Conf)3u)
# if (defined RTE_CONST_I_C02_SPCR_CONF_NOT_CONF) || (defined I_C02_SPCR_CONF_NOT_CONF)
#  if (!defined RTE_CONST_I_C02_SPCR_CONF_NOT_CONF) || (RTE_CONST_I_C02_SPCR_CONF_NOT_CONF != 0u)
#   error "Enumeration constant <I_C02_SPCR_CONF_NOT_CONF> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_SPCR_CONF_NOT_CONF (0u)
#  define I_C02_SPCR_CONF_NOT_CONF ((c02_SPCR_Conf)0u)
# endif
# if (defined RTE_CONST_I_C02_SPCR_CONF_HOLD_NO_SBW) || (defined I_C02_SPCR_CONF_HOLD_NO_SBW)
#  if (!defined RTE_CONST_I_C02_SPCR_CONF_HOLD_NO_SBW) || (RTE_CONST_I_C02_SPCR_CONF_HOLD_NO_SBW != 1u)
#   error "Enumeration constant <I_C02_SPCR_CONF_HOLD_NO_SBW> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_SPCR_CONF_HOLD_NO_SBW (1u)
#  define I_C02_SPCR_CONF_HOLD_NO_SBW ((c02_SPCR_Conf)1u)
# endif
# if (defined RTE_CONST_I_C02_SPCR_CONF_HOLD_AND_SBW) || (defined I_C02_SPCR_CONF_HOLD_AND_SBW)
#  if (!defined RTE_CONST_I_C02_SPCR_CONF_HOLD_AND_SBW) || (RTE_CONST_I_C02_SPCR_CONF_HOLD_AND_SBW != 2u)
#   error "Enumeration constant <I_C02_SPCR_CONF_HOLD_AND_SBW> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_SPCR_CONF_HOLD_AND_SBW (2u)
#  define I_C02_SPCR_CONF_HOLD_AND_SBW ((c02_SPCR_Conf)2u)
# endif
# if (defined RTE_CONST_I_C02_SPCR_CONF_SNA) || (defined I_C02_SPCR_CONF_SNA)
#  if (!defined RTE_CONST_I_C02_SPCR_CONF_SNA) || (RTE_CONST_I_C02_SPCR_CONF_SNA != 3u)
#   error "Enumeration constant <I_C02_SPCR_CONF_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_SPCR_CONF_SNA (3u)
#  define I_C02_SPCR_CONF_SNA ((c02_SPCR_Conf)3u)
# endif

# define Rte_TypeDef_c02_SPCR_Excpt_Rq_V2
typedef uint8 c02_SPCR_Excpt_Rq_V2;
# define c02_SPCR_Excpt_Rq_V2_LowerLimit ((c02_SPCR_Excpt_Rq_V2)0u)
# define c02_SPCR_Excpt_Rq_V2_UpperLimit ((c02_SPCR_Excpt_Rq_V2)3u)
# if (defined RTE_CONST_I_C02_SPCR_EXCPT_RQ_V2_AS_ENBL) || (defined I_C02_SPCR_EXCPT_RQ_V2_AS_ENBL)
#  if (!defined RTE_CONST_I_C02_SPCR_EXCPT_RQ_V2_AS_ENBL) || (RTE_CONST_I_C02_SPCR_EXCPT_RQ_V2_AS_ENBL != 0u)
#   error "Enumeration constant <I_C02_SPCR_EXCPT_RQ_V2_AS_ENBL> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_SPCR_EXCPT_RQ_V2_AS_ENBL (0u)
#  define I_C02_SPCR_EXCPT_RQ_V2_AS_ENBL ((c02_SPCR_Excpt_Rq_V2)0u)
# endif
# if (defined RTE_CONST_I_C02_SPCR_EXCPT_RQ_V2_AS_DSABL_DRV_ABSENT) || (defined I_C02_SPCR_EXCPT_RQ_V2_AS_DSABL_DRV_ABSENT)
#  if (!defined RTE_CONST_I_C02_SPCR_EXCPT_RQ_V2_AS_DSABL_DRV_ABSENT) || (RTE_CONST_I_C02_SPCR_EXCPT_RQ_V2_AS_DSABL_DRV_ABSENT != 1u)
#   error "Enumeration constant <I_C02_SPCR_EXCPT_RQ_V2_AS_DSABL_DRV_ABSENT> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_SPCR_EXCPT_RQ_V2_AS_DSABL_DRV_ABSENT (1u)
#  define I_C02_SPCR_EXCPT_RQ_V2_AS_DSABL_DRV_ABSENT ((c02_SPCR_Excpt_Rq_V2)1u)
# endif
# if (defined RTE_CONST_I_C02_SPCR_EXCPT_RQ_V2_AS_DSABL_EH_OPN) || (defined I_C02_SPCR_EXCPT_RQ_V2_AS_DSABL_EH_OPN)
#  if (!defined RTE_CONST_I_C02_SPCR_EXCPT_RQ_V2_AS_DSABL_EH_OPN) || (RTE_CONST_I_C02_SPCR_EXCPT_RQ_V2_AS_DSABL_EH_OPN != 2u)
#   error "Enumeration constant <I_C02_SPCR_EXCPT_RQ_V2_AS_DSABL_EH_OPN> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_SPCR_EXCPT_RQ_V2_AS_DSABL_EH_OPN (2u)
#  define I_C02_SPCR_EXCPT_RQ_V2_AS_DSABL_EH_OPN ((c02_SPCR_Excpt_Rq_V2)2u)
# endif
# if (defined RTE_CONST_I_C02_SPCR_EXCPT_RQ_V2_AS_DSABL) || (defined I_C02_SPCR_EXCPT_RQ_V2_AS_DSABL)
#  if (!defined RTE_CONST_I_C02_SPCR_EXCPT_RQ_V2_AS_DSABL) || (RTE_CONST_I_C02_SPCR_EXCPT_RQ_V2_AS_DSABL != 3u)
#   error "Enumeration constant <I_C02_SPCR_EXCPT_RQ_V2_AS_DSABL> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_SPCR_EXCPT_RQ_V2_AS_DSABL (3u)
#  define I_C02_SPCR_EXCPT_RQ_V2_AS_DSABL ((c02_SPCR_Excpt_Rq_V2)3u)
# endif

# define Rte_TypeDef_c02_SPCR_Sp_Stat
typedef uint8 c02_SPCR_Sp_Stat;
# define c02_SPCR_Sp_Stat_LowerLimit ((c02_SPCR_Sp_Stat)0u)
# define c02_SPCR_Sp_Stat_UpperLimit ((c02_SPCR_Sp_Stat)3u)
# define Rte_InvalidValue_c02_SPCR_Sp_Stat ((c02_SPCR_Sp_Stat)3u)
# if (defined RTE_CONST_I_C02_SPCR_SP_STAT_IDLE) || (defined I_C02_SPCR_SP_STAT_IDLE)
#  if (!defined RTE_CONST_I_C02_SPCR_SP_STAT_IDLE) || (RTE_CONST_I_C02_SPCR_SP_STAT_IDLE != 0u)
#   error "Enumeration constant <I_C02_SPCR_SP_STAT_IDLE> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_SPCR_SP_STAT_IDLE (0u)
#  define I_C02_SPCR_SP_STAT_IDLE ((c02_SPCR_Sp_Stat)0u)
# endif
# if (defined RTE_CONST_I_C02_SPCR_SP_STAT_STOP) || (defined I_C02_SPCR_SP_STAT_STOP)
#  if (!defined RTE_CONST_I_C02_SPCR_SP_STAT_STOP) || (RTE_CONST_I_C02_SPCR_SP_STAT_STOP != 1u)
#   error "Enumeration constant <I_C02_SPCR_SP_STAT_STOP> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_SPCR_SP_STAT_STOP (1u)
#  define I_C02_SPCR_SP_STAT_STOP ((c02_SPCR_Sp_Stat)1u)
# endif
# if (defined RTE_CONST_I_C02_SPCR_SP_STAT_NDEF2) || (defined I_C02_SPCR_SP_STAT_NDEF2)
#  if (!defined RTE_CONST_I_C02_SPCR_SP_STAT_NDEF2) || (RTE_CONST_I_C02_SPCR_SP_STAT_NDEF2 != 2u)
#   error "Enumeration constant <I_C02_SPCR_SP_STAT_NDEF2> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_SPCR_SP_STAT_NDEF2 (2u)
#  define I_C02_SPCR_SP_STAT_NDEF2 ((c02_SPCR_Sp_Stat)2u)
# endif
# if (defined RTE_CONST_I_C02_SPCR_SP_STAT_SNA) || (defined I_C02_SPCR_SP_STAT_SNA)
#  if (!defined RTE_CONST_I_C02_SPCR_SP_STAT_SNA) || (RTE_CONST_I_C02_SPCR_SP_STAT_SNA != 3u)
#   error "Enumeration constant <I_C02_SPCR_SP_STAT_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_SPCR_SP_STAT_SNA (3u)
#  define I_C02_SPCR_SP_STAT_SNA ((c02_SPCR_Sp_Stat)3u)
# endif

# define Rte_TypeDef_c02_SPCR_Style
typedef uint8 c02_SPCR_Style;
# define c02_SPCR_Style_LowerLimit ((c02_SPCR_Style)0u)
# define c02_SPCR_Style_UpperLimit ((c02_SPCR_Style)3u)
# define Rte_InvalidValue_c02_SPCR_Style ((c02_SPCR_Style)3u)
# if (defined RTE_CONST_I_C02_SPCR_STYLE_NO_SPCR) || (defined I_C02_SPCR_STYLE_NO_SPCR)
#  if (!defined RTE_CONST_I_C02_SPCR_STYLE_NO_SPCR) || (RTE_CONST_I_C02_SPCR_STYLE_NO_SPCR != 0u)
#   error "Enumeration constant <I_C02_SPCR_STYLE_NO_SPCR> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_SPCR_STYLE_NO_SPCR (0u)
#  define I_C02_SPCR_STYLE_NO_SPCR ((c02_SPCR_Style)0u)
# endif
# if (defined RTE_CONST_I_C02_SPCR_STYLE_SPCR_NO_SBW) || (defined I_C02_SPCR_STYLE_SPCR_NO_SBW)
#  if (!defined RTE_CONST_I_C02_SPCR_STYLE_SPCR_NO_SBW) || (RTE_CONST_I_C02_SPCR_STYLE_SPCR_NO_SBW != 1u)
#   error "Enumeration constant <I_C02_SPCR_STYLE_SPCR_NO_SBW> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_SPCR_STYLE_SPCR_NO_SBW (1u)
#  define I_C02_SPCR_STYLE_SPCR_NO_SBW ((c02_SPCR_Style)1u)
# endif
# if (defined RTE_CONST_I_C02_SPCR_STYLE_SPCR_WITH_SBW) || (defined I_C02_SPCR_STYLE_SPCR_WITH_SBW)
#  if (!defined RTE_CONST_I_C02_SPCR_STYLE_SPCR_WITH_SBW) || (RTE_CONST_I_C02_SPCR_STYLE_SPCR_WITH_SBW != 2u)
#   error "Enumeration constant <I_C02_SPCR_STYLE_SPCR_WITH_SBW> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_SPCR_STYLE_SPCR_WITH_SBW (2u)
#  define I_C02_SPCR_STYLE_SPCR_WITH_SBW ((c02_SPCR_Style)2u)
# endif
# if (defined RTE_CONST_I_C02_SPCR_STYLE_SNA) || (defined I_C02_SPCR_STYLE_SNA)
#  if (!defined RTE_CONST_I_C02_SPCR_STYLE_SNA) || (RTE_CONST_I_C02_SPCR_STYLE_SNA != 3u)
#   error "Enumeration constant <I_C02_SPCR_STYLE_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_SPCR_STYLE_SNA (3u)
#  define I_C02_SPCR_STYLE_SNA ((c02_SPCR_Style)3u)
# endif

# define Rte_TypeDef_c02_SPL_Obj_Ill_Rq
typedef uint8 c02_SPL_Obj_Ill_Rq;
# define c02_SPL_Obj_Ill_Rq_LowerLimit ((c02_SPL_Obj_Ill_Rq)0u)
# define c02_SPL_Obj_Ill_Rq_UpperLimit ((c02_SPL_Obj_Ill_Rq)3u)
# define Rte_InvalidValue_c02_SPL_Obj_Ill_Rq ((c02_SPL_Obj_Ill_Rq)3u)
# if (defined RTE_CONST_I_C02_SPL_OBJ_ILL_RQ_OFF) || (defined I_C02_SPL_OBJ_ILL_RQ_OFF)
#  if (!defined RTE_CONST_I_C02_SPL_OBJ_ILL_RQ_OFF) || (RTE_CONST_I_C02_SPL_OBJ_ILL_RQ_OFF != 0u)
#   error "Enumeration constant <I_C02_SPL_OBJ_ILL_RQ_OFF> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_SPL_OBJ_ILL_RQ_OFF (0u)
#  define I_C02_SPL_OBJ_ILL_RQ_OFF ((c02_SPL_Obj_Ill_Rq)0u)
# endif
# if (defined RTE_CONST_I_C02_SPL_OBJ_ILL_RQ_ILL_BLINK) || (defined I_C02_SPL_OBJ_ILL_RQ_ILL_BLINK)
#  if (!defined RTE_CONST_I_C02_SPL_OBJ_ILL_RQ_ILL_BLINK) || (RTE_CONST_I_C02_SPL_OBJ_ILL_RQ_ILL_BLINK != 1u)
#   error "Enumeration constant <I_C02_SPL_OBJ_ILL_RQ_ILL_BLINK> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_SPL_OBJ_ILL_RQ_ILL_BLINK (1u)
#  define I_C02_SPL_OBJ_ILL_RQ_ILL_BLINK ((c02_SPL_Obj_Ill_Rq)1u)
# endif
# if (defined RTE_CONST_I_C02_SPL_OBJ_ILL_RQ_ILL_CONT) || (defined I_C02_SPL_OBJ_ILL_RQ_ILL_CONT)
#  if (!defined RTE_CONST_I_C02_SPL_OBJ_ILL_RQ_ILL_CONT) || (RTE_CONST_I_C02_SPL_OBJ_ILL_RQ_ILL_CONT != 2u)
#   error "Enumeration constant <I_C02_SPL_OBJ_ILL_RQ_ILL_CONT> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_SPL_OBJ_ILL_RQ_ILL_CONT (2u)
#  define I_C02_SPL_OBJ_ILL_RQ_ILL_CONT ((c02_SPL_Obj_Ill_Rq)2u)
# endif
# if (defined RTE_CONST_I_C02_SPL_OBJ_ILL_RQ_SNA) || (defined I_C02_SPL_OBJ_ILL_RQ_SNA)
#  if (!defined RTE_CONST_I_C02_SPL_OBJ_ILL_RQ_SNA) || (RTE_CONST_I_C02_SPL_OBJ_ILL_RQ_SNA != 3u)
#   error "Enumeration constant <I_C02_SPL_OBJ_ILL_RQ_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_SPL_OBJ_ILL_RQ_SNA (3u)
#  define I_C02_SPL_OBJ_ILL_RQ_SNA ((c02_SPL_Obj_Ill_Rq)3u)
# endif

# define Rte_TypeDef_c02_SPL_Obj_Ill_Rq_MPC
typedef uint8 c02_SPL_Obj_Ill_Rq_MPC;
# define c02_SPL_Obj_Ill_Rq_MPC_LowerLimit ((c02_SPL_Obj_Ill_Rq_MPC)0u)
# define c02_SPL_Obj_Ill_Rq_MPC_UpperLimit ((c02_SPL_Obj_Ill_Rq_MPC)3u)
# if (defined RTE_CONST_I_C02_SPL_OBJ_ILL_RQ_MPC_OFF) || (defined I_C02_SPL_OBJ_ILL_RQ_MPC_OFF)
#  if (!defined RTE_CONST_I_C02_SPL_OBJ_ILL_RQ_MPC_OFF) || (RTE_CONST_I_C02_SPL_OBJ_ILL_RQ_MPC_OFF != 0u)
#   error "Enumeration constant <I_C02_SPL_OBJ_ILL_RQ_MPC_OFF> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_SPL_OBJ_ILL_RQ_MPC_OFF (0u)
#  define I_C02_SPL_OBJ_ILL_RQ_MPC_OFF ((c02_SPL_Obj_Ill_Rq_MPC)0u)
# endif
# if (defined RTE_CONST_I_C02_SPL_OBJ_ILL_RQ_MPC_ILL_BLINK) || (defined I_C02_SPL_OBJ_ILL_RQ_MPC_ILL_BLINK)
#  if (!defined RTE_CONST_I_C02_SPL_OBJ_ILL_RQ_MPC_ILL_BLINK) || (RTE_CONST_I_C02_SPL_OBJ_ILL_RQ_MPC_ILL_BLINK != 1u)
#   error "Enumeration constant <I_C02_SPL_OBJ_ILL_RQ_MPC_ILL_BLINK> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_SPL_OBJ_ILL_RQ_MPC_ILL_BLINK (1u)
#  define I_C02_SPL_OBJ_ILL_RQ_MPC_ILL_BLINK ((c02_SPL_Obj_Ill_Rq_MPC)1u)
# endif
# if (defined RTE_CONST_I_C02_SPL_OBJ_ILL_RQ_MPC_ILL_CONT) || (defined I_C02_SPL_OBJ_ILL_RQ_MPC_ILL_CONT)
#  if (!defined RTE_CONST_I_C02_SPL_OBJ_ILL_RQ_MPC_ILL_CONT) || (RTE_CONST_I_C02_SPL_OBJ_ILL_RQ_MPC_ILL_CONT != 2u)
#   error "Enumeration constant <I_C02_SPL_OBJ_ILL_RQ_MPC_ILL_CONT> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_SPL_OBJ_ILL_RQ_MPC_ILL_CONT (2u)
#  define I_C02_SPL_OBJ_ILL_RQ_MPC_ILL_CONT ((c02_SPL_Obj_Ill_Rq_MPC)2u)
# endif
# if (defined RTE_CONST_I_C02_SPL_OBJ_ILL_RQ_MPC_ILL_ABORT) || (defined I_C02_SPL_OBJ_ILL_RQ_MPC_ILL_ABORT)
#  if (!defined RTE_CONST_I_C02_SPL_OBJ_ILL_RQ_MPC_ILL_ABORT) || (RTE_CONST_I_C02_SPL_OBJ_ILL_RQ_MPC_ILL_ABORT != 3u)
#   error "Enumeration constant <I_C02_SPL_OBJ_ILL_RQ_MPC_ILL_ABORT> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_SPL_OBJ_ILL_RQ_MPC_ILL_ABORT (3u)
#  define I_C02_SPL_OBJ_ILL_RQ_MPC_ILL_ABORT ((c02_SPL_Obj_Ill_Rq_MPC)3u)
# endif

# define Rte_TypeDef_c02_SSA_ENBL_DSABL_PNA_TCM
typedef uint8 c02_SSA_ENBL_DSABL_PNA_TCM;
# define c02_SSA_ENBL_DSABL_PNA_TCM_LowerLimit ((c02_SSA_ENBL_DSABL_PNA_TCM)0u)
# define c02_SSA_ENBL_DSABL_PNA_TCM_UpperLimit ((c02_SSA_ENBL_DSABL_PNA_TCM)3u)
# define Rte_InvalidValue_c02_SSA_ENBL_DSABL_PNA_TCM ((c02_SSA_ENBL_DSABL_PNA_TCM)3u)
# if (defined RTE_CONST_I_C02_SSA_ENBL_DSABL_PNA_TCM_SSA_ENBL) || (defined I_C02_SSA_ENBL_DSABL_PNA_TCM_SSA_ENBL)
#  if (!defined RTE_CONST_I_C02_SSA_ENBL_DSABL_PNA_TCM_SSA_ENBL) || (RTE_CONST_I_C02_SSA_ENBL_DSABL_PNA_TCM_SSA_ENBL != 0u)
#   error "Enumeration constant <I_C02_SSA_ENBL_DSABL_PNA_TCM_SSA_ENBL> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_SSA_ENBL_DSABL_PNA_TCM_SSA_ENBL (0u)
#  define I_C02_SSA_ENBL_DSABL_PNA_TCM_SSA_ENBL ((c02_SSA_ENBL_DSABL_PNA_TCM)0u)
# endif
# if (defined RTE_CONST_I_C02_SSA_ENBL_DSABL_PNA_TCM_SSA_DSABL) || (defined I_C02_SSA_ENBL_DSABL_PNA_TCM_SSA_DSABL)
#  if (!defined RTE_CONST_I_C02_SSA_ENBL_DSABL_PNA_TCM_SSA_DSABL) || (RTE_CONST_I_C02_SSA_ENBL_DSABL_PNA_TCM_SSA_DSABL != 1u)
#   error "Enumeration constant <I_C02_SSA_ENBL_DSABL_PNA_TCM_SSA_DSABL> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_SSA_ENBL_DSABL_PNA_TCM_SSA_DSABL (1u)
#  define I_C02_SSA_ENBL_DSABL_PNA_TCM_SSA_DSABL ((c02_SSA_ENBL_DSABL_PNA_TCM)1u)
# endif
# if (defined RTE_CONST_I_C02_SSA_ENBL_DSABL_PNA_TCM_SSA_PNA) || (defined I_C02_SSA_ENBL_DSABL_PNA_TCM_SSA_PNA)
#  if (!defined RTE_CONST_I_C02_SSA_ENBL_DSABL_PNA_TCM_SSA_PNA) || (RTE_CONST_I_C02_SSA_ENBL_DSABL_PNA_TCM_SSA_PNA != 2u)
#   error "Enumeration constant <I_C02_SSA_ENBL_DSABL_PNA_TCM_SSA_PNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_SSA_ENBL_DSABL_PNA_TCM_SSA_PNA (2u)
#  define I_C02_SSA_ENBL_DSABL_PNA_TCM_SSA_PNA ((c02_SSA_ENBL_DSABL_PNA_TCM)2u)
# endif
# if (defined RTE_CONST_I_C02_SSA_ENBL_DSABL_PNA_TCM_SNA) || (defined I_C02_SSA_ENBL_DSABL_PNA_TCM_SNA)
#  if (!defined RTE_CONST_I_C02_SSA_ENBL_DSABL_PNA_TCM_SNA) || (RTE_CONST_I_C02_SSA_ENBL_DSABL_PNA_TCM_SNA != 3u)
#   error "Enumeration constant <I_C02_SSA_ENBL_DSABL_PNA_TCM_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_SSA_ENBL_DSABL_PNA_TCM_SNA (3u)
#  define I_C02_SSA_ENBL_DSABL_PNA_TCM_SNA ((c02_SSA_ENBL_DSABL_PNA_TCM)3u)
# endif

# define Rte_TypeDef_c02_STA_Stat
typedef uint8 c02_STA_Stat;
# define c02_STA_Stat_LowerLimit ((c02_STA_Stat)0u)
# define c02_STA_Stat_UpperLimit ((c02_STA_Stat)3u)
# define Rte_InvalidValue_c02_STA_Stat ((c02_STA_Stat)3u)
# if (defined RTE_CONST_I_C02_STA_STAT_STA_TMP_OFF) || (defined I_C02_STA_STAT_STA_TMP_OFF)
#  if (!defined RTE_CONST_I_C02_STA_STAT_STA_TMP_OFF) || (RTE_CONST_I_C02_STA_STAT_STA_TMP_OFF != 0u)
#   error "Enumeration constant <I_C02_STA_STAT_STA_TMP_OFF> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_STA_STAT_STA_TMP_OFF (0u)
#  define I_C02_STA_STAT_STA_TMP_OFF ((c02_STA_Stat)0u)
# endif
# if (defined RTE_CONST_I_C02_STA_STAT_STA_AVL) || (defined I_C02_STA_STAT_STA_AVL)
#  if (!defined RTE_CONST_I_C02_STA_STAT_STA_AVL) || (RTE_CONST_I_C02_STA_STAT_STA_AVL != 1u)
#   error "Enumeration constant <I_C02_STA_STAT_STA_AVL> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_STA_STAT_STA_AVL (1u)
#  define I_C02_STA_STAT_STA_AVL ((c02_STA_Stat)1u)
# endif
# if (defined RTE_CONST_I_C02_STA_STAT_NDEF2) || (defined I_C02_STA_STAT_NDEF2)
#  if (!defined RTE_CONST_I_C02_STA_STAT_NDEF2) || (RTE_CONST_I_C02_STA_STAT_NDEF2 != 2u)
#   error "Enumeration constant <I_C02_STA_STAT_NDEF2> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_STA_STAT_NDEF2 (2u)
#  define I_C02_STA_STAT_NDEF2 ((c02_STA_Stat)2u)
# endif
# if (defined RTE_CONST_I_C02_STA_STAT_SNA) || (defined I_C02_STA_STAT_SNA)
#  if (!defined RTE_CONST_I_C02_STA_STAT_SNA) || (RTE_CONST_I_C02_STA_STAT_SNA != 3u)
#   error "Enumeration constant <I_C02_STA_STAT_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_STA_STAT_SNA (3u)
#  define I_C02_STA_STAT_SNA ((c02_STA_Stat)3u)
# endif

# define Rte_TypeDef_c02_Signal_Qual
typedef uint8 c02_Signal_Qual;
# define c02_Signal_Qual_LowerLimit ((c02_Signal_Qual)0u)
# define c02_Signal_Qual_UpperLimit ((c02_Signal_Qual)3u)
# if (defined RTE_CONST_I_C02_SIGNAL_QUAL_NDEF0) || (defined I_C02_SIGNAL_QUAL_NDEF0)
#  if (!defined RTE_CONST_I_C02_SIGNAL_QUAL_NDEF0) || (RTE_CONST_I_C02_SIGNAL_QUAL_NDEF0 != 0u)
#   error "Enumeration constant <I_C02_SIGNAL_QUAL_NDEF0> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_SIGNAL_QUAL_NDEF0 (0u)
#  define I_C02_SIGNAL_QUAL_NDEF0 ((c02_Signal_Qual)0u)
# endif
# if (defined RTE_CONST_I_C02_SIGNAL_QUAL_ELEC) || (defined I_C02_SIGNAL_QUAL_ELEC)
#  if (!defined RTE_CONST_I_C02_SIGNAL_QUAL_ELEC) || (RTE_CONST_I_C02_SIGNAL_QUAL_ELEC != 1u)
#   error "Enumeration constant <I_C02_SIGNAL_QUAL_ELEC> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_SIGNAL_QUAL_ELEC (1u)
#  define I_C02_SIGNAL_QUAL_ELEC ((c02_Signal_Qual)1u)
# endif
# if (defined RTE_CONST_I_C02_SIGNAL_QUAL_FUNC) || (defined I_C02_SIGNAL_QUAL_FUNC)
#  if (!defined RTE_CONST_I_C02_SIGNAL_QUAL_FUNC) || (RTE_CONST_I_C02_SIGNAL_QUAL_FUNC != 2u)
#   error "Enumeration constant <I_C02_SIGNAL_QUAL_FUNC> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_SIGNAL_QUAL_FUNC (2u)
#  define I_C02_SIGNAL_QUAL_FUNC ((c02_Signal_Qual)2u)
# endif
# if (defined RTE_CONST_I_C02_SIGNAL_QUAL_SIG_DEF) || (defined I_C02_SIGNAL_QUAL_SIG_DEF)
#  if (!defined RTE_CONST_I_C02_SIGNAL_QUAL_SIG_DEF) || (RTE_CONST_I_C02_SIGNAL_QUAL_SIG_DEF != 3u)
#   error "Enumeration constant <I_C02_SIGNAL_QUAL_SIG_DEF> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_SIGNAL_QUAL_SIG_DEF (3u)
#  define I_C02_SIGNAL_QUAL_SIG_DEF ((c02_Signal_Qual)3u)
# endif

# define Rte_TypeDef_c02_SpdUnit
typedef uint8 c02_SpdUnit;
# define c02_SpdUnit_LowerLimit ((c02_SpdUnit)0u)
# define c02_SpdUnit_UpperLimit ((c02_SpdUnit)3u)
# define Rte_InvalidValue_c02_SpdUnit ((c02_SpdUnit)3u)
# if (defined RTE_CONST_I_C02_SPDUNIT_KMH) || (defined I_C02_SPDUNIT_KMH)
#  if (!defined RTE_CONST_I_C02_SPDUNIT_KMH) || (RTE_CONST_I_C02_SPDUNIT_KMH != 0u)
#   error "Enumeration constant <I_C02_SPDUNIT_KMH> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_SPDUNIT_KMH (0u)
#  define I_C02_SPDUNIT_KMH ((c02_SpdUnit)0u)
# endif
# if (defined RTE_CONST_I_C02_SPDUNIT_MPH) || (defined I_C02_SPDUNIT_MPH)
#  if (!defined RTE_CONST_I_C02_SPDUNIT_MPH) || (RTE_CONST_I_C02_SPDUNIT_MPH != 1u)
#   error "Enumeration constant <I_C02_SPDUNIT_MPH> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_SPDUNIT_MPH (1u)
#  define I_C02_SPDUNIT_MPH ((c02_SpdUnit)1u)
# endif
# if (defined RTE_CONST_I_C02_SPDUNIT_NDEF2) || (defined I_C02_SPDUNIT_NDEF2)
#  if (!defined RTE_CONST_I_C02_SPDUNIT_NDEF2) || (RTE_CONST_I_C02_SPDUNIT_NDEF2 != 2u)
#   error "Enumeration constant <I_C02_SPDUNIT_NDEF2> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_SPDUNIT_NDEF2 (2u)
#  define I_C02_SPDUNIT_NDEF2 ((c02_SpdUnit)2u)
# endif
# if (defined RTE_CONST_I_C02_SPDUNIT_SNA) || (defined I_C02_SPDUNIT_SNA)
#  if (!defined RTE_CONST_I_C02_SPDUNIT_SNA) || (RTE_CONST_I_C02_SPDUNIT_SNA != 3u)
#   error "Enumeration constant <I_C02_SPDUNIT_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_SPDUNIT_SNA (3u)
#  define I_C02_SPDUNIT_SNA ((c02_SpdUnit)3u)
# endif

# define Rte_TypeDef_c02_StStyle
typedef uint8 c02_StStyle;
# define c02_StStyle_LowerLimit ((c02_StStyle)0u)
# define c02_StStyle_UpperLimit ((c02_StStyle)3u)
# define Rte_InvalidValue_c02_StStyle ((c02_StStyle)3u)
# if (defined RTE_CONST_I_C02_STSTYLE_NDEF0) || (defined I_C02_STSTYLE_NDEF0)
#  if (!defined RTE_CONST_I_C02_STSTYLE_NDEF0) || (RTE_CONST_I_C02_STSTYLE_NDEF0 != 0u)
#   error "Enumeration constant <I_C02_STSTYLE_NDEF0> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_STSTYLE_NDEF0 (0u)
#  define I_C02_STSTYLE_NDEF0 ((c02_StStyle)0u)
# endif
# if (defined RTE_CONST_I_C02_STSTYLE_LHD) || (defined I_C02_STSTYLE_LHD)
#  if (!defined RTE_CONST_I_C02_STSTYLE_LHD) || (RTE_CONST_I_C02_STSTYLE_LHD != 1u)
#   error "Enumeration constant <I_C02_STSTYLE_LHD> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_STSTYLE_LHD (1u)
#  define I_C02_STSTYLE_LHD ((c02_StStyle)1u)
# endif
# if (defined RTE_CONST_I_C02_STSTYLE_RHD) || (defined I_C02_STSTYLE_RHD)
#  if (!defined RTE_CONST_I_C02_STSTYLE_RHD) || (RTE_CONST_I_C02_STSTYLE_RHD != 2u)
#   error "Enumeration constant <I_C02_STSTYLE_RHD> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_STSTYLE_RHD (2u)
#  define I_C02_STSTYLE_RHD ((c02_StStyle)2u)
# endif
# if (defined RTE_CONST_I_C02_STSTYLE_SNA) || (defined I_C02_STSTYLE_SNA)
#  if (!defined RTE_CONST_I_C02_STSTYLE_SNA) || (RTE_CONST_I_C02_STSTYLE_SNA != 3u)
#   error "Enumeration constant <I_C02_STSTYLE_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_STSTYLE_SNA (3u)
#  define I_C02_STSTYLE_SNA ((c02_StStyle)3u)
# endif

# define Rte_TypeDef_c02_StWhl_AnglSens_Id
typedef uint8 c02_StWhl_AnglSens_Id;
# define c02_StWhl_AnglSens_Id_LowerLimit ((c02_StWhl_AnglSens_Id)0u)
# define c02_StWhl_AnglSens_Id_UpperLimit ((c02_StWhl_AnglSens_Id)2u)
# if (defined RTE_CONST_I_C02_STWHL_ANGLSENS_ID_TEST) || (defined I_C02_STWHL_ANGLSENS_ID_TEST)
#  if (!defined RTE_CONST_I_C02_STWHL_ANGLSENS_ID_TEST) || (RTE_CONST_I_C02_STWHL_ANGLSENS_ID_TEST != 0u)
#   error "Enumeration constant <I_C02_STWHL_ANGLSENS_ID_TEST> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_STWHL_ANGLSENS_ID_TEST (0u)
#  define I_C02_STWHL_ANGLSENS_ID_TEST ((c02_StWhl_AnglSens_Id)0u)
# endif
# if (defined RTE_CONST_I_C02_STWHL_ANGLSENS_ID_VALEO) || (defined I_C02_STWHL_ANGLSENS_ID_VALEO)
#  if (!defined RTE_CONST_I_C02_STWHL_ANGLSENS_ID_VALEO) || (RTE_CONST_I_C02_STWHL_ANGLSENS_ID_VALEO != 1u)
#   error "Enumeration constant <I_C02_STWHL_ANGLSENS_ID_VALEO> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_STWHL_ANGLSENS_ID_VALEO (1u)
#  define I_C02_STWHL_ANGLSENS_ID_VALEO ((c02_StWhl_AnglSens_Id)1u)
# endif
# if (defined RTE_CONST_I_C02_STWHL_ANGLSENS_ID_KOSTAL) || (defined I_C02_STWHL_ANGLSENS_ID_KOSTAL)
#  if (!defined RTE_CONST_I_C02_STWHL_ANGLSENS_ID_KOSTAL) || (RTE_CONST_I_C02_STWHL_ANGLSENS_ID_KOSTAL != 2u)
#   error "Enumeration constant <I_C02_STWHL_ANGLSENS_ID_KOSTAL> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_STWHL_ANGLSENS_ID_KOSTAL (2u)
#  define I_C02_STWHL_ANGLSENS_ID_KOSTAL ((c02_StWhl_AnglSens_Id)2u)
# endif

# define Rte_TypeDef_c02_StWhl_AnglSens_Stat
typedef uint8 c02_StWhl_AnglSens_Stat;
# define c02_StWhl_AnglSens_Stat_LowerLimit ((c02_StWhl_AnglSens_Stat)0u)
# define c02_StWhl_AnglSens_Stat_UpperLimit ((c02_StWhl_AnglSens_Stat)3u)
# if (defined RTE_CONST_I_C02_STWHL_ANGLSENS_STAT_OK) || (defined I_C02_STWHL_ANGLSENS_STAT_OK)
#  if (!defined RTE_CONST_I_C02_STWHL_ANGLSENS_STAT_OK) || (RTE_CONST_I_C02_STWHL_ANGLSENS_STAT_OK != 0u)
#   error "Enumeration constant <I_C02_STWHL_ANGLSENS_STAT_OK> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_STWHL_ANGLSENS_STAT_OK (0u)
#  define I_C02_STWHL_ANGLSENS_STAT_OK ((c02_StWhl_AnglSens_Stat)0u)
# endif
# if (defined RTE_CONST_I_C02_STWHL_ANGLSENS_STAT_INI) || (defined I_C02_STWHL_ANGLSENS_STAT_INI)
#  if (!defined RTE_CONST_I_C02_STWHL_ANGLSENS_STAT_INI) || (RTE_CONST_I_C02_STWHL_ANGLSENS_STAT_INI != 1u)
#   error "Enumeration constant <I_C02_STWHL_ANGLSENS_STAT_INI> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_STWHL_ANGLSENS_STAT_INI (1u)
#  define I_C02_STWHL_ANGLSENS_STAT_INI ((c02_StWhl_AnglSens_Stat)1u)
# endif
# if (defined RTE_CONST_I_C02_STWHL_ANGLSENS_STAT_ERR) || (defined I_C02_STWHL_ANGLSENS_STAT_ERR)
#  if (!defined RTE_CONST_I_C02_STWHL_ANGLSENS_STAT_ERR) || (RTE_CONST_I_C02_STWHL_ANGLSENS_STAT_ERR != 2u)
#   error "Enumeration constant <I_C02_STWHL_ANGLSENS_STAT_ERR> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_STWHL_ANGLSENS_STAT_ERR (2u)
#  define I_C02_STWHL_ANGLSENS_STAT_ERR ((c02_StWhl_AnglSens_Stat)2u)
# endif
# if (defined RTE_CONST_I_C02_STWHL_ANGLSENS_STAT_ERR_INI) || (defined I_C02_STWHL_ANGLSENS_STAT_ERR_INI)
#  if (!defined RTE_CONST_I_C02_STWHL_ANGLSENS_STAT_ERR_INI) || (RTE_CONST_I_C02_STWHL_ANGLSENS_STAT_ERR_INI != 3u)
#   error "Enumeration constant <I_C02_STWHL_ANGLSENS_STAT_ERR_INI> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_STWHL_ANGLSENS_STAT_ERR_INI (3u)
#  define I_C02_STWHL_ANGLSENS_STAT_ERR_INI ((c02_StWhl_AnglSens_Stat)3u)
# endif

# define Rte_TypeDef_c02_SuspLvlAdjSw_Psd
typedef uint8 c02_SuspLvlAdjSw_Psd;
# define c02_SuspLvlAdjSw_Psd_LowerLimit ((c02_SuspLvlAdjSw_Psd)0u)
# define c02_SuspLvlAdjSw_Psd_UpperLimit ((c02_SuspLvlAdjSw_Psd)3u)
# define Rte_InvalidValue_c02_SuspLvlAdjSw_Psd ((c02_SuspLvlAdjSw_Psd)3u)
# if (defined RTE_CONST_I_C02_SUSPLVLADJSW_PSD_NPSD) || (defined I_C02_SUSPLVLADJSW_PSD_NPSD)
#  if (!defined RTE_CONST_I_C02_SUSPLVLADJSW_PSD_NPSD) || (RTE_CONST_I_C02_SUSPLVLADJSW_PSD_NPSD != 0u)
#   error "Enumeration constant <I_C02_SUSPLVLADJSW_PSD_NPSD> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_SUSPLVLADJSW_PSD_NPSD (0u)
#  define I_C02_SUSPLVLADJSW_PSD_NPSD ((c02_SuspLvlAdjSw_Psd)0u)
# endif
# if (defined RTE_CONST_I_C02_SUSPLVLADJSW_PSD_NDEF1_DN_PSD) || (defined I_C02_SUSPLVLADJSW_PSD_NDEF1_DN_PSD)
#  if (!defined RTE_CONST_I_C02_SUSPLVLADJSW_PSD_NDEF1_DN_PSD) || (RTE_CONST_I_C02_SUSPLVLADJSW_PSD_NDEF1_DN_PSD != 1u)
#   error "Enumeration constant <I_C02_SUSPLVLADJSW_PSD_NDEF1_DN_PSD> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_SUSPLVLADJSW_PSD_NDEF1_DN_PSD (1u)
#  define I_C02_SUSPLVLADJSW_PSD_NDEF1_DN_PSD ((c02_SuspLvlAdjSw_Psd)1u)
# endif
# if (defined RTE_CONST_I_C02_SUSPLVLADJSW_PSD_PSD_UP_PSD) || (defined I_C02_SUSPLVLADJSW_PSD_PSD_UP_PSD)
#  if (!defined RTE_CONST_I_C02_SUSPLVLADJSW_PSD_PSD_UP_PSD) || (RTE_CONST_I_C02_SUSPLVLADJSW_PSD_PSD_UP_PSD != 2u)
#   error "Enumeration constant <I_C02_SUSPLVLADJSW_PSD_PSD_UP_PSD> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_SUSPLVLADJSW_PSD_PSD_UP_PSD (2u)
#  define I_C02_SUSPLVLADJSW_PSD_PSD_UP_PSD ((c02_SuspLvlAdjSw_Psd)2u)
# endif
# if (defined RTE_CONST_I_C02_SUSPLVLADJSW_PSD_SNA) || (defined I_C02_SUSPLVLADJSW_PSD_SNA)
#  if (!defined RTE_CONST_I_C02_SUSPLVLADJSW_PSD_SNA) || (RTE_CONST_I_C02_SUSPLVLADJSW_PSD_SNA != 3u)
#   error "Enumeration constant <I_C02_SUSPLVLADJSW_PSD_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_SUSPLVLADJSW_PSD_SNA (3u)
#  define I_C02_SUSPLVLADJSW_PSD_SNA ((c02_SuspLvlAdjSw_Psd)3u)
# endif

# define Rte_TypeDef_c02_TransMd_Stat
//typedef uint8 c02_TransMd_Stat;
//# define c02_TransMd_Stat_LowerLimit ((c02_TransMd_Stat)0u)
//# define c02_TransMd_Stat_UpperLimit ((c02_TransMd_Stat)3u)
//# define Rte_InvalidValue_c02_TransMd_Stat ((c02_TransMd_Stat)3u)
//# if (defined RTE_CONST_I_C02_TRANSMD_STAT_OFF) || (defined I_C02_TRANSMD_STAT_OFF)
//#  if (!defined RTE_CONST_I_C02_TRANSMD_STAT_OFF) || (RTE_CONST_I_C02_TRANSMD_STAT_OFF != 0u)
//#   error "Enumeration constant <I_C02_TRANSMD_STAT_OFF> conflicts with another constant."
//#  endif
//# else
//#  define RTE_CONST_I_C02_TRANSMD_STAT_OFF (0u)
//#  define I_C02_TRANSMD_STAT_OFF ((c02_TransMd_Stat)0u)
//# endif
//# if (defined RTE_CONST_I_C02_TRANSMD_STAT_TEMP_OFF) || (defined I_C02_TRANSMD_STAT_TEMP_OFF)
//#  if (!defined RTE_CONST_I_C02_TRANSMD_STAT_TEMP_OFF) || (RTE_CONST_I_C02_TRANSMD_STAT_TEMP_OFF != 1u)
//#   error "Enumeration constant <I_C02_TRANSMD_STAT_TEMP_OFF> conflicts with another constant."
//#  endif
//# else
//#  define RTE_CONST_I_C02_TRANSMD_STAT_TEMP_OFF (1u)
//#  define I_C02_TRANSMD_STAT_TEMP_OFF ((c02_TransMd_Stat)1u)
//# endif
//# if (defined RTE_CONST_I_C02_TRANSMD_STAT_ACTV) || (defined I_C02_TRANSMD_STAT_ACTV)
//#  if (!defined RTE_CONST_I_C02_TRANSMD_STAT_ACTV) || (RTE_CONST_I_C02_TRANSMD_STAT_ACTV != 2u)
//#   error "Enumeration constant <I_C02_TRANSMD_STAT_ACTV> conflicts with another constant."
//#  endif
//# else
//#  define RTE_CONST_I_C02_TRANSMD_STAT_ACTV (2u)
//#  define I_C02_TRANSMD_STAT_ACTV ((c02_TransMd_Stat)2u)
//# endif
//# if (defined RTE_CONST_I_C02_TRANSMD_STAT_SNA) || (defined I_C02_TRANSMD_STAT_SNA)
//#  if (!defined RTE_CONST_I_C02_TRANSMD_STAT_SNA) || (RTE_CONST_I_C02_TRANSMD_STAT_SNA != 3u)
//#   error "Enumeration constant <I_C02_TRANSMD_STAT_SNA> conflicts with another constant."
//#  endif
//# else
//#  define RTE_CONST_I_C02_TRANSMD_STAT_SNA (3u)
//#  define I_C02_TRANSMD_STAT_SNA ((c02_TransMd_Stat)3u)
//# endif

# define Rte_TypeDef_c02_TrffcStyle
typedef uint8 c02_TrffcStyle;
# define c02_TrffcStyle_LowerLimit ((c02_TrffcStyle)0u)
# define c02_TrffcStyle_UpperLimit ((c02_TrffcStyle)3u)
# define Rte_InvalidValue_c02_TrffcStyle ((c02_TrffcStyle)3u)
# if (defined RTE_CONST_I_C02_TRFFCSTYLE_IDLE) || (defined I_C02_TRFFCSTYLE_IDLE)
#  if (!defined RTE_CONST_I_C02_TRFFCSTYLE_IDLE) || (RTE_CONST_I_C02_TRFFCSTYLE_IDLE != 0u)
#   error "Enumeration constant <I_C02_TRFFCSTYLE_IDLE> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_TRFFCSTYLE_IDLE (0u)
#  define I_C02_TRFFCSTYLE_IDLE ((c02_TrffcStyle)0u)
# endif
# if (defined RTE_CONST_I_C02_TRFFCSTYLE_RHD_TRFFC) || (defined I_C02_TRFFCSTYLE_RHD_TRFFC)
#  if (!defined RTE_CONST_I_C02_TRFFCSTYLE_RHD_TRFFC) || (RTE_CONST_I_C02_TRFFCSTYLE_RHD_TRFFC != 1u)
#   error "Enumeration constant <I_C02_TRFFCSTYLE_RHD_TRFFC> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_TRFFCSTYLE_RHD_TRFFC (1u)
#  define I_C02_TRFFCSTYLE_RHD_TRFFC ((c02_TrffcStyle)1u)
# endif
# if (defined RTE_CONST_I_C02_TRFFCSTYLE_LHD_TRFFC) || (defined I_C02_TRFFCSTYLE_LHD_TRFFC)
#  if (!defined RTE_CONST_I_C02_TRFFCSTYLE_LHD_TRFFC) || (RTE_CONST_I_C02_TRFFCSTYLE_LHD_TRFFC != 2u)
#   error "Enumeration constant <I_C02_TRFFCSTYLE_LHD_TRFFC> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_TRFFCSTYLE_LHD_TRFFC (2u)
#  define I_C02_TRFFCSTYLE_LHD_TRFFC ((c02_TrffcStyle)2u)
# endif
# if (defined RTE_CONST_I_C02_TRFFCSTYLE_SNA) || (defined I_C02_TRFFCSTYLE_SNA)
#  if (!defined RTE_CONST_I_C02_TRFFCSTYLE_SNA) || (RTE_CONST_I_C02_TRFFCSTYLE_SNA != 3u)
#   error "Enumeration constant <I_C02_TRFFCSTYLE_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_TRFFCSTYLE_SNA (3u)
#  define I_C02_TRFFCSTYLE_SNA ((c02_TrffcStyle)3u)
# endif

# define Rte_TypeDef_c02_Trl_Stat
typedef uint8 c02_Trl_Stat;
# define c02_Trl_Stat_LowerLimit ((c02_Trl_Stat)0u)
# define c02_Trl_Stat_UpperLimit ((c02_Trl_Stat)3u)
# define Rte_InvalidValue_c02_Trl_Stat ((c02_Trl_Stat)3u)
# if (defined RTE_CONST_I_C02_TRL_STAT_NONE) || (defined I_C02_TRL_STAT_NONE)
#  if (!defined RTE_CONST_I_C02_TRL_STAT_NONE) || (RTE_CONST_I_C02_TRL_STAT_NONE != 0u)
#   error "Enumeration constant <I_C02_TRL_STAT_NONE> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_TRL_STAT_NONE (0u)
#  define I_C02_TRL_STAT_NONE ((c02_Trl_Stat)0u)
# endif
# if (defined RTE_CONST_I_C02_TRL_STAT_OK) || (defined I_C02_TRL_STAT_OK)
#  if (!defined RTE_CONST_I_C02_TRL_STAT_OK) || (RTE_CONST_I_C02_TRL_STAT_OK != 1u)
#   error "Enumeration constant <I_C02_TRL_STAT_OK> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_TRL_STAT_OK (1u)
#  define I_C02_TRL_STAT_OK ((c02_Trl_Stat)1u)
# endif
# if (defined RTE_CONST_I_C02_TRL_STAT_NDEF2) || (defined I_C02_TRL_STAT_NDEF2)
#  if (!defined RTE_CONST_I_C02_TRL_STAT_NDEF2) || (RTE_CONST_I_C02_TRL_STAT_NDEF2 != 2u)
#   error "Enumeration constant <I_C02_TRL_STAT_NDEF2> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_TRL_STAT_NDEF2 (2u)
#  define I_C02_TRL_STAT_NDEF2 ((c02_Trl_Stat)2u)
# endif
# if (defined RTE_CONST_I_C02_TRL_STAT_SNA) || (defined I_C02_TRL_STAT_SNA)
#  if (!defined RTE_CONST_I_C02_TRL_STAT_SNA) || (RTE_CONST_I_C02_TRL_STAT_SNA != 3u)
#   error "Enumeration constant <I_C02_TRL_STAT_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_TRL_STAT_SNA (3u)
#  define I_C02_TRL_STAT_SNA ((c02_Trl_Stat)3u)
# endif

# define Rte_TypeDef_c02_TurnIndLvr_Stat
typedef uint8 c02_TurnIndLvr_Stat;
# define c02_TurnIndLvr_Stat_LowerLimit ((c02_TurnIndLvr_Stat)0u)
# define c02_TurnIndLvr_Stat_UpperLimit ((c02_TurnIndLvr_Stat)3u)
# define Rte_InvalidValue_c02_TurnIndLvr_Stat ((c02_TurnIndLvr_Stat)3u)
# if (defined RTE_CONST_I_C02_TURNINDLVR_STAT_IDLE) || (defined I_C02_TURNINDLVR_STAT_IDLE)
#  if (!defined RTE_CONST_I_C02_TURNINDLVR_STAT_IDLE) || (RTE_CONST_I_C02_TURNINDLVR_STAT_IDLE != 0u)
#   error "Enumeration constant <I_C02_TURNINDLVR_STAT_IDLE> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_TURNINDLVR_STAT_IDLE (0u)
#  define I_C02_TURNINDLVR_STAT_IDLE ((c02_TurnIndLvr_Stat)0u)
# endif
# if (defined RTE_CONST_I_C02_TURNINDLVR_STAT_LEFT) || (defined I_C02_TURNINDLVR_STAT_LEFT)
#  if (!defined RTE_CONST_I_C02_TURNINDLVR_STAT_LEFT) || (RTE_CONST_I_C02_TURNINDLVR_STAT_LEFT != 1u)
#   error "Enumeration constant <I_C02_TURNINDLVR_STAT_LEFT> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_TURNINDLVR_STAT_LEFT (1u)
#  define I_C02_TURNINDLVR_STAT_LEFT ((c02_TurnIndLvr_Stat)1u)
# endif
# if (defined RTE_CONST_I_C02_TURNINDLVR_STAT_RIGHT) || (defined I_C02_TURNINDLVR_STAT_RIGHT)
#  if (!defined RTE_CONST_I_C02_TURNINDLVR_STAT_RIGHT) || (RTE_CONST_I_C02_TURNINDLVR_STAT_RIGHT != 2u)
#   error "Enumeration constant <I_C02_TURNINDLVR_STAT_RIGHT> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_TURNINDLVR_STAT_RIGHT (2u)
#  define I_C02_TURNINDLVR_STAT_RIGHT ((c02_TurnIndLvr_Stat)2u)
# endif
# if (defined RTE_CONST_I_C02_TURNINDLVR_STAT_SNA) || (defined I_C02_TURNINDLVR_STAT_SNA)
#  if (!defined RTE_CONST_I_C02_TURNINDLVR_STAT_SNA) || (RTE_CONST_I_C02_TURNINDLVR_STAT_SNA != 3u)
#   error "Enumeration constant <I_C02_TURNINDLVR_STAT_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_TURNINDLVR_STAT_SNA (3u)
#  define I_C02_TURNINDLVR_STAT_SNA ((c02_TurnIndLvr_Stat)3u)
# endif

# define Rte_TypeDef_c02_VIN
typedef uint8 c02_VIN;
# define c02_VIN_LowerLimit ((c02_VIN)0u)
# define c02_VIN_UpperLimit ((c02_VIN)3u)
# define Rte_InvalidValue_c02_VIN ((c02_VIN)3u)
# if (defined RTE_CONST_I_C02_VIN_LO) || (defined I_C02_VIN_LO)
#  if (!defined RTE_CONST_I_C02_VIN_LO) || (RTE_CONST_I_C02_VIN_LO != 0u)
#   error "Enumeration constant <I_C02_VIN_LO> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_VIN_LO (0u)
#  define I_C02_VIN_LO ((c02_VIN)0u)
# endif
# if (defined RTE_CONST_I_C02_VIN_MID) || (defined I_C02_VIN_MID)
#  if (!defined RTE_CONST_I_C02_VIN_MID) || (RTE_CONST_I_C02_VIN_MID != 1u)
#   error "Enumeration constant <I_C02_VIN_MID> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_VIN_MID (1u)
#  define I_C02_VIN_MID ((c02_VIN)1u)
# endif
# if (defined RTE_CONST_I_C02_VIN_HI) || (defined I_C02_VIN_HI)
#  if (!defined RTE_CONST_I_C02_VIN_HI) || (RTE_CONST_I_C02_VIN_HI != 2u)
#   error "Enumeration constant <I_C02_VIN_HI> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_VIN_HI (2u)
#  define I_C02_VIN_HI ((c02_VIN)2u)
# endif
# if (defined RTE_CONST_I_C02_VIN_SNA) || (defined I_C02_VIN_SNA)
#  if (!defined RTE_CONST_I_C02_VIN_SNA) || (RTE_CONST_I_C02_VIN_SNA != 3u)
#   error "Enumeration constant <I_C02_VIN_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_VIN_SNA (3u)
#  define I_C02_VIN_SNA ((c02_VIN)3u)
# endif

# define Rte_TypeDef_c02_VLN_Lane_Stat_XX
typedef uint8 c02_VLN_Lane_Stat_XX;
# define c02_VLN_Lane_Stat_XX_LowerLimit ((c02_VLN_Lane_Stat_XX)0u)
# define c02_VLN_Lane_Stat_XX_UpperLimit ((c02_VLN_Lane_Stat_XX)3u)
# define Rte_InvalidValue_c02_VLN_Lane_Stat_XX ((c02_VLN_Lane_Stat_XX)3u)
# if (defined RTE_CONST_I_C02_VLN_LANE_STAT_XX_INVLD) || (defined I_C02_VLN_LANE_STAT_XX_INVLD)
#  if (!defined RTE_CONST_I_C02_VLN_LANE_STAT_XX_INVLD) || (RTE_CONST_I_C02_VLN_LANE_STAT_XX_INVLD != 0u)
#   error "Enumeration constant <I_C02_VLN_LANE_STAT_XX_INVLD> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_VLN_LANE_STAT_XX_INVLD (0u)
#  define I_C02_VLN_LANE_STAT_XX_INVLD ((c02_VLN_Lane_Stat_XX)0u)
# endif
# if (defined RTE_CONST_I_C02_VLN_LANE_STAT_XX_VLD_MARK_DIFF) || (defined I_C02_VLN_LANE_STAT_XX_VLD_MARK_DIFF)
#  if (!defined RTE_CONST_I_C02_VLN_LANE_STAT_XX_VLD_MARK_DIFF) || (RTE_CONST_I_C02_VLN_LANE_STAT_XX_VLD_MARK_DIFF != 1u)
#   error "Enumeration constant <I_C02_VLN_LANE_STAT_XX_VLD_MARK_DIFF> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_VLN_LANE_STAT_XX_VLD_MARK_DIFF (1u)
#  define I_C02_VLN_LANE_STAT_XX_VLD_MARK_DIFF ((c02_VLN_Lane_Stat_XX)1u)
# endif
# if (defined RTE_CONST_I_C02_VLN_LANE_STAT_XX_VLD_MARK_SAME) || (defined I_C02_VLN_LANE_STAT_XX_VLD_MARK_SAME)
#  if (!defined RTE_CONST_I_C02_VLN_LANE_STAT_XX_VLD_MARK_SAME) || (RTE_CONST_I_C02_VLN_LANE_STAT_XX_VLD_MARK_SAME != 2u)
#   error "Enumeration constant <I_C02_VLN_LANE_STAT_XX_VLD_MARK_SAME> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_VLN_LANE_STAT_XX_VLD_MARK_SAME (2u)
#  define I_C02_VLN_LANE_STAT_XX_VLD_MARK_SAME ((c02_VLN_Lane_Stat_XX)2u)
# endif
# if (defined RTE_CONST_I_C02_VLN_LANE_STAT_XX_SNA) || (defined I_C02_VLN_LANE_STAT_XX_SNA)
#  if (!defined RTE_CONST_I_C02_VLN_LANE_STAT_XX_SNA) || (RTE_CONST_I_C02_VLN_LANE_STAT_XX_SNA != 3u)
#   error "Enumeration constant <I_C02_VLN_LANE_STAT_XX_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_VLN_LANE_STAT_XX_SNA (3u)
#  define I_C02_VLN_LANE_STAT_XX_SNA ((c02_VLN_Lane_Stat_XX)3u)
# endif

# define Rte_TypeDef_c02_VLN_YawAngl_Vld
typedef uint8 c02_VLN_YawAngl_Vld;
# define c02_VLN_YawAngl_Vld_LowerLimit ((c02_VLN_YawAngl_Vld)0u)
# define c02_VLN_YawAngl_Vld_UpperLimit ((c02_VLN_YawAngl_Vld)3u)
# if (defined RTE_CONST_I_C02_VLN_YAWANGL_VLD_INVLD) || (defined I_C02_VLN_YAWANGL_VLD_INVLD)
#  if (!defined RTE_CONST_I_C02_VLN_YAWANGL_VLD_INVLD) || (RTE_CONST_I_C02_VLN_YAWANGL_VLD_INVLD != 0u)
#   error "Enumeration constant <I_C02_VLN_YAWANGL_VLD_INVLD> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_VLN_YAWANGL_VLD_INVLD (0u)
#  define I_C02_VLN_YAWANGL_VLD_INVLD ((c02_VLN_YawAngl_Vld)0u)
# endif
# if (defined RTE_CONST_I_C02_VLN_YAWANGL_VLD_VLD_ONLY_SAME_SIDE) || (defined I_C02_VLN_YAWANGL_VLD_VLD_ONLY_SAME_SIDE)
#  if (!defined RTE_CONST_I_C02_VLN_YAWANGL_VLD_VLD_ONLY_SAME_SIDE) || (RTE_CONST_I_C02_VLN_YAWANGL_VLD_VLD_ONLY_SAME_SIDE != 1u)
#   error "Enumeration constant <I_C02_VLN_YAWANGL_VLD_VLD_ONLY_SAME_SIDE> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_VLN_YAWANGL_VLD_VLD_ONLY_SAME_SIDE (1u)
#  define I_C02_VLN_YAWANGL_VLD_VLD_ONLY_SAME_SIDE ((c02_VLN_YawAngl_Vld)1u)
# endif
# if (defined RTE_CONST_I_C02_VLN_YAWANGL_VLD_VLD_ONLY_DIFF_SIDE) || (defined I_C02_VLN_YAWANGL_VLD_VLD_ONLY_DIFF_SIDE)
#  if (!defined RTE_CONST_I_C02_VLN_YAWANGL_VLD_VLD_ONLY_DIFF_SIDE) || (RTE_CONST_I_C02_VLN_YAWANGL_VLD_VLD_ONLY_DIFF_SIDE != 2u)
#   error "Enumeration constant <I_C02_VLN_YAWANGL_VLD_VLD_ONLY_DIFF_SIDE> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_VLN_YAWANGL_VLD_VLD_ONLY_DIFF_SIDE (2u)
#  define I_C02_VLN_YAWANGL_VLD_VLD_ONLY_DIFF_SIDE ((c02_VLN_YawAngl_Vld)2u)
# endif
# if (defined RTE_CONST_I_C02_VLN_YAWANGL_VLD_VLD_MULTI_LINE) || (defined I_C02_VLN_YAWANGL_VLD_VLD_MULTI_LINE)
#  if (!defined RTE_CONST_I_C02_VLN_YAWANGL_VLD_VLD_MULTI_LINE) || (RTE_CONST_I_C02_VLN_YAWANGL_VLD_VLD_MULTI_LINE != 3u)
#   error "Enumeration constant <I_C02_VLN_YAWANGL_VLD_VLD_MULTI_LINE> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_VLN_YAWANGL_VLD_VLD_MULTI_LINE (3u)
#  define I_C02_VLN_YAWANGL_VLD_VLD_MULTI_LINE ((c02_VLN_YawAngl_Vld)3u)
# endif

# define Rte_TypeDef_c02_WWA_Warn_Rq
typedef uint8 c02_WWA_Warn_Rq;
# define c02_WWA_Warn_Rq_LowerLimit ((c02_WWA_Warn_Rq)0u)
# define c02_WWA_Warn_Rq_UpperLimit ((c02_WWA_Warn_Rq)3u)
# define Rte_InvalidValue_c02_WWA_Warn_Rq ((c02_WWA_Warn_Rq)3u)
# if (defined RTE_CONST_I_C02_WWA_WARN_RQ_IDLE) || (defined I_C02_WWA_WARN_RQ_IDLE)
#  if (!defined RTE_CONST_I_C02_WWA_WARN_RQ_IDLE) || (RTE_CONST_I_C02_WWA_WARN_RQ_IDLE != 0u)
#   error "Enumeration constant <I_C02_WWA_WARN_RQ_IDLE> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_WWA_WARN_RQ_IDLE (0u)
#  define I_C02_WWA_WARN_RQ_IDLE ((c02_WWA_Warn_Rq)0u)
# endif
# if (defined RTE_CONST_I_C02_WWA_WARN_RQ_WRONG_WAY) || (defined I_C02_WWA_WARN_RQ_WRONG_WAY)
#  if (!defined RTE_CONST_I_C02_WWA_WARN_RQ_WRONG_WAY) || (RTE_CONST_I_C02_WWA_WARN_RQ_WRONG_WAY != 1u)
#   error "Enumeration constant <I_C02_WWA_WARN_RQ_WRONG_WAY> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_WWA_WARN_RQ_WRONG_WAY (1u)
#  define I_C02_WWA_WARN_RQ_WRONG_WAY ((c02_WWA_Warn_Rq)1u)
# endif
# if (defined RTE_CONST_I_C02_WWA_WARN_RQ_FORBID_CONT) || (defined I_C02_WWA_WARN_RQ_FORBID_CONT)
#  if (!defined RTE_CONST_I_C02_WWA_WARN_RQ_FORBID_CONT) || (RTE_CONST_I_C02_WWA_WARN_RQ_FORBID_CONT != 2u)
#   error "Enumeration constant <I_C02_WWA_WARN_RQ_FORBID_CONT> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_WWA_WARN_RQ_FORBID_CONT (2u)
#  define I_C02_WWA_WARN_RQ_FORBID_CONT ((c02_WWA_Warn_Rq)2u)
# endif
# if (defined RTE_CONST_I_C02_WWA_WARN_RQ_SNA) || (defined I_C02_WWA_WARN_RQ_SNA)
#  if (!defined RTE_CONST_I_C02_WWA_WARN_RQ_SNA) || (RTE_CONST_I_C02_WWA_WARN_RQ_SNA != 3u)
#   error "Enumeration constant <I_C02_WWA_WARN_RQ_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_WWA_WARN_RQ_SNA (3u)
#  define I_C02_WWA_WARN_RQ_SNA ((c02_WWA_Warn_Rq)3u)
# endif

# define Rte_TypeDef_c02_WhlDir
typedef uint8 c02_WhlDir;
# define c02_WhlDir_LowerLimit ((c02_WhlDir)0u)
# define c02_WhlDir_UpperLimit ((c02_WhlDir)3u)
# define Rte_InvalidValue_c02_WhlDir ((c02_WhlDir)3u)
# if (defined RTE_CONST_I_C02_WHLDIR_VOID) || (defined I_C02_WHLDIR_VOID)
#  if (!defined RTE_CONST_I_C02_WHLDIR_VOID) || (RTE_CONST_I_C02_WHLDIR_VOID != 0u)
#   error "Enumeration constant <I_C02_WHLDIR_VOID> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_WHLDIR_VOID (0u)
#  define I_C02_WHLDIR_VOID ((c02_WhlDir)0u)
# endif
# if (defined RTE_CONST_I_C02_WHLDIR_FORWARD) || (defined I_C02_WHLDIR_FORWARD)
#  if (!defined RTE_CONST_I_C02_WHLDIR_FORWARD) || (RTE_CONST_I_C02_WHLDIR_FORWARD != 1u)
#   error "Enumeration constant <I_C02_WHLDIR_FORWARD> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_WHLDIR_FORWARD (1u)
#  define I_C02_WHLDIR_FORWARD ((c02_WhlDir)1u)
# endif
# if (defined RTE_CONST_I_C02_WHLDIR_BACKWARD) || (defined I_C02_WHLDIR_BACKWARD)
#  if (!defined RTE_CONST_I_C02_WHLDIR_BACKWARD) || (RTE_CONST_I_C02_WHLDIR_BACKWARD != 2u)
#   error "Enumeration constant <I_C02_WHLDIR_BACKWARD> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_WHLDIR_BACKWARD (2u)
#  define I_C02_WHLDIR_BACKWARD ((c02_WhlDir)2u)
# endif
# if (defined RTE_CONST_I_C02_WHLDIR_SNA) || (defined I_C02_WHLDIR_SNA)
#  if (!defined RTE_CONST_I_C02_WHLDIR_SNA) || (RTE_CONST_I_C02_WHLDIR_SNA != 3u)
#   error "Enumeration constant <I_C02_WHLDIR_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_WHLDIR_SNA (3u)
#  define I_C02_WHLDIR_SNA ((c02_WhlDir)3u)
# endif

# define Rte_TypeDef_c02_WprSw_Stat
typedef uint8 c02_WprSw_Stat;
# define c02_WprSw_Stat_LowerLimit ((c02_WprSw_Stat)0u)
# define c02_WprSw_Stat_UpperLimit ((c02_WprSw_Stat)3u)
# define Rte_InvalidValue_c02_WprSw_Stat ((c02_WprSw_Stat)3u)
# if (defined RTE_CONST_I_C02_WPRSW_STAT_NPSD) || (defined I_C02_WPRSW_STAT_NPSD)
#  if (!defined RTE_CONST_I_C02_WPRSW_STAT_NPSD) || (RTE_CONST_I_C02_WPRSW_STAT_NPSD != 0u)
#   error "Enumeration constant <I_C02_WPRSW_STAT_NPSD> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_WPRSW_STAT_NPSD (0u)
#  define I_C02_WPRSW_STAT_NPSD ((c02_WprSw_Stat)0u)
# endif
# if (defined RTE_CONST_I_C02_WPRSW_STAT_TIPWIPE) || (defined I_C02_WPRSW_STAT_TIPWIPE)
#  if (!defined RTE_CONST_I_C02_WPRSW_STAT_TIPWIPE) || (RTE_CONST_I_C02_WPRSW_STAT_TIPWIPE != 1u)
#   error "Enumeration constant <I_C02_WPRSW_STAT_TIPWIPE> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_WPRSW_STAT_TIPWIPE (1u)
#  define I_C02_WPRSW_STAT_TIPWIPE ((c02_WprSw_Stat)1u)
# endif
# if (defined RTE_CONST_I_C02_WPRSW_STAT_WASH) || (defined I_C02_WPRSW_STAT_WASH)
#  if (!defined RTE_CONST_I_C02_WPRSW_STAT_WASH) || (RTE_CONST_I_C02_WPRSW_STAT_WASH != 2u)
#   error "Enumeration constant <I_C02_WPRSW_STAT_WASH> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_WPRSW_STAT_WASH (2u)
#  define I_C02_WPRSW_STAT_WASH ((c02_WprSw_Stat)2u)
# endif
# if (defined RTE_CONST_I_C02_WPRSW_STAT_SNA) || (defined I_C02_WPRSW_STAT_SNA)
#  if (!defined RTE_CONST_I_C02_WPRSW_STAT_SNA) || (RTE_CONST_I_C02_WPRSW_STAT_SNA != 3u)
#   error "Enumeration constant <I_C02_WPRSW_STAT_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_WPRSW_STAT_SNA (3u)
#  define I_C02_WPRSW_STAT_SNA ((c02_WprSw_Stat)3u)
# endif

# define Rte_TypeDef_c02_Wthr_Dtct
typedef uint8 c02_Wthr_Dtct;
# define c02_Wthr_Dtct_LowerLimit ((c02_Wthr_Dtct)0u)
# define c02_Wthr_Dtct_UpperLimit ((c02_Wthr_Dtct)3u)
# define Rte_InvalidValue_c02_Wthr_Dtct ((c02_Wthr_Dtct)3u)
# if (defined RTE_CONST_I_C02_WTHR_DTCT_NO_DTCT) || (defined I_C02_WTHR_DTCT_NO_DTCT)
#  if (!defined RTE_CONST_I_C02_WTHR_DTCT_NO_DTCT) || (RTE_CONST_I_C02_WTHR_DTCT_NO_DTCT != 0u)
#   error "Enumeration constant <I_C02_WTHR_DTCT_NO_DTCT> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_WTHR_DTCT_NO_DTCT (0u)
#  define I_C02_WTHR_DTCT_NO_DTCT ((c02_Wthr_Dtct)0u)
# endif
# if (defined RTE_CONST_I_C02_WTHR_DTCT_ADV_WTHR_DTCT) || (defined I_C02_WTHR_DTCT_ADV_WTHR_DTCT)
#  if (!defined RTE_CONST_I_C02_WTHR_DTCT_ADV_WTHR_DTCT) || (RTE_CONST_I_C02_WTHR_DTCT_ADV_WTHR_DTCT != 1u)
#   error "Enumeration constant <I_C02_WTHR_DTCT_ADV_WTHR_DTCT> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_WTHR_DTCT_ADV_WTHR_DTCT (1u)
#  define I_C02_WTHR_DTCT_ADV_WTHR_DTCT ((c02_Wthr_Dtct)1u)
# endif
# if (defined RTE_CONST_I_C02_WTHR_DTCT_NDEF2) || (defined I_C02_WTHR_DTCT_NDEF2)
#  if (!defined RTE_CONST_I_C02_WTHR_DTCT_NDEF2) || (RTE_CONST_I_C02_WTHR_DTCT_NDEF2 != 2u)
#   error "Enumeration constant <I_C02_WTHR_DTCT_NDEF2> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_WTHR_DTCT_NDEF2 (2u)
#  define I_C02_WTHR_DTCT_NDEF2 ((c02_Wthr_Dtct)2u)
# endif
# if (defined RTE_CONST_I_C02_WTHR_DTCT_SNA) || (defined I_C02_WTHR_DTCT_SNA)
#  if (!defined RTE_CONST_I_C02_WTHR_DTCT_SNA) || (RTE_CONST_I_C02_WTHR_DTCT_SNA != 3u)
#   error "Enumeration constant <I_C02_WTHR_DTCT_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C02_WTHR_DTCT_SNA (3u)
#  define I_C02_WTHR_DTCT_SNA ((c02_Wthr_Dtct)3u)
# endif

# define Rte_TypeDef_c03_0_6_1
typedef uint8 c03_0_6_1;
# define c03_0_6_1_LowerLimit ((c03_0_6_1)0u)
# define c03_0_6_1_UpperLimit ((c03_0_6_1)7u)
# define Rte_InvalidValue_c03_0_6_1 ((c03_0_6_1)7u)
# if (defined RTE_CONST_I_C03_0_6_1_SNA) || (defined I_C03_0_6_1_SNA)
#  if (!defined RTE_CONST_I_C03_0_6_1_SNA) || (RTE_CONST_I_C03_0_6_1_SNA != 7u)
#   error "Enumeration constant <I_C03_0_6_1_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_0_6_1_SNA (7u)
#  define I_C03_0_6_1_SNA ((c03_0_6_1)7u)
# endif

# define Rte_TypeDef_c03_1_6_1
typedef uint8 c03_1_6_1;
# define c03_1_6_1_LowerLimit ((c03_1_6_1)1u)
# define c03_1_6_1_UpperLimit ((c03_1_6_1)7u)
# define Rte_InvalidValue_c03_1_6_1 ((c03_1_6_1)7u)
# if (defined RTE_CONST_I_C03_1_6_1_SNA) || (defined I_C03_1_6_1_SNA)
#  if (!defined RTE_CONST_I_C03_1_6_1_SNA) || (RTE_CONST_I_C03_1_6_1_SNA != 7u)
#   error "Enumeration constant <I_C03_1_6_1_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_1_6_1_SNA (7u)
#  define I_C03_1_6_1_SNA ((c03_1_6_1)7u)
# endif

# define Rte_TypeDef_c03_ADAS_EffSpdLmtType
typedef uint8 c03_ADAS_EffSpdLmtType;
# define c03_ADAS_EffSpdLmtType_LowerLimit ((c03_ADAS_EffSpdLmtType)0u)
# define c03_ADAS_EffSpdLmtType_UpperLimit ((c03_ADAS_EffSpdLmtType)7u)
# if (defined RTE_CONST_I_C03_ADAS_EFFSPDLMTTYPE_IMPLICIT) || (defined I_C03_ADAS_EFFSPDLMTTYPE_IMPLICIT)
#  if (!defined RTE_CONST_I_C03_ADAS_EFFSPDLMTTYPE_IMPLICIT) || (RTE_CONST_I_C03_ADAS_EFFSPDLMTTYPE_IMPLICIT != 0u)
#   error "Enumeration constant <I_C03_ADAS_EFFSPDLMTTYPE_IMPLICIT> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_ADAS_EFFSPDLMTTYPE_IMPLICIT (0u)
#  define I_C03_ADAS_EFFSPDLMTTYPE_IMPLICIT ((c03_ADAS_EffSpdLmtType)0u)
# endif
# if (defined RTE_CONST_I_C03_ADAS_EFFSPDLMTTYPE_EXPLICIT_OTS) || (defined I_C03_ADAS_EFFSPDLMTTYPE_EXPLICIT_OTS)
#  if (!defined RTE_CONST_I_C03_ADAS_EFFSPDLMTTYPE_EXPLICIT_OTS) || (RTE_CONST_I_C03_ADAS_EFFSPDLMTTYPE_EXPLICIT_OTS != 1u)
#   error "Enumeration constant <I_C03_ADAS_EFFSPDLMTTYPE_EXPLICIT_OTS> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_ADAS_EFFSPDLMTTYPE_EXPLICIT_OTS (1u)
#  define I_C03_ADAS_EFFSPDLMTTYPE_EXPLICIT_OTS ((c03_ADAS_EffSpdLmtType)1u)
# endif
# if (defined RTE_CONST_I_C03_ADAS_EFFSPDLMTTYPE_EXPLICIT_BN) || (defined I_C03_ADAS_EFFSPDLMTTYPE_EXPLICIT_BN)
#  if (!defined RTE_CONST_I_C03_ADAS_EFFSPDLMTTYPE_EXPLICIT_BN) || (RTE_CONST_I_C03_ADAS_EFFSPDLMTTYPE_EXPLICIT_BN != 2u)
#   error "Enumeration constant <I_C03_ADAS_EFFSPDLMTTYPE_EXPLICIT_BN> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_ADAS_EFFSPDLMTTYPE_EXPLICIT_BN (2u)
#  define I_C03_ADAS_EFFSPDLMTTYPE_EXPLICIT_BN ((c03_ADAS_EffSpdLmtType)2u)
# endif
# if (defined RTE_CONST_I_C03_ADAS_EFFSPDLMTTYPE_EXPLICIT_BD) || (defined I_C03_ADAS_EFFSPDLMTTYPE_EXPLICIT_BD)
#  if (!defined RTE_CONST_I_C03_ADAS_EFFSPDLMTTYPE_EXPLICIT_BD) || (RTE_CONST_I_C03_ADAS_EFFSPDLMTTYPE_EXPLICIT_BD != 3u)
#   error "Enumeration constant <I_C03_ADAS_EFFSPDLMTTYPE_EXPLICIT_BD> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_ADAS_EFFSPDLMTTYPE_EXPLICIT_BD (3u)
#  define I_C03_ADAS_EFFSPDLMTTYPE_EXPLICIT_BD ((c03_ADAS_EffSpdLmtType)3u)
# endif
# if (defined RTE_CONST_I_C03_ADAS_EFFSPDLMTTYPE_EXPLICIT_TD) || (defined I_C03_ADAS_EFFSPDLMTTYPE_EXPLICIT_TD)
#  if (!defined RTE_CONST_I_C03_ADAS_EFFSPDLMTTYPE_EXPLICIT_TD) || (RTE_CONST_I_C03_ADAS_EFFSPDLMTTYPE_EXPLICIT_TD != 4u)
#   error "Enumeration constant <I_C03_ADAS_EFFSPDLMTTYPE_EXPLICIT_TD> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_ADAS_EFFSPDLMTTYPE_EXPLICIT_TD (4u)
#  define I_C03_ADAS_EFFSPDLMTTYPE_EXPLICIT_TD ((c03_ADAS_EffSpdLmtType)4u)
# endif
# if (defined RTE_CONST_I_C03_ADAS_EFFSPDLMTTYPE_EXPLICIT_R) || (defined I_C03_ADAS_EFFSPDLMTTYPE_EXPLICIT_R)
#  if (!defined RTE_CONST_I_C03_ADAS_EFFSPDLMTTYPE_EXPLICIT_R) || (RTE_CONST_I_C03_ADAS_EFFSPDLMTTYPE_EXPLICIT_R != 5u)
#   error "Enumeration constant <I_C03_ADAS_EFFSPDLMTTYPE_EXPLICIT_R> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_ADAS_EFFSPDLMTTYPE_EXPLICIT_R (5u)
#  define I_C03_ADAS_EFFSPDLMTTYPE_EXPLICIT_R ((c03_ADAS_EffSpdLmtType)5u)
# endif
# if (defined RTE_CONST_I_C03_ADAS_EFFSPDLMTTYPE_EXPLICIT_S) || (defined I_C03_ADAS_EFFSPDLMTTYPE_EXPLICIT_S)
#  if (!defined RTE_CONST_I_C03_ADAS_EFFSPDLMTTYPE_EXPLICIT_S) || (RTE_CONST_I_C03_ADAS_EFFSPDLMTTYPE_EXPLICIT_S != 6u)
#   error "Enumeration constant <I_C03_ADAS_EFFSPDLMTTYPE_EXPLICIT_S> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_ADAS_EFFSPDLMTTYPE_EXPLICIT_S (6u)
#  define I_C03_ADAS_EFFSPDLMTTYPE_EXPLICIT_S ((c03_ADAS_EffSpdLmtType)6u)
# endif
# if (defined RTE_CONST_I_C03_ADAS_EFFSPDLMTTYPE_UNKWN) || (defined I_C03_ADAS_EFFSPDLMTTYPE_UNKWN)
#  if (!defined RTE_CONST_I_C03_ADAS_EFFSPDLMTTYPE_UNKWN) || (RTE_CONST_I_C03_ADAS_EFFSPDLMTTYPE_UNKWN != 7u)
#   error "Enumeration constant <I_C03_ADAS_EFFSPDLMTTYPE_UNKWN> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_ADAS_EFFSPDLMTTYPE_UNKWN (7u)
#  define I_C03_ADAS_EFFSPDLMTTYPE_UNKWN ((c03_ADAS_EffSpdLmtType)7u)
# endif

# define Rte_TypeDef_c03_ADAS_FuncRoadClass
typedef uint8 c03_ADAS_FuncRoadClass;
# define c03_ADAS_FuncRoadClass_LowerLimit ((c03_ADAS_FuncRoadClass)0u)
# define c03_ADAS_FuncRoadClass_UpperLimit ((c03_ADAS_FuncRoadClass)7u)
# define Rte_InvalidValue_c03_ADAS_FuncRoadClass ((c03_ADAS_FuncRoadClass)7u)
# if (defined RTE_CONST_I_C03_ADAS_FUNCROADCLASS_SNA) || (defined I_C03_ADAS_FUNCROADCLASS_SNA)
#  if (!defined RTE_CONST_I_C03_ADAS_FUNCROADCLASS_SNA) || (RTE_CONST_I_C03_ADAS_FUNCROADCLASS_SNA != 7u)
#   error "Enumeration constant <I_C03_ADAS_FUNCROADCLASS_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_ADAS_FUNCROADCLASS_SNA (7u)
#  define I_C03_ADAS_FUNCROADCLASS_SNA ((c03_ADAS_FuncRoadClass)7u)
# endif

# define Rte_TypeDef_c03_ADAS_MapProvid
typedef uint8 c03_ADAS_MapProvid;
# define c03_ADAS_MapProvid_LowerLimit ((c03_ADAS_MapProvid)0u)
# define c03_ADAS_MapProvid_UpperLimit ((c03_ADAS_MapProvid)7u)
# define Rte_InvalidValue_c03_ADAS_MapProvid ((c03_ADAS_MapProvid)7u)
# if (defined RTE_CONST_I_C03_ADAS_MAPPROVID_UNKNOWN) || (defined I_C03_ADAS_MAPPROVID_UNKNOWN)
#  if (!defined RTE_CONST_I_C03_ADAS_MAPPROVID_UNKNOWN) || (RTE_CONST_I_C03_ADAS_MAPPROVID_UNKNOWN != 0u)
#   error "Enumeration constant <I_C03_ADAS_MAPPROVID_UNKNOWN> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_ADAS_MAPPROVID_UNKNOWN (0u)
#  define I_C03_ADAS_MAPPROVID_UNKNOWN ((c03_ADAS_MapProvid)0u)
# endif
# if (defined RTE_CONST_I_C03_ADAS_MAPPROVID_NAVTEQ) || (defined I_C03_ADAS_MAPPROVID_NAVTEQ)
#  if (!defined RTE_CONST_I_C03_ADAS_MAPPROVID_NAVTEQ) || (RTE_CONST_I_C03_ADAS_MAPPROVID_NAVTEQ != 1u)
#   error "Enumeration constant <I_C03_ADAS_MAPPROVID_NAVTEQ> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_ADAS_MAPPROVID_NAVTEQ (1u)
#  define I_C03_ADAS_MAPPROVID_NAVTEQ ((c03_ADAS_MapProvid)1u)
# endif
# if (defined RTE_CONST_I_C03_ADAS_MAPPROVID_TELEATLAS) || (defined I_C03_ADAS_MAPPROVID_TELEATLAS)
#  if (!defined RTE_CONST_I_C03_ADAS_MAPPROVID_TELEATLAS) || (RTE_CONST_I_C03_ADAS_MAPPROVID_TELEATLAS != 2u)
#   error "Enumeration constant <I_C03_ADAS_MAPPROVID_TELEATLAS> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_ADAS_MAPPROVID_TELEATLAS (2u)
#  define I_C03_ADAS_MAPPROVID_TELEATLAS ((c03_ADAS_MapProvid)2u)
# endif
# if (defined RTE_CONST_I_C03_ADAS_MAPPROVID_ZENRIN) || (defined I_C03_ADAS_MAPPROVID_ZENRIN)
#  if (!defined RTE_CONST_I_C03_ADAS_MAPPROVID_ZENRIN) || (RTE_CONST_I_C03_ADAS_MAPPROVID_ZENRIN != 3u)
#   error "Enumeration constant <I_C03_ADAS_MAPPROVID_ZENRIN> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_ADAS_MAPPROVID_ZENRIN (3u)
#  define I_C03_ADAS_MAPPROVID_ZENRIN ((c03_ADAS_MapProvid)3u)
# endif
# if (defined RTE_CONST_I_C03_ADAS_MAPPROVID_SNA) || (defined I_C03_ADAS_MAPPROVID_SNA)
#  if (!defined RTE_CONST_I_C03_ADAS_MAPPROVID_SNA) || (RTE_CONST_I_C03_ADAS_MAPPROVID_SNA != 7u)
#   error "Enumeration constant <I_C03_ADAS_MAPPROVID_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_ADAS_MAPPROVID_SNA (7u)
#  define I_C03_ADAS_MAPPROVID_SNA ((c03_ADAS_MapProvid)7u)
# endif

# define Rte_TypeDef_c03_ADAS_NumOfLaneDrvDir
typedef uint8 c03_ADAS_NumOfLaneDrvDir;
# define c03_ADAS_NumOfLaneDrvDir_LowerLimit ((c03_ADAS_NumOfLaneDrvDir)0u)
# define c03_ADAS_NumOfLaneDrvDir_UpperLimit ((c03_ADAS_NumOfLaneDrvDir)7u)
# if (defined RTE_CONST_I_C03_ADAS_NUMOFLANEDRVDIR_DRV_IWD) || (defined I_C03_ADAS_NUMOFLANEDRVDIR_DRV_IWD)
#  if (!defined RTE_CONST_I_C03_ADAS_NUMOFLANEDRVDIR_DRV_IWD) || (RTE_CONST_I_C03_ADAS_NUMOFLANEDRVDIR_DRV_IWD != 0u)
#   error "Enumeration constant <I_C03_ADAS_NUMOFLANEDRVDIR_DRV_IWD> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_ADAS_NUMOFLANEDRVDIR_DRV_IWD (0u)
#  define I_C03_ADAS_NUMOFLANEDRVDIR_DRV_IWD ((c03_ADAS_NumOfLaneDrvDir)0u)
# endif
# if (defined RTE_CONST_I_C03_ADAS_NUMOFLANEDRVDIR_L1) || (defined I_C03_ADAS_NUMOFLANEDRVDIR_L1)
#  if (!defined RTE_CONST_I_C03_ADAS_NUMOFLANEDRVDIR_L1) || (RTE_CONST_I_C03_ADAS_NUMOFLANEDRVDIR_L1 != 1u)
#   error "Enumeration constant <I_C03_ADAS_NUMOFLANEDRVDIR_L1> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_ADAS_NUMOFLANEDRVDIR_L1 (1u)
#  define I_C03_ADAS_NUMOFLANEDRVDIR_L1 ((c03_ADAS_NumOfLaneDrvDir)1u)
# endif
# if (defined RTE_CONST_I_C03_ADAS_NUMOFLANEDRVDIR_L2) || (defined I_C03_ADAS_NUMOFLANEDRVDIR_L2)
#  if (!defined RTE_CONST_I_C03_ADAS_NUMOFLANEDRVDIR_L2) || (RTE_CONST_I_C03_ADAS_NUMOFLANEDRVDIR_L2 != 2u)
#   error "Enumeration constant <I_C03_ADAS_NUMOFLANEDRVDIR_L2> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_ADAS_NUMOFLANEDRVDIR_L2 (2u)
#  define I_C03_ADAS_NUMOFLANEDRVDIR_L2 ((c03_ADAS_NumOfLaneDrvDir)2u)
# endif
# if (defined RTE_CONST_I_C03_ADAS_NUMOFLANEDRVDIR_L3) || (defined I_C03_ADAS_NUMOFLANEDRVDIR_L3)
#  if (!defined RTE_CONST_I_C03_ADAS_NUMOFLANEDRVDIR_L3) || (RTE_CONST_I_C03_ADAS_NUMOFLANEDRVDIR_L3 != 3u)
#   error "Enumeration constant <I_C03_ADAS_NUMOFLANEDRVDIR_L3> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_ADAS_NUMOFLANEDRVDIR_L3 (3u)
#  define I_C03_ADAS_NUMOFLANEDRVDIR_L3 ((c03_ADAS_NumOfLaneDrvDir)3u)
# endif
# if (defined RTE_CONST_I_C03_ADAS_NUMOFLANEDRVDIR_L4) || (defined I_C03_ADAS_NUMOFLANEDRVDIR_L4)
#  if (!defined RTE_CONST_I_C03_ADAS_NUMOFLANEDRVDIR_L4) || (RTE_CONST_I_C03_ADAS_NUMOFLANEDRVDIR_L4 != 4u)
#   error "Enumeration constant <I_C03_ADAS_NUMOFLANEDRVDIR_L4> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_ADAS_NUMOFLANEDRVDIR_L4 (4u)
#  define I_C03_ADAS_NUMOFLANEDRVDIR_L4 ((c03_ADAS_NumOfLaneDrvDir)4u)
# endif
# if (defined RTE_CONST_I_C03_ADAS_NUMOFLANEDRVDIR_L5) || (defined I_C03_ADAS_NUMOFLANEDRVDIR_L5)
#  if (!defined RTE_CONST_I_C03_ADAS_NUMOFLANEDRVDIR_L5) || (RTE_CONST_I_C03_ADAS_NUMOFLANEDRVDIR_L5 != 5u)
#   error "Enumeration constant <I_C03_ADAS_NUMOFLANEDRVDIR_L5> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_ADAS_NUMOFLANEDRVDIR_L5 (5u)
#  define I_C03_ADAS_NUMOFLANEDRVDIR_L5 ((c03_ADAS_NumOfLaneDrvDir)5u)
# endif
# if (defined RTE_CONST_I_C03_ADAS_NUMOFLANEDRVDIR_L6_MORE) || (defined I_C03_ADAS_NUMOFLANEDRVDIR_L6_MORE)
#  if (!defined RTE_CONST_I_C03_ADAS_NUMOFLANEDRVDIR_L6_MORE) || (RTE_CONST_I_C03_ADAS_NUMOFLANEDRVDIR_L6_MORE != 6u)
#   error "Enumeration constant <I_C03_ADAS_NUMOFLANEDRVDIR_L6_MORE> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_ADAS_NUMOFLANEDRVDIR_L6_MORE (6u)
#  define I_C03_ADAS_NUMOFLANEDRVDIR_L6_MORE ((c03_ADAS_NumOfLaneDrvDir)6u)
# endif
# if (defined RTE_CONST_I_C03_ADAS_NUMOFLANEDRVDIR_UNKWN) || (defined I_C03_ADAS_NUMOFLANEDRVDIR_UNKWN)
#  if (!defined RTE_CONST_I_C03_ADAS_NUMOFLANEDRVDIR_UNKWN) || (RTE_CONST_I_C03_ADAS_NUMOFLANEDRVDIR_UNKWN != 7u)
#   error "Enumeration constant <I_C03_ADAS_NUMOFLANEDRVDIR_UNKWN> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_ADAS_NUMOFLANEDRVDIR_UNKWN (7u)
#  define I_C03_ADAS_NUMOFLANEDRVDIR_UNKWN ((c03_ADAS_NumOfLaneDrvDir)7u)
# endif

# define Rte_TypeDef_c03_ADAS_Posn_CurLane
typedef uint8 c03_ADAS_Posn_CurLane;
# define c03_ADAS_Posn_CurLane_LowerLimit ((c03_ADAS_Posn_CurLane)0u)
# define c03_ADAS_Posn_CurLane_UpperLimit ((c03_ADAS_Posn_CurLane)7u)
# define Rte_InvalidValue_c03_ADAS_Posn_CurLane ((c03_ADAS_Posn_CurLane)7u)
# if (defined RTE_CONST_I_C03_ADAS_POSN_CURLANE_UNKWN) || (defined I_C03_ADAS_POSN_CURLANE_UNKWN)
#  if (!defined RTE_CONST_I_C03_ADAS_POSN_CURLANE_UNKWN) || (RTE_CONST_I_C03_ADAS_POSN_CURLANE_UNKWN != 0u)
#   error "Enumeration constant <I_C03_ADAS_POSN_CURLANE_UNKWN> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_ADAS_POSN_CURLANE_UNKWN (0u)
#  define I_C03_ADAS_POSN_CURLANE_UNKWN ((c03_ADAS_Posn_CurLane)0u)
# endif
# if (defined RTE_CONST_I_C03_ADAS_POSN_CURLANE_EMG_L) || (defined I_C03_ADAS_POSN_CURLANE_EMG_L)
#  if (!defined RTE_CONST_I_C03_ADAS_POSN_CURLANE_EMG_L) || (RTE_CONST_I_C03_ADAS_POSN_CURLANE_EMG_L != 1u)
#   error "Enumeration constant <I_C03_ADAS_POSN_CURLANE_EMG_L> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_ADAS_POSN_CURLANE_EMG_L (1u)
#  define I_C03_ADAS_POSN_CURLANE_EMG_L ((c03_ADAS_Posn_CurLane)1u)
# endif
# if (defined RTE_CONST_I_C03_ADAS_POSN_CURLANE_SINGLE_L) || (defined I_C03_ADAS_POSN_CURLANE_SINGLE_L)
#  if (!defined RTE_CONST_I_C03_ADAS_POSN_CURLANE_SINGLE_L) || (RTE_CONST_I_C03_ADAS_POSN_CURLANE_SINGLE_L != 2u)
#   error "Enumeration constant <I_C03_ADAS_POSN_CURLANE_SINGLE_L> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_ADAS_POSN_CURLANE_SINGLE_L (2u)
#  define I_C03_ADAS_POSN_CURLANE_SINGLE_L ((c03_ADAS_Posn_CurLane)2u)
# endif
# if (defined RTE_CONST_I_C03_ADAS_POSN_CURLANE_LM_L) || (defined I_C03_ADAS_POSN_CURLANE_LM_L)
#  if (!defined RTE_CONST_I_C03_ADAS_POSN_CURLANE_LM_L) || (RTE_CONST_I_C03_ADAS_POSN_CURLANE_LM_L != 3u)
#   error "Enumeration constant <I_C03_ADAS_POSN_CURLANE_LM_L> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_ADAS_POSN_CURLANE_LM_L (3u)
#  define I_C03_ADAS_POSN_CURLANE_LM_L ((c03_ADAS_Posn_CurLane)3u)
# endif
# if (defined RTE_CONST_I_C03_ADAS_POSN_CURLANE_RM_L) || (defined I_C03_ADAS_POSN_CURLANE_RM_L)
#  if (!defined RTE_CONST_I_C03_ADAS_POSN_CURLANE_RM_L) || (RTE_CONST_I_C03_ADAS_POSN_CURLANE_RM_L != 4u)
#   error "Enumeration constant <I_C03_ADAS_POSN_CURLANE_RM_L> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_ADAS_POSN_CURLANE_RM_L (4u)
#  define I_C03_ADAS_POSN_CURLANE_RM_L ((c03_ADAS_Posn_CurLane)4u)
# endif
# if (defined RTE_CONST_I_C03_ADAS_POSN_CURLANE_MID_L) || (defined I_C03_ADAS_POSN_CURLANE_MID_L)
#  if (!defined RTE_CONST_I_C03_ADAS_POSN_CURLANE_MID_L) || (RTE_CONST_I_C03_ADAS_POSN_CURLANE_MID_L != 5u)
#   error "Enumeration constant <I_C03_ADAS_POSN_CURLANE_MID_L> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_ADAS_POSN_CURLANE_MID_L (5u)
#  define I_C03_ADAS_POSN_CURLANE_MID_L ((c03_ADAS_Posn_CurLane)5u)
# endif
# if (defined RTE_CONST_I_C03_ADAS_POSN_CURLANE_RES) || (defined I_C03_ADAS_POSN_CURLANE_RES)
#  if (!defined RTE_CONST_I_C03_ADAS_POSN_CURLANE_RES) || (RTE_CONST_I_C03_ADAS_POSN_CURLANE_RES != 6u)
#   error "Enumeration constant <I_C03_ADAS_POSN_CURLANE_RES> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_ADAS_POSN_CURLANE_RES (6u)
#  define I_C03_ADAS_POSN_CURLANE_RES ((c03_ADAS_Posn_CurLane)6u)
# endif
# if (defined RTE_CONST_I_C03_ADAS_POSN_CURLANE_SNA) || (defined I_C03_ADAS_POSN_CURLANE_SNA)
#  if (!defined RTE_CONST_I_C03_ADAS_POSN_CURLANE_SNA) || (RTE_CONST_I_C03_ADAS_POSN_CURLANE_SNA != 7u)
#   error "Enumeration constant <I_C03_ADAS_POSN_CURLANE_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_ADAS_POSN_CURLANE_SNA (7u)
#  define I_C03_ADAS_POSN_CURLANE_SNA ((c03_ADAS_Posn_CurLane)7u)
# endif

# define Rte_TypeDef_c03_ALDW_BrkMsgDisp_Rq
typedef uint8 c03_ALDW_BrkMsgDisp_Rq;
# define c03_ALDW_BrkMsgDisp_Rq_LowerLimit ((c03_ALDW_BrkMsgDisp_Rq)0u)
# define c03_ALDW_BrkMsgDisp_Rq_UpperLimit ((c03_ALDW_BrkMsgDisp_Rq)7u)
# define Rte_InvalidValue_c03_ALDW_BrkMsgDisp_Rq ((c03_ALDW_BrkMsgDisp_Rq)7u)
# if (defined RTE_CONST_I_C03_ALDW_BRKMSGDISP_RQ_IDLE) || (defined I_C03_ALDW_BRKMSGDISP_RQ_IDLE)
#  if (!defined RTE_CONST_I_C03_ALDW_BRKMSGDISP_RQ_IDLE) || (RTE_CONST_I_C03_ALDW_BRKMSGDISP_RQ_IDLE != 0u)
#   error "Enumeration constant <I_C03_ALDW_BRKMSGDISP_RQ_IDLE> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_ALDW_BRKMSGDISP_RQ_IDLE (0u)
#  define I_C03_ALDW_BRKMSGDISP_RQ_IDLE ((c03_ALDW_BrkMsgDisp_Rq)0u)
# endif
# if (defined RTE_CONST_I_C03_ALDW_BRKMSGDISP_RQ_BRK_LT) || (defined I_C03_ALDW_BRKMSGDISP_RQ_BRK_LT)
#  if (!defined RTE_CONST_I_C03_ALDW_BRKMSGDISP_RQ_BRK_LT) || (RTE_CONST_I_C03_ALDW_BRKMSGDISP_RQ_BRK_LT != 1u)
#   error "Enumeration constant <I_C03_ALDW_BRKMSGDISP_RQ_BRK_LT> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_ALDW_BRKMSGDISP_RQ_BRK_LT (1u)
#  define I_C03_ALDW_BRKMSGDISP_RQ_BRK_LT ((c03_ALDW_BrkMsgDisp_Rq)1u)
# endif
# if (defined RTE_CONST_I_C03_ALDW_BRKMSGDISP_RQ_BRK_RT) || (defined I_C03_ALDW_BRKMSGDISP_RQ_BRK_RT)
#  if (!defined RTE_CONST_I_C03_ALDW_BRKMSGDISP_RQ_BRK_RT) || (RTE_CONST_I_C03_ALDW_BRKMSGDISP_RQ_BRK_RT != 2u)
#   error "Enumeration constant <I_C03_ALDW_BRKMSGDISP_RQ_BRK_RT> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_ALDW_BRKMSGDISP_RQ_BRK_RT (2u)
#  define I_C03_ALDW_BRKMSGDISP_RQ_BRK_RT ((c03_ALDW_BrkMsgDisp_Rq)2u)
# endif
# if (defined RTE_CONST_I_C03_ALDW_BRKMSGDISP_RQ_SNA) || (defined I_C03_ALDW_BRKMSGDISP_RQ_SNA)
#  if (!defined RTE_CONST_I_C03_ALDW_BRKMSGDISP_RQ_SNA) || (RTE_CONST_I_C03_ALDW_BRKMSGDISP_RQ_SNA != 7u)
#   error "Enumeration constant <I_C03_ALDW_BRKMSGDISP_RQ_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_ALDW_BRKMSGDISP_RQ_SNA (7u)
#  define I_C03_ALDW_BRKMSGDISP_RQ_SNA ((c03_ALDW_BrkMsgDisp_Rq)7u)
# endif

# define Rte_TypeDef_c03_ALDW_LaneMarkCol
typedef uint8 c03_ALDW_LaneMarkCol;
# define c03_ALDW_LaneMarkCol_LowerLimit ((c03_ALDW_LaneMarkCol)0u)
# define c03_ALDW_LaneMarkCol_UpperLimit ((c03_ALDW_LaneMarkCol)7u)
# define Rte_InvalidValue_c03_ALDW_LaneMarkCol ((c03_ALDW_LaneMarkCol)7u)
# if (defined RTE_CONST_I_C03_ALDW_LANEMARKCOL_NDEF0) || (defined I_C03_ALDW_LANEMARKCOL_NDEF0)
#  if (!defined RTE_CONST_I_C03_ALDW_LANEMARKCOL_NDEF0) || (RTE_CONST_I_C03_ALDW_LANEMARKCOL_NDEF0 != 0u)
#   error "Enumeration constant <I_C03_ALDW_LANEMARKCOL_NDEF0> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_ALDW_LANEMARKCOL_NDEF0 (0u)
#  define I_C03_ALDW_LANEMARKCOL_NDEF0 ((c03_ALDW_LaneMarkCol)0u)
# endif
# if (defined RTE_CONST_I_C03_ALDW_LANEMARKCOL_WHITE) || (defined I_C03_ALDW_LANEMARKCOL_WHITE)
#  if (!defined RTE_CONST_I_C03_ALDW_LANEMARKCOL_WHITE) || (RTE_CONST_I_C03_ALDW_LANEMARKCOL_WHITE != 1u)
#   error "Enumeration constant <I_C03_ALDW_LANEMARKCOL_WHITE> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_ALDW_LANEMARKCOL_WHITE (1u)
#  define I_C03_ALDW_LANEMARKCOL_WHITE ((c03_ALDW_LaneMarkCol)1u)
# endif
# if (defined RTE_CONST_I_C03_ALDW_LANEMARKCOL_YELLOW) || (defined I_C03_ALDW_LANEMARKCOL_YELLOW)
#  if (!defined RTE_CONST_I_C03_ALDW_LANEMARKCOL_YELLOW) || (RTE_CONST_I_C03_ALDW_LANEMARKCOL_YELLOW != 2u)
#   error "Enumeration constant <I_C03_ALDW_LANEMARKCOL_YELLOW> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_ALDW_LANEMARKCOL_YELLOW (2u)
#  define I_C03_ALDW_LANEMARKCOL_YELLOW ((c03_ALDW_LaneMarkCol)2u)
# endif
# if (defined RTE_CONST_I_C03_ALDW_LANEMARKCOL_RED) || (defined I_C03_ALDW_LANEMARKCOL_RED)
#  if (!defined RTE_CONST_I_C03_ALDW_LANEMARKCOL_RED) || (RTE_CONST_I_C03_ALDW_LANEMARKCOL_RED != 3u)
#   error "Enumeration constant <I_C03_ALDW_LANEMARKCOL_RED> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_ALDW_LANEMARKCOL_RED (3u)
#  define I_C03_ALDW_LANEMARKCOL_RED ((c03_ALDW_LaneMarkCol)3u)
# endif
# if (defined RTE_CONST_I_C03_ALDW_LANEMARKCOL_SNA) || (defined I_C03_ALDW_LANEMARKCOL_SNA)
#  if (!defined RTE_CONST_I_C03_ALDW_LANEMARKCOL_SNA) || (RTE_CONST_I_C03_ALDW_LANEMARKCOL_SNA != 7u)
#   error "Enumeration constant <I_C03_ALDW_LANEMARKCOL_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_ALDW_LANEMARKCOL_SNA (7u)
#  define I_C03_ALDW_LANEMARKCOL_SNA ((c03_ALDW_LaneMarkCol)7u)
# endif

# define Rte_TypeDef_c03_ALDW_LaneMark_Stat
typedef uint8 c03_ALDW_LaneMark_Stat;
# define c03_ALDW_LaneMark_Stat_LowerLimit ((c03_ALDW_LaneMark_Stat)0u)
# define c03_ALDW_LaneMark_Stat_UpperLimit ((c03_ALDW_LaneMark_Stat)7u)
# define Rte_InvalidValue_c03_ALDW_LaneMark_Stat ((c03_ALDW_LaneMark_Stat)7u)
# if (defined RTE_CONST_I_C03_ALDW_LANEMARK_STAT_NO_MARK) || (defined I_C03_ALDW_LANEMARK_STAT_NO_MARK)
#  if (!defined RTE_CONST_I_C03_ALDW_LANEMARK_STAT_NO_MARK) || (RTE_CONST_I_C03_ALDW_LANEMARK_STAT_NO_MARK != 0u)
#   error "Enumeration constant <I_C03_ALDW_LANEMARK_STAT_NO_MARK> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_ALDW_LANEMARK_STAT_NO_MARK (0u)
#  define I_C03_ALDW_LANEMARK_STAT_NO_MARK ((c03_ALDW_LaneMark_Stat)0u)
# endif
# if (defined RTE_CONST_I_C03_ALDW_LANEMARK_STAT_DTCT_NO_TRACK) || (defined I_C03_ALDW_LANEMARK_STAT_DTCT_NO_TRACK)
#  if (!defined RTE_CONST_I_C03_ALDW_LANEMARK_STAT_DTCT_NO_TRACK) || (RTE_CONST_I_C03_ALDW_LANEMARK_STAT_DTCT_NO_TRACK != 1u)
#   error "Enumeration constant <I_C03_ALDW_LANEMARK_STAT_DTCT_NO_TRACK> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_ALDW_LANEMARK_STAT_DTCT_NO_TRACK (1u)
#  define I_C03_ALDW_LANEMARK_STAT_DTCT_NO_TRACK ((c03_ALDW_LaneMark_Stat)1u)
# endif
# if (defined RTE_CONST_I_C03_ALDW_LANEMARK_STAT_DTCT_TRACK) || (defined I_C03_ALDW_LANEMARK_STAT_DTCT_TRACK)
#  if (!defined RTE_CONST_I_C03_ALDW_LANEMARK_STAT_DTCT_TRACK) || (RTE_CONST_I_C03_ALDW_LANEMARK_STAT_DTCT_TRACK != 2u)
#   error "Enumeration constant <I_C03_ALDW_LANEMARK_STAT_DTCT_TRACK> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_ALDW_LANEMARK_STAT_DTCT_TRACK (2u)
#  define I_C03_ALDW_LANEMARK_STAT_DTCT_TRACK ((c03_ALDW_LaneMark_Stat)2u)
# endif
# if (defined RTE_CONST_I_C03_ALDW_LANEMARK_STAT_FLT) || (defined I_C03_ALDW_LANEMARK_STAT_FLT)
#  if (!defined RTE_CONST_I_C03_ALDW_LANEMARK_STAT_FLT) || (RTE_CONST_I_C03_ALDW_LANEMARK_STAT_FLT != 3u)
#   error "Enumeration constant <I_C03_ALDW_LANEMARK_STAT_FLT> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_ALDW_LANEMARK_STAT_FLT (3u)
#  define I_C03_ALDW_LANEMARK_STAT_FLT ((c03_ALDW_LaneMark_Stat)3u)
# endif
# if (defined RTE_CONST_I_C03_ALDW_LANEMARK_STAT_DTCT_TRACK_COUPL) || (defined I_C03_ALDW_LANEMARK_STAT_DTCT_TRACK_COUPL)
#  if (!defined RTE_CONST_I_C03_ALDW_LANEMARK_STAT_DTCT_TRACK_COUPL) || (RTE_CONST_I_C03_ALDW_LANEMARK_STAT_DTCT_TRACK_COUPL != 4u)
#   error "Enumeration constant <I_C03_ALDW_LANEMARK_STAT_DTCT_TRACK_COUPL> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_ALDW_LANEMARK_STAT_DTCT_TRACK_COUPL (4u)
#  define I_C03_ALDW_LANEMARK_STAT_DTCT_TRACK_COUPL ((c03_ALDW_LaneMark_Stat)4u)
# endif
# if (defined RTE_CONST_I_C03_ALDW_LANEMARK_STAT_EXTRAPOLATED) || (defined I_C03_ALDW_LANEMARK_STAT_EXTRAPOLATED)
#  if (!defined RTE_CONST_I_C03_ALDW_LANEMARK_STAT_EXTRAPOLATED) || (RTE_CONST_I_C03_ALDW_LANEMARK_STAT_EXTRAPOLATED != 5u)
#   error "Enumeration constant <I_C03_ALDW_LANEMARK_STAT_EXTRAPOLATED> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_ALDW_LANEMARK_STAT_EXTRAPOLATED (5u)
#  define I_C03_ALDW_LANEMARK_STAT_EXTRAPOLATED ((c03_ALDW_LaneMark_Stat)5u)
# endif
# if (defined RTE_CONST_I_C03_ALDW_LANEMARK_STAT_SNA) || (defined I_C03_ALDW_LANEMARK_STAT_SNA)
#  if (!defined RTE_CONST_I_C03_ALDW_LANEMARK_STAT_SNA) || (RTE_CONST_I_C03_ALDW_LANEMARK_STAT_SNA != 7u)
#   error "Enumeration constant <I_C03_ALDW_LANEMARK_STAT_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_ALDW_LANEMARK_STAT_SNA (7u)
#  define I_C03_ALDW_LANEMARK_STAT_SNA ((c03_ALDW_LaneMark_Stat)7u)
# endif

# define Rte_TypeDef_c03_ALDW_Md_Rq
typedef uint8 c03_ALDW_Md_Rq;
# define c03_ALDW_Md_Rq_LowerLimit ((c03_ALDW_Md_Rq)0u)
# define c03_ALDW_Md_Rq_UpperLimit ((c03_ALDW_Md_Rq)7u)
# define Rte_InvalidValue_c03_ALDW_Md_Rq ((c03_ALDW_Md_Rq)7u)
# if (defined RTE_CONST_I_C03_ALDW_MD_RQ_OFF) || (defined I_C03_ALDW_MD_RQ_OFF)
#  if (!defined RTE_CONST_I_C03_ALDW_MD_RQ_OFF) || (RTE_CONST_I_C03_ALDW_MD_RQ_OFF != 0u)
#   error "Enumeration constant <I_C03_ALDW_MD_RQ_OFF> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_ALDW_MD_RQ_OFF (0u)
#  define I_C03_ALDW_MD_RQ_OFF ((c03_ALDW_Md_Rq)0u)
# endif
# if (defined RTE_CONST_I_C03_ALDW_MD_RQ_ALDW_MD_1) || (defined I_C03_ALDW_MD_RQ_ALDW_MD_1)
#  if (!defined RTE_CONST_I_C03_ALDW_MD_RQ_ALDW_MD_1) || (RTE_CONST_I_C03_ALDW_MD_RQ_ALDW_MD_1 != 1u)
#   error "Enumeration constant <I_C03_ALDW_MD_RQ_ALDW_MD_1> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_ALDW_MD_RQ_ALDW_MD_1 (1u)
#  define I_C03_ALDW_MD_RQ_ALDW_MD_1 ((c03_ALDW_Md_Rq)1u)
# endif
# if (defined RTE_CONST_I_C03_ALDW_MD_RQ_ALDW_MD_2) || (defined I_C03_ALDW_MD_RQ_ALDW_MD_2)
#  if (!defined RTE_CONST_I_C03_ALDW_MD_RQ_ALDW_MD_2) || (RTE_CONST_I_C03_ALDW_MD_RQ_ALDW_MD_2 != 2u)
#   error "Enumeration constant <I_C03_ALDW_MD_RQ_ALDW_MD_2> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_ALDW_MD_RQ_ALDW_MD_2 (2u)
#  define I_C03_ALDW_MD_RQ_ALDW_MD_2 ((c03_ALDW_Md_Rq)2u)
# endif
# if (defined RTE_CONST_I_C03_ALDW_MD_RQ_ALDW_MD_3) || (defined I_C03_ALDW_MD_RQ_ALDW_MD_3)
#  if (!defined RTE_CONST_I_C03_ALDW_MD_RQ_ALDW_MD_3) || (RTE_CONST_I_C03_ALDW_MD_RQ_ALDW_MD_3 != 3u)
#   error "Enumeration constant <I_C03_ALDW_MD_RQ_ALDW_MD_3> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_ALDW_MD_RQ_ALDW_MD_3 (3u)
#  define I_C03_ALDW_MD_RQ_ALDW_MD_3 ((c03_ALDW_Md_Rq)3u)
# endif
# if (defined RTE_CONST_I_C03_ALDW_MD_RQ_LDP_MD_1) || (defined I_C03_ALDW_MD_RQ_LDP_MD_1)
#  if (!defined RTE_CONST_I_C03_ALDW_MD_RQ_LDP_MD_1) || (RTE_CONST_I_C03_ALDW_MD_RQ_LDP_MD_1 != 4u)
#   error "Enumeration constant <I_C03_ALDW_MD_RQ_LDP_MD_1> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_ALDW_MD_RQ_LDP_MD_1 (4u)
#  define I_C03_ALDW_MD_RQ_LDP_MD_1 ((c03_ALDW_Md_Rq)4u)
# endif
# if (defined RTE_CONST_I_C03_ALDW_MD_RQ_LDP_MD_2) || (defined I_C03_ALDW_MD_RQ_LDP_MD_2)
#  if (!defined RTE_CONST_I_C03_ALDW_MD_RQ_LDP_MD_2) || (RTE_CONST_I_C03_ALDW_MD_RQ_LDP_MD_2 != 5u)
#   error "Enumeration constant <I_C03_ALDW_MD_RQ_LDP_MD_2> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_ALDW_MD_RQ_LDP_MD_2 (5u)
#  define I_C03_ALDW_MD_RQ_LDP_MD_2 ((c03_ALDW_Md_Rq)5u)
# endif
# if (defined RTE_CONST_I_C03_ALDW_MD_RQ_LDP_MD_3) || (defined I_C03_ALDW_MD_RQ_LDP_MD_3)
#  if (!defined RTE_CONST_I_C03_ALDW_MD_RQ_LDP_MD_3) || (RTE_CONST_I_C03_ALDW_MD_RQ_LDP_MD_3 != 6u)
#   error "Enumeration constant <I_C03_ALDW_MD_RQ_LDP_MD_3> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_ALDW_MD_RQ_LDP_MD_3 (6u)
#  define I_C03_ALDW_MD_RQ_LDP_MD_3 ((c03_ALDW_Md_Rq)6u)
# endif
# if (defined RTE_CONST_I_C03_ALDW_MD_RQ_SNA) || (defined I_C03_ALDW_MD_RQ_SNA)
#  if (!defined RTE_CONST_I_C03_ALDW_MD_RQ_SNA) || (RTE_CONST_I_C03_ALDW_MD_RQ_SNA != 7u)
#   error "Enumeration constant <I_C03_ALDW_MD_RQ_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_ALDW_MD_RQ_SNA (7u)
#  define I_C03_ALDW_MD_RQ_SNA ((c03_ALDW_Md_Rq)7u)
# endif

# define Rte_TypeDef_c03_ALDW_MsgDisp_Rq
typedef uint8 c03_ALDW_MsgDisp_Rq;
# define c03_ALDW_MsgDisp_Rq_LowerLimit ((c03_ALDW_MsgDisp_Rq)0u)
# define c03_ALDW_MsgDisp_Rq_UpperLimit ((c03_ALDW_MsgDisp_Rq)7u)
# define Rte_InvalidValue_c03_ALDW_MsgDisp_Rq ((c03_ALDW_MsgDisp_Rq)7u)
# if (defined RTE_CONST_I_C03_ALDW_MSGDISP_RQ_IDLE) || (defined I_C03_ALDW_MSGDISP_RQ_IDLE)
#  if (!defined RTE_CONST_I_C03_ALDW_MSGDISP_RQ_IDLE) || (RTE_CONST_I_C03_ALDW_MSGDISP_RQ_IDLE != 0u)
#   error "Enumeration constant <I_C03_ALDW_MSGDISP_RQ_IDLE> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_ALDW_MSGDISP_RQ_IDLE (0u)
#  define I_C03_ALDW_MSGDISP_RQ_IDLE ((c03_ALDW_MsgDisp_Rq)0u)
# endif
# if (defined RTE_CONST_I_C03_ALDW_MSGDISP_RQ_ALDW_TEMP_NA) || (defined I_C03_ALDW_MSGDISP_RQ_ALDW_TEMP_NA)
#  if (!defined RTE_CONST_I_C03_ALDW_MSGDISP_RQ_ALDW_TEMP_NA) || (RTE_CONST_I_C03_ALDW_MSGDISP_RQ_ALDW_TEMP_NA != 1u)
#   error "Enumeration constant <I_C03_ALDW_MSGDISP_RQ_ALDW_TEMP_NA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_ALDW_MSGDISP_RQ_ALDW_TEMP_NA (1u)
#  define I_C03_ALDW_MSGDISP_RQ_ALDW_TEMP_NA ((c03_ALDW_MsgDisp_Rq)1u)
# endif
# if (defined RTE_CONST_I_C03_ALDW_MSGDISP_RQ_ALDW_NA) || (defined I_C03_ALDW_MSGDISP_RQ_ALDW_NA)
#  if (!defined RTE_CONST_I_C03_ALDW_MSGDISP_RQ_ALDW_NA) || (RTE_CONST_I_C03_ALDW_MSGDISP_RQ_ALDW_NA != 2u)
#   error "Enumeration constant <I_C03_ALDW_MSGDISP_RQ_ALDW_NA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_ALDW_MSGDISP_RQ_ALDW_NA (2u)
#  define I_C03_ALDW_MSGDISP_RQ_ALDW_NA ((c03_ALDW_MsgDisp_Rq)2u)
# endif
# if (defined RTE_CONST_I_C03_ALDW_MSGDISP_RQ_LDP_TEMP_NA) || (defined I_C03_ALDW_MSGDISP_RQ_LDP_TEMP_NA)
#  if (!defined RTE_CONST_I_C03_ALDW_MSGDISP_RQ_LDP_TEMP_NA) || (RTE_CONST_I_C03_ALDW_MSGDISP_RQ_LDP_TEMP_NA != 3u)
#   error "Enumeration constant <I_C03_ALDW_MSGDISP_RQ_LDP_TEMP_NA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_ALDW_MSGDISP_RQ_LDP_TEMP_NA (3u)
#  define I_C03_ALDW_MSGDISP_RQ_LDP_TEMP_NA ((c03_ALDW_MsgDisp_Rq)3u)
# endif
# if (defined RTE_CONST_I_C03_ALDW_MSGDISP_RQ_LDP_NA) || (defined I_C03_ALDW_MSGDISP_RQ_LDP_NA)
#  if (!defined RTE_CONST_I_C03_ALDW_MSGDISP_RQ_LDP_NA) || (RTE_CONST_I_C03_ALDW_MSGDISP_RQ_LDP_NA != 4u)
#   error "Enumeration constant <I_C03_ALDW_MSGDISP_RQ_LDP_NA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_ALDW_MSGDISP_RQ_LDP_NA (4u)
#  define I_C03_ALDW_MSGDISP_RQ_LDP_NA ((c03_ALDW_MsgDisp_Rq)4u)
# endif
# if (defined RTE_CONST_I_C03_ALDW_MSGDISP_RQ_SNA) || (defined I_C03_ALDW_MSGDISP_RQ_SNA)
#  if (!defined RTE_CONST_I_C03_ALDW_MSGDISP_RQ_SNA) || (RTE_CONST_I_C03_ALDW_MSGDISP_RQ_SNA != 7u)
#   error "Enumeration constant <I_C03_ALDW_MSGDISP_RQ_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_ALDW_MSGDISP_RQ_SNA (7u)
#  define I_C03_ALDW_MSGDISP_RQ_SNA ((c03_ALDW_MsgDisp_Rq)7u)
# endif

# define Rte_TypeDef_c03_ALDW_PolygGroup
typedef uint8 c03_ALDW_PolygGroup;
# define c03_ALDW_PolygGroup_LowerLimit ((c03_ALDW_PolygGroup)0u)
# define c03_ALDW_PolygGroup_UpperLimit ((c03_ALDW_PolygGroup)7u)
# define Rte_InvalidValue_c03_ALDW_PolygGroup ((c03_ALDW_PolygGroup)7u)
# if (defined RTE_CONST_I_C03_ALDW_POLYGGROUP_POINT00_04) || (defined I_C03_ALDW_POLYGGROUP_POINT00_04)
#  if (!defined RTE_CONST_I_C03_ALDW_POLYGGROUP_POINT00_04) || (RTE_CONST_I_C03_ALDW_POLYGGROUP_POINT00_04 != 0u)
#   error "Enumeration constant <I_C03_ALDW_POLYGGROUP_POINT00_04> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_ALDW_POLYGGROUP_POINT00_04 (0u)
#  define I_C03_ALDW_POLYGGROUP_POINT00_04 ((c03_ALDW_PolygGroup)0u)
# endif
# if (defined RTE_CONST_I_C03_ALDW_POLYGGROUP_POINT05_09) || (defined I_C03_ALDW_POLYGGROUP_POINT05_09)
#  if (!defined RTE_CONST_I_C03_ALDW_POLYGGROUP_POINT05_09) || (RTE_CONST_I_C03_ALDW_POLYGGROUP_POINT05_09 != 1u)
#   error "Enumeration constant <I_C03_ALDW_POLYGGROUP_POINT05_09> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_ALDW_POLYGGROUP_POINT05_09 (1u)
#  define I_C03_ALDW_POLYGGROUP_POINT05_09 ((c03_ALDW_PolygGroup)1u)
# endif
# if (defined RTE_CONST_I_C03_ALDW_POLYGGROUP_POINT10_14) || (defined I_C03_ALDW_POLYGGROUP_POINT10_14)
#  if (!defined RTE_CONST_I_C03_ALDW_POLYGGROUP_POINT10_14) || (RTE_CONST_I_C03_ALDW_POLYGGROUP_POINT10_14 != 2u)
#   error "Enumeration constant <I_C03_ALDW_POLYGGROUP_POINT10_14> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_ALDW_POLYGGROUP_POINT10_14 (2u)
#  define I_C03_ALDW_POLYGGROUP_POINT10_14 ((c03_ALDW_PolygGroup)2u)
# endif
# if (defined RTE_CONST_I_C03_ALDW_POLYGGROUP_POINT15_19) || (defined I_C03_ALDW_POLYGGROUP_POINT15_19)
#  if (!defined RTE_CONST_I_C03_ALDW_POLYGGROUP_POINT15_19) || (RTE_CONST_I_C03_ALDW_POLYGGROUP_POINT15_19 != 3u)
#   error "Enumeration constant <I_C03_ALDW_POLYGGROUP_POINT15_19> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_ALDW_POLYGGROUP_POINT15_19 (3u)
#  define I_C03_ALDW_POLYGGROUP_POINT15_19 ((c03_ALDW_PolygGroup)3u)
# endif
# if (defined RTE_CONST_I_C03_ALDW_POLYGGROUP_SNA) || (defined I_C03_ALDW_POLYGGROUP_SNA)
#  if (!defined RTE_CONST_I_C03_ALDW_POLYGGROUP_SNA) || (RTE_CONST_I_C03_ALDW_POLYGGROUP_SNA != 7u)
#   error "Enumeration constant <I_C03_ALDW_POLYGGROUP_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_ALDW_POLYGGROUP_SNA (7u)
#  define I_C03_ALDW_POLYGGROUP_SNA ((c03_ALDW_PolygGroup)7u)
# endif

# define Rte_TypeDef_c03_ALDW_RoadType
typedef uint8 c03_ALDW_RoadType;
# define c03_ALDW_RoadType_LowerLimit ((c03_ALDW_RoadType)0u)
# define c03_ALDW_RoadType_UpperLimit ((c03_ALDW_RoadType)7u)
# define Rte_InvalidValue_c03_ALDW_RoadType ((c03_ALDW_RoadType)7u)
# if (defined RTE_CONST_I_C03_ALDW_ROADTYPE_NDEF0) || (defined I_C03_ALDW_ROADTYPE_NDEF0)
#  if (!defined RTE_CONST_I_C03_ALDW_ROADTYPE_NDEF0) || (RTE_CONST_I_C03_ALDW_ROADTYPE_NDEF0 != 0u)
#   error "Enumeration constant <I_C03_ALDW_ROADTYPE_NDEF0> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_ALDW_ROADTYPE_NDEF0 (0u)
#  define I_C03_ALDW_ROADTYPE_NDEF0 ((c03_ALDW_RoadType)0u)
# endif
# if (defined RTE_CONST_I_C03_ALDW_ROADTYPE_COUNTRY_ROAD) || (defined I_C03_ALDW_ROADTYPE_COUNTRY_ROAD)
#  if (!defined RTE_CONST_I_C03_ALDW_ROADTYPE_COUNTRY_ROAD) || (RTE_CONST_I_C03_ALDW_ROADTYPE_COUNTRY_ROAD != 1u)
#   error "Enumeration constant <I_C03_ALDW_ROADTYPE_COUNTRY_ROAD> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_ALDW_ROADTYPE_COUNTRY_ROAD (1u)
#  define I_C03_ALDW_ROADTYPE_COUNTRY_ROAD ((c03_ALDW_RoadType)1u)
# endif
# if (defined RTE_CONST_I_C03_ALDW_ROADTYPE_HIGHWAY) || (defined I_C03_ALDW_ROADTYPE_HIGHWAY)
#  if (!defined RTE_CONST_I_C03_ALDW_ROADTYPE_HIGHWAY) || (RTE_CONST_I_C03_ALDW_ROADTYPE_HIGHWAY != 2u)
#   error "Enumeration constant <I_C03_ALDW_ROADTYPE_HIGHWAY> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_ALDW_ROADTYPE_HIGHWAY (2u)
#  define I_C03_ALDW_ROADTYPE_HIGHWAY ((c03_ALDW_RoadType)2u)
# endif
# if (defined RTE_CONST_I_C03_ALDW_ROADTYPE_URBAN) || (defined I_C03_ALDW_ROADTYPE_URBAN)
#  if (!defined RTE_CONST_I_C03_ALDW_ROADTYPE_URBAN) || (RTE_CONST_I_C03_ALDW_ROADTYPE_URBAN != 3u)
#   error "Enumeration constant <I_C03_ALDW_ROADTYPE_URBAN> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_ALDW_ROADTYPE_URBAN (3u)
#  define I_C03_ALDW_ROADTYPE_URBAN ((c03_ALDW_RoadType)3u)
# endif
# if (defined RTE_CONST_I_C03_ALDW_ROADTYPE_SNA) || (defined I_C03_ALDW_ROADTYPE_SNA)
#  if (!defined RTE_CONST_I_C03_ALDW_ROADTYPE_SNA) || (RTE_CONST_I_C03_ALDW_ROADTYPE_SNA != 7u)
#   error "Enumeration constant <I_C03_ALDW_ROADTYPE_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_ALDW_ROADTYPE_SNA (7u)
#  define I_C03_ALDW_ROADTYPE_SNA ((c03_ALDW_RoadType)7u)
# endif

# define Rte_TypeDef_c03_ALDW_StructElevat
typedef uint8 c03_ALDW_StructElevat;
# define c03_ALDW_StructElevat_LowerLimit ((c03_ALDW_StructElevat)0u)
# define c03_ALDW_StructElevat_UpperLimit ((c03_ALDW_StructElevat)7u)
# define Rte_InvalidValue_c03_ALDW_StructElevat ((c03_ALDW_StructElevat)7u)
# if (defined RTE_CONST_I_C03_ALDW_STRUCTELEVAT_NOSTRUCT) || (defined I_C03_ALDW_STRUCTELEVAT_NOSTRUCT)
#  if (!defined RTE_CONST_I_C03_ALDW_STRUCTELEVAT_NOSTRUCT) || (RTE_CONST_I_C03_ALDW_STRUCTELEVAT_NOSTRUCT != 0u)
#   error "Enumeration constant <I_C03_ALDW_STRUCTELEVAT_NOSTRUCT> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_ALDW_STRUCTELEVAT_NOSTRUCT (0u)
#  define I_C03_ALDW_STRUCTELEVAT_NOSTRUCT ((c03_ALDW_StructElevat)0u)
# endif
# if (defined RTE_CONST_I_C03_ALDW_STRUCTELEVAT_STRUCT_LANE) || (defined I_C03_ALDW_STRUCTELEVAT_STRUCT_LANE)
#  if (!defined RTE_CONST_I_C03_ALDW_STRUCTELEVAT_STRUCT_LANE) || (RTE_CONST_I_C03_ALDW_STRUCTELEVAT_STRUCT_LANE != 1u)
#   error "Enumeration constant <I_C03_ALDW_STRUCTELEVAT_STRUCT_LANE> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_ALDW_STRUCTELEVAT_STRUCT_LANE (1u)
#  define I_C03_ALDW_STRUCTELEVAT_STRUCT_LANE ((c03_ALDW_StructElevat)1u)
# endif
# if (defined RTE_CONST_I_C03_ALDW_STRUCTELEVAT_STRUCT_50) || (defined I_C03_ALDW_STRUCTELEVAT_STRUCT_50)
#  if (!defined RTE_CONST_I_C03_ALDW_STRUCTELEVAT_STRUCT_50) || (RTE_CONST_I_C03_ALDW_STRUCTELEVAT_STRUCT_50 != 2u)
#   error "Enumeration constant <I_C03_ALDW_STRUCTELEVAT_STRUCT_50> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_ALDW_STRUCTELEVAT_STRUCT_50 (2u)
#  define I_C03_ALDW_STRUCTELEVAT_STRUCT_50 ((c03_ALDW_StructElevat)2u)
# endif
# if (defined RTE_CONST_I_C03_ALDW_STRUCTELEVAT_STRUCT_100) || (defined I_C03_ALDW_STRUCTELEVAT_STRUCT_100)
#  if (!defined RTE_CONST_I_C03_ALDW_STRUCTELEVAT_STRUCT_100) || (RTE_CONST_I_C03_ALDW_STRUCTELEVAT_STRUCT_100 != 3u)
#   error "Enumeration constant <I_C03_ALDW_STRUCTELEVAT_STRUCT_100> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_ALDW_STRUCTELEVAT_STRUCT_100 (3u)
#  define I_C03_ALDW_STRUCTELEVAT_STRUCT_100 ((c03_ALDW_StructElevat)3u)
# endif
# if (defined RTE_CONST_I_C03_ALDW_STRUCTELEVAT_STRUCT_150) || (defined I_C03_ALDW_STRUCTELEVAT_STRUCT_150)
#  if (!defined RTE_CONST_I_C03_ALDW_STRUCTELEVAT_STRUCT_150) || (RTE_CONST_I_C03_ALDW_STRUCTELEVAT_STRUCT_150 != 4u)
#   error "Enumeration constant <I_C03_ALDW_STRUCTELEVAT_STRUCT_150> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_ALDW_STRUCTELEVAT_STRUCT_150 (4u)
#  define I_C03_ALDW_STRUCTELEVAT_STRUCT_150 ((c03_ALDW_StructElevat)4u)
# endif
# if (defined RTE_CONST_I_C03_ALDW_STRUCTELEVAT_STRUCT_200) || (defined I_C03_ALDW_STRUCTELEVAT_STRUCT_200)
#  if (!defined RTE_CONST_I_C03_ALDW_STRUCTELEVAT_STRUCT_200) || (RTE_CONST_I_C03_ALDW_STRUCTELEVAT_STRUCT_200 != 5u)
#   error "Enumeration constant <I_C03_ALDW_STRUCTELEVAT_STRUCT_200> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_ALDW_STRUCTELEVAT_STRUCT_200 (5u)
#  define I_C03_ALDW_STRUCTELEVAT_STRUCT_200 ((c03_ALDW_StructElevat)5u)
# endif
# if (defined RTE_CONST_I_C03_ALDW_STRUCTELEVAT_NDEF6) || (defined I_C03_ALDW_STRUCTELEVAT_NDEF6)
#  if (!defined RTE_CONST_I_C03_ALDW_STRUCTELEVAT_NDEF6) || (RTE_CONST_I_C03_ALDW_STRUCTELEVAT_NDEF6 != 6u)
#   error "Enumeration constant <I_C03_ALDW_STRUCTELEVAT_NDEF6> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_ALDW_STRUCTELEVAT_NDEF6 (6u)
#  define I_C03_ALDW_STRUCTELEVAT_NDEF6 ((c03_ALDW_StructElevat)6u)
# endif
# if (defined RTE_CONST_I_C03_ALDW_STRUCTELEVAT_SNA) || (defined I_C03_ALDW_STRUCTELEVAT_SNA)
#  if (!defined RTE_CONST_I_C03_ALDW_STRUCTELEVAT_SNA) || (RTE_CONST_I_C03_ALDW_STRUCTELEVAT_SNA != 7u)
#   error "Enumeration constant <I_C03_ALDW_STRUCTELEVAT_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_ALDW_STRUCTELEVAT_SNA (7u)
#  define I_C03_ALDW_STRUCTELEVAT_SNA ((c03_ALDW_StructElevat)7u)
# endif

# define Rte_TypeDef_c03_ALDW_VibMot_Stat
typedef uint8 c03_ALDW_VibMot_Stat;
# define c03_ALDW_VibMot_Stat_LowerLimit ((c03_ALDW_VibMot_Stat)0u)
# define c03_ALDW_VibMot_Stat_UpperLimit ((c03_ALDW_VibMot_Stat)7u)
# define Rte_InvalidValue_c03_ALDW_VibMot_Stat ((c03_ALDW_VibMot_Stat)7u)
# if (defined RTE_CONST_I_C03_ALDW_VIBMOT_STAT_VIB_OFF) || (defined I_C03_ALDW_VIBMOT_STAT_VIB_OFF)
#  if (!defined RTE_CONST_I_C03_ALDW_VIBMOT_STAT_VIB_OFF) || (RTE_CONST_I_C03_ALDW_VIBMOT_STAT_VIB_OFF != 0u)
#   error "Enumeration constant <I_C03_ALDW_VIBMOT_STAT_VIB_OFF> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_ALDW_VIBMOT_STAT_VIB_OFF (0u)
#  define I_C03_ALDW_VIBMOT_STAT_VIB_OFF ((c03_ALDW_VibMot_Stat)0u)
# endif
# if (defined RTE_CONST_I_C03_ALDW_VIBMOT_STAT_VIB_ON) || (defined I_C03_ALDW_VIBMOT_STAT_VIB_ON)
#  if (!defined RTE_CONST_I_C03_ALDW_VIBMOT_STAT_VIB_ON) || (RTE_CONST_I_C03_ALDW_VIBMOT_STAT_VIB_ON != 1u)
#   error "Enumeration constant <I_C03_ALDW_VIBMOT_STAT_VIB_ON> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_ALDW_VIBMOT_STAT_VIB_ON (1u)
#  define I_C03_ALDW_VIBMOT_STAT_VIB_ON ((c03_ALDW_VibMot_Stat)1u)
# endif
# if (defined RTE_CONST_I_C03_ALDW_VIBMOT_STAT_SHRT) || (defined I_C03_ALDW_VIBMOT_STAT_SHRT)
#  if (!defined RTE_CONST_I_C03_ALDW_VIBMOT_STAT_SHRT) || (RTE_CONST_I_C03_ALDW_VIBMOT_STAT_SHRT != 2u)
#   error "Enumeration constant <I_C03_ALDW_VIBMOT_STAT_SHRT> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_ALDW_VIBMOT_STAT_SHRT (2u)
#  define I_C03_ALDW_VIBMOT_STAT_SHRT ((c03_ALDW_VibMot_Stat)2u)
# endif
# if (defined RTE_CONST_I_C03_ALDW_VIBMOT_STAT_BLOCK) || (defined I_C03_ALDW_VIBMOT_STAT_BLOCK)
#  if (!defined RTE_CONST_I_C03_ALDW_VIBMOT_STAT_BLOCK) || (RTE_CONST_I_C03_ALDW_VIBMOT_STAT_BLOCK != 3u)
#   error "Enumeration constant <I_C03_ALDW_VIBMOT_STAT_BLOCK> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_ALDW_VIBMOT_STAT_BLOCK (3u)
#  define I_C03_ALDW_VIBMOT_STAT_BLOCK ((c03_ALDW_VibMot_Stat)3u)
# endif
# if (defined RTE_CONST_I_C03_ALDW_VIBMOT_STAT_OPN) || (defined I_C03_ALDW_VIBMOT_STAT_OPN)
#  if (!defined RTE_CONST_I_C03_ALDW_VIBMOT_STAT_OPN) || (RTE_CONST_I_C03_ALDW_VIBMOT_STAT_OPN != 4u)
#   error "Enumeration constant <I_C03_ALDW_VIBMOT_STAT_OPN> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_ALDW_VIBMOT_STAT_OPN (4u)
#  define I_C03_ALDW_VIBMOT_STAT_OPN ((c03_ALDW_VibMot_Stat)4u)
# endif
# if (defined RTE_CONST_I_C03_ALDW_VIBMOT_STAT_VIB_FLT) || (defined I_C03_ALDW_VIBMOT_STAT_VIB_FLT)
#  if (!defined RTE_CONST_I_C03_ALDW_VIBMOT_STAT_VIB_FLT) || (RTE_CONST_I_C03_ALDW_VIBMOT_STAT_VIB_FLT != 5u)
#   error "Enumeration constant <I_C03_ALDW_VIBMOT_STAT_VIB_FLT> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_ALDW_VIBMOT_STAT_VIB_FLT (5u)
#  define I_C03_ALDW_VIBMOT_STAT_VIB_FLT ((c03_ALDW_VibMot_Stat)5u)
# endif
# if (defined RTE_CONST_I_C03_ALDW_VIBMOT_STAT_LIN_FLT) || (defined I_C03_ALDW_VIBMOT_STAT_LIN_FLT)
#  if (!defined RTE_CONST_I_C03_ALDW_VIBMOT_STAT_LIN_FLT) || (RTE_CONST_I_C03_ALDW_VIBMOT_STAT_LIN_FLT != 6u)
#   error "Enumeration constant <I_C03_ALDW_VIBMOT_STAT_LIN_FLT> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_ALDW_VIBMOT_STAT_LIN_FLT (6u)
#  define I_C03_ALDW_VIBMOT_STAT_LIN_FLT ((c03_ALDW_VibMot_Stat)6u)
# endif
# if (defined RTE_CONST_I_C03_ALDW_VIBMOT_STAT_SNA) || (defined I_C03_ALDW_VIBMOT_STAT_SNA)
#  if (!defined RTE_CONST_I_C03_ALDW_VIBMOT_STAT_SNA) || (RTE_CONST_I_C03_ALDW_VIBMOT_STAT_SNA != 7u)
#   error "Enumeration constant <I_C03_ALDW_VIBMOT_STAT_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_ALDW_VIBMOT_STAT_SNA (7u)
#  define I_C03_ALDW_VIBMOT_STAT_SNA ((c03_ALDW_VibMot_Stat)7u)
# endif

# define Rte_TypeDef_c03_ALDW_Warn_Rq
typedef uint8 c03_ALDW_Warn_Rq;
# define c03_ALDW_Warn_Rq_LowerLimit ((c03_ALDW_Warn_Rq)0u)
# define c03_ALDW_Warn_Rq_UpperLimit ((c03_ALDW_Warn_Rq)7u)
# define Rte_InvalidValue_c03_ALDW_Warn_Rq ((c03_ALDW_Warn_Rq)7u)
# if (defined RTE_CONST_I_C03_ALDW_WARN_RQ_IDLE) || (defined I_C03_ALDW_WARN_RQ_IDLE)
#  if (!defined RTE_CONST_I_C03_ALDW_WARN_RQ_IDLE) || (RTE_CONST_I_C03_ALDW_WARN_RQ_IDLE != 0u)
#   error "Enumeration constant <I_C03_ALDW_WARN_RQ_IDLE> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_ALDW_WARN_RQ_IDLE (0u)
#  define I_C03_ALDW_WARN_RQ_IDLE ((c03_ALDW_Warn_Rq)0u)
# endif
# if (defined RTE_CONST_I_C03_ALDW_WARN_RQ_WARN_LT) || (defined I_C03_ALDW_WARN_RQ_WARN_LT)
#  if (!defined RTE_CONST_I_C03_ALDW_WARN_RQ_WARN_LT) || (RTE_CONST_I_C03_ALDW_WARN_RQ_WARN_LT != 1u)
#   error "Enumeration constant <I_C03_ALDW_WARN_RQ_WARN_LT> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_ALDW_WARN_RQ_WARN_LT (1u)
#  define I_C03_ALDW_WARN_RQ_WARN_LT ((c03_ALDW_Warn_Rq)1u)
# endif
# if (defined RTE_CONST_I_C03_ALDW_WARN_RQ_WARN_RT) || (defined I_C03_ALDW_WARN_RQ_WARN_RT)
#  if (!defined RTE_CONST_I_C03_ALDW_WARN_RQ_WARN_RT) || (RTE_CONST_I_C03_ALDW_WARN_RQ_WARN_RT != 2u)
#   error "Enumeration constant <I_C03_ALDW_WARN_RQ_WARN_RT> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_ALDW_WARN_RQ_WARN_RT (2u)
#  define I_C03_ALDW_WARN_RQ_WARN_RT ((c03_ALDW_Warn_Rq)2u)
# endif
# if (defined RTE_CONST_I_C03_ALDW_WARN_RQ_SNA) || (defined I_C03_ALDW_WARN_RQ_SNA)
#  if (!defined RTE_CONST_I_C03_ALDW_WARN_RQ_SNA) || (RTE_CONST_I_C03_ALDW_WARN_RQ_SNA != 7u)
#   error "Enumeration constant <I_C03_ALDW_WARN_RQ_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_ALDW_WARN_RQ_SNA (7u)
#  define I_C03_ALDW_WARN_RQ_SNA ((c03_ALDW_Warn_Rq)7u)
# endif

# define Rte_TypeDef_c03_DTQ_Ctrl_Stat
typedef uint8 c03_DTQ_Ctrl_Stat;
# define c03_DTQ_Ctrl_Stat_LowerLimit ((c03_DTQ_Ctrl_Stat)0u)
# define c03_DTQ_Ctrl_Stat_UpperLimit ((c03_DTQ_Ctrl_Stat)7u)
# define Rte_InvalidValue_c03_DTQ_Ctrl_Stat ((c03_DTQ_Ctrl_Stat)7u)
# if (defined RTE_CONST_I_C03_DTQ_CTRL_STAT_DTQ_OFF) || (defined I_C03_DTQ_CTRL_STAT_DTQ_OFF)
#  if (!defined RTE_CONST_I_C03_DTQ_CTRL_STAT_DTQ_OFF) || (RTE_CONST_I_C03_DTQ_CTRL_STAT_DTQ_OFF != 0u)
#   error "Enumeration constant <I_C03_DTQ_CTRL_STAT_DTQ_OFF> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_DTQ_CTRL_STAT_DTQ_OFF (0u)
#  define I_C03_DTQ_CTRL_STAT_DTQ_OFF ((c03_DTQ_Ctrl_Stat)0u)
# endif
# if (defined RTE_CONST_I_C03_DTQ_CTRL_STAT_DTQ_ON_NOCORR) || (defined I_C03_DTQ_CTRL_STAT_DTQ_ON_NOCORR)
#  if (!defined RTE_CONST_I_C03_DTQ_CTRL_STAT_DTQ_ON_NOCORR) || (RTE_CONST_I_C03_DTQ_CTRL_STAT_DTQ_ON_NOCORR != 1u)
#   error "Enumeration constant <I_C03_DTQ_CTRL_STAT_DTQ_ON_NOCORR> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_DTQ_CTRL_STAT_DTQ_ON_NOCORR (1u)
#  define I_C03_DTQ_CTRL_STAT_DTQ_ON_NOCORR ((c03_DTQ_Ctrl_Stat)1u)
# endif
# if (defined RTE_CONST_I_C03_DTQ_CTRL_STAT_DTQ_ON_CORR) || (defined I_C03_DTQ_CTRL_STAT_DTQ_ON_CORR)
#  if (!defined RTE_CONST_I_C03_DTQ_CTRL_STAT_DTQ_ON_CORR) || (RTE_CONST_I_C03_DTQ_CTRL_STAT_DTQ_ON_CORR != 2u)
#   error "Enumeration constant <I_C03_DTQ_CTRL_STAT_DTQ_ON_CORR> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_DTQ_CTRL_STAT_DTQ_ON_CORR (2u)
#  define I_C03_DTQ_CTRL_STAT_DTQ_ON_CORR ((c03_DTQ_Ctrl_Stat)2u)
# endif
# if (defined RTE_CONST_I_C03_DTQ_CTRL_STAT_DTQ_ON_CORR_CAN) || (defined I_C03_DTQ_CTRL_STAT_DTQ_ON_CORR_CAN)
#  if (!defined RTE_CONST_I_C03_DTQ_CTRL_STAT_DTQ_ON_CORR_CAN) || (RTE_CONST_I_C03_DTQ_CTRL_STAT_DTQ_ON_CORR_CAN != 3u)
#   error "Enumeration constant <I_C03_DTQ_CTRL_STAT_DTQ_ON_CORR_CAN> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_DTQ_CTRL_STAT_DTQ_ON_CORR_CAN (3u)
#  define I_C03_DTQ_CTRL_STAT_DTQ_ON_CORR_CAN ((c03_DTQ_Ctrl_Stat)3u)
# endif
# if (defined RTE_CONST_I_C03_DTQ_CTRL_STAT_DTQ_SYSERR) || (defined I_C03_DTQ_CTRL_STAT_DTQ_SYSERR)
#  if (!defined RTE_CONST_I_C03_DTQ_CTRL_STAT_DTQ_SYSERR) || (RTE_CONST_I_C03_DTQ_CTRL_STAT_DTQ_SYSERR != 4u)
#   error "Enumeration constant <I_C03_DTQ_CTRL_STAT_DTQ_SYSERR> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_DTQ_CTRL_STAT_DTQ_SYSERR (4u)
#  define I_C03_DTQ_CTRL_STAT_DTQ_SYSERR ((c03_DTQ_Ctrl_Stat)4u)
# endif
# if (defined RTE_CONST_I_C03_DTQ_CTRL_STAT_NDEF5) || (defined I_C03_DTQ_CTRL_STAT_NDEF5)
#  if (!defined RTE_CONST_I_C03_DTQ_CTRL_STAT_NDEF5) || (RTE_CONST_I_C03_DTQ_CTRL_STAT_NDEF5 != 5u)
#   error "Enumeration constant <I_C03_DTQ_CTRL_STAT_NDEF5> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_DTQ_CTRL_STAT_NDEF5 (5u)
#  define I_C03_DTQ_CTRL_STAT_NDEF5 ((c03_DTQ_Ctrl_Stat)5u)
# endif
# if (defined RTE_CONST_I_C03_DTQ_CTRL_STAT_SNA) || (defined I_C03_DTQ_CTRL_STAT_SNA)
#  if (!defined RTE_CONST_I_C03_DTQ_CTRL_STAT_SNA) || (RTE_CONST_I_C03_DTQ_CTRL_STAT_SNA != 7u)
#   error "Enumeration constant <I_C03_DTQ_CTRL_STAT_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_DTQ_CTRL_STAT_SNA (7u)
#  define I_C03_DTQ_CTRL_STAT_SNA ((c03_DTQ_Ctrl_Stat)7u)
# endif

# define Rte_TypeDef_c03_DTQ_ObjStat
typedef uint8 c03_DTQ_ObjStat;
# define c03_DTQ_ObjStat_LowerLimit ((c03_DTQ_ObjStat)0u)
# define c03_DTQ_ObjStat_UpperLimit ((c03_DTQ_ObjStat)7u)
# define Rte_InvalidValue_c03_DTQ_ObjStat ((c03_DTQ_ObjStat)7u)
# if (defined RTE_CONST_I_C03_DTQ_OBJSTAT_N_DTCT) || (defined I_C03_DTQ_OBJSTAT_N_DTCT)
#  if (!defined RTE_CONST_I_C03_DTQ_OBJSTAT_N_DTCT) || (RTE_CONST_I_C03_DTQ_OBJSTAT_N_DTCT != 0u)
#   error "Enumeration constant <I_C03_DTQ_OBJSTAT_N_DTCT> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_DTQ_OBJSTAT_N_DTCT (0u)
#  define I_C03_DTQ_OBJSTAT_N_DTCT ((c03_DTQ_ObjStat)0u)
# endif
# if (defined RTE_CONST_I_C03_DTQ_OBJSTAT_DTCT_N_TRACK) || (defined I_C03_DTQ_OBJSTAT_DTCT_N_TRACK)
#  if (!defined RTE_CONST_I_C03_DTQ_OBJSTAT_DTCT_N_TRACK) || (RTE_CONST_I_C03_DTQ_OBJSTAT_DTCT_N_TRACK != 1u)
#   error "Enumeration constant <I_C03_DTQ_OBJSTAT_DTCT_N_TRACK> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_DTQ_OBJSTAT_DTCT_N_TRACK (1u)
#  define I_C03_DTQ_OBJSTAT_DTCT_N_TRACK ((c03_DTQ_ObjStat)1u)
# endif
# if (defined RTE_CONST_I_C03_DTQ_OBJSTAT_DTCT_TRACK) || (defined I_C03_DTQ_OBJSTAT_DTCT_TRACK)
#  if (!defined RTE_CONST_I_C03_DTQ_OBJSTAT_DTCT_TRACK) || (RTE_CONST_I_C03_DTQ_OBJSTAT_DTCT_TRACK != 2u)
#   error "Enumeration constant <I_C03_DTQ_OBJSTAT_DTCT_TRACK> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_DTQ_OBJSTAT_DTCT_TRACK (2u)
#  define I_C03_DTQ_OBJSTAT_DTCT_TRACK ((c03_DTQ_ObjStat)2u)
# endif
# if (defined RTE_CONST_I_C03_DTQ_OBJSTAT_PART_OCCL_TRACK) || (defined I_C03_DTQ_OBJSTAT_PART_OCCL_TRACK)
#  if (!defined RTE_CONST_I_C03_DTQ_OBJSTAT_PART_OCCL_TRACK) || (RTE_CONST_I_C03_DTQ_OBJSTAT_PART_OCCL_TRACK != 3u)
#   error "Enumeration constant <I_C03_DTQ_OBJSTAT_PART_OCCL_TRACK> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_DTQ_OBJSTAT_PART_OCCL_TRACK (3u)
#  define I_C03_DTQ_OBJSTAT_PART_OCCL_TRACK ((c03_DTQ_ObjStat)3u)
# endif
# if (defined RTE_CONST_I_C03_DTQ_OBJSTAT_PART_VSBL_TRACK) || (defined I_C03_DTQ_OBJSTAT_PART_VSBL_TRACK)
#  if (!defined RTE_CONST_I_C03_DTQ_OBJSTAT_PART_VSBL_TRACK) || (RTE_CONST_I_C03_DTQ_OBJSTAT_PART_VSBL_TRACK != 4u)
#   error "Enumeration constant <I_C03_DTQ_OBJSTAT_PART_VSBL_TRACK> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_DTQ_OBJSTAT_PART_VSBL_TRACK (4u)
#  define I_C03_DTQ_OBJSTAT_PART_VSBL_TRACK ((c03_DTQ_ObjStat)4u)
# endif
# if (defined RTE_CONST_I_C03_DTQ_OBJSTAT_PART_OCCL_EXTPOL) || (defined I_C03_DTQ_OBJSTAT_PART_OCCL_EXTPOL)
#  if (!defined RTE_CONST_I_C03_DTQ_OBJSTAT_PART_OCCL_EXTPOL) || (RTE_CONST_I_C03_DTQ_OBJSTAT_PART_OCCL_EXTPOL != 5u)
#   error "Enumeration constant <I_C03_DTQ_OBJSTAT_PART_OCCL_EXTPOL> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_DTQ_OBJSTAT_PART_OCCL_EXTPOL (5u)
#  define I_C03_DTQ_OBJSTAT_PART_OCCL_EXTPOL ((c03_DTQ_ObjStat)5u)
# endif
# if (defined RTE_CONST_I_C03_DTQ_OBJSTAT_COMPL_OCCL_EXTPOL) || (defined I_C03_DTQ_OBJSTAT_COMPL_OCCL_EXTPOL)
#  if (!defined RTE_CONST_I_C03_DTQ_OBJSTAT_COMPL_OCCL_EXTPOL) || (RTE_CONST_I_C03_DTQ_OBJSTAT_COMPL_OCCL_EXTPOL != 6u)
#   error "Enumeration constant <I_C03_DTQ_OBJSTAT_COMPL_OCCL_EXTPOL> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_DTQ_OBJSTAT_COMPL_OCCL_EXTPOL (6u)
#  define I_C03_DTQ_OBJSTAT_COMPL_OCCL_EXTPOL ((c03_DTQ_ObjStat)6u)
# endif
# if (defined RTE_CONST_I_C03_DTQ_OBJSTAT_SNA) || (defined I_C03_DTQ_OBJSTAT_SNA)
#  if (!defined RTE_CONST_I_C03_DTQ_OBJSTAT_SNA) || (RTE_CONST_I_C03_DTQ_OBJSTAT_SNA != 7u)
#   error "Enumeration constant <I_C03_DTQ_OBJSTAT_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_DTQ_OBJSTAT_SNA (7u)
#  define I_C03_DTQ_OBJSTAT_SNA ((c03_DTQ_ObjStat)7u)
# endif

# define Rte_TypeDef_c03_DTQ_Stat_Disp_Rq
typedef uint8 c03_DTQ_Stat_Disp_Rq;
# define c03_DTQ_Stat_Disp_Rq_LowerLimit ((c03_DTQ_Stat_Disp_Rq)0u)
# define c03_DTQ_Stat_Disp_Rq_UpperLimit ((c03_DTQ_Stat_Disp_Rq)7u)
# define Rte_InvalidValue_c03_DTQ_Stat_Disp_Rq ((c03_DTQ_Stat_Disp_Rq)7u)
# if (defined RTE_CONST_I_C03_DTQ_STAT_DISP_RQ_DTQ_OFF) || (defined I_C03_DTQ_STAT_DISP_RQ_DTQ_OFF)
#  if (!defined RTE_CONST_I_C03_DTQ_STAT_DISP_RQ_DTQ_OFF) || (RTE_CONST_I_C03_DTQ_STAT_DISP_RQ_DTQ_OFF != 0u)
#   error "Enumeration constant <I_C03_DTQ_STAT_DISP_RQ_DTQ_OFF> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_DTQ_STAT_DISP_RQ_DTQ_OFF (0u)
#  define I_C03_DTQ_STAT_DISP_RQ_DTQ_OFF ((c03_DTQ_Stat_Disp_Rq)0u)
# endif
# if (defined RTE_CONST_I_C03_DTQ_STAT_DISP_RQ_DTQ_ON) || (defined I_C03_DTQ_STAT_DISP_RQ_DTQ_ON)
#  if (!defined RTE_CONST_I_C03_DTQ_STAT_DISP_RQ_DTQ_ON) || (RTE_CONST_I_C03_DTQ_STAT_DISP_RQ_DTQ_ON != 1u)
#   error "Enumeration constant <I_C03_DTQ_STAT_DISP_RQ_DTQ_ON> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_DTQ_STAT_DISP_RQ_DTQ_ON (1u)
#  define I_C03_DTQ_STAT_DISP_RQ_DTQ_ON ((c03_DTQ_Stat_Disp_Rq)1u)
# endif
# if (defined RTE_CONST_I_C03_DTQ_STAT_DISP_RQ_DTQ_RDY_LKAS) || (defined I_C03_DTQ_STAT_DISP_RQ_DTQ_RDY_LKAS)
#  if (!defined RTE_CONST_I_C03_DTQ_STAT_DISP_RQ_DTQ_RDY_LKAS) || (RTE_CONST_I_C03_DTQ_STAT_DISP_RQ_DTQ_RDY_LKAS != 2u)
#   error "Enumeration constant <I_C03_DTQ_STAT_DISP_RQ_DTQ_RDY_LKAS> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_DTQ_STAT_DISP_RQ_DTQ_RDY_LKAS (2u)
#  define I_C03_DTQ_STAT_DISP_RQ_DTQ_RDY_LKAS ((c03_DTQ_Stat_Disp_Rq)2u)
# endif
# if (defined RTE_CONST_I_C03_DTQ_STAT_DISP_RQ_DTQ_RDY_LOF) || (defined I_C03_DTQ_STAT_DISP_RQ_DTQ_RDY_LOF)
#  if (!defined RTE_CONST_I_C03_DTQ_STAT_DISP_RQ_DTQ_RDY_LOF) || (RTE_CONST_I_C03_DTQ_STAT_DISP_RQ_DTQ_RDY_LOF != 3u)
#   error "Enumeration constant <I_C03_DTQ_STAT_DISP_RQ_DTQ_RDY_LOF> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_DTQ_STAT_DISP_RQ_DTQ_RDY_LOF (3u)
#  define I_C03_DTQ_STAT_DISP_RQ_DTQ_RDY_LOF ((c03_DTQ_Stat_Disp_Rq)3u)
# endif
# if (defined RTE_CONST_I_C03_DTQ_STAT_DISP_RQ_DTQ_DEF) || (defined I_C03_DTQ_STAT_DISP_RQ_DTQ_DEF)
#  if (!defined RTE_CONST_I_C03_DTQ_STAT_DISP_RQ_DTQ_DEF) || (RTE_CONST_I_C03_DTQ_STAT_DISP_RQ_DTQ_DEF != 4u)
#   error "Enumeration constant <I_C03_DTQ_STAT_DISP_RQ_DTQ_DEF> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_DTQ_STAT_DISP_RQ_DTQ_DEF (4u)
#  define I_C03_DTQ_STAT_DISP_RQ_DTQ_DEF ((c03_DTQ_Stat_Disp_Rq)4u)
# endif
# if (defined RTE_CONST_I_C03_DTQ_STAT_DISP_RQ_SNA) || (defined I_C03_DTQ_STAT_DISP_RQ_SNA)
#  if (!defined RTE_CONST_I_C03_DTQ_STAT_DISP_RQ_SNA) || (RTE_CONST_I_C03_DTQ_STAT_DISP_RQ_SNA != 7u)
#   error "Enumeration constant <I_C03_DTQ_STAT_DISP_RQ_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_DTQ_STAT_DISP_RQ_SNA (7u)
#  define I_C03_DTQ_STAT_DISP_RQ_SNA ((c03_DTQ_Stat_Disp_Rq)7u)
# endif

# define Rte_TypeDef_c03_DateTm_Stat
typedef uint8 c03_DateTm_Stat;
# define c03_DateTm_Stat_LowerLimit ((c03_DateTm_Stat)0u)
# define c03_DateTm_Stat_UpperLimit ((c03_DateTm_Stat)7u)
# define Rte_InvalidValue_c03_DateTm_Stat ((c03_DateTm_Stat)7u)
# if (defined RTE_CONST_I_C03_DATETM_STAT_INVALID) || (defined I_C03_DATETM_STAT_INVALID)
#  if (!defined RTE_CONST_I_C03_DATETM_STAT_INVALID) || (RTE_CONST_I_C03_DATETM_STAT_INVALID != 0u)
#   error "Enumeration constant <I_C03_DATETM_STAT_INVALID> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_DATETM_STAT_INVALID (0u)
#  define I_C03_DATETM_STAT_INVALID ((c03_DateTm_Stat)0u)
# endif
# if (defined RTE_CONST_I_C03_DATETM_STAT_INIT) || (defined I_C03_DATETM_STAT_INIT)
#  if (!defined RTE_CONST_I_C03_DATETM_STAT_INIT) || (RTE_CONST_I_C03_DATETM_STAT_INIT != 1u)
#   error "Enumeration constant <I_C03_DATETM_STAT_INIT> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_DATETM_STAT_INIT (1u)
#  define I_C03_DATETM_STAT_INIT ((c03_DateTm_Stat)1u)
# endif
# if (defined RTE_CONST_I_C03_DATETM_STAT_PLAUSIBLE) || (defined I_C03_DATETM_STAT_PLAUSIBLE)
#  if (!defined RTE_CONST_I_C03_DATETM_STAT_PLAUSIBLE) || (RTE_CONST_I_C03_DATETM_STAT_PLAUSIBLE != 2u)
#   error "Enumeration constant <I_C03_DATETM_STAT_PLAUSIBLE> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_DATETM_STAT_PLAUSIBLE (2u)
#  define I_C03_DATETM_STAT_PLAUSIBLE ((c03_DateTm_Stat)2u)
# endif
# if (defined RTE_CONST_I_C03_DATETM_STAT_NEW) || (defined I_C03_DATETM_STAT_NEW)
#  if (!defined RTE_CONST_I_C03_DATETM_STAT_NEW) || (RTE_CONST_I_C03_DATETM_STAT_NEW != 3u)
#   error "Enumeration constant <I_C03_DATETM_STAT_NEW> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_DATETM_STAT_NEW (3u)
#  define I_C03_DATETM_STAT_NEW ((c03_DateTm_Stat)3u)
# endif
# if (defined RTE_CONST_I_C03_DATETM_STAT_DIAG) || (defined I_C03_DATETM_STAT_DIAG)
#  if (!defined RTE_CONST_I_C03_DATETM_STAT_DIAG) || (RTE_CONST_I_C03_DATETM_STAT_DIAG != 4u)
#   error "Enumeration constant <I_C03_DATETM_STAT_DIAG> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_DATETM_STAT_DIAG (4u)
#  define I_C03_DATETM_STAT_DIAG ((c03_DateTm_Stat)4u)
# endif
# if (defined RTE_CONST_I_C03_DATETM_STAT_INCOMPLETE) || (defined I_C03_DATETM_STAT_INCOMPLETE)
#  if (!defined RTE_CONST_I_C03_DATETM_STAT_INCOMPLETE) || (RTE_CONST_I_C03_DATETM_STAT_INCOMPLETE != 5u)
#   error "Enumeration constant <I_C03_DATETM_STAT_INCOMPLETE> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_DATETM_STAT_INCOMPLETE (5u)
#  define I_C03_DATETM_STAT_INCOMPLETE ((c03_DateTm_Stat)5u)
# endif
# if (defined RTE_CONST_I_C03_DATETM_STAT_SNA) || (defined I_C03_DATETM_STAT_SNA)
#  if (!defined RTE_CONST_I_C03_DATETM_STAT_SNA) || (RTE_CONST_I_C03_DATETM_STAT_SNA != 7u)
#   error "Enumeration constant <I_C03_DATETM_STAT_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_DATETM_STAT_SNA (7u)
#  define I_C03_DATETM_STAT_SNA ((c03_DateTm_Stat)7u)
# endif

# define Rte_TypeDef_c03_ESP_Sys_Stat
typedef uint8 c03_ESP_Sys_Stat;
# define c03_ESP_Sys_Stat_LowerLimit ((c03_ESP_Sys_Stat)0u)
# define c03_ESP_Sys_Stat_UpperLimit ((c03_ESP_Sys_Stat)6u)
# if (defined RTE_CONST_I_C03_ESP_SYS_STAT_TMP_OFF) || (defined I_C03_ESP_SYS_STAT_TMP_OFF)
#  if (!defined RTE_CONST_I_C03_ESP_SYS_STAT_TMP_OFF) || (RTE_CONST_I_C03_ESP_SYS_STAT_TMP_OFF != 0u)
#   error "Enumeration constant <I_C03_ESP_SYS_STAT_TMP_OFF> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_ESP_SYS_STAT_TMP_OFF (0u)
#  define I_C03_ESP_SYS_STAT_TMP_OFF ((c03_ESP_Sys_Stat)0u)
# endif
# if (defined RTE_CONST_I_C03_ESP_SYS_STAT_NORM) || (defined I_C03_ESP_SYS_STAT_NORM)
#  if (!defined RTE_CONST_I_C03_ESP_SYS_STAT_NORM) || (RTE_CONST_I_C03_ESP_SYS_STAT_NORM != 1u)
#   error "Enumeration constant <I_C03_ESP_SYS_STAT_NORM> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_ESP_SYS_STAT_NORM (1u)
#  define I_C03_ESP_SYS_STAT_NORM ((c03_ESP_Sys_Stat)1u)
# endif
# if (defined RTE_CONST_I_C03_ESP_SYS_STAT_ERR) || (defined I_C03_ESP_SYS_STAT_ERR)
#  if (!defined RTE_CONST_I_C03_ESP_SYS_STAT_ERR) || (RTE_CONST_I_C03_ESP_SYS_STAT_ERR != 2u)
#   error "Enumeration constant <I_C03_ESP_SYS_STAT_ERR> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_ESP_SYS_STAT_ERR (2u)
#  define I_C03_ESP_SYS_STAT_ERR ((c03_ESP_Sys_Stat)2u)
# endif
# if (defined RTE_CONST_I_C03_ESP_SYS_STAT_DIAG) || (defined I_C03_ESP_SYS_STAT_DIAG)
#  if (!defined RTE_CONST_I_C03_ESP_SYS_STAT_DIAG) || (RTE_CONST_I_C03_ESP_SYS_STAT_DIAG != 3u)
#   error "Enumeration constant <I_C03_ESP_SYS_STAT_DIAG> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_ESP_SYS_STAT_DIAG (3u)
#  define I_C03_ESP_SYS_STAT_DIAG ((c03_ESP_Sys_Stat)3u)
# endif
# if (defined RTE_CONST_I_C03_ESP_SYS_STAT_EMT) || (defined I_C03_ESP_SYS_STAT_EMT)
#  if (!defined RTE_CONST_I_C03_ESP_SYS_STAT_EMT) || (RTE_CONST_I_C03_ESP_SYS_STAT_EMT != 4u)
#   error "Enumeration constant <I_C03_ESP_SYS_STAT_EMT> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_ESP_SYS_STAT_EMT (4u)
#  define I_C03_ESP_SYS_STAT_EMT ((c03_ESP_Sys_Stat)4u)
# endif
# if (defined RTE_CONST_I_C03_ESP_SYS_STAT_TBCC_ON) || (defined I_C03_ESP_SYS_STAT_TBCC_ON)
#  if (!defined RTE_CONST_I_C03_ESP_SYS_STAT_TBCC_ON) || (RTE_CONST_I_C03_ESP_SYS_STAT_TBCC_ON != 5u)
#   error "Enumeration constant <I_C03_ESP_SYS_STAT_TBCC_ON> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_ESP_SYS_STAT_TBCC_ON (5u)
#  define I_C03_ESP_SYS_STAT_TBCC_ON ((c03_ESP_Sys_Stat)5u)
# endif
# if (defined RTE_CONST_I_C03_ESP_SYS_STAT_TBCC_REG_ACTV) || (defined I_C03_ESP_SYS_STAT_TBCC_REG_ACTV)
#  if (!defined RTE_CONST_I_C03_ESP_SYS_STAT_TBCC_REG_ACTV) || (RTE_CONST_I_C03_ESP_SYS_STAT_TBCC_REG_ACTV != 6u)
#   error "Enumeration constant <I_C03_ESP_SYS_STAT_TBCC_REG_ACTV> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_ESP_SYS_STAT_TBCC_REG_ACTV (6u)
#  define I_C03_ESP_SYS_STAT_TBCC_REG_ACTV ((c03_ESP_Sys_Stat)6u)
# endif

# define Rte_TypeDef_c03_EVC_HVAC_Style
typedef uint8 c03_EVC_HVAC_Style;
# define c03_EVC_HVAC_Style_LowerLimit ((c03_EVC_HVAC_Style)0u)
# define c03_EVC_HVAC_Style_UpperLimit ((c03_EVC_HVAC_Style)7u)
# if (defined RTE_CONST_I_C03_EVC_HVAC_STYLE_AIRCOND) || (defined I_C03_EVC_HVAC_STYLE_AIRCOND)
#  if (!defined RTE_CONST_I_C03_EVC_HVAC_STYLE_AIRCOND) || (RTE_CONST_I_C03_EVC_HVAC_STYLE_AIRCOND != 0u)
#   error "Enumeration constant <I_C03_EVC_HVAC_STYLE_AIRCOND> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_EVC_HVAC_STYLE_AIRCOND (0u)
#  define I_C03_EVC_HVAC_STYLE_AIRCOND ((c03_EVC_HVAC_Style)0u)
# endif
# if (defined RTE_CONST_I_C03_EVC_HVAC_STYLE_AUTOCLIMATECTRL) || (defined I_C03_EVC_HVAC_STYLE_AUTOCLIMATECTRL)
#  if (!defined RTE_CONST_I_C03_EVC_HVAC_STYLE_AUTOCLIMATECTRL) || (RTE_CONST_I_C03_EVC_HVAC_STYLE_AUTOCLIMATECTRL != 1u)
#   error "Enumeration constant <I_C03_EVC_HVAC_STYLE_AUTOCLIMATECTRL> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_EVC_HVAC_STYLE_AUTOCLIMATECTRL (1u)
#  define I_C03_EVC_HVAC_STYLE_AUTOCLIMATECTRL ((c03_EVC_HVAC_Style)1u)
# endif
# if (defined RTE_CONST_I_C03_EVC_HVAC_STYLE_SNA) || (defined I_C03_EVC_HVAC_STYLE_SNA)
#  if (!defined RTE_CONST_I_C03_EVC_HVAC_STYLE_SNA) || (RTE_CONST_I_C03_EVC_HVAC_STYLE_SNA != 7u)
#   error "Enumeration constant <I_C03_EVC_HVAC_STYLE_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_EVC_HVAC_STYLE_SNA (7u)
#  define I_C03_EVC_HVAC_STYLE_SNA ((c03_EVC_HVAC_Style)7u)
# endif

# define Rte_TypeDef_c03_EVC_RoofStyle
typedef uint8 c03_EVC_RoofStyle;
# define c03_EVC_RoofStyle_LowerLimit ((c03_EVC_RoofStyle)0u)
# define c03_EVC_RoofStyle_UpperLimit ((c03_EVC_RoofStyle)7u)
# if (defined RTE_CONST_I_C03_EVC_ROOFSTYLE_PANORAMAROOF) || (defined I_C03_EVC_ROOFSTYLE_PANORAMAROOF)
#  if (!defined RTE_CONST_I_C03_EVC_ROOFSTYLE_PANORAMAROOF) || (RTE_CONST_I_C03_EVC_ROOFSTYLE_PANORAMAROOF != 0u)
#   error "Enumeration constant <I_C03_EVC_ROOFSTYLE_PANORAMAROOF> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_EVC_ROOFSTYLE_PANORAMAROOF (0u)
#  define I_C03_EVC_ROOFSTYLE_PANORAMAROOF ((c03_EVC_RoofStyle)0u)
# endif
# if (defined RTE_CONST_I_C03_EVC_ROOFSTYLE_SUNROOF) || (defined I_C03_EVC_ROOFSTYLE_SUNROOF)
#  if (!defined RTE_CONST_I_C03_EVC_ROOFSTYLE_SUNROOF) || (RTE_CONST_I_C03_EVC_ROOFSTYLE_SUNROOF != 1u)
#   error "Enumeration constant <I_C03_EVC_ROOFSTYLE_SUNROOF> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_EVC_ROOFSTYLE_SUNROOF (1u)
#  define I_C03_EVC_ROOFSTYLE_SUNROOF ((c03_EVC_RoofStyle)1u)
# endif
# if (defined RTE_CONST_I_C03_EVC_ROOFSTYLE_GLASS_VAR_TRANSP) || (defined I_C03_EVC_ROOFSTYLE_GLASS_VAR_TRANSP)
#  if (!defined RTE_CONST_I_C03_EVC_ROOFSTYLE_GLASS_VAR_TRANSP) || (RTE_CONST_I_C03_EVC_ROOFSTYLE_GLASS_VAR_TRANSP != 2u)
#   error "Enumeration constant <I_C03_EVC_ROOFSTYLE_GLASS_VAR_TRANSP> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_EVC_ROOFSTYLE_GLASS_VAR_TRANSP (2u)
#  define I_C03_EVC_ROOFSTYLE_GLASS_VAR_TRANSP ((c03_EVC_RoofStyle)2u)
# endif
# if (defined RTE_CONST_I_C03_EVC_ROOFSTYLE_SOLAR_MODULE) || (defined I_C03_EVC_ROOFSTYLE_SOLAR_MODULE)
#  if (!defined RTE_CONST_I_C03_EVC_ROOFSTYLE_SOLAR_MODULE) || (RTE_CONST_I_C03_EVC_ROOFSTYLE_SOLAR_MODULE != 3u)
#   error "Enumeration constant <I_C03_EVC_ROOFSTYLE_SOLAR_MODULE> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_EVC_ROOFSTYLE_SOLAR_MODULE (3u)
#  define I_C03_EVC_ROOFSTYLE_SOLAR_MODULE ((c03_EVC_RoofStyle)3u)
# endif
# if (defined RTE_CONST_I_C03_EVC_ROOFSTYLE_SNA) || (defined I_C03_EVC_ROOFSTYLE_SNA)
#  if (!defined RTE_CONST_I_C03_EVC_ROOFSTYLE_SNA) || (RTE_CONST_I_C03_EVC_ROOFSTYLE_SNA != 7u)
#   error "Enumeration constant <I_C03_EVC_ROOFSTYLE_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_EVC_ROOFSTYLE_SNA (7u)
#  define I_C03_EVC_ROOFSTYLE_SNA ((c03_EVC_RoofStyle)7u)
# endif

# define Rte_TypeDef_c03_EVC_TPM_Style
typedef uint8 c03_EVC_TPM_Style;
# define c03_EVC_TPM_Style_LowerLimit ((c03_EVC_TPM_Style)0u)
# define c03_EVC_TPM_Style_UpperLimit ((c03_EVC_TPM_Style)7u)
# if (defined RTE_CONST_I_C03_EVC_TPM_STYLE_INFLPRESSCTRL_LOW) || (defined I_C03_EVC_TPM_STYLE_INFLPRESSCTRL_LOW)
#  if (!defined RTE_CONST_I_C03_EVC_TPM_STYLE_INFLPRESSCTRL_LOW) || (RTE_CONST_I_C03_EVC_TPM_STYLE_INFLPRESSCTRL_LOW != 0u)
#   error "Enumeration constant <I_C03_EVC_TPM_STYLE_INFLPRESSCTRL_LOW> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_EVC_TPM_STYLE_INFLPRESSCTRL_LOW (0u)
#  define I_C03_EVC_TPM_STYLE_INFLPRESSCTRL_LOW ((c03_EVC_TPM_Style)0u)
# endif
# if (defined RTE_CONST_I_C03_EVC_TPM_STYLE_INFLPRESSCTRL_HIGHMID) || (defined I_C03_EVC_TPM_STYLE_INFLPRESSCTRL_HIGHMID)
#  if (!defined RTE_CONST_I_C03_EVC_TPM_STYLE_INFLPRESSCTRL_HIGHMID) || (RTE_CONST_I_C03_EVC_TPM_STYLE_INFLPRESSCTRL_HIGHMID != 1u)
#   error "Enumeration constant <I_C03_EVC_TPM_STYLE_INFLPRESSCTRL_HIGHMID> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_EVC_TPM_STYLE_INFLPRESSCTRL_HIGHMID (1u)
#  define I_C03_EVC_TPM_STYLE_INFLPRESSCTRL_HIGHMID ((c03_EVC_TPM_Style)1u)
# endif
# if (defined RTE_CONST_I_C03_EVC_TPM_STYLE_RUNFLATIND) || (defined I_C03_EVC_TPM_STYLE_RUNFLATIND)
#  if (!defined RTE_CONST_I_C03_EVC_TPM_STYLE_RUNFLATIND) || (RTE_CONST_I_C03_EVC_TPM_STYLE_RUNFLATIND != 2u)
#   error "Enumeration constant <I_C03_EVC_TPM_STYLE_RUNFLATIND> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_EVC_TPM_STYLE_RUNFLATIND (2u)
#  define I_C03_EVC_TPM_STYLE_RUNFLATIND ((c03_EVC_TPM_Style)2u)
# endif
# if (defined RTE_CONST_I_C03_EVC_TPM_STYLE_SNA) || (defined I_C03_EVC_TPM_STYLE_SNA)
#  if (!defined RTE_CONST_I_C03_EVC_TPM_STYLE_SNA) || (RTE_CONST_I_C03_EVC_TPM_STYLE_SNA != 7u)
#   error "Enumeration constant <I_C03_EVC_TPM_STYLE_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_EVC_TPM_STYLE_SNA (7u)
#  define I_C03_EVC_TPM_STYLE_SNA ((c03_EVC_TPM_Style)7u)
# endif

# define Rte_TypeDef_c03_EngRun_Stat
//typedef uint8 c03_EngRun_Stat;
//# define c03_EngRun_Stat_LowerLimit ((c03_EngRun_Stat)0u)
//# define c03_EngRun_Stat_UpperLimit ((c03_EngRun_Stat)7u)
//# define Rte_InvalidValue_c03_EngRun_Stat ((c03_EngRun_Stat)7u)
//# if (defined RTE_CONST_I_C03_ENGRUN_STAT_STOP) || (defined I_C03_ENGRUN_STAT_STOP)
//#  if (!defined RTE_CONST_I_C03_ENGRUN_STAT_STOP) || (RTE_CONST_I_C03_ENGRUN_STAT_STOP != 0u)
//#   error "Enumeration constant <I_C03_ENGRUN_STAT_STOP> conflicts with another constant."
//#  endif
//# else
//#  define RTE_CONST_I_C03_ENGRUN_STAT_STOP (0u)
//#  define I_C03_ENGRUN_STAT_STOP ((c03_EngRun_Stat)0u)
//# endif
//# if (defined RTE_CONST_I_C03_ENGRUN_STAT_START) || (defined I_C03_ENGRUN_STAT_START)
//#  if (!defined RTE_CONST_I_C03_ENGRUN_STAT_START) || (RTE_CONST_I_C03_ENGRUN_STAT_START != 1u)
//#   error "Enumeration constant <I_C03_ENGRUN_STAT_START> conflicts with another constant."
//#  endif
//# else
//#  define RTE_CONST_I_C03_ENGRUN_STAT_START (1u)
//#  define I_C03_ENGRUN_STAT_START ((c03_EngRun_Stat)1u)
//# endif
//# if (defined RTE_CONST_I_C03_ENGRUN_STAT_IDLE_UNSTBL) || (defined I_C03_ENGRUN_STAT_IDLE_UNSTBL)
//#  if (!defined RTE_CONST_I_C03_ENGRUN_STAT_IDLE_UNSTBL) || (RTE_CONST_I_C03_ENGRUN_STAT_IDLE_UNSTBL != 2u)
//#   error "Enumeration constant <I_C03_ENGRUN_STAT_IDLE_UNSTBL> conflicts with another constant."
//#  endif
//# else
//#  define RTE_CONST_I_C03_ENGRUN_STAT_IDLE_UNSTBL (2u)
//#  define I_C03_ENGRUN_STAT_IDLE_UNSTBL ((c03_EngRun_Stat)2u)
//# endif
//# if (defined RTE_CONST_I_C03_ENGRUN_STAT_IDLE_STBL) || (defined I_C03_ENGRUN_STAT_IDLE_STBL)
//#  if (!defined RTE_CONST_I_C03_ENGRUN_STAT_IDLE_STBL) || (RTE_CONST_I_C03_ENGRUN_STAT_IDLE_STBL != 3u)
//#   error "Enumeration constant <I_C03_ENGRUN_STAT_IDLE_STBL> conflicts with another constant."
//#  endif
//# else
//#  define RTE_CONST_I_C03_ENGRUN_STAT_IDLE_STBL (3u)
//#  define I_C03_ENGRUN_STAT_IDLE_STBL ((c03_EngRun_Stat)3u)
//# endif
//# if (defined RTE_CONST_I_C03_ENGRUN_STAT_UNLIMITED) || (defined I_C03_ENGRUN_STAT_UNLIMITED)
//#  if (!defined RTE_CONST_I_C03_ENGRUN_STAT_UNLIMITED) || (RTE_CONST_I_C03_ENGRUN_STAT_UNLIMITED != 4u)
//#   error "Enumeration constant <I_C03_ENGRUN_STAT_UNLIMITED> conflicts with another constant."
//#  endif
//# else
//#  define RTE_CONST_I_C03_ENGRUN_STAT_UNLIMITED (4u)
//#  define I_C03_ENGRUN_STAT_UNLIMITED ((c03_EngRun_Stat)4u)
//# endif
//# if (defined RTE_CONST_I_C03_ENGRUN_STAT_LIMITED) || (defined I_C03_ENGRUN_STAT_LIMITED)
//#  if (!defined RTE_CONST_I_C03_ENGRUN_STAT_LIMITED) || (RTE_CONST_I_C03_ENGRUN_STAT_LIMITED != 5u)
//#   error "Enumeration constant <I_C03_ENGRUN_STAT_LIMITED> conflicts with another constant."
//#  endif
//# else
//#  define RTE_CONST_I_C03_ENGRUN_STAT_LIMITED (5u)
//#  define I_C03_ENGRUN_STAT_LIMITED ((c03_EngRun_Stat)5u)
//# endif
//# if (defined RTE_CONST_I_C03_ENGRUN_STAT_NDEF6) || (defined I_C03_ENGRUN_STAT_NDEF6)
//#  if (!defined RTE_CONST_I_C03_ENGRUN_STAT_NDEF6) || (RTE_CONST_I_C03_ENGRUN_STAT_NDEF6 != 6u)
//#   error "Enumeration constant <I_C03_ENGRUN_STAT_NDEF6> conflicts with another constant."
//#  endif
//# else
//#  define RTE_CONST_I_C03_ENGRUN_STAT_NDEF6 (6u)
//#  define I_C03_ENGRUN_STAT_NDEF6 ((c03_EngRun_Stat)6u)
//# endif
//# if (defined RTE_CONST_I_C03_ENGRUN_STAT_SNA) || (defined I_C03_ENGRUN_STAT_SNA)
//#  if (!defined RTE_CONST_I_C03_ENGRUN_STAT_SNA) || (RTE_CONST_I_C03_ENGRUN_STAT_SNA != 7u)
//#   error "Enumeration constant <I_C03_ENGRUN_STAT_SNA> conflicts with another constant."
//#  endif
//# else
//#  define RTE_CONST_I_C03_ENGRUN_STAT_SNA (7u)
//#  define I_C03_ENGRUN_STAT_SNA ((c03_EngRun_Stat)7u)
//# endif

# define Rte_TypeDef_c03_FTW_PressDrop_Stat
typedef uint8 c03_FTW_PressDrop_Stat;
# define c03_FTW_PressDrop_Stat_LowerLimit ((c03_FTW_PressDrop_Stat)0u)
# define c03_FTW_PressDrop_Stat_UpperLimit ((c03_FTW_PressDrop_Stat)7u)
# define Rte_InvalidValue_c03_FTW_PressDrop_Stat ((c03_FTW_PressDrop_Stat)7u)
# if (defined RTE_CONST_I_C03_FTW_PRESSDROP_STAT_OK) || (defined I_C03_FTW_PRESSDROP_STAT_OK)
#  if (!defined RTE_CONST_I_C03_FTW_PRESSDROP_STAT_OK) || (RTE_CONST_I_C03_FTW_PRESSDROP_STAT_OK != 0u)
#   error "Enumeration constant <I_C03_FTW_PRESSDROP_STAT_OK> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_FTW_PRESSDROP_STAT_OK (0u)
#  define I_C03_FTW_PRESSDROP_STAT_OK ((c03_FTW_PressDrop_Stat)0u)
# endif
# if (defined RTE_CONST_I_C03_FTW_PRESSDROP_STAT_WARN_EXPECT) || (defined I_C03_FTW_PRESSDROP_STAT_WARN_EXPECT)
#  if (!defined RTE_CONST_I_C03_FTW_PRESSDROP_STAT_WARN_EXPECT) || (RTE_CONST_I_C03_FTW_PRESSDROP_STAT_WARN_EXPECT != 1u)
#   error "Enumeration constant <I_C03_FTW_PRESSDROP_STAT_WARN_EXPECT> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_FTW_PRESSDROP_STAT_WARN_EXPECT (1u)
#  define I_C03_FTW_PRESSDROP_STAT_WARN_EXPECT ((c03_FTW_PressDrop_Stat)1u)
# endif
# if (defined RTE_CONST_I_C03_FTW_PRESSDROP_STAT_WARN_ACTV) || (defined I_C03_FTW_PRESSDROP_STAT_WARN_ACTV)
#  if (!defined RTE_CONST_I_C03_FTW_PRESSDROP_STAT_WARN_ACTV) || (RTE_CONST_I_C03_FTW_PRESSDROP_STAT_WARN_ACTV != 2u)
#   error "Enumeration constant <I_C03_FTW_PRESSDROP_STAT_WARN_ACTV> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_FTW_PRESSDROP_STAT_WARN_ACTV (2u)
#  define I_C03_FTW_PRESSDROP_STAT_WARN_ACTV ((c03_FTW_PressDrop_Stat)2u)
# endif
# if (defined RTE_CONST_I_C03_FTW_PRESSDROP_STAT_WARN_LAST_IGN_CYC) || (defined I_C03_FTW_PRESSDROP_STAT_WARN_LAST_IGN_CYC)
#  if (!defined RTE_CONST_I_C03_FTW_PRESSDROP_STAT_WARN_LAST_IGN_CYC) || (RTE_CONST_I_C03_FTW_PRESSDROP_STAT_WARN_LAST_IGN_CYC != 3u)
#   error "Enumeration constant <I_C03_FTW_PRESSDROP_STAT_WARN_LAST_IGN_CYC> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_FTW_PRESSDROP_STAT_WARN_LAST_IGN_CYC (3u)
#  define I_C03_FTW_PRESSDROP_STAT_WARN_LAST_IGN_CYC ((c03_FTW_PressDrop_Stat)3u)
# endif
# if (defined RTE_CONST_I_C03_FTW_PRESSDROP_STAT_SNA) || (defined I_C03_FTW_PRESSDROP_STAT_SNA)
#  if (!defined RTE_CONST_I_C03_FTW_PRESSDROP_STAT_SNA) || (RTE_CONST_I_C03_FTW_PRESSDROP_STAT_SNA != 7u)
#   error "Enumeration constant <I_C03_FTW_PRESSDROP_STAT_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_FTW_PRESSDROP_STAT_SNA (7u)
#  define I_C03_FTW_PRESSDROP_STAT_SNA ((c03_FTW_PressDrop_Stat)7u)
# endif

# define Rte_TypeDef_c03_IHC_Plus_LgtStyle
typedef uint8 c03_IHC_Plus_LgtStyle;
# define c03_IHC_Plus_LgtStyle_LowerLimit ((c03_IHC_Plus_LgtStyle)0u)
# define c03_IHC_Plus_LgtStyle_UpperLimit ((c03_IHC_Plus_LgtStyle)7u)
# define Rte_InvalidValue_c03_IHC_Plus_LgtStyle ((c03_IHC_Plus_LgtStyle)7u)
# if (defined RTE_CONST_I_C03_IHC_PLUS_LGTSTYLE_SYMM) || (defined I_C03_IHC_PLUS_LGTSTYLE_SYMM)
#  if (!defined RTE_CONST_I_C03_IHC_PLUS_LGTSTYLE_SYMM) || (RTE_CONST_I_C03_IHC_PLUS_LGTSTYLE_SYMM != 0u)
#   error "Enumeration constant <I_C03_IHC_PLUS_LGTSTYLE_SYMM> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_IHC_PLUS_LGTSTYLE_SYMM (0u)
#  define I_C03_IHC_PLUS_LGTSTYLE_SYMM ((c03_IHC_Plus_LgtStyle)0u)
# endif
# if (defined RTE_CONST_I_C03_IHC_PLUS_LGTSTYLE_COUNTRY) || (defined I_C03_IHC_PLUS_LGTSTYLE_COUNTRY)
#  if (!defined RTE_CONST_I_C03_IHC_PLUS_LGTSTYLE_COUNTRY) || (RTE_CONST_I_C03_IHC_PLUS_LGTSTYLE_COUNTRY != 1u)
#   error "Enumeration constant <I_C03_IHC_PLUS_LGTSTYLE_COUNTRY> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_IHC_PLUS_LGTSTYLE_COUNTRY (1u)
#  define I_C03_IHC_PLUS_LGTSTYLE_COUNTRY ((c03_IHC_Plus_LgtStyle)1u)
# endif
# if (defined RTE_CONST_I_C03_IHC_PLUS_LGTSTYLE_MOTORWAY) || (defined I_C03_IHC_PLUS_LGTSTYLE_MOTORWAY)
#  if (!defined RTE_CONST_I_C03_IHC_PLUS_LGTSTYLE_MOTORWAY) || (RTE_CONST_I_C03_IHC_PLUS_LGTSTYLE_MOTORWAY != 2u)
#   error "Enumeration constant <I_C03_IHC_PLUS_LGTSTYLE_MOTORWAY> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_IHC_PLUS_LGTSTYLE_MOTORWAY (2u)
#  define I_C03_IHC_PLUS_LGTSTYLE_MOTORWAY ((c03_IHC_Plus_LgtStyle)2u)
# endif
# if (defined RTE_CONST_I_C03_IHC_PLUS_LGTSTYLE_PART_HIBM) || (defined I_C03_IHC_PLUS_LGTSTYLE_PART_HIBM)
#  if (!defined RTE_CONST_I_C03_IHC_PLUS_LGTSTYLE_PART_HIBM) || (RTE_CONST_I_C03_IHC_PLUS_LGTSTYLE_PART_HIBM != 3u)
#   error "Enumeration constant <I_C03_IHC_PLUS_LGTSTYLE_PART_HIBM> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_IHC_PLUS_LGTSTYLE_PART_HIBM (3u)
#  define I_C03_IHC_PLUS_LGTSTYLE_PART_HIBM ((c03_IHC_Plus_LgtStyle)3u)
# endif
# if (defined RTE_CONST_I_C03_IHC_PLUS_LGTSTYLE_FULL_HIBM) || (defined I_C03_IHC_PLUS_LGTSTYLE_FULL_HIBM)
#  if (!defined RTE_CONST_I_C03_IHC_PLUS_LGTSTYLE_FULL_HIBM) || (RTE_CONST_I_C03_IHC_PLUS_LGTSTYLE_FULL_HIBM != 4u)
#   error "Enumeration constant <I_C03_IHC_PLUS_LGTSTYLE_FULL_HIBM> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_IHC_PLUS_LGTSTYLE_FULL_HIBM (4u)
#  define I_C03_IHC_PLUS_LGTSTYLE_FULL_HIBM ((c03_IHC_Plus_LgtStyle)4u)
# endif
# if (defined RTE_CONST_I_C03_IHC_PLUS_LGTSTYLE_SNA) || (defined I_C03_IHC_PLUS_LGTSTYLE_SNA)
#  if (!defined RTE_CONST_I_C03_IHC_PLUS_LGTSTYLE_SNA) || (RTE_CONST_I_C03_IHC_PLUS_LGTSTYLE_SNA != 7u)
#   error "Enumeration constant <I_C03_IHC_PLUS_LGTSTYLE_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_IHC_PLUS_LGTSTYLE_SNA (7u)
#  define I_C03_IHC_PLUS_LGTSTYLE_SNA ((c03_IHC_Plus_LgtStyle)7u)
# endif

# define Rte_TypeDef_c03_ISw_Stat
//typedef uint8 c03_ISw_Stat;
//# define c03_ISw_Stat_LowerLimit ((c03_ISw_Stat)0u)
//# define c03_ISw_Stat_UpperLimit ((c03_ISw_Stat)7u)
//# define Rte_InvalidValue_c03_ISw_Stat ((c03_ISw_Stat)7u)
//# if (defined RTE_CONST_I_C03_ISW_STAT_IGN_LOCK) || (defined I_C03_ISW_STAT_IGN_LOCK)
//#  if (!defined RTE_CONST_I_C03_ISW_STAT_IGN_LOCK) || (RTE_CONST_I_C03_ISW_STAT_IGN_LOCK != 0u)
//#   error "Enumeration constant <I_C03_ISW_STAT_IGN_LOCK> conflicts with another constant."
//#  endif
//# else
//#  define RTE_CONST_I_C03_ISW_STAT_IGN_LOCK (0u)
//#  define I_C03_ISW_STAT_IGN_LOCK ((c03_ISw_Stat)0u)
//# endif
//# if (defined RTE_CONST_I_C03_ISW_STAT_IGN_OFF) || (defined I_C03_ISW_STAT_IGN_OFF)
//#  if (!defined RTE_CONST_I_C03_ISW_STAT_IGN_OFF) || (RTE_CONST_I_C03_ISW_STAT_IGN_OFF != 1u)
//#   error "Enumeration constant <I_C03_ISW_STAT_IGN_OFF> conflicts with another constant."
//#  endif
//# else
//#  define RTE_CONST_I_C03_ISW_STAT_IGN_OFF (1u)
//#  define I_C03_ISW_STAT_IGN_OFF ((c03_ISw_Stat)1u)
//# endif
//# if (defined RTE_CONST_I_C03_ISW_STAT_IGN_ACC) || (defined I_C03_ISW_STAT_IGN_ACC)
//#  if (!defined RTE_CONST_I_C03_ISW_STAT_IGN_ACC) || (RTE_CONST_I_C03_ISW_STAT_IGN_ACC != 2u)
//#   error "Enumeration constant <I_C03_ISW_STAT_IGN_ACC> conflicts with another constant."
//#  endif
//# else
//#  define RTE_CONST_I_C03_ISW_STAT_IGN_ACC (2u)
//#  define I_C03_ISW_STAT_IGN_ACC ((c03_ISw_Stat)2u)
//# endif
//# if (defined RTE_CONST_I_C03_ISW_STAT_IGN_ON) || (defined I_C03_ISW_STAT_IGN_ON)
//#  if (!defined RTE_CONST_I_C03_ISW_STAT_IGN_ON) || (RTE_CONST_I_C03_ISW_STAT_IGN_ON != 4u)
//#   error "Enumeration constant <I_C03_ISW_STAT_IGN_ON> conflicts with another constant."
//#  endif
//# else
//#  define RTE_CONST_I_C03_ISW_STAT_IGN_ON (4u)
//#  define I_C03_ISW_STAT_IGN_ON ((c03_ISw_Stat)4u)
//# endif
//# if (defined RTE_CONST_I_C03_ISW_STAT_IGN_START) || (defined I_C03_ISW_STAT_IGN_START)
//#  if (!defined RTE_CONST_I_C03_ISW_STAT_IGN_START) || (RTE_CONST_I_C03_ISW_STAT_IGN_START != 5u)
//#   error "Enumeration constant <I_C03_ISW_STAT_IGN_START> conflicts with another constant."
//#  endif
//# else
//#  define RTE_CONST_I_C03_ISW_STAT_IGN_START (5u)
//#  define I_C03_ISW_STAT_IGN_START ((c03_ISw_Stat)5u)
//# endif
//# if (defined RTE_CONST_I_C03_ISW_STAT_SNA) || (defined I_C03_ISW_STAT_SNA)
//#  if (!defined RTE_CONST_I_C03_ISW_STAT_SNA) || (RTE_CONST_I_C03_ISW_STAT_SNA != 7u)
//#   error "Enumeration constant <I_C03_ISW_STAT_SNA> conflicts with another constant."
//#  endif
//# else
//#  define RTE_CONST_I_C03_ISW_STAT_SNA (7u)
//#  define I_C03_ISW_STAT_SNA ((c03_ISw_Stat)7u)
//# endif

# define Rte_TypeDef_c03_LDP_MsgDisp_Rq
typedef uint8 c03_LDP_MsgDisp_Rq;
# define c03_LDP_MsgDisp_Rq_LowerLimit ((c03_LDP_MsgDisp_Rq)0u)
# define c03_LDP_MsgDisp_Rq_UpperLimit ((c03_LDP_MsgDisp_Rq)7u)
# define Rte_InvalidValue_c03_LDP_MsgDisp_Rq ((c03_LDP_MsgDisp_Rq)7u)
# if (defined RTE_CONST_I_C03_LDP_MSGDISP_RQ_IDLE) || (defined I_C03_LDP_MSGDISP_RQ_IDLE)
#  if (!defined RTE_CONST_I_C03_LDP_MSGDISP_RQ_IDLE) || (RTE_CONST_I_C03_LDP_MSGDISP_RQ_IDLE != 0u)
#   error "Enumeration constant <I_C03_LDP_MSGDISP_RQ_IDLE> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_LDP_MSGDISP_RQ_IDLE (0u)
#  define I_C03_LDP_MSGDISP_RQ_IDLE ((c03_LDP_MsgDisp_Rq)0u)
# endif
# if (defined RTE_CONST_I_C03_LDP_MSGDISP_RQ_LDP_TEMP_NA) || (defined I_C03_LDP_MSGDISP_RQ_LDP_TEMP_NA)
#  if (!defined RTE_CONST_I_C03_LDP_MSGDISP_RQ_LDP_TEMP_NA) || (RTE_CONST_I_C03_LDP_MSGDISP_RQ_LDP_TEMP_NA != 3u)
#   error "Enumeration constant <I_C03_LDP_MSGDISP_RQ_LDP_TEMP_NA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_LDP_MSGDISP_RQ_LDP_TEMP_NA (3u)
#  define I_C03_LDP_MSGDISP_RQ_LDP_TEMP_NA ((c03_LDP_MsgDisp_Rq)3u)
# endif
# if (defined RTE_CONST_I_C03_LDP_MSGDISP_RQ_LDP_NA) || (defined I_C03_LDP_MSGDISP_RQ_LDP_NA)
#  if (!defined RTE_CONST_I_C03_LDP_MSGDISP_RQ_LDP_NA) || (RTE_CONST_I_C03_LDP_MSGDISP_RQ_LDP_NA != 4u)
#   error "Enumeration constant <I_C03_LDP_MSGDISP_RQ_LDP_NA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_LDP_MSGDISP_RQ_LDP_NA (4u)
#  define I_C03_LDP_MSGDISP_RQ_LDP_NA ((c03_LDP_MsgDisp_Rq)4u)
# endif
# if (defined RTE_CONST_I_C03_LDP_MSGDISP_RQ_SNA) || (defined I_C03_LDP_MSGDISP_RQ_SNA)
#  if (!defined RTE_CONST_I_C03_LDP_MSGDISP_RQ_SNA) || (RTE_CONST_I_C03_LDP_MSGDISP_RQ_SNA != 7u)
#   error "Enumeration constant <I_C03_LDP_MSGDISP_RQ_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_LDP_MSGDISP_RQ_SNA (7u)
#  define I_C03_LDP_MSGDISP_RQ_SNA ((c03_LDP_MsgDisp_Rq)7u)
# endif

# define Rte_TypeDef_c03_MsgTyp_1_to_7
typedef uint8 c03_MsgTyp_1_to_7;
# define c03_MsgTyp_1_to_7_LowerLimit ((c03_MsgTyp_1_to_7)0u)
# define c03_MsgTyp_1_to_7_UpperLimit ((c03_MsgTyp_1_to_7)7u)
# define Rte_InvalidValue_c03_MsgTyp_1_to_7 ((c03_MsgTyp_1_to_7)7u)
# if (defined RTE_CONST_I_C03_MSGTYP_1_TO_7_NDEF0) || (defined I_C03_MSGTYP_1_TO_7_NDEF0)
#  if (!defined RTE_CONST_I_C03_MSGTYP_1_TO_7_NDEF0) || (RTE_CONST_I_C03_MSGTYP_1_TO_7_NDEF0 != 0u)
#   error "Enumeration constant <I_C03_MSGTYP_1_TO_7_NDEF0> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_MSGTYP_1_TO_7_NDEF0 (0u)
#  define I_C03_MSGTYP_1_TO_7_NDEF0 ((c03_MsgTyp_1_to_7)0u)
# endif
# if (defined RTE_CONST_I_C03_MSGTYP_1_TO_7_POSITION) || (defined I_C03_MSGTYP_1_TO_7_POSITION)
#  if (!defined RTE_CONST_I_C03_MSGTYP_1_TO_7_POSITION) || (RTE_CONST_I_C03_MSGTYP_1_TO_7_POSITION != 1u)
#   error "Enumeration constant <I_C03_MSGTYP_1_TO_7_POSITION> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_MSGTYP_1_TO_7_POSITION (1u)
#  define I_C03_MSGTYP_1_TO_7_POSITION ((c03_MsgTyp_1_to_7)1u)
# endif
# if (defined RTE_CONST_I_C03_MSGTYP_1_TO_7_SEGMENT) || (defined I_C03_MSGTYP_1_TO_7_SEGMENT)
#  if (!defined RTE_CONST_I_C03_MSGTYP_1_TO_7_SEGMENT) || (RTE_CONST_I_C03_MSGTYP_1_TO_7_SEGMENT != 2u)
#   error "Enumeration constant <I_C03_MSGTYP_1_TO_7_SEGMENT> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_MSGTYP_1_TO_7_SEGMENT (2u)
#  define I_C03_MSGTYP_1_TO_7_SEGMENT ((c03_MsgTyp_1_to_7)2u)
# endif
# if (defined RTE_CONST_I_C03_MSGTYP_1_TO_7_STUB) || (defined I_C03_MSGTYP_1_TO_7_STUB)
#  if (!defined RTE_CONST_I_C03_MSGTYP_1_TO_7_STUB) || (RTE_CONST_I_C03_MSGTYP_1_TO_7_STUB != 3u)
#   error "Enumeration constant <I_C03_MSGTYP_1_TO_7_STUB> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_MSGTYP_1_TO_7_STUB (3u)
#  define I_C03_MSGTYP_1_TO_7_STUB ((c03_MsgTyp_1_to_7)3u)
# endif
# if (defined RTE_CONST_I_C03_MSGTYP_1_TO_7_PROFILE_SHORT) || (defined I_C03_MSGTYP_1_TO_7_PROFILE_SHORT)
#  if (!defined RTE_CONST_I_C03_MSGTYP_1_TO_7_PROFILE_SHORT) || (RTE_CONST_I_C03_MSGTYP_1_TO_7_PROFILE_SHORT != 4u)
#   error "Enumeration constant <I_C03_MSGTYP_1_TO_7_PROFILE_SHORT> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_MSGTYP_1_TO_7_PROFILE_SHORT (4u)
#  define I_C03_MSGTYP_1_TO_7_PROFILE_SHORT ((c03_MsgTyp_1_to_7)4u)
# endif
# if (defined RTE_CONST_I_C03_MSGTYP_1_TO_7_PROFILE_LONG) || (defined I_C03_MSGTYP_1_TO_7_PROFILE_LONG)
#  if (!defined RTE_CONST_I_C03_MSGTYP_1_TO_7_PROFILE_LONG) || (RTE_CONST_I_C03_MSGTYP_1_TO_7_PROFILE_LONG != 5u)
#   error "Enumeration constant <I_C03_MSGTYP_1_TO_7_PROFILE_LONG> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_MSGTYP_1_TO_7_PROFILE_LONG (5u)
#  define I_C03_MSGTYP_1_TO_7_PROFILE_LONG ((c03_MsgTyp_1_to_7)5u)
# endif
# if (defined RTE_CONST_I_C03_MSGTYP_1_TO_7_META_DATA) || (defined I_C03_MSGTYP_1_TO_7_META_DATA)
#  if (!defined RTE_CONST_I_C03_MSGTYP_1_TO_7_META_DATA) || (RTE_CONST_I_C03_MSGTYP_1_TO_7_META_DATA != 6u)
#   error "Enumeration constant <I_C03_MSGTYP_1_TO_7_META_DATA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_MSGTYP_1_TO_7_META_DATA (6u)
#  define I_C03_MSGTYP_1_TO_7_META_DATA ((c03_MsgTyp_1_to_7)6u)
# endif
# if (defined RTE_CONST_I_C03_MSGTYP_1_TO_7_SNA) || (defined I_C03_MSGTYP_1_TO_7_SNA)
#  if (!defined RTE_CONST_I_C03_MSGTYP_1_TO_7_SNA) || (RTE_CONST_I_C03_MSGTYP_1_TO_7_SNA != 7u)
#   error "Enumeration constant <I_C03_MSGTYP_1_TO_7_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_MSGTYP_1_TO_7_SNA (7u)
#  define I_C03_MSGTYP_1_TO_7_SNA ((c03_MsgTyp_1_to_7)7u)
# endif

# define Rte_TypeDef_c03_NaviSpdLmtSignType
typedef uint8 c03_NaviSpdLmtSignType;
# define c03_NaviSpdLmtSignType_LowerLimit ((c03_NaviSpdLmtSignType)0u)
# define c03_NaviSpdLmtSignType_UpperLimit ((c03_NaviSpdLmtSignType)7u)
# define Rte_InvalidValue_c03_NaviSpdLmtSignType ((c03_NaviSpdLmtSignType)7u)
# if (defined RTE_CONST_I_C03_NAVISPDLMTSIGNTYPE_NDEF0) || (defined I_C03_NAVISPDLMTSIGNTYPE_NDEF0)
#  if (!defined RTE_CONST_I_C03_NAVISPDLMTSIGNTYPE_NDEF0) || (RTE_CONST_I_C03_NAVISPDLMTSIGNTYPE_NDEF0 != 0u)
#   error "Enumeration constant <I_C03_NAVISPDLMTSIGNTYPE_NDEF0> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_NAVISPDLMTSIGNTYPE_NDEF0 (0u)
#  define I_C03_NAVISPDLMTSIGNTYPE_NDEF0 ((c03_NaviSpdLmtSignType)0u)
# endif
# if (defined RTE_CONST_I_C03_NAVISPDLMTSIGNTYPE_LIM) || (defined I_C03_NAVISPDLMTSIGNTYPE_LIM)
#  if (!defined RTE_CONST_I_C03_NAVISPDLMTSIGNTYPE_LIM) || (RTE_CONST_I_C03_NAVISPDLMTSIGNTYPE_LIM != 1u)
#   error "Enumeration constant <I_C03_NAVISPDLMTSIGNTYPE_LIM> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_NAVISPDLMTSIGNTYPE_LIM (1u)
#  define I_C03_NAVISPDLMTSIGNTYPE_LIM ((c03_NaviSpdLmtSignType)1u)
# endif
# if (defined RTE_CONST_I_C03_NAVISPDLMTSIGNTYPE_UNLIM) || (defined I_C03_NAVISPDLMTSIGNTYPE_UNLIM)
#  if (!defined RTE_CONST_I_C03_NAVISPDLMTSIGNTYPE_UNLIM) || (RTE_CONST_I_C03_NAVISPDLMTSIGNTYPE_UNLIM != 2u)
#   error "Enumeration constant <I_C03_NAVISPDLMTSIGNTYPE_UNLIM> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_NAVISPDLMTSIGNTYPE_UNLIM (2u)
#  define I_C03_NAVISPDLMTSIGNTYPE_UNLIM ((c03_NaviSpdLmtSignType)2u)
# endif
# if (defined RTE_CONST_I_C03_NAVISPDLMTSIGNTYPE_TMP) || (defined I_C03_NAVISPDLMTSIGNTYPE_TMP)
#  if (!defined RTE_CONST_I_C03_NAVISPDLMTSIGNTYPE_TMP) || (RTE_CONST_I_C03_NAVISPDLMTSIGNTYPE_TMP != 3u)
#   error "Enumeration constant <I_C03_NAVISPDLMTSIGNTYPE_TMP> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_NAVISPDLMTSIGNTYPE_TMP (3u)
#  define I_C03_NAVISPDLMTSIGNTYPE_TMP ((c03_NaviSpdLmtSignType)3u)
# endif
# if (defined RTE_CONST_I_C03_NAVISPDLMTSIGNTYPE_IMPLICIT) || (defined I_C03_NAVISPDLMTSIGNTYPE_IMPLICIT)
#  if (!defined RTE_CONST_I_C03_NAVISPDLMTSIGNTYPE_IMPLICIT) || (RTE_CONST_I_C03_NAVISPDLMTSIGNTYPE_IMPLICIT != 4u)
#   error "Enumeration constant <I_C03_NAVISPDLMTSIGNTYPE_IMPLICIT> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_NAVISPDLMTSIGNTYPE_IMPLICIT (4u)
#  define I_C03_NAVISPDLMTSIGNTYPE_IMPLICIT ((c03_NaviSpdLmtSignType)4u)
# endif
# if (defined RTE_CONST_I_C03_NAVISPDLMTSIGNTYPE_CHNG) || (defined I_C03_NAVISPDLMTSIGNTYPE_CHNG)
#  if (!defined RTE_CONST_I_C03_NAVISPDLMTSIGNTYPE_CHNG) || (RTE_CONST_I_C03_NAVISPDLMTSIGNTYPE_CHNG != 5u)
#   error "Enumeration constant <I_C03_NAVISPDLMTSIGNTYPE_CHNG> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_NAVISPDLMTSIGNTYPE_CHNG (5u)
#  define I_C03_NAVISPDLMTSIGNTYPE_CHNG ((c03_NaviSpdLmtSignType)5u)
# endif
# if (defined RTE_CONST_I_C03_NAVISPDLMTSIGNTYPE_NDEF6) || (defined I_C03_NAVISPDLMTSIGNTYPE_NDEF6)
#  if (!defined RTE_CONST_I_C03_NAVISPDLMTSIGNTYPE_NDEF6) || (RTE_CONST_I_C03_NAVISPDLMTSIGNTYPE_NDEF6 != 6u)
#   error "Enumeration constant <I_C03_NAVISPDLMTSIGNTYPE_NDEF6> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_NAVISPDLMTSIGNTYPE_NDEF6 (6u)
#  define I_C03_NAVISPDLMTSIGNTYPE_NDEF6 ((c03_NaviSpdLmtSignType)6u)
# endif
# if (defined RTE_CONST_I_C03_NAVISPDLMTSIGNTYPE_SNA) || (defined I_C03_NAVISPDLMTSIGNTYPE_SNA)
#  if (!defined RTE_CONST_I_C03_NAVISPDLMTSIGNTYPE_SNA) || (RTE_CONST_I_C03_NAVISPDLMTSIGNTYPE_SNA != 7u)
#   error "Enumeration constant <I_C03_NAVISPDLMTSIGNTYPE_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_NAVISPDLMTSIGNTYPE_SNA (7u)
#  define I_C03_NAVISPDLMTSIGNTYPE_SNA ((c03_NaviSpdLmtSignType)7u)
# endif

# define Rte_TypeDef_c03_SLA_SpdWarn_DispType
typedef uint8 c03_SLA_SpdWarn_DispType;
# define c03_SLA_SpdWarn_DispType_LowerLimit ((c03_SLA_SpdWarn_DispType)0u)
# define c03_SLA_SpdWarn_DispType_UpperLimit ((c03_SLA_SpdWarn_DispType)7u)
# define Rte_InvalidValue_c03_SLA_SpdWarn_DispType ((c03_SLA_SpdWarn_DispType)7u)
# if (defined RTE_CONST_I_C03_SLA_SPDWARN_DISPTYPE_IDLE) || (defined I_C03_SLA_SPDWARN_DISPTYPE_IDLE)
#  if (!defined RTE_CONST_I_C03_SLA_SPDWARN_DISPTYPE_IDLE) || (RTE_CONST_I_C03_SLA_SPDWARN_DISPTYPE_IDLE != 0u)
#   error "Enumeration constant <I_C03_SLA_SPDWARN_DISPTYPE_IDLE> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_SLA_SPDWARN_DISPTYPE_IDLE (0u)
#  define I_C03_SLA_SPDWARN_DISPTYPE_IDLE ((c03_SLA_SpdWarn_DispType)0u)
# endif
# if (defined RTE_CONST_I_C03_SLA_SPDWARN_DISPTYPE_WARN_RED) || (defined I_C03_SLA_SPDWARN_DISPTYPE_WARN_RED)
#  if (!defined RTE_CONST_I_C03_SLA_SPDWARN_DISPTYPE_WARN_RED) || (RTE_CONST_I_C03_SLA_SPDWARN_DISPTYPE_WARN_RED != 1u)
#   error "Enumeration constant <I_C03_SLA_SPDWARN_DISPTYPE_WARN_RED> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_SLA_SPDWARN_DISPTYPE_WARN_RED (1u)
#  define I_C03_SLA_SPDWARN_DISPTYPE_WARN_RED ((c03_SLA_SpdWarn_DispType)1u)
# endif
# if (defined RTE_CONST_I_C03_SLA_SPDWARN_DISPTYPE_SNA) || (defined I_C03_SLA_SPDWARN_DISPTYPE_SNA)
#  if (!defined RTE_CONST_I_C03_SLA_SPDWARN_DISPTYPE_SNA) || (RTE_CONST_I_C03_SLA_SPDWARN_DISPTYPE_SNA != 7u)
#   error "Enumeration constant <I_C03_SLA_SPDWARN_DISPTYPE_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_SLA_SPDWARN_DISPTYPE_SNA (7u)
#  define I_C03_SLA_SPDWARN_DISPTYPE_SNA ((c03_SLA_SpdWarn_DispType)7u)
# endif

# define Rte_TypeDef_c03_SPC_Id
typedef uint8 c03_SPC_Id;
# define c03_SPC_Id_LowerLimit ((c03_SPC_Id)0u)
# define c03_SPC_Id_UpperLimit ((c03_SPC_Id)5u)
# if (defined RTE_CONST_I_C03_SPC_ID_ASP_ADC) || (defined I_C03_SPC_ID_ASP_ADC)
#  if (!defined RTE_CONST_I_C03_SPC_ID_ASP_ADC) || (RTE_CONST_I_C03_SPC_ID_ASP_ADC != 0u)
#   error "Enumeration constant <I_C03_SPC_ID_ASP_ADC> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_SPC_ID_ASP_ADC (0u)
#  define I_C03_SPC_ID_ASP_ADC ((c03_SPC_Id)0u)
# endif
# if (defined RTE_CONST_I_C03_SPC_ID_SASP) || (defined I_C03_SPC_ID_SASP)
#  if (!defined RTE_CONST_I_C03_SPC_ID_SASP) || (RTE_CONST_I_C03_SPC_ID_SASP != 1u)
#   error "Enumeration constant <I_C03_SPC_ID_SASP> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_SPC_ID_SASP (1u)
#  define I_C03_SPC_ID_SASP ((c03_SPC_Id)1u)
# endif
# if (defined RTE_CONST_I_C03_SPC_ID_ERALC) || (defined I_C03_SPC_ID_ERALC)
#  if (!defined RTE_CONST_I_C03_SPC_ID_ERALC) || (RTE_CONST_I_C03_SPC_ID_ERALC != 2u)
#   error "Enumeration constant <I_C03_SPC_ID_ERALC> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_SPC_ID_ERALC (2u)
#  define I_C03_SPC_ID_ERALC ((c03_SPC_Id)2u)
# endif
# if (defined RTE_CONST_I_C03_SPC_ID_ABC1) || (defined I_C03_SPC_ID_ABC1)
#  if (!defined RTE_CONST_I_C03_SPC_ID_ABC1) || (RTE_CONST_I_C03_SPC_ID_ABC1 != 3u)
#   error "Enumeration constant <I_C03_SPC_ID_ABC1> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_SPC_ID_ABC1 (3u)
#  define I_C03_SPC_ID_ABC1 ((c03_SPC_Id)3u)
# endif
# if (defined RTE_CONST_I_C03_SPC_ID_ADC) || (defined I_C03_SPC_ID_ADC)
#  if (!defined RTE_CONST_I_C03_SPC_ID_ADC) || (RTE_CONST_I_C03_SPC_ID_ADC != 4u)
#   error "Enumeration constant <I_C03_SPC_ID_ADC> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_SPC_ID_ADC (4u)
#  define I_C03_SPC_ID_ADC ((c03_SPC_Id)4u)
# endif
# if (defined RTE_CONST_I_C03_SPC_ID_ASP) || (defined I_C03_SPC_ID_ASP)
#  if (!defined RTE_CONST_I_C03_SPC_ID_ASP) || (RTE_CONST_I_C03_SPC_ID_ASP != 5u)
#   error "Enumeration constant <I_C03_SPC_ID_ASP> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_SPC_ID_ASP (5u)
#  define I_C03_SPC_ID_ASP ((c03_SPC_Id)5u)
# endif

# define Rte_TypeDef_c03_StW_Lvr_Stat
typedef uint8 c03_StW_Lvr_Stat;
# define c03_StW_Lvr_Stat_LowerLimit ((c03_StW_Lvr_Stat)0u)
# define c03_StW_Lvr_Stat_UpperLimit ((c03_StW_Lvr_Stat)4u)
# if (defined RTE_CONST_I_C03_STW_LVR_STAT_NPSD) || (defined I_C03_STW_LVR_STAT_NPSD)
#  if (!defined RTE_CONST_I_C03_STW_LVR_STAT_NPSD) || (RTE_CONST_I_C03_STW_LVR_STAT_NPSD != 0u)
#   error "Enumeration constant <I_C03_STW_LVR_STAT_NPSD> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_STW_LVR_STAT_NPSD (0u)
#  define I_C03_STW_LVR_STAT_NPSD ((c03_StW_Lvr_Stat)0u)
# endif
# if (defined RTE_CONST_I_C03_STW_LVR_STAT_STW_UP) || (defined I_C03_STW_LVR_STAT_STW_UP)
#  if (!defined RTE_CONST_I_C03_STW_LVR_STAT_STW_UP) || (RTE_CONST_I_C03_STW_LVR_STAT_STW_UP != 1u)
#   error "Enumeration constant <I_C03_STW_LVR_STAT_STW_UP> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_STW_LVR_STAT_STW_UP (1u)
#  define I_C03_STW_LVR_STAT_STW_UP ((c03_StW_Lvr_Stat)1u)
# endif
# if (defined RTE_CONST_I_C03_STW_LVR_STAT_STW_DOWN) || (defined I_C03_STW_LVR_STAT_STW_DOWN)
#  if (!defined RTE_CONST_I_C03_STW_LVR_STAT_STW_DOWN) || (RTE_CONST_I_C03_STW_LVR_STAT_STW_DOWN != 2u)
#   error "Enumeration constant <I_C03_STW_LVR_STAT_STW_DOWN> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_STW_LVR_STAT_STW_DOWN (2u)
#  define I_C03_STW_LVR_STAT_STW_DOWN ((c03_StW_Lvr_Stat)2u)
# endif
# if (defined RTE_CONST_I_C03_STW_LVR_STAT_STW_FWD) || (defined I_C03_STW_LVR_STAT_STW_FWD)
#  if (!defined RTE_CONST_I_C03_STW_LVR_STAT_STW_FWD) || (RTE_CONST_I_C03_STW_LVR_STAT_STW_FWD != 3u)
#   error "Enumeration constant <I_C03_STW_LVR_STAT_STW_FWD> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_STW_LVR_STAT_STW_FWD (3u)
#  define I_C03_STW_LVR_STAT_STW_FWD ((c03_StW_Lvr_Stat)3u)
# endif
# if (defined RTE_CONST_I_C03_STW_LVR_STAT_STW_BACK) || (defined I_C03_STW_LVR_STAT_STW_BACK)
#  if (!defined RTE_CONST_I_C03_STW_LVR_STAT_STW_BACK) || (RTE_CONST_I_C03_STW_LVR_STAT_STW_BACK != 4u)
#   error "Enumeration constant <I_C03_STW_LVR_STAT_STW_BACK> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_STW_LVR_STAT_STW_BACK (4u)
#  define I_C03_STW_LVR_STAT_STW_BACK ((c03_StW_Lvr_Stat)4u)
# endif

# define Rte_TypeDef_c03_TSA_Stat
typedef uint8 c03_TSA_Stat;
# define c03_TSA_Stat_LowerLimit ((c03_TSA_Stat)0u)
# define c03_TSA_Stat_UpperLimit ((c03_TSA_Stat)7u)
# define Rte_InvalidValue_c03_TSA_Stat ((c03_TSA_Stat)7u)
# if (defined RTE_CONST_I_C03_TSA_STAT_READY) || (defined I_C03_TSA_STAT_READY)
#  if (!defined RTE_CONST_I_C03_TSA_STAT_READY) || (RTE_CONST_I_C03_TSA_STAT_READY != 0u)
#   error "Enumeration constant <I_C03_TSA_STAT_READY> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_TSA_STAT_READY (0u)
#  define I_C03_TSA_STAT_READY ((c03_TSA_Stat)0u)
# endif
# if (defined RTE_CONST_I_C03_TSA_STAT_READY_POP_UP) || (defined I_C03_TSA_STAT_READY_POP_UP)
#  if (!defined RTE_CONST_I_C03_TSA_STAT_READY_POP_UP) || (RTE_CONST_I_C03_TSA_STAT_READY_POP_UP != 1u)
#   error "Enumeration constant <I_C03_TSA_STAT_READY_POP_UP> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_TSA_STAT_READY_POP_UP (1u)
#  define I_C03_TSA_STAT_READY_POP_UP ((c03_TSA_Stat)1u)
# endif
# if (defined RTE_CONST_I_C03_TSA_STAT_TSA_NA) || (defined I_C03_TSA_STAT_TSA_NA)
#  if (!defined RTE_CONST_I_C03_TSA_STAT_TSA_NA) || (RTE_CONST_I_C03_TSA_STAT_TSA_NA != 2u)
#   error "Enumeration constant <I_C03_TSA_STAT_TSA_NA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_TSA_STAT_TSA_NA (2u)
#  define I_C03_TSA_STAT_TSA_NA ((c03_TSA_Stat)2u)
# endif
# if (defined RTE_CONST_I_C03_TSA_STAT_TSA_TNA) || (defined I_C03_TSA_STAT_TSA_TNA)
#  if (!defined RTE_CONST_I_C03_TSA_STAT_TSA_TNA) || (RTE_CONST_I_C03_TSA_STAT_TSA_TNA != 3u)
#   error "Enumeration constant <I_C03_TSA_STAT_TSA_TNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_TSA_STAT_TSA_TNA (3u)
#  define I_C03_TSA_STAT_TSA_TNA ((c03_TSA_Stat)3u)
# endif
# if (defined RTE_CONST_I_C03_TSA_STAT_TSA_NA_COUNTRY) || (defined I_C03_TSA_STAT_TSA_NA_COUNTRY)
#  if (!defined RTE_CONST_I_C03_TSA_STAT_TSA_NA_COUNTRY) || (RTE_CONST_I_C03_TSA_STAT_TSA_NA_COUNTRY != 4u)
#   error "Enumeration constant <I_C03_TSA_STAT_TSA_NA_COUNTRY> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_TSA_STAT_TSA_NA_COUNTRY (4u)
#  define I_C03_TSA_STAT_TSA_NA_COUNTRY ((c03_TSA_Stat)4u)
# endif
# if (defined RTE_CONST_I_C03_TSA_STAT_NDEF5) || (defined I_C03_TSA_STAT_NDEF5)
#  if (!defined RTE_CONST_I_C03_TSA_STAT_NDEF5) || (RTE_CONST_I_C03_TSA_STAT_NDEF5 != 5u)
#   error "Enumeration constant <I_C03_TSA_STAT_NDEF5> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_TSA_STAT_NDEF5 (5u)
#  define I_C03_TSA_STAT_NDEF5 ((c03_TSA_Stat)5u)
# endif
# if (defined RTE_CONST_I_C03_TSA_STAT_NDEF6) || (defined I_C03_TSA_STAT_NDEF6)
#  if (!defined RTE_CONST_I_C03_TSA_STAT_NDEF6) || (RTE_CONST_I_C03_TSA_STAT_NDEF6 != 6u)
#   error "Enumeration constant <I_C03_TSA_STAT_NDEF6> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_TSA_STAT_NDEF6 (6u)
#  define I_C03_TSA_STAT_NDEF6 ((c03_TSA_Stat)6u)
# endif
# if (defined RTE_CONST_I_C03_TSA_STAT_SNA) || (defined I_C03_TSA_STAT_SNA)
#  if (!defined RTE_CONST_I_C03_TSA_STAT_SNA) || (RTE_CONST_I_C03_TSA_STAT_SNA != 7u)
#   error "Enumeration constant <I_C03_TSA_STAT_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_TSA_STAT_SNA (7u)
#  define I_C03_TSA_STAT_SNA ((c03_TSA_Stat)7u)
# endif

# define Rte_TypeDef_c03_TSL_Posn
typedef uint8 c03_TSL_Posn;
# define c03_TSL_Posn_LowerLimit ((c03_TSL_Posn)0u)
# define c03_TSL_Posn_UpperLimit ((c03_TSL_Posn)7u)
# define Rte_InvalidValue_c03_TSL_Posn ((c03_TSL_Posn)7u)
# if (defined RTE_CONST_I_C03_TSL_POSN_P) || (defined I_C03_TSL_POSN_P)
#  if (!defined RTE_CONST_I_C03_TSL_POSN_P) || (RTE_CONST_I_C03_TSL_POSN_P != 0u)
#   error "Enumeration constant <I_C03_TSL_POSN_P> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_TSL_POSN_P (0u)
#  define I_C03_TSL_POSN_P ((c03_TSL_Posn)0u)
# endif
# if (defined RTE_CONST_I_C03_TSL_POSN_R) || (defined I_C03_TSL_POSN_R)
#  if (!defined RTE_CONST_I_C03_TSL_POSN_R) || (RTE_CONST_I_C03_TSL_POSN_R != 1u)
#   error "Enumeration constant <I_C03_TSL_POSN_R> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_TSL_POSN_R (1u)
#  define I_C03_TSL_POSN_R ((c03_TSL_Posn)1u)
# endif
# if (defined RTE_CONST_I_C03_TSL_POSN_N) || (defined I_C03_TSL_POSN_N)
#  if (!defined RTE_CONST_I_C03_TSL_POSN_N) || (RTE_CONST_I_C03_TSL_POSN_N != 2u)
#   error "Enumeration constant <I_C03_TSL_POSN_N> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_TSL_POSN_N (2u)
#  define I_C03_TSL_POSN_N ((c03_TSL_Posn)2u)
# endif
# if (defined RTE_CONST_I_C03_TSL_POSN_D) || (defined I_C03_TSL_POSN_D)
#  if (!defined RTE_CONST_I_C03_TSL_POSN_D) || (RTE_CONST_I_C03_TSL_POSN_D != 4u)
#   error "Enumeration constant <I_C03_TSL_POSN_D> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_TSL_POSN_D (4u)
#  define I_C03_TSL_POSN_D ((c03_TSL_Posn)4u)
# endif
# if (defined RTE_CONST_I_C03_TSL_POSN_SNA) || (defined I_C03_TSL_POSN_SNA)
#  if (!defined RTE_CONST_I_C03_TSL_POSN_SNA) || (RTE_CONST_I_C03_TSL_POSN_SNA != 7u)
#   error "Enumeration constant <I_C03_TSL_POSN_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_TSL_POSN_SNA (7u)
#  define I_C03_TSL_POSN_SNA ((c03_TSL_Posn)7u)
# endif

# define Rte_TypeDef_c03_WprSw6Posn
typedef uint8 c03_WprSw6Posn;
# define c03_WprSw6Posn_LowerLimit ((c03_WprSw6Posn)0u)
# define c03_WprSw6Posn_UpperLimit ((c03_WprSw6Posn)7u)
# define Rte_InvalidValue_c03_WprSw6Posn ((c03_WprSw6Posn)7u)
# if (defined RTE_CONST_I_C03_WPRSW6POSN_OFF) || (defined I_C03_WPRSW6POSN_OFF)
#  if (!defined RTE_CONST_I_C03_WPRSW6POSN_OFF) || (RTE_CONST_I_C03_WPRSW6POSN_OFF != 0u)
#   error "Enumeration constant <I_C03_WPRSW6POSN_OFF> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_WPRSW6POSN_OFF (0u)
#  define I_C03_WPRSW6POSN_OFF ((c03_WprSw6Posn)0u)
# endif
# if (defined RTE_CONST_I_C03_WPRSW6POSN_INTERVAL1) || (defined I_C03_WPRSW6POSN_INTERVAL1)
#  if (!defined RTE_CONST_I_C03_WPRSW6POSN_INTERVAL1) || (RTE_CONST_I_C03_WPRSW6POSN_INTERVAL1 != 1u)
#   error "Enumeration constant <I_C03_WPRSW6POSN_INTERVAL1> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_WPRSW6POSN_INTERVAL1 (1u)
#  define I_C03_WPRSW6POSN_INTERVAL1 ((c03_WprSw6Posn)1u)
# endif
# if (defined RTE_CONST_I_C03_WPRSW6POSN_INTERVAL2) || (defined I_C03_WPRSW6POSN_INTERVAL2)
#  if (!defined RTE_CONST_I_C03_WPRSW6POSN_INTERVAL2) || (RTE_CONST_I_C03_WPRSW6POSN_INTERVAL2 != 2u)
#   error "Enumeration constant <I_C03_WPRSW6POSN_INTERVAL2> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_WPRSW6POSN_INTERVAL2 (2u)
#  define I_C03_WPRSW6POSN_INTERVAL2 ((c03_WprSw6Posn)2u)
# endif
# if (defined RTE_CONST_I_C03_WPRSW6POSN_INTERVAL3) || (defined I_C03_WPRSW6POSN_INTERVAL3)
#  if (!defined RTE_CONST_I_C03_WPRSW6POSN_INTERVAL3) || (RTE_CONST_I_C03_WPRSW6POSN_INTERVAL3 != 3u)
#   error "Enumeration constant <I_C03_WPRSW6POSN_INTERVAL3> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_WPRSW6POSN_INTERVAL3 (3u)
#  define I_C03_WPRSW6POSN_INTERVAL3 ((c03_WprSw6Posn)3u)
# endif
# if (defined RTE_CONST_I_C03_WPRSW6POSN_INTERVAL4) || (defined I_C03_WPRSW6POSN_INTERVAL4)
#  if (!defined RTE_CONST_I_C03_WPRSW6POSN_INTERVAL4) || (RTE_CONST_I_C03_WPRSW6POSN_INTERVAL4 != 4u)
#   error "Enumeration constant <I_C03_WPRSW6POSN_INTERVAL4> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_WPRSW6POSN_INTERVAL4 (4u)
#  define I_C03_WPRSW6POSN_INTERVAL4 ((c03_WprSw6Posn)4u)
# endif
# if (defined RTE_CONST_I_C03_WPRSW6POSN_STAGE1) || (defined I_C03_WPRSW6POSN_STAGE1)
#  if (!defined RTE_CONST_I_C03_WPRSW6POSN_STAGE1) || (RTE_CONST_I_C03_WPRSW6POSN_STAGE1 != 5u)
#   error "Enumeration constant <I_C03_WPRSW6POSN_STAGE1> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_WPRSW6POSN_STAGE1 (5u)
#  define I_C03_WPRSW6POSN_STAGE1 ((c03_WprSw6Posn)5u)
# endif
# if (defined RTE_CONST_I_C03_WPRSW6POSN_STAGE2) || (defined I_C03_WPRSW6POSN_STAGE2)
#  if (!defined RTE_CONST_I_C03_WPRSW6POSN_STAGE2) || (RTE_CONST_I_C03_WPRSW6POSN_STAGE2 != 6u)
#   error "Enumeration constant <I_C03_WPRSW6POSN_STAGE2> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_WPRSW6POSN_STAGE2 (6u)
#  define I_C03_WPRSW6POSN_STAGE2 ((c03_WprSw6Posn)6u)
# endif
# if (defined RTE_CONST_I_C03_WPRSW6POSN_SNA) || (defined I_C03_WPRSW6POSN_SNA)
#  if (!defined RTE_CONST_I_C03_WPRSW6POSN_SNA) || (RTE_CONST_I_C03_WPRSW6POSN_SNA != 7u)
#   error "Enumeration constant <I_C03_WPRSW6POSN_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C03_WPRSW6POSN_SNA (7u)
#  define I_C03_WPRSW6POSN_SNA ((c03_WprSw6Posn)7u)
# endif

# define Rte_TypeDef_c04_0_12_1
typedef uint8 c04_0_12_1;
# define c04_0_12_1_LowerLimit ((c04_0_12_1)0u)
# define c04_0_12_1_UpperLimit ((c04_0_12_1)15u)
# define Rte_InvalidValue_c04_0_12_1 ((c04_0_12_1)15u)
# if (defined RTE_CONST_I_C04_0_12_1_SNA) || (defined I_C04_0_12_1_SNA)
#  if (!defined RTE_CONST_I_C04_0_12_1_SNA) || (RTE_CONST_I_C04_0_12_1_SNA != 15u)
#   error "Enumeration constant <I_C04_0_12_1_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_0_12_1_SNA (15u)
#  define I_C04_0_12_1_SNA ((c04_0_12_1)15u)
# endif

# define Rte_TypeDef_c04_0_14_1
typedef uint8 c04_0_14_1;
# define c04_0_14_1_LowerLimit ((c04_0_14_1)0u)
# define c04_0_14_1_UpperLimit ((c04_0_14_1)15u)
# define Rte_InvalidValue_c04_0_14_1 ((c04_0_14_1)15u)
# if (defined RTE_CONST_I_C04_0_14_1_SNA) || (defined I_C04_0_14_1_SNA)
#  if (!defined RTE_CONST_I_C04_0_14_1_SNA) || (RTE_CONST_I_C04_0_14_1_SNA != 15u)
#   error "Enumeration constant <I_C04_0_14_1_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_0_14_1_SNA (15u)
#  define I_C04_0_14_1_SNA ((c04_0_14_1)15u)
# endif

# define Rte_TypeDef_c04_0_1_0k1
typedef uint8 c04_0_1_0k1;
# define c04_0_1_0k1_LowerLimit ((c04_0_1_0k1)0u)
# define c04_0_1_0k1_UpperLimit ((c04_0_1_0k1)15u)
# define Rte_InvalidValue_c04_0_1_0k1 ((c04_0_1_0k1)15u)
# if (defined RTE_CONST_I_C04_0_1_0K1_SNA) || (defined I_C04_0_1_0K1_SNA)
#  if (!defined RTE_CONST_I_C04_0_1_0K1_SNA) || (RTE_CONST_I_C04_0_1_0K1_SNA != 15u)
#   error "Enumeration constant <I_C04_0_1_0K1_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_0_1_0K1_SNA (15u)
#  define I_C04_0_1_0K1_SNA ((c04_0_1_0k1)15u)
# endif

# define Rte_TypeDef_c04_ADAS_WayForm
typedef uint8 c04_ADAS_WayForm;
# define c04_ADAS_WayForm_LowerLimit ((c04_ADAS_WayForm)0u)
# define c04_ADAS_WayForm_UpperLimit ((c04_ADAS_WayForm)15u)
# define Rte_InvalidValue_c04_ADAS_WayForm ((c04_ADAS_WayForm)15u)
# if (defined RTE_CONST_I_C04_ADAS_WAYFORM_UNKNOWN) || (defined I_C04_ADAS_WAYFORM_UNKNOWN)
#  if (!defined RTE_CONST_I_C04_ADAS_WAYFORM_UNKNOWN) || (RTE_CONST_I_C04_ADAS_WAYFORM_UNKNOWN != 0u)
#   error "Enumeration constant <I_C04_ADAS_WAYFORM_UNKNOWN> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_ADAS_WAYFORM_UNKNOWN (0u)
#  define I_C04_ADAS_WAYFORM_UNKNOWN ((c04_ADAS_WayForm)0u)
# endif
# if (defined RTE_CONST_I_C04_ADAS_WAYFORM_FREEWAY) || (defined I_C04_ADAS_WAYFORM_FREEWAY)
#  if (!defined RTE_CONST_I_C04_ADAS_WAYFORM_FREEWAY) || (RTE_CONST_I_C04_ADAS_WAYFORM_FREEWAY != 1u)
#   error "Enumeration constant <I_C04_ADAS_WAYFORM_FREEWAY> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_ADAS_WAYFORM_FREEWAY (1u)
#  define I_C04_ADAS_WAYFORM_FREEWAY ((c04_ADAS_WayForm)1u)
# endif
# if (defined RTE_CONST_I_C04_ADAS_WAYFORM_MULTI_DIG) || (defined I_C04_ADAS_WAYFORM_MULTI_DIG)
#  if (!defined RTE_CONST_I_C04_ADAS_WAYFORM_MULTI_DIG) || (RTE_CONST_I_C04_ADAS_WAYFORM_MULTI_DIG != 2u)
#   error "Enumeration constant <I_C04_ADAS_WAYFORM_MULTI_DIG> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_ADAS_WAYFORM_MULTI_DIG (2u)
#  define I_C04_ADAS_WAYFORM_MULTI_DIG ((c04_ADAS_WayForm)2u)
# endif
# if (defined RTE_CONST_I_C04_ADAS_WAYFORM_SINGLE_CARRIAGEWAY) || (defined I_C04_ADAS_WAYFORM_SINGLE_CARRIAGEWAY)
#  if (!defined RTE_CONST_I_C04_ADAS_WAYFORM_SINGLE_CARRIAGEWAY) || (RTE_CONST_I_C04_ADAS_WAYFORM_SINGLE_CARRIAGEWAY != 3u)
#   error "Enumeration constant <I_C04_ADAS_WAYFORM_SINGLE_CARRIAGEWAY> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_ADAS_WAYFORM_SINGLE_CARRIAGEWAY (3u)
#  define I_C04_ADAS_WAYFORM_SINGLE_CARRIAGEWAY ((c04_ADAS_WayForm)3u)
# endif
# if (defined RTE_CONST_I_C04_ADAS_WAYFORM_ROUNDABOUT) || (defined I_C04_ADAS_WAYFORM_ROUNDABOUT)
#  if (!defined RTE_CONST_I_C04_ADAS_WAYFORM_ROUNDABOUT) || (RTE_CONST_I_C04_ADAS_WAYFORM_ROUNDABOUT != 4u)
#   error "Enumeration constant <I_C04_ADAS_WAYFORM_ROUNDABOUT> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_ADAS_WAYFORM_ROUNDABOUT (4u)
#  define I_C04_ADAS_WAYFORM_ROUNDABOUT ((c04_ADAS_WayForm)4u)
# endif
# if (defined RTE_CONST_I_C04_ADAS_WAYFORM_S_TRAFFIC_FIGURE) || (defined I_C04_ADAS_WAYFORM_S_TRAFFIC_FIGURE)
#  if (!defined RTE_CONST_I_C04_ADAS_WAYFORM_S_TRAFFIC_FIGURE) || (RTE_CONST_I_C04_ADAS_WAYFORM_S_TRAFFIC_FIGURE != 5u)
#   error "Enumeration constant <I_C04_ADAS_WAYFORM_S_TRAFFIC_FIGURE> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_ADAS_WAYFORM_S_TRAFFIC_FIGURE (5u)
#  define I_C04_ADAS_WAYFORM_S_TRAFFIC_FIGURE ((c04_ADAS_WayForm)5u)
# endif
# if (defined RTE_CONST_I_C04_ADAS_WAYFORM_RES6) || (defined I_C04_ADAS_WAYFORM_RES6)
#  if (!defined RTE_CONST_I_C04_ADAS_WAYFORM_RES6) || (RTE_CONST_I_C04_ADAS_WAYFORM_RES6 != 6u)
#   error "Enumeration constant <I_C04_ADAS_WAYFORM_RES6> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_ADAS_WAYFORM_RES6 (6u)
#  define I_C04_ADAS_WAYFORM_RES6 ((c04_ADAS_WayForm)6u)
# endif
# if (defined RTE_CONST_I_C04_ADAS_WAYFORM_RES7) || (defined I_C04_ADAS_WAYFORM_RES7)
#  if (!defined RTE_CONST_I_C04_ADAS_WAYFORM_RES7) || (RTE_CONST_I_C04_ADAS_WAYFORM_RES7 != 7u)
#   error "Enumeration constant <I_C04_ADAS_WAYFORM_RES7> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_ADAS_WAYFORM_RES7 (7u)
#  define I_C04_ADAS_WAYFORM_RES7 ((c04_ADAS_WayForm)7u)
# endif
# if (defined RTE_CONST_I_C04_ADAS_WAYFORM_PARALLEL_ROAD) || (defined I_C04_ADAS_WAYFORM_PARALLEL_ROAD)
#  if (!defined RTE_CONST_I_C04_ADAS_WAYFORM_PARALLEL_ROAD) || (RTE_CONST_I_C04_ADAS_WAYFORM_PARALLEL_ROAD != 8u)
#   error "Enumeration constant <I_C04_ADAS_WAYFORM_PARALLEL_ROAD> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_ADAS_WAYFORM_PARALLEL_ROAD (8u)
#  define I_C04_ADAS_WAYFORM_PARALLEL_ROAD ((c04_ADAS_WayForm)8u)
# endif
# if (defined RTE_CONST_I_C04_ADAS_WAYFORM_RAMP_ON_FREEWAY) || (defined I_C04_ADAS_WAYFORM_RAMP_ON_FREEWAY)
#  if (!defined RTE_CONST_I_C04_ADAS_WAYFORM_RAMP_ON_FREEWAY) || (RTE_CONST_I_C04_ADAS_WAYFORM_RAMP_ON_FREEWAY != 9u)
#   error "Enumeration constant <I_C04_ADAS_WAYFORM_RAMP_ON_FREEWAY> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_ADAS_WAYFORM_RAMP_ON_FREEWAY (9u)
#  define I_C04_ADAS_WAYFORM_RAMP_ON_FREEWAY ((c04_ADAS_WayForm)9u)
# endif
# if (defined RTE_CONST_I_C04_ADAS_WAYFORM_RAMP_NOT_ON_FREEWAY) || (defined I_C04_ADAS_WAYFORM_RAMP_NOT_ON_FREEWAY)
#  if (!defined RTE_CONST_I_C04_ADAS_WAYFORM_RAMP_NOT_ON_FREEWAY) || (RTE_CONST_I_C04_ADAS_WAYFORM_RAMP_NOT_ON_FREEWAY != 10u)
#   error "Enumeration constant <I_C04_ADAS_WAYFORM_RAMP_NOT_ON_FREEWAY> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_ADAS_WAYFORM_RAMP_NOT_ON_FREEWAY (10u)
#  define I_C04_ADAS_WAYFORM_RAMP_NOT_ON_FREEWAY ((c04_ADAS_WayForm)10u)
# endif
# if (defined RTE_CONST_I_C04_ADAS_WAYFORM_SERVICE_ROAD) || (defined I_C04_ADAS_WAYFORM_SERVICE_ROAD)
#  if (!defined RTE_CONST_I_C04_ADAS_WAYFORM_SERVICE_ROAD) || (RTE_CONST_I_C04_ADAS_WAYFORM_SERVICE_ROAD != 11u)
#   error "Enumeration constant <I_C04_ADAS_WAYFORM_SERVICE_ROAD> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_ADAS_WAYFORM_SERVICE_ROAD (11u)
#  define I_C04_ADAS_WAYFORM_SERVICE_ROAD ((c04_ADAS_WayForm)11u)
# endif
# if (defined RTE_CONST_I_C04_ADAS_WAYFORM_ENTR_CAR_PARK) || (defined I_C04_ADAS_WAYFORM_ENTR_CAR_PARK)
#  if (!defined RTE_CONST_I_C04_ADAS_WAYFORM_ENTR_CAR_PARK) || (RTE_CONST_I_C04_ADAS_WAYFORM_ENTR_CAR_PARK != 12u)
#   error "Enumeration constant <I_C04_ADAS_WAYFORM_ENTR_CAR_PARK> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_ADAS_WAYFORM_ENTR_CAR_PARK (12u)
#  define I_C04_ADAS_WAYFORM_ENTR_CAR_PARK ((c04_ADAS_WayForm)12u)
# endif
# if (defined RTE_CONST_I_C04_ADAS_WAYFORM_ENTR_SERVICE) || (defined I_C04_ADAS_WAYFORM_ENTR_SERVICE)
#  if (!defined RTE_CONST_I_C04_ADAS_WAYFORM_ENTR_SERVICE) || (RTE_CONST_I_C04_ADAS_WAYFORM_ENTR_SERVICE != 13u)
#   error "Enumeration constant <I_C04_ADAS_WAYFORM_ENTR_SERVICE> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_ADAS_WAYFORM_ENTR_SERVICE (13u)
#  define I_C04_ADAS_WAYFORM_ENTR_SERVICE ((c04_ADAS_WayForm)13u)
# endif
# if (defined RTE_CONST_I_C04_ADAS_WAYFORM_PEDESTRIANS_ONLY) || (defined I_C04_ADAS_WAYFORM_PEDESTRIANS_ONLY)
#  if (!defined RTE_CONST_I_C04_ADAS_WAYFORM_PEDESTRIANS_ONLY) || (RTE_CONST_I_C04_ADAS_WAYFORM_PEDESTRIANS_ONLY != 14u)
#   error "Enumeration constant <I_C04_ADAS_WAYFORM_PEDESTRIANS_ONLY> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_ADAS_WAYFORM_PEDESTRIANS_ONLY (14u)
#  define I_C04_ADAS_WAYFORM_PEDESTRIANS_ONLY ((c04_ADAS_WayForm)14u)
# endif
# if (defined RTE_CONST_I_C04_ADAS_WAYFORM_SNA) || (defined I_C04_ADAS_WAYFORM_SNA)
#  if (!defined RTE_CONST_I_C04_ADAS_WAYFORM_SNA) || (RTE_CONST_I_C04_ADAS_WAYFORM_SNA != 15u)
#   error "Enumeration constant <I_C04_ADAS_WAYFORM_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_ADAS_WAYFORM_SNA (15u)
#  define I_C04_ADAS_WAYFORM_SNA ((c04_ADAS_WayForm)15u)
# endif

# define Rte_TypeDef_c04_ALDW_LaneEvent
typedef uint8 c04_ALDW_LaneEvent;
# define c04_ALDW_LaneEvent_LowerLimit ((c04_ALDW_LaneEvent)0u)
# define c04_ALDW_LaneEvent_UpperLimit ((c04_ALDW_LaneEvent)15u)
# define Rte_InvalidValue_c04_ALDW_LaneEvent ((c04_ALDW_LaneEvent)15u)
# if (defined RTE_CONST_I_C04_ALDW_LANEEVENT_IDLE) || (defined I_C04_ALDW_LANEEVENT_IDLE)
#  if (!defined RTE_CONST_I_C04_ALDW_LANEEVENT_IDLE) || (RTE_CONST_I_C04_ALDW_LANEEVENT_IDLE != 0u)
#   error "Enumeration constant <I_C04_ALDW_LANEEVENT_IDLE> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_ALDW_LANEEVENT_IDLE (0u)
#  define I_C04_ALDW_LANEEVENT_IDLE ((c04_ALDW_LaneEvent)0u)
# endif
# if (defined RTE_CONST_I_C04_ALDW_LANEEVENT_NDEF1) || (defined I_C04_ALDW_LANEEVENT_NDEF1)
#  if (!defined RTE_CONST_I_C04_ALDW_LANEEVENT_NDEF1) || (RTE_CONST_I_C04_ALDW_LANEEVENT_NDEF1 != 1u)
#   error "Enumeration constant <I_C04_ALDW_LANEEVENT_NDEF1> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_ALDW_LANEEVENT_NDEF1 (1u)
#  define I_C04_ALDW_LANEEVENT_NDEF1 ((c04_ALDW_LaneEvent)1u)
# endif
# if (defined RTE_CONST_I_C04_ALDW_LANEEVENT_NDEF2) || (defined I_C04_ALDW_LANEEVENT_NDEF2)
#  if (!defined RTE_CONST_I_C04_ALDW_LANEEVENT_NDEF2) || (RTE_CONST_I_C04_ALDW_LANEEVENT_NDEF2 != 2u)
#   error "Enumeration constant <I_C04_ALDW_LANEEVENT_NDEF2> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_ALDW_LANEEVENT_NDEF2 (2u)
#  define I_C04_ALDW_LANEEVENT_NDEF2 ((c04_ALDW_LaneEvent)2u)
# endif
# if (defined RTE_CONST_I_C04_ALDW_LANEEVENT_FORK_EXIT) || (defined I_C04_ALDW_LANEEVENT_FORK_EXIT)
#  if (!defined RTE_CONST_I_C04_ALDW_LANEEVENT_FORK_EXIT) || (RTE_CONST_I_C04_ALDW_LANEEVENT_FORK_EXIT != 3u)
#   error "Enumeration constant <I_C04_ALDW_LANEEVENT_FORK_EXIT> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_ALDW_LANEEVENT_FORK_EXIT (3u)
#  define I_C04_ALDW_LANEEVENT_FORK_EXIT ((c04_ALDW_LaneEvent)3u)
# endif
# if (defined RTE_CONST_I_C04_ALDW_LANEEVENT_FORK_ENTR) || (defined I_C04_ALDW_LANEEVENT_FORK_ENTR)
#  if (!defined RTE_CONST_I_C04_ALDW_LANEEVENT_FORK_ENTR) || (RTE_CONST_I_C04_ALDW_LANEEVENT_FORK_ENTR != 4u)
#   error "Enumeration constant <I_C04_ALDW_LANEEVENT_FORK_ENTR> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_ALDW_LANEEVENT_FORK_ENTR (4u)
#  define I_C04_ALDW_LANEEVENT_FORK_ENTR ((c04_ALDW_LaneEvent)4u)
# endif
# if (defined RTE_CONST_I_C04_ALDW_LANEEVENT_UKNWN_FORK_OPN) || (defined I_C04_ALDW_LANEEVENT_UKNWN_FORK_OPN)
#  if (!defined RTE_CONST_I_C04_ALDW_LANEEVENT_UKNWN_FORK_OPN) || (RTE_CONST_I_C04_ALDW_LANEEVENT_UKNWN_FORK_OPN != 5u)
#   error "Enumeration constant <I_C04_ALDW_LANEEVENT_UKNWN_FORK_OPN> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_ALDW_LANEEVENT_UKNWN_FORK_OPN (5u)
#  define I_C04_ALDW_LANEEVENT_UKNWN_FORK_OPN ((c04_ALDW_LaneEvent)5u)
# endif
# if (defined RTE_CONST_I_C04_ALDW_LANEEVENT_UKNWN_FORK_CLS) || (defined I_C04_ALDW_LANEEVENT_UKNWN_FORK_CLS)
#  if (!defined RTE_CONST_I_C04_ALDW_LANEEVENT_UKNWN_FORK_CLS) || (RTE_CONST_I_C04_ALDW_LANEEVENT_UKNWN_FORK_CLS != 6u)
#   error "Enumeration constant <I_C04_ALDW_LANEEVENT_UKNWN_FORK_CLS> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_ALDW_LANEEVENT_UKNWN_FORK_CLS (6u)
#  define I_C04_ALDW_LANEEVENT_UKNWN_FORK_CLS ((c04_ALDW_LaneEvent)6u)
# endif
# if (defined RTE_CONST_I_C04_ALDW_LANEEVENT_START_CONSTR) || (defined I_C04_ALDW_LANEEVENT_START_CONSTR)
#  if (!defined RTE_CONST_I_C04_ALDW_LANEEVENT_START_CONSTR) || (RTE_CONST_I_C04_ALDW_LANEEVENT_START_CONSTR != 7u)
#   error "Enumeration constant <I_C04_ALDW_LANEEVENT_START_CONSTR> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_ALDW_LANEEVENT_START_CONSTR (7u)
#  define I_C04_ALDW_LANEEVENT_START_CONSTR ((c04_ALDW_LaneEvent)7u)
# endif
# if (defined RTE_CONST_I_C04_ALDW_LANEEVENT_END_CONSTR) || (defined I_C04_ALDW_LANEEVENT_END_CONSTR)
#  if (!defined RTE_CONST_I_C04_ALDW_LANEEVENT_END_CONSTR) || (RTE_CONST_I_C04_ALDW_LANEEVENT_END_CONSTR != 8u)
#   error "Enumeration constant <I_C04_ALDW_LANEEVENT_END_CONSTR> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_ALDW_LANEEVENT_END_CONSTR (8u)
#  define I_C04_ALDW_LANEEVENT_END_CONSTR ((c04_ALDW_LaneEvent)8u)
# endif
# if (defined RTE_CONST_I_C04_ALDW_LANEEVENT_SNA) || (defined I_C04_ALDW_LANEEVENT_SNA)
#  if (!defined RTE_CONST_I_C04_ALDW_LANEEVENT_SNA) || (RTE_CONST_I_C04_ALDW_LANEEVENT_SNA != 15u)
#   error "Enumeration constant <I_C04_ALDW_LANEEVENT_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_ALDW_LANEEVENT_SNA (15u)
#  define I_C04_ALDW_LANEEVENT_SNA ((c04_ALDW_LaneEvent)15u)
# endif

# define Rte_TypeDef_c04_ALDW_LaneMarkType
typedef uint8 c04_ALDW_LaneMarkType;
# define c04_ALDW_LaneMarkType_LowerLimit ((c04_ALDW_LaneMarkType)0u)
# define c04_ALDW_LaneMarkType_UpperLimit ((c04_ALDW_LaneMarkType)15u)
# define Rte_InvalidValue_c04_ALDW_LaneMarkType ((c04_ALDW_LaneMarkType)15u)
# if (defined RTE_CONST_I_C04_ALDW_LANEMARKTYPE_NDEF0) || (defined I_C04_ALDW_LANEMARKTYPE_NDEF0)
#  if (!defined RTE_CONST_I_C04_ALDW_LANEMARKTYPE_NDEF0) || (RTE_CONST_I_C04_ALDW_LANEMARKTYPE_NDEF0 != 0u)
#   error "Enumeration constant <I_C04_ALDW_LANEMARKTYPE_NDEF0> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_ALDW_LANEMARKTYPE_NDEF0 (0u)
#  define I_C04_ALDW_LANEMARKTYPE_NDEF0 ((c04_ALDW_LaneMarkType)0u)
# endif
# if (defined RTE_CONST_I_C04_ALDW_LANEMARKTYPE_CONT) || (defined I_C04_ALDW_LANEMARKTYPE_CONT)
#  if (!defined RTE_CONST_I_C04_ALDW_LANEMARKTYPE_CONT) || (RTE_CONST_I_C04_ALDW_LANEMARKTYPE_CONT != 1u)
#   error "Enumeration constant <I_C04_ALDW_LANEMARKTYPE_CONT> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_ALDW_LANEMARKTYPE_CONT (1u)
#  define I_C04_ALDW_LANEMARKTYPE_CONT ((c04_ALDW_LaneMarkType)1u)
# endif
# if (defined RTE_CONST_I_C04_ALDW_LANEMARKTYPE_BROKEN) || (defined I_C04_ALDW_LANEMARKTYPE_BROKEN)
#  if (!defined RTE_CONST_I_C04_ALDW_LANEMARKTYPE_BROKEN) || (RTE_CONST_I_C04_ALDW_LANEMARKTYPE_BROKEN != 2u)
#   error "Enumeration constant <I_C04_ALDW_LANEMARKTYPE_BROKEN> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_ALDW_LANEMARKTYPE_BROKEN (2u)
#  define I_C04_ALDW_LANEMARKTYPE_BROKEN ((c04_ALDW_LaneMarkType)2u)
# endif
# if (defined RTE_CONST_I_C04_ALDW_LANEMARKTYPE_BROKEN_BROKEN) || (defined I_C04_ALDW_LANEMARKTYPE_BROKEN_BROKEN)
#  if (!defined RTE_CONST_I_C04_ALDW_LANEMARKTYPE_BROKEN_BROKEN) || (RTE_CONST_I_C04_ALDW_LANEMARKTYPE_BROKEN_BROKEN != 3u)
#   error "Enumeration constant <I_C04_ALDW_LANEMARKTYPE_BROKEN_BROKEN> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_ALDW_LANEMARKTYPE_BROKEN_BROKEN (3u)
#  define I_C04_ALDW_LANEMARKTYPE_BROKEN_BROKEN ((c04_ALDW_LaneMarkType)3u)
# endif
# if (defined RTE_CONST_I_C04_ALDW_LANEMARKTYPE_BROKEN_CONT) || (defined I_C04_ALDW_LANEMARKTYPE_BROKEN_CONT)
#  if (!defined RTE_CONST_I_C04_ALDW_LANEMARKTYPE_BROKEN_CONT) || (RTE_CONST_I_C04_ALDW_LANEMARKTYPE_BROKEN_CONT != 4u)
#   error "Enumeration constant <I_C04_ALDW_LANEMARKTYPE_BROKEN_CONT> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_ALDW_LANEMARKTYPE_BROKEN_CONT (4u)
#  define I_C04_ALDW_LANEMARKTYPE_BROKEN_CONT ((c04_ALDW_LaneMarkType)4u)
# endif
# if (defined RTE_CONST_I_C04_ALDW_LANEMARKTYPE_CONT_BROKEN) || (defined I_C04_ALDW_LANEMARKTYPE_CONT_BROKEN)
#  if (!defined RTE_CONST_I_C04_ALDW_LANEMARKTYPE_CONT_BROKEN) || (RTE_CONST_I_C04_ALDW_LANEMARKTYPE_CONT_BROKEN != 5u)
#   error "Enumeration constant <I_C04_ALDW_LANEMARKTYPE_CONT_BROKEN> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_ALDW_LANEMARKTYPE_CONT_BROKEN (5u)
#  define I_C04_ALDW_LANEMARKTYPE_CONT_BROKEN ((c04_ALDW_LaneMarkType)5u)
# endif
# if (defined RTE_CONST_I_C04_ALDW_LANEMARKTYPE_CONT_CONT) || (defined I_C04_ALDW_LANEMARKTYPE_CONT_CONT)
#  if (!defined RTE_CONST_I_C04_ALDW_LANEMARKTYPE_CONT_CONT) || (RTE_CONST_I_C04_ALDW_LANEMARKTYPE_CONT_CONT != 6u)
#   error "Enumeration constant <I_C04_ALDW_LANEMARKTYPE_CONT_CONT> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_ALDW_LANEMARKTYPE_CONT_CONT (6u)
#  define I_C04_ALDW_LANEMARKTYPE_CONT_CONT ((c04_ALDW_LaneMarkType)6u)
# endif
# if (defined RTE_CONST_I_C04_ALDW_LANEMARKTYPE_DOT) || (defined I_C04_ALDW_LANEMARKTYPE_DOT)
#  if (!defined RTE_CONST_I_C04_ALDW_LANEMARKTYPE_DOT) || (RTE_CONST_I_C04_ALDW_LANEMARKTYPE_DOT != 7u)
#   error "Enumeration constant <I_C04_ALDW_LANEMARKTYPE_DOT> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_ALDW_LANEMARKTYPE_DOT (7u)
#  define I_C04_ALDW_LANEMARKTYPE_DOT ((c04_ALDW_LaneMarkType)7u)
# endif
# if (defined RTE_CONST_I_C04_ALDW_LANEMARKTYPE_BROKEN_NARROW) || (defined I_C04_ALDW_LANEMARKTYPE_BROKEN_NARROW)
#  if (!defined RTE_CONST_I_C04_ALDW_LANEMARKTYPE_BROKEN_NARROW) || (RTE_CONST_I_C04_ALDW_LANEMARKTYPE_BROKEN_NARROW != 8u)
#   error "Enumeration constant <I_C04_ALDW_LANEMARKTYPE_BROKEN_NARROW> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_ALDW_LANEMARKTYPE_BROKEN_NARROW (8u)
#  define I_C04_ALDW_LANEMARKTYPE_BROKEN_NARROW ((c04_ALDW_LaneMarkType)8u)
# endif
# if (defined RTE_CONST_I_C04_ALDW_LANEMARKTYPE_BLOCK_MARKING) || (defined I_C04_ALDW_LANEMARKTYPE_BLOCK_MARKING)
#  if (!defined RTE_CONST_I_C04_ALDW_LANEMARKTYPE_BLOCK_MARKING) || (RTE_CONST_I_C04_ALDW_LANEMARKTYPE_BLOCK_MARKING != 9u)
#   error "Enumeration constant <I_C04_ALDW_LANEMARKTYPE_BLOCK_MARKING> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_ALDW_LANEMARKTYPE_BLOCK_MARKING (9u)
#  define I_C04_ALDW_LANEMARKTYPE_BLOCK_MARKING ((c04_ALDW_LaneMarkType)9u)
# endif
# if (defined RTE_CONST_I_C04_ALDW_LANEMARKTYPE_SNA) || (defined I_C04_ALDW_LANEMARKTYPE_SNA)
#  if (!defined RTE_CONST_I_C04_ALDW_LANEMARKTYPE_SNA) || (RTE_CONST_I_C04_ALDW_LANEMARKTYPE_SNA != 15u)
#   error "Enumeration constant <I_C04_ALDW_LANEMARKTYPE_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_ALDW_LANEMARKTYPE_SNA (15u)
#  define I_C04_ALDW_LANEMARKTYPE_SNA ((c04_ALDW_LaneMarkType)15u)
# endif

# define Rte_TypeDef_c04_ALDW_WarnSupp_Stat
typedef uint8 c04_ALDW_WarnSupp_Stat;
# define c04_ALDW_WarnSupp_Stat_LowerLimit ((c04_ALDW_WarnSupp_Stat)0u)
# define c04_ALDW_WarnSupp_Stat_UpperLimit ((c04_ALDW_WarnSupp_Stat)15u)
# define Rte_InvalidValue_c04_ALDW_WarnSupp_Stat ((c04_ALDW_WarnSupp_Stat)15u)
# if (defined RTE_CONST_I_C04_ALDW_WARNSUPP_STAT_OFF_SPD) || (defined I_C04_ALDW_WARNSUPP_STAT_OFF_SPD)
#  if (!defined RTE_CONST_I_C04_ALDW_WARNSUPP_STAT_OFF_SPD) || (RTE_CONST_I_C04_ALDW_WARNSUPP_STAT_OFF_SPD != 0u)
#   error "Enumeration constant <I_C04_ALDW_WARNSUPP_STAT_OFF_SPD> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_ALDW_WARNSUPP_STAT_OFF_SPD (0u)
#  define I_C04_ALDW_WARNSUPP_STAT_OFF_SPD ((c04_ALDW_WarnSupp_Stat)0u)
# endif
# if (defined RTE_CONST_I_C04_ALDW_WARNSUPP_STAT_WARN_RDY) || (defined I_C04_ALDW_WARNSUPP_STAT_WARN_RDY)
#  if (!defined RTE_CONST_I_C04_ALDW_WARNSUPP_STAT_WARN_RDY) || (RTE_CONST_I_C04_ALDW_WARNSUPP_STAT_WARN_RDY != 1u)
#   error "Enumeration constant <I_C04_ALDW_WARNSUPP_STAT_WARN_RDY> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_ALDW_WARNSUPP_STAT_WARN_RDY (1u)
#  define I_C04_ALDW_WARNSUPP_STAT_WARN_RDY ((c04_ALDW_WarnSupp_Stat)1u)
# endif
# if (defined RTE_CONST_I_C04_ALDW_WARNSUPP_STAT_DRV_ACTV) || (defined I_C04_ALDW_WARNSUPP_STAT_DRV_ACTV)
#  if (!defined RTE_CONST_I_C04_ALDW_WARNSUPP_STAT_DRV_ACTV) || (RTE_CONST_I_C04_ALDW_WARNSUPP_STAT_DRV_ACTV != 2u)
#   error "Enumeration constant <I_C04_ALDW_WARNSUPP_STAT_DRV_ACTV> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_ALDW_WARNSUPP_STAT_DRV_ACTV (2u)
#  define I_C04_ALDW_WARNSUPP_STAT_DRV_ACTV ((c04_ALDW_WarnSupp_Stat)2u)
# endif
# if (defined RTE_CONST_I_C04_ALDW_WARNSUPP_STAT_DRV_ACTV_DELAY) || (defined I_C04_ALDW_WARNSUPP_STAT_DRV_ACTV_DELAY)
#  if (!defined RTE_CONST_I_C04_ALDW_WARNSUPP_STAT_DRV_ACTV_DELAY) || (RTE_CONST_I_C04_ALDW_WARNSUPP_STAT_DRV_ACTV_DELAY != 3u)
#   error "Enumeration constant <I_C04_ALDW_WARNSUPP_STAT_DRV_ACTV_DELAY> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_ALDW_WARNSUPP_STAT_DRV_ACTV_DELAY (3u)
#  define I_C04_ALDW_WARNSUPP_STAT_DRV_ACTV_DELAY ((c04_ALDW_WarnSupp_Stat)3u)
# endif
# if (defined RTE_CONST_I_C04_ALDW_WARNSUPP_STAT_DRV_DISTRACTN) || (defined I_C04_ALDW_WARNSUPP_STAT_DRV_DISTRACTN)
#  if (!defined RTE_CONST_I_C04_ALDW_WARNSUPP_STAT_DRV_DISTRACTN) || (RTE_CONST_I_C04_ALDW_WARNSUPP_STAT_DRV_DISTRACTN != 4u)
#   error "Enumeration constant <I_C04_ALDW_WARNSUPP_STAT_DRV_DISTRACTN> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_ALDW_WARNSUPP_STAT_DRV_DISTRACTN (4u)
#  define I_C04_ALDW_WARNSUPP_STAT_DRV_DISTRACTN ((c04_ALDW_WarnSupp_Stat)4u)
# endif
# if (defined RTE_CONST_I_C04_ALDW_WARNSUPP_STAT_TURN) || (defined I_C04_ALDW_WARNSUPP_STAT_TURN)
#  if (!defined RTE_CONST_I_C04_ALDW_WARNSUPP_STAT_TURN) || (RTE_CONST_I_C04_ALDW_WARNSUPP_STAT_TURN != 5u)
#   error "Enumeration constant <I_C04_ALDW_WARNSUPP_STAT_TURN> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_ALDW_WARNSUPP_STAT_TURN (5u)
#  define I_C04_ALDW_WARNSUPP_STAT_TURN ((c04_ALDW_WarnSupp_Stat)5u)
# endif
# if (defined RTE_CONST_I_C04_ALDW_WARNSUPP_STAT_TURN_DELAY) || (defined I_C04_ALDW_WARNSUPP_STAT_TURN_DELAY)
#  if (!defined RTE_CONST_I_C04_ALDW_WARNSUPP_STAT_TURN_DELAY) || (RTE_CONST_I_C04_ALDW_WARNSUPP_STAT_TURN_DELAY != 6u)
#   error "Enumeration constant <I_C04_ALDW_WARNSUPP_STAT_TURN_DELAY> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_ALDW_WARNSUPP_STAT_TURN_DELAY (6u)
#  define I_C04_ALDW_WARNSUPP_STAT_TURN_DELAY ((c04_ALDW_WarnSupp_Stat)6u)
# endif
# if (defined RTE_CONST_I_C04_ALDW_WARNSUPP_STAT_WARN) || (defined I_C04_ALDW_WARNSUPP_STAT_WARN)
#  if (!defined RTE_CONST_I_C04_ALDW_WARNSUPP_STAT_WARN) || (RTE_CONST_I_C04_ALDW_WARNSUPP_STAT_WARN != 7u)
#   error "Enumeration constant <I_C04_ALDW_WARNSUPP_STAT_WARN> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_ALDW_WARNSUPP_STAT_WARN (7u)
#  define I_C04_ALDW_WARNSUPP_STAT_WARN ((c04_ALDW_WarnSupp_Stat)7u)
# endif
# if (defined RTE_CONST_I_C04_ALDW_WARNSUPP_STAT_WARN_DELAY) || (defined I_C04_ALDW_WARNSUPP_STAT_WARN_DELAY)
#  if (!defined RTE_CONST_I_C04_ALDW_WARNSUPP_STAT_WARN_DELAY) || (RTE_CONST_I_C04_ALDW_WARNSUPP_STAT_WARN_DELAY != 8u)
#   error "Enumeration constant <I_C04_ALDW_WARNSUPP_STAT_WARN_DELAY> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_ALDW_WARNSUPP_STAT_WARN_DELAY (8u)
#  define I_C04_ALDW_WARNSUPP_STAT_WARN_DELAY ((c04_ALDW_WarnSupp_Stat)8u)
# endif
# if (defined RTE_CONST_I_C04_ALDW_WARNSUPP_STAT_SYS_ACTV) || (defined I_C04_ALDW_WARNSUPP_STAT_SYS_ACTV)
#  if (!defined RTE_CONST_I_C04_ALDW_WARNSUPP_STAT_SYS_ACTV) || (RTE_CONST_I_C04_ALDW_WARNSUPP_STAT_SYS_ACTV != 9u)
#   error "Enumeration constant <I_C04_ALDW_WARNSUPP_STAT_SYS_ACTV> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_ALDW_WARNSUPP_STAT_SYS_ACTV (9u)
#  define I_C04_ALDW_WARNSUPP_STAT_SYS_ACTV ((c04_ALDW_WarnSupp_Stat)9u)
# endif
# if (defined RTE_CONST_I_C04_ALDW_WARNSUPP_STAT_SNA) || (defined I_C04_ALDW_WARNSUPP_STAT_SNA)
#  if (!defined RTE_CONST_I_C04_ALDW_WARNSUPP_STAT_SNA) || (RTE_CONST_I_C04_ALDW_WARNSUPP_STAT_SNA != 15u)
#   error "Enumeration constant <I_C04_ALDW_WARNSUPP_STAT_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_ALDW_WARNSUPP_STAT_SNA (15u)
#  define I_C04_ALDW_WARNSUPP_STAT_SNA ((c04_ALDW_WarnSupp_Stat)15u)
# endif

# define Rte_TypeDef_c04_Camcyc_0_to_14
typedef uint8 c04_Camcyc_0_to_14;
# define c04_Camcyc_0_to_14_LowerLimit ((c04_Camcyc_0_to_14)0u)
# define c04_Camcyc_0_to_14_UpperLimit ((c04_Camcyc_0_to_14)15u)
# define Rte_InvalidValue_c04_Camcyc_0_to_14 ((c04_Camcyc_0_to_14)15u)
# if (defined RTE_CONST_I_C04_CAMCYC_0_TO_14_SNA) || (defined I_C04_CAMCYC_0_TO_14_SNA)
#  if (!defined RTE_CONST_I_C04_CAMCYC_0_TO_14_SNA) || (RTE_CONST_I_C04_CAMCYC_0_TO_14_SNA != 15u)
#   error "Enumeration constant <I_C04_CAMCYC_0_TO_14_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_CAMCYC_0_TO_14_SNA (15u)
#  define I_C04_CAMCYC_0_TO_14_SNA ((c04_Camcyc_0_to_14)15u)
# endif

# define Rte_TypeDef_c04_DTQ_ObjDataQual
typedef uint8 c04_DTQ_ObjDataQual;
# define c04_DTQ_ObjDataQual_LowerLimit ((c04_DTQ_ObjDataQual)0u)
# define c04_DTQ_ObjDataQual_UpperLimit ((c04_DTQ_ObjDataQual)15u)
# define Rte_InvalidValue_c04_DTQ_ObjDataQual ((c04_DTQ_ObjDataQual)15u)
# if (defined RTE_CONST_I_C04_DTQ_OBJDATAQUAL_SNA) || (defined I_C04_DTQ_OBJDATAQUAL_SNA)
#  if (!defined RTE_CONST_I_C04_DTQ_OBJDATAQUAL_SNA) || (RTE_CONST_I_C04_DTQ_OBJDATAQUAL_SNA != 15u)
#   error "Enumeration constant <I_C04_DTQ_OBJDATAQUAL_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_DTQ_OBJDATAQUAL_SNA (15u)
#  define I_C04_DTQ_OBJDATAQUAL_SNA ((c04_DTQ_ObjDataQual)15u)
# endif

# define Rte_TypeDef_c04_EPS_Can_Stat_RDU
typedef uint8 c04_EPS_Can_Stat_RDU;
# define c04_EPS_Can_Stat_RDU_LowerLimit ((c04_EPS_Can_Stat_RDU)0u)
# define c04_EPS_Can_Stat_RDU_UpperLimit ((c04_EPS_Can_Stat_RDU)15u)
# define Rte_InvalidValue_c04_EPS_Can_Stat_RDU ((c04_EPS_Can_Stat_RDU)15u)
# if (defined RTE_CONST_I_C04_EPS_CAN_STAT_RDU_IDLE) || (defined I_C04_EPS_CAN_STAT_RDU_IDLE)
#  if (!defined RTE_CONST_I_C04_EPS_CAN_STAT_RDU_IDLE) || (RTE_CONST_I_C04_EPS_CAN_STAT_RDU_IDLE != 0u)
#   error "Enumeration constant <I_C04_EPS_CAN_STAT_RDU_IDLE> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_EPS_CAN_STAT_RDU_IDLE (0u)
#  define I_C04_EPS_CAN_STAT_RDU_IDLE ((c04_EPS_Can_Stat_RDU)0u)
# endif
# if (defined RTE_CONST_I_C04_EPS_CAN_STAT_RDU_CAN_OVRSTEER_DRV) || (defined I_C04_EPS_CAN_STAT_RDU_CAN_OVRSTEER_DRV)
#  if (!defined RTE_CONST_I_C04_EPS_CAN_STAT_RDU_CAN_OVRSTEER_DRV) || (RTE_CONST_I_C04_EPS_CAN_STAT_RDU_CAN_OVRSTEER_DRV != 1u)
#   error "Enumeration constant <I_C04_EPS_CAN_STAT_RDU_CAN_OVRSTEER_DRV> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_EPS_CAN_STAT_RDU_CAN_OVRSTEER_DRV (1u)
#  define I_C04_EPS_CAN_STAT_RDU_CAN_OVRSTEER_DRV ((c04_EPS_Can_Stat_RDU)1u)
# endif
# if (defined RTE_CONST_I_C04_EPS_CAN_STAT_RDU_CAN_DRV_ACTVTY) || (defined I_C04_EPS_CAN_STAT_RDU_CAN_DRV_ACTVTY)
#  if (!defined RTE_CONST_I_C04_EPS_CAN_STAT_RDU_CAN_DRV_ACTVTY) || (RTE_CONST_I_C04_EPS_CAN_STAT_RDU_CAN_DRV_ACTVTY != 2u)
#   error "Enumeration constant <I_C04_EPS_CAN_STAT_RDU_CAN_DRV_ACTVTY> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_EPS_CAN_STAT_RDU_CAN_DRV_ACTVTY (2u)
#  define I_C04_EPS_CAN_STAT_RDU_CAN_DRV_ACTVTY ((c04_EPS_Can_Stat_RDU)2u)
# endif
# if (defined RTE_CONST_I_C04_EPS_CAN_STAT_RDU_CAN_HNDS_OFF) || (defined I_C04_EPS_CAN_STAT_RDU_CAN_HNDS_OFF)
#  if (!defined RTE_CONST_I_C04_EPS_CAN_STAT_RDU_CAN_HNDS_OFF) || (RTE_CONST_I_C04_EPS_CAN_STAT_RDU_CAN_HNDS_OFF != 3u)
#   error "Enumeration constant <I_C04_EPS_CAN_STAT_RDU_CAN_HNDS_OFF> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_EPS_CAN_STAT_RDU_CAN_HNDS_OFF (3u)
#  define I_C04_EPS_CAN_STAT_RDU_CAN_HNDS_OFF ((c04_EPS_Can_Stat_RDU)3u)
# endif
# if (defined RTE_CONST_I_C04_EPS_CAN_STAT_RDU_CAN_IND) || (defined I_C04_EPS_CAN_STAT_RDU_CAN_IND)
#  if (!defined RTE_CONST_I_C04_EPS_CAN_STAT_RDU_CAN_IND) || (RTE_CONST_I_C04_EPS_CAN_STAT_RDU_CAN_IND != 4u)
#   error "Enumeration constant <I_C04_EPS_CAN_STAT_RDU_CAN_IND> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_EPS_CAN_STAT_RDU_CAN_IND (4u)
#  define I_C04_EPS_CAN_STAT_RDU_CAN_IND ((c04_EPS_Can_Stat_RDU)4u)
# endif
# if (defined RTE_CONST_I_C04_EPS_CAN_STAT_RDU_CAN_ACTV_SAFE_ACTV) || (defined I_C04_EPS_CAN_STAT_RDU_CAN_ACTV_SAFE_ACTV)
#  if (!defined RTE_CONST_I_C04_EPS_CAN_STAT_RDU_CAN_ACTV_SAFE_ACTV) || (RTE_CONST_I_C04_EPS_CAN_STAT_RDU_CAN_ACTV_SAFE_ACTV != 5u)
#   error "Enumeration constant <I_C04_EPS_CAN_STAT_RDU_CAN_ACTV_SAFE_ACTV> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_EPS_CAN_STAT_RDU_CAN_ACTV_SAFE_ACTV (5u)
#  define I_C04_EPS_CAN_STAT_RDU_CAN_ACTV_SAFE_ACTV ((c04_EPS_Can_Stat_RDU)5u)
# endif
# if (defined RTE_CONST_I_C04_EPS_CAN_STAT_RDU_CAN_SYSERR) || (defined I_C04_EPS_CAN_STAT_RDU_CAN_SYSERR)
#  if (!defined RTE_CONST_I_C04_EPS_CAN_STAT_RDU_CAN_SYSERR) || (RTE_CONST_I_C04_EPS_CAN_STAT_RDU_CAN_SYSERR != 6u)
#   error "Enumeration constant <I_C04_EPS_CAN_STAT_RDU_CAN_SYSERR> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_EPS_CAN_STAT_RDU_CAN_SYSERR (6u)
#  define I_C04_EPS_CAN_STAT_RDU_CAN_SYSERR ((c04_EPS_Can_Stat_RDU)6u)
# endif
# if (defined RTE_CONST_I_C04_EPS_CAN_STAT_RDU_NDEF7) || (defined I_C04_EPS_CAN_STAT_RDU_NDEF7)
#  if (!defined RTE_CONST_I_C04_EPS_CAN_STAT_RDU_NDEF7) || (RTE_CONST_I_C04_EPS_CAN_STAT_RDU_NDEF7 != 7u)
#   error "Enumeration constant <I_C04_EPS_CAN_STAT_RDU_NDEF7> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_EPS_CAN_STAT_RDU_NDEF7 (7u)
#  define I_C04_EPS_CAN_STAT_RDU_NDEF7 ((c04_EPS_Can_Stat_RDU)7u)
# endif
# if (defined RTE_CONST_I_C04_EPS_CAN_STAT_RDU_NDEF8) || (defined I_C04_EPS_CAN_STAT_RDU_NDEF8)
#  if (!defined RTE_CONST_I_C04_EPS_CAN_STAT_RDU_NDEF8) || (RTE_CONST_I_C04_EPS_CAN_STAT_RDU_NDEF8 != 8u)
#   error "Enumeration constant <I_C04_EPS_CAN_STAT_RDU_NDEF8> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_EPS_CAN_STAT_RDU_NDEF8 (8u)
#  define I_C04_EPS_CAN_STAT_RDU_NDEF8 ((c04_EPS_Can_Stat_RDU)8u)
# endif
# if (defined RTE_CONST_I_C04_EPS_CAN_STAT_RDU_NDEF9) || (defined I_C04_EPS_CAN_STAT_RDU_NDEF9)
#  if (!defined RTE_CONST_I_C04_EPS_CAN_STAT_RDU_NDEF9) || (RTE_CONST_I_C04_EPS_CAN_STAT_RDU_NDEF9 != 9u)
#   error "Enumeration constant <I_C04_EPS_CAN_STAT_RDU_NDEF9> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_EPS_CAN_STAT_RDU_NDEF9 (9u)
#  define I_C04_EPS_CAN_STAT_RDU_NDEF9 ((c04_EPS_Can_Stat_RDU)9u)
# endif
# if (defined RTE_CONST_I_C04_EPS_CAN_STAT_RDU_NDEF10) || (defined I_C04_EPS_CAN_STAT_RDU_NDEF10)
#  if (!defined RTE_CONST_I_C04_EPS_CAN_STAT_RDU_NDEF10) || (RTE_CONST_I_C04_EPS_CAN_STAT_RDU_NDEF10 != 10u)
#   error "Enumeration constant <I_C04_EPS_CAN_STAT_RDU_NDEF10> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_EPS_CAN_STAT_RDU_NDEF10 (10u)
#  define I_C04_EPS_CAN_STAT_RDU_NDEF10 ((c04_EPS_Can_Stat_RDU)10u)
# endif
# if (defined RTE_CONST_I_C04_EPS_CAN_STAT_RDU_NDEF11) || (defined I_C04_EPS_CAN_STAT_RDU_NDEF11)
#  if (!defined RTE_CONST_I_C04_EPS_CAN_STAT_RDU_NDEF11) || (RTE_CONST_I_C04_EPS_CAN_STAT_RDU_NDEF11 != 11u)
#   error "Enumeration constant <I_C04_EPS_CAN_STAT_RDU_NDEF11> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_EPS_CAN_STAT_RDU_NDEF11 (11u)
#  define I_C04_EPS_CAN_STAT_RDU_NDEF11 ((c04_EPS_Can_Stat_RDU)11u)
# endif
# if (defined RTE_CONST_I_C04_EPS_CAN_STAT_RDU_NDEF12) || (defined I_C04_EPS_CAN_STAT_RDU_NDEF12)
#  if (!defined RTE_CONST_I_C04_EPS_CAN_STAT_RDU_NDEF12) || (RTE_CONST_I_C04_EPS_CAN_STAT_RDU_NDEF12 != 12u)
#   error "Enumeration constant <I_C04_EPS_CAN_STAT_RDU_NDEF12> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_EPS_CAN_STAT_RDU_NDEF12 (12u)
#  define I_C04_EPS_CAN_STAT_RDU_NDEF12 ((c04_EPS_Can_Stat_RDU)12u)
# endif
# if (defined RTE_CONST_I_C04_EPS_CAN_STAT_RDU_NDEF13) || (defined I_C04_EPS_CAN_STAT_RDU_NDEF13)
#  if (!defined RTE_CONST_I_C04_EPS_CAN_STAT_RDU_NDEF13) || (RTE_CONST_I_C04_EPS_CAN_STAT_RDU_NDEF13 != 13u)
#   error "Enumeration constant <I_C04_EPS_CAN_STAT_RDU_NDEF13> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_EPS_CAN_STAT_RDU_NDEF13 (13u)
#  define I_C04_EPS_CAN_STAT_RDU_NDEF13 ((c04_EPS_Can_Stat_RDU)13u)
# endif
# if (defined RTE_CONST_I_C04_EPS_CAN_STAT_RDU_NDEF14) || (defined I_C04_EPS_CAN_STAT_RDU_NDEF14)
#  if (!defined RTE_CONST_I_C04_EPS_CAN_STAT_RDU_NDEF14) || (RTE_CONST_I_C04_EPS_CAN_STAT_RDU_NDEF14 != 14u)
#   error "Enumeration constant <I_C04_EPS_CAN_STAT_RDU_NDEF14> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_EPS_CAN_STAT_RDU_NDEF14 (14u)
#  define I_C04_EPS_CAN_STAT_RDU_NDEF14 ((c04_EPS_Can_Stat_RDU)14u)
# endif
# if (defined RTE_CONST_I_C04_EPS_CAN_STAT_RDU_SNA) || (defined I_C04_EPS_CAN_STAT_RDU_SNA)
#  if (!defined RTE_CONST_I_C04_EPS_CAN_STAT_RDU_SNA) || (RTE_CONST_I_C04_EPS_CAN_STAT_RDU_SNA != 15u)
#   error "Enumeration constant <I_C04_EPS_CAN_STAT_RDU_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_EPS_CAN_STAT_RDU_SNA (15u)
#  define I_C04_EPS_CAN_STAT_RDU_SNA ((c04_EPS_Can_Stat_RDU)15u)
# endif

# define Rte_TypeDef_c04_ESP_Oprtn_Stat_AS
typedef uint8 c04_ESP_Oprtn_Stat_AS;
# define c04_ESP_Oprtn_Stat_AS_LowerLimit ((c04_ESP_Oprtn_Stat_AS)0u)
# define c04_ESP_Oprtn_Stat_AS_UpperLimit ((c04_ESP_Oprtn_Stat_AS)15u)
# define Rte_InvalidValue_c04_ESP_Oprtn_Stat_AS ((c04_ESP_Oprtn_Stat_AS)15u)
# if (defined RTE_CONST_I_C04_ESP_OPRTN_STAT_AS_NORM) || (defined I_C04_ESP_OPRTN_STAT_AS_NORM)
#  if (!defined RTE_CONST_I_C04_ESP_OPRTN_STAT_AS_NORM) || (RTE_CONST_I_C04_ESP_OPRTN_STAT_AS_NORM != 0u)
#   error "Enumeration constant <I_C04_ESP_OPRTN_STAT_AS_NORM> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_ESP_OPRTN_STAT_AS_NORM (0u)
#  define I_C04_ESP_OPRTN_STAT_AS_NORM ((c04_ESP_Oprtn_Stat_AS)0u)
# endif
# if (defined RTE_CONST_I_C04_ESP_OPRTN_STAT_AS_INIT) || (defined I_C04_ESP_OPRTN_STAT_AS_INIT)
#  if (!defined RTE_CONST_I_C04_ESP_OPRTN_STAT_AS_INIT) || (RTE_CONST_I_C04_ESP_OPRTN_STAT_AS_INIT != 1u)
#   error "Enumeration constant <I_C04_ESP_OPRTN_STAT_AS_INIT> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_ESP_OPRTN_STAT_AS_INIT (1u)
#  define I_C04_ESP_OPRTN_STAT_AS_INIT ((c04_ESP_Oprtn_Stat_AS)1u)
# endif
# if (defined RTE_CONST_I_C04_ESP_OPRTN_STAT_AS_DIAG) || (defined I_C04_ESP_OPRTN_STAT_AS_DIAG)
#  if (!defined RTE_CONST_I_C04_ESP_OPRTN_STAT_AS_DIAG) || (RTE_CONST_I_C04_ESP_OPRTN_STAT_AS_DIAG != 2u)
#   error "Enumeration constant <I_C04_ESP_OPRTN_STAT_AS_DIAG> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_ESP_OPRTN_STAT_AS_DIAG (2u)
#  define I_C04_ESP_OPRTN_STAT_AS_DIAG ((c04_ESP_Oprtn_Stat_AS)2u)
# endif
# if (defined RTE_CONST_I_C04_ESP_OPRTN_STAT_AS_EMT) || (defined I_C04_ESP_OPRTN_STAT_AS_EMT)
#  if (!defined RTE_CONST_I_C04_ESP_OPRTN_STAT_AS_EMT) || (RTE_CONST_I_C04_ESP_OPRTN_STAT_AS_EMT != 3u)
#   error "Enumeration constant <I_C04_ESP_OPRTN_STAT_AS_EMT> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_ESP_OPRTN_STAT_AS_EMT (3u)
#  define I_C04_ESP_OPRTN_STAT_AS_EMT ((c04_ESP_Oprtn_Stat_AS)3u)
# endif
# if (defined RTE_CONST_I_C04_ESP_OPRTN_STAT_AS_TBCC) || (defined I_C04_ESP_OPRTN_STAT_AS_TBCC)
#  if (!defined RTE_CONST_I_C04_ESP_OPRTN_STAT_AS_TBCC) || (RTE_CONST_I_C04_ESP_OPRTN_STAT_AS_TBCC != 4u)
#   error "Enumeration constant <I_C04_ESP_OPRTN_STAT_AS_TBCC> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_ESP_OPRTN_STAT_AS_TBCC (4u)
#  define I_C04_ESP_OPRTN_STAT_AS_TBCC ((c04_ESP_Oprtn_Stat_AS)4u)
# endif
# if (defined RTE_CONST_I_C04_ESP_OPRTN_STAT_AS_FLT) || (defined I_C04_ESP_OPRTN_STAT_AS_FLT)
#  if (!defined RTE_CONST_I_C04_ESP_OPRTN_STAT_AS_FLT) || (RTE_CONST_I_C04_ESP_OPRTN_STAT_AS_FLT != 5u)
#   error "Enumeration constant <I_C04_ESP_OPRTN_STAT_AS_FLT> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_ESP_OPRTN_STAT_AS_FLT (5u)
#  define I_C04_ESP_OPRTN_STAT_AS_FLT ((c04_ESP_Oprtn_Stat_AS)5u)
# endif
# if (defined RTE_CONST_I_C04_ESP_OPRTN_STAT_AS_CTRL_ACTV) || (defined I_C04_ESP_OPRTN_STAT_AS_CTRL_ACTV)
#  if (!defined RTE_CONST_I_C04_ESP_OPRTN_STAT_AS_CTRL_ACTV) || (RTE_CONST_I_C04_ESP_OPRTN_STAT_AS_CTRL_ACTV != 6u)
#   error "Enumeration constant <I_C04_ESP_OPRTN_STAT_AS_CTRL_ACTV> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_ESP_OPRTN_STAT_AS_CTRL_ACTV (6u)
#  define I_C04_ESP_OPRTN_STAT_AS_CTRL_ACTV ((c04_ESP_Oprtn_Stat_AS)6u)
# endif
# if (defined RTE_CONST_I_C04_ESP_OPRTN_STAT_AS_AMG_OFF) || (defined I_C04_ESP_OPRTN_STAT_AS_AMG_OFF)
#  if (!defined RTE_CONST_I_C04_ESP_OPRTN_STAT_AS_AMG_OFF) || (RTE_CONST_I_C04_ESP_OPRTN_STAT_AS_AMG_OFF != 7u)
#   error "Enumeration constant <I_C04_ESP_OPRTN_STAT_AS_AMG_OFF> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_ESP_OPRTN_STAT_AS_AMG_OFF (7u)
#  define I_C04_ESP_OPRTN_STAT_AS_AMG_OFF ((c04_ESP_Oprtn_Stat_AS)7u)
# endif
# if (defined RTE_CONST_I_C04_ESP_OPRTN_STAT_AS_OFF_AMG_SPORT) || (defined I_C04_ESP_OPRTN_STAT_AS_OFF_AMG_SPORT)
#  if (!defined RTE_CONST_I_C04_ESP_OPRTN_STAT_AS_OFF_AMG_SPORT) || (RTE_CONST_I_C04_ESP_OPRTN_STAT_AS_OFF_AMG_SPORT != 8u)
#   error "Enumeration constant <I_C04_ESP_OPRTN_STAT_AS_OFF_AMG_SPORT> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_ESP_OPRTN_STAT_AS_OFF_AMG_SPORT (8u)
#  define I_C04_ESP_OPRTN_STAT_AS_OFF_AMG_SPORT ((c04_ESP_Oprtn_Stat_AS)8u)
# endif
# if (defined RTE_CONST_I_C04_ESP_OPRTN_STAT_AS_SNA) || (defined I_C04_ESP_OPRTN_STAT_AS_SNA)
#  if (!defined RTE_CONST_I_C04_ESP_OPRTN_STAT_AS_SNA) || (RTE_CONST_I_C04_ESP_OPRTN_STAT_AS_SNA != 15u)
#   error "Enumeration constant <I_C04_ESP_OPRTN_STAT_AS_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_ESP_OPRTN_STAT_AS_SNA (15u)
#  define I_C04_ESP_OPRTN_STAT_AS_SNA ((c04_ESP_Oprtn_Stat_AS)15u)
# endif

# define Rte_TypeDef_c04_EVC_HL_Style
typedef uint8 c04_EVC_HL_Style;
# define c04_EVC_HL_Style_LowerLimit ((c04_EVC_HL_Style)0u)
# define c04_EVC_HL_Style_UpperLimit ((c04_EVC_HL_Style)15u)
# if (defined RTE_CONST_I_C04_EVC_HL_STYLE_BI_XEN_RHT) || (defined I_C04_EVC_HL_STYLE_BI_XEN_RHT)
#  if (!defined RTE_CONST_I_C04_EVC_HL_STYLE_BI_XEN_RHT) || (RTE_CONST_I_C04_EVC_HL_STYLE_BI_XEN_RHT != 0u)
#   error "Enumeration constant <I_C04_EVC_HL_STYLE_BI_XEN_RHT> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_EVC_HL_STYLE_BI_XEN_RHT (0u)
#  define I_C04_EVC_HL_STYLE_BI_XEN_RHT ((c04_EVC_HL_Style)0u)
# endif
# if (defined RTE_CONST_I_C04_EVC_HL_STYLE_BI_XEN_LHT) || (defined I_C04_EVC_HL_STYLE_BI_XEN_LHT)
#  if (!defined RTE_CONST_I_C04_EVC_HL_STYLE_BI_XEN_LHT) || (RTE_CONST_I_C04_EVC_HL_STYLE_BI_XEN_LHT != 1u)
#   error "Enumeration constant <I_C04_EVC_HL_STYLE_BI_XEN_LHT> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_EVC_HL_STYLE_BI_XEN_LHT (1u)
#  define I_C04_EVC_HL_STYLE_BI_XEN_LHT ((c04_EVC_HL_Style)1u)
# endif
# if (defined RTE_CONST_I_C04_EVC_HL_STYLE_BI_XEN_ACURV_RHT) || (defined I_C04_EVC_HL_STYLE_BI_XEN_ACURV_RHT)
#  if (!defined RTE_CONST_I_C04_EVC_HL_STYLE_BI_XEN_ACURV_RHT) || (RTE_CONST_I_C04_EVC_HL_STYLE_BI_XEN_ACURV_RHT != 2u)
#   error "Enumeration constant <I_C04_EVC_HL_STYLE_BI_XEN_ACURV_RHT> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_EVC_HL_STYLE_BI_XEN_ACURV_RHT (2u)
#  define I_C04_EVC_HL_STYLE_BI_XEN_ACURV_RHT ((c04_EVC_HL_Style)2u)
# endif
# if (defined RTE_CONST_I_C04_EVC_HL_STYLE_BI_XEN_ACURV_LHT) || (defined I_C04_EVC_HL_STYLE_BI_XEN_ACURV_LHT)
#  if (!defined RTE_CONST_I_C04_EVC_HL_STYLE_BI_XEN_ACURV_LHT) || (RTE_CONST_I_C04_EVC_HL_STYLE_BI_XEN_ACURV_LHT != 3u)
#   error "Enumeration constant <I_C04_EVC_HL_STYLE_BI_XEN_ACURV_LHT> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_EVC_HL_STYLE_BI_XEN_ACURV_LHT (3u)
#  define I_C04_EVC_HL_STYLE_BI_XEN_ACURV_LHT ((c04_EVC_HL_Style)3u)
# endif
# if (defined RTE_CONST_I_C04_EVC_HL_STYLE_BI_XEN_INTLGT_RHT) || (defined I_C04_EVC_HL_STYLE_BI_XEN_INTLGT_RHT)
#  if (!defined RTE_CONST_I_C04_EVC_HL_STYLE_BI_XEN_INTLGT_RHT) || (RTE_CONST_I_C04_EVC_HL_STYLE_BI_XEN_INTLGT_RHT != 4u)
#   error "Enumeration constant <I_C04_EVC_HL_STYLE_BI_XEN_INTLGT_RHT> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_EVC_HL_STYLE_BI_XEN_INTLGT_RHT (4u)
#  define I_C04_EVC_HL_STYLE_BI_XEN_INTLGT_RHT ((c04_EVC_HL_Style)4u)
# endif
# if (defined RTE_CONST_I_C04_EVC_HL_STYLE_BI_XEN_INTLGT_LHT) || (defined I_C04_EVC_HL_STYLE_BI_XEN_INTLGT_LHT)
#  if (!defined RTE_CONST_I_C04_EVC_HL_STYLE_BI_XEN_INTLGT_LHT) || (RTE_CONST_I_C04_EVC_HL_STYLE_BI_XEN_INTLGT_LHT != 5u)
#   error "Enumeration constant <I_C04_EVC_HL_STYLE_BI_XEN_INTLGT_LHT> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_EVC_HL_STYLE_BI_XEN_INTLGT_LHT (5u)
#  define I_C04_EVC_HL_STYLE_BI_XEN_INTLGT_LHT ((c04_EVC_HL_Style)5u)
# endif
# if (defined RTE_CONST_I_C04_EVC_HL_STYLE_LED_STAT_LHT) || (defined I_C04_EVC_HL_STYLE_LED_STAT_LHT)
#  if (!defined RTE_CONST_I_C04_EVC_HL_STYLE_LED_STAT_LHT) || (RTE_CONST_I_C04_EVC_HL_STYLE_LED_STAT_LHT != 6u)
#   error "Enumeration constant <I_C04_EVC_HL_STYLE_LED_STAT_LHT> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_EVC_HL_STYLE_LED_STAT_LHT (6u)
#  define I_C04_EVC_HL_STYLE_LED_STAT_LHT ((c04_EVC_HL_Style)6u)
# endif
# if (defined RTE_CONST_I_C04_EVC_HL_STYLE_LED_STAT_RHT) || (defined I_C04_EVC_HL_STYLE_LED_STAT_RHT)
#  if (!defined RTE_CONST_I_C04_EVC_HL_STYLE_LED_STAT_RHT) || (RTE_CONST_I_C04_EVC_HL_STYLE_LED_STAT_RHT != 7u)
#   error "Enumeration constant <I_C04_EVC_HL_STYLE_LED_STAT_RHT> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_EVC_HL_STYLE_LED_STAT_RHT (7u)
#  define I_C04_EVC_HL_STYLE_LED_STAT_RHT ((c04_EVC_HL_Style)7u)
# endif
# if (defined RTE_CONST_I_C04_EVC_HL_STYLE_LED_DYN_SAE_RHT) || (defined I_C04_EVC_HL_STYLE_LED_DYN_SAE_RHT)
#  if (!defined RTE_CONST_I_C04_EVC_HL_STYLE_LED_DYN_SAE_RHT) || (RTE_CONST_I_C04_EVC_HL_STYLE_LED_DYN_SAE_RHT != 8u)
#   error "Enumeration constant <I_C04_EVC_HL_STYLE_LED_DYN_SAE_RHT> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_EVC_HL_STYLE_LED_DYN_SAE_RHT (8u)
#  define I_C04_EVC_HL_STYLE_LED_DYN_SAE_RHT ((c04_EVC_HL_Style)8u)
# endif
# if (defined RTE_CONST_I_C04_EVC_HL_STYLE_LED_DYN_LHT) || (defined I_C04_EVC_HL_STYLE_LED_DYN_LHT)
#  if (!defined RTE_CONST_I_C04_EVC_HL_STYLE_LED_DYN_LHT) || (RTE_CONST_I_C04_EVC_HL_STYLE_LED_DYN_LHT != 9u)
#   error "Enumeration constant <I_C04_EVC_HL_STYLE_LED_DYN_LHT> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_EVC_HL_STYLE_LED_DYN_LHT (9u)
#  define I_C04_EVC_HL_STYLE_LED_DYN_LHT ((c04_EVC_HL_Style)9u)
# endif
# if (defined RTE_CONST_I_C04_EVC_HL_STYLE_LED_DYN_RHT) || (defined I_C04_EVC_HL_STYLE_LED_DYN_RHT)
#  if (!defined RTE_CONST_I_C04_EVC_HL_STYLE_LED_DYN_RHT) || (RTE_CONST_I_C04_EVC_HL_STYLE_LED_DYN_RHT != 10u)
#   error "Enumeration constant <I_C04_EVC_HL_STYLE_LED_DYN_RHT> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_EVC_HL_STYLE_LED_DYN_RHT (10u)
#  define I_C04_EVC_HL_STYLE_LED_DYN_RHT ((c04_EVC_HL_Style)10u)
# endif
# if (defined RTE_CONST_I_C04_EVC_HL_STYLE_HEADLIGHT_LHT) || (defined I_C04_EVC_HL_STYLE_HEADLIGHT_LHT)
#  if (!defined RTE_CONST_I_C04_EVC_HL_STYLE_HEADLIGHT_LHT) || (RTE_CONST_I_C04_EVC_HL_STYLE_HEADLIGHT_LHT != 11u)
#   error "Enumeration constant <I_C04_EVC_HL_STYLE_HEADLIGHT_LHT> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_EVC_HL_STYLE_HEADLIGHT_LHT (11u)
#  define I_C04_EVC_HL_STYLE_HEADLIGHT_LHT ((c04_EVC_HL_Style)11u)
# endif
# if (defined RTE_CONST_I_C04_EVC_HL_STYLE_HEADLIGHT_RHT) || (defined I_C04_EVC_HL_STYLE_HEADLIGHT_RHT)
#  if (!defined RTE_CONST_I_C04_EVC_HL_STYLE_HEADLIGHT_RHT) || (RTE_CONST_I_C04_EVC_HL_STYLE_HEADLIGHT_RHT != 12u)
#   error "Enumeration constant <I_C04_EVC_HL_STYLE_HEADLIGHT_RHT> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_EVC_HL_STYLE_HEADLIGHT_RHT (12u)
#  define I_C04_EVC_HL_STYLE_HEADLIGHT_RHT ((c04_EVC_HL_Style)12u)
# endif
# if (defined RTE_CONST_I_C04_EVC_HL_STYLE_SNA) || (defined I_C04_EVC_HL_STYLE_SNA)
#  if (!defined RTE_CONST_I_C04_EVC_HL_STYLE_SNA) || (RTE_CONST_I_C04_EVC_HL_STYLE_SNA != 15u)
#   error "Enumeration constant <I_C04_EVC_HL_STYLE_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_EVC_HL_STYLE_SNA (15u)
#  define I_C04_EVC_HL_STYLE_SNA ((c04_EVC_HL_Style)15u)
# endif

# define Rte_TypeDef_c04_EVC_TxStyle
typedef uint8 c04_EVC_TxStyle;
# define c04_EVC_TxStyle_LowerLimit ((c04_EVC_TxStyle)0u)
# define c04_EVC_TxStyle_UpperLimit ((c04_EVC_TxStyle)15u)
# if (defined RTE_CONST_I_C04_EVC_TXSTYLE_MANUAL_6) || (defined I_C04_EVC_TXSTYLE_MANUAL_6)
#  if (!defined RTE_CONST_I_C04_EVC_TXSTYLE_MANUAL_6) || (RTE_CONST_I_C04_EVC_TXSTYLE_MANUAL_6 != 0u)
#   error "Enumeration constant <I_C04_EVC_TXSTYLE_MANUAL_6> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_EVC_TXSTYLE_MANUAL_6 (0u)
#  define I_C04_EVC_TXSTYLE_MANUAL_6 ((c04_EVC_TxStyle)0u)
# endif
# if (defined RTE_CONST_I_C04_EVC_TXSTYLE_AUTOM_5) || (defined I_C04_EVC_TXSTYLE_AUTOM_5)
#  if (!defined RTE_CONST_I_C04_EVC_TXSTYLE_AUTOM_5) || (RTE_CONST_I_C04_EVC_TXSTYLE_AUTOM_5 != 1u)
#   error "Enumeration constant <I_C04_EVC_TXSTYLE_AUTOM_5> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_EVC_TXSTYLE_AUTOM_5 (1u)
#  define I_C04_EVC_TXSTYLE_AUTOM_5 ((c04_EVC_TxStyle)1u)
# endif
# if (defined RTE_CONST_I_C04_EVC_TXSTYLE_AUTOM_7) || (defined I_C04_EVC_TXSTYLE_AUTOM_7)
#  if (!defined RTE_CONST_I_C04_EVC_TXSTYLE_AUTOM_7) || (RTE_CONST_I_C04_EVC_TXSTYLE_AUTOM_7 != 2u)
#   error "Enumeration constant <I_C04_EVC_TXSTYLE_AUTOM_7> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_EVC_TXSTYLE_AUTOM_7 (2u)
#  define I_C04_EVC_TXSTYLE_AUTOM_7 ((c04_EVC_TxStyle)2u)
# endif
# if (defined RTE_CONST_I_C04_EVC_TXSTYLE_AUTOM_9) || (defined I_C04_EVC_TXSTYLE_AUTOM_9)
#  if (!defined RTE_CONST_I_C04_EVC_TXSTYLE_AUTOM_9) || (RTE_CONST_I_C04_EVC_TXSTYLE_AUTOM_9 != 3u)
#   error "Enumeration constant <I_C04_EVC_TXSTYLE_AUTOM_9> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_EVC_TXSTYLE_AUTOM_9 (3u)
#  define I_C04_EVC_TXSTYLE_AUTOM_9 ((c04_EVC_TxStyle)3u)
# endif
# if (defined RTE_CONST_I_C04_EVC_TXSTYLE_SNA) || (defined I_C04_EVC_TXSTYLE_SNA)
#  if (!defined RTE_CONST_I_C04_EVC_TXSTYLE_SNA) || (RTE_CONST_I_C04_EVC_TXSTYLE_SNA != 15u)
#   error "Enumeration constant <I_C04_EVC_TXSTYLE_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_EVC_TXSTYLE_SNA (15u)
#  define I_C04_EVC_TXSTYLE_SNA ((c04_EVC_TxStyle)15u)
# endif

# define Rte_TypeDef_c04_GPS_Fix
typedef uint8 c04_GPS_Fix;
# define c04_GPS_Fix_LowerLimit ((c04_GPS_Fix)1u)
# define c04_GPS_Fix_UpperLimit ((c04_GPS_Fix)15u)
# define Rte_InvalidValue_c04_GPS_Fix ((c04_GPS_Fix)15u)
# if (defined RTE_CONST_I_C04_GPS_FIX_NO_FIX) || (defined I_C04_GPS_FIX_NO_FIX)
#  if (!defined RTE_CONST_I_C04_GPS_FIX_NO_FIX) || (RTE_CONST_I_C04_GPS_FIX_NO_FIX != 1u)
#   error "Enumeration constant <I_C04_GPS_FIX_NO_FIX> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_GPS_FIX_NO_FIX (1u)
#  define I_C04_GPS_FIX_NO_FIX ((c04_GPS_Fix)1u)
# endif
# if (defined RTE_CONST_I_C04_GPS_FIX_FIX_2D) || (defined I_C04_GPS_FIX_FIX_2D)
#  if (!defined RTE_CONST_I_C04_GPS_FIX_FIX_2D) || (RTE_CONST_I_C04_GPS_FIX_FIX_2D != 2u)
#   error "Enumeration constant <I_C04_GPS_FIX_FIX_2D> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_GPS_FIX_FIX_2D (2u)
#  define I_C04_GPS_FIX_FIX_2D ((c04_GPS_Fix)2u)
# endif
# if (defined RTE_CONST_I_C04_GPS_FIX_FIX_3D) || (defined I_C04_GPS_FIX_FIX_3D)
#  if (!defined RTE_CONST_I_C04_GPS_FIX_FIX_3D) || (RTE_CONST_I_C04_GPS_FIX_FIX_3D != 4u)
#   error "Enumeration constant <I_C04_GPS_FIX_FIX_3D> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_GPS_FIX_FIX_3D (4u)
#  define I_C04_GPS_FIX_FIX_3D ((c04_GPS_Fix)4u)
# endif
# if (defined RTE_CONST_I_C04_GPS_FIX_SNA) || (defined I_C04_GPS_FIX_SNA)
#  if (!defined RTE_CONST_I_C04_GPS_FIX_SNA) || (RTE_CONST_I_C04_GPS_FIX_SNA != 15u)
#   error "Enumeration constant <I_C04_GPS_FIX_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_GPS_FIX_SNA (15u)
#  define I_C04_GPS_FIX_SNA ((c04_GPS_Fix)15u)
# endif

# define Rte_TypeDef_c04_Gr
typedef uint8 c04_Gr;
# define c04_Gr_LowerLimit ((c04_Gr)0u)
# define c04_Gr_UpperLimit ((c04_Gr)15u)
# define Rte_InvalidValue_c04_Gr ((c04_Gr)15u)
# if (defined RTE_CONST_I_C04_GR_N) || (defined I_C04_GR_N)
#  if (!defined RTE_CONST_I_C04_GR_N) || (RTE_CONST_I_C04_GR_N != 0u)
#   error "Enumeration constant <I_C04_GR_N> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_GR_N (0u)
#  define I_C04_GR_N ((c04_Gr)0u)
# endif
# if (defined RTE_CONST_I_C04_GR_D1) || (defined I_C04_GR_D1)
#  if (!defined RTE_CONST_I_C04_GR_D1) || (RTE_CONST_I_C04_GR_D1 != 1u)
#   error "Enumeration constant <I_C04_GR_D1> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_GR_D1 (1u)
#  define I_C04_GR_D1 ((c04_Gr)1u)
# endif
# if (defined RTE_CONST_I_C04_GR_D2) || (defined I_C04_GR_D2)
#  if (!defined RTE_CONST_I_C04_GR_D2) || (RTE_CONST_I_C04_GR_D2 != 2u)
#   error "Enumeration constant <I_C04_GR_D2> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_GR_D2 (2u)
#  define I_C04_GR_D2 ((c04_Gr)2u)
# endif
# if (defined RTE_CONST_I_C04_GR_D3) || (defined I_C04_GR_D3)
#  if (!defined RTE_CONST_I_C04_GR_D3) || (RTE_CONST_I_C04_GR_D3 != 3u)
#   error "Enumeration constant <I_C04_GR_D3> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_GR_D3 (3u)
#  define I_C04_GR_D3 ((c04_Gr)3u)
# endif
# if (defined RTE_CONST_I_C04_GR_D4) || (defined I_C04_GR_D4)
#  if (!defined RTE_CONST_I_C04_GR_D4) || (RTE_CONST_I_C04_GR_D4 != 4u)
#   error "Enumeration constant <I_C04_GR_D4> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_GR_D4 (4u)
#  define I_C04_GR_D4 ((c04_Gr)4u)
# endif
# if (defined RTE_CONST_I_C04_GR_D5) || (defined I_C04_GR_D5)
#  if (!defined RTE_CONST_I_C04_GR_D5) || (RTE_CONST_I_C04_GR_D5 != 5u)
#   error "Enumeration constant <I_C04_GR_D5> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_GR_D5 (5u)
#  define I_C04_GR_D5 ((c04_Gr)5u)
# endif
# if (defined RTE_CONST_I_C04_GR_D6) || (defined I_C04_GR_D6)
#  if (!defined RTE_CONST_I_C04_GR_D6) || (RTE_CONST_I_C04_GR_D6 != 6u)
#   error "Enumeration constant <I_C04_GR_D6> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_GR_D6 (6u)
#  define I_C04_GR_D6 ((c04_Gr)6u)
# endif
# if (defined RTE_CONST_I_C04_GR_D7) || (defined I_C04_GR_D7)
#  if (!defined RTE_CONST_I_C04_GR_D7) || (RTE_CONST_I_C04_GR_D7 != 7u)
#   error "Enumeration constant <I_C04_GR_D7> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_GR_D7 (7u)
#  define I_C04_GR_D7 ((c04_Gr)7u)
# endif
# if (defined RTE_CONST_I_C04_GR_D8) || (defined I_C04_GR_D8)
#  if (!defined RTE_CONST_I_C04_GR_D8) || (RTE_CONST_I_C04_GR_D8 != 8u)
#   error "Enumeration constant <I_C04_GR_D8> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_GR_D8 (8u)
#  define I_C04_GR_D8 ((c04_Gr)8u)
# endif
# if (defined RTE_CONST_I_C04_GR_D9) || (defined I_C04_GR_D9)
#  if (!defined RTE_CONST_I_C04_GR_D9) || (RTE_CONST_I_C04_GR_D9 != 9u)
#   error "Enumeration constant <I_C04_GR_D9> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_GR_D9 (9u)
#  define I_C04_GR_D9 ((c04_Gr)9u)
# endif
# if (defined RTE_CONST_I_C04_GR_R) || (defined I_C04_GR_R)
#  if (!defined RTE_CONST_I_C04_GR_R) || (RTE_CONST_I_C04_GR_R != 11u)
#   error "Enumeration constant <I_C04_GR_R> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_GR_R (11u)
#  define I_C04_GR_R ((c04_Gr)11u)
# endif
# if (defined RTE_CONST_I_C04_GR_P) || (defined I_C04_GR_P)
#  if (!defined RTE_CONST_I_C04_GR_P) || (RTE_CONST_I_C04_GR_P != 13u)
#   error "Enumeration constant <I_C04_GR_P> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_GR_P (13u)
#  define I_C04_GR_P ((c04_Gr)13u)
# endif
# if (defined RTE_CONST_I_C04_GR_PWRFREE) || (defined I_C04_GR_PWRFREE)
#  if (!defined RTE_CONST_I_C04_GR_PWRFREE) || (RTE_CONST_I_C04_GR_PWRFREE != 14u)
#   error "Enumeration constant <I_C04_GR_PWRFREE> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_GR_PWRFREE (14u)
#  define I_C04_GR_PWRFREE ((c04_Gr)14u)
# endif
# if (defined RTE_CONST_I_C04_GR_SNA) || (defined I_C04_GR_SNA)
#  if (!defined RTE_CONST_I_C04_GR_SNA) || (RTE_CONST_I_C04_GR_SNA != 15u)
#   error "Enumeration constant <I_C04_GR_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_GR_SNA (15u)
#  define I_C04_GR_SNA ((c04_Gr)15u)
# endif

# define Rte_TypeDef_c04_Gr_Target
typedef uint8 c04_Gr_Target;
# define c04_Gr_Target_LowerLimit ((c04_Gr_Target)0u)
# define c04_Gr_Target_UpperLimit ((c04_Gr_Target)15u)
# define Rte_InvalidValue_c04_Gr_Target ((c04_Gr_Target)15u)
# if (defined RTE_CONST_I_C04_GR_TARGET_N) || (defined I_C04_GR_TARGET_N)
#  if (!defined RTE_CONST_I_C04_GR_TARGET_N) || (RTE_CONST_I_C04_GR_TARGET_N != 0u)
#   error "Enumeration constant <I_C04_GR_TARGET_N> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_GR_TARGET_N (0u)
#  define I_C04_GR_TARGET_N ((c04_Gr_Target)0u)
# endif
# if (defined RTE_CONST_I_C04_GR_TARGET_D1) || (defined I_C04_GR_TARGET_D1)
#  if (!defined RTE_CONST_I_C04_GR_TARGET_D1) || (RTE_CONST_I_C04_GR_TARGET_D1 != 1u)
#   error "Enumeration constant <I_C04_GR_TARGET_D1> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_GR_TARGET_D1 (1u)
#  define I_C04_GR_TARGET_D1 ((c04_Gr_Target)1u)
# endif
# if (defined RTE_CONST_I_C04_GR_TARGET_D2) || (defined I_C04_GR_TARGET_D2)
#  if (!defined RTE_CONST_I_C04_GR_TARGET_D2) || (RTE_CONST_I_C04_GR_TARGET_D2 != 2u)
#   error "Enumeration constant <I_C04_GR_TARGET_D2> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_GR_TARGET_D2 (2u)
#  define I_C04_GR_TARGET_D2 ((c04_Gr_Target)2u)
# endif
# if (defined RTE_CONST_I_C04_GR_TARGET_D3) || (defined I_C04_GR_TARGET_D3)
#  if (!defined RTE_CONST_I_C04_GR_TARGET_D3) || (RTE_CONST_I_C04_GR_TARGET_D3 != 3u)
#   error "Enumeration constant <I_C04_GR_TARGET_D3> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_GR_TARGET_D3 (3u)
#  define I_C04_GR_TARGET_D3 ((c04_Gr_Target)3u)
# endif
# if (defined RTE_CONST_I_C04_GR_TARGET_D4) || (defined I_C04_GR_TARGET_D4)
#  if (!defined RTE_CONST_I_C04_GR_TARGET_D4) || (RTE_CONST_I_C04_GR_TARGET_D4 != 4u)
#   error "Enumeration constant <I_C04_GR_TARGET_D4> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_GR_TARGET_D4 (4u)
#  define I_C04_GR_TARGET_D4 ((c04_Gr_Target)4u)
# endif
# if (defined RTE_CONST_I_C04_GR_TARGET_D5) || (defined I_C04_GR_TARGET_D5)
#  if (!defined RTE_CONST_I_C04_GR_TARGET_D5) || (RTE_CONST_I_C04_GR_TARGET_D5 != 5u)
#   error "Enumeration constant <I_C04_GR_TARGET_D5> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_GR_TARGET_D5 (5u)
#  define I_C04_GR_TARGET_D5 ((c04_Gr_Target)5u)
# endif
# if (defined RTE_CONST_I_C04_GR_TARGET_D6) || (defined I_C04_GR_TARGET_D6)
#  if (!defined RTE_CONST_I_C04_GR_TARGET_D6) || (RTE_CONST_I_C04_GR_TARGET_D6 != 6u)
#   error "Enumeration constant <I_C04_GR_TARGET_D6> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_GR_TARGET_D6 (6u)
#  define I_C04_GR_TARGET_D6 ((c04_Gr_Target)6u)
# endif
# if (defined RTE_CONST_I_C04_GR_TARGET_D7) || (defined I_C04_GR_TARGET_D7)
#  if (!defined RTE_CONST_I_C04_GR_TARGET_D7) || (RTE_CONST_I_C04_GR_TARGET_D7 != 7u)
#   error "Enumeration constant <I_C04_GR_TARGET_D7> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_GR_TARGET_D7 (7u)
#  define I_C04_GR_TARGET_D7 ((c04_Gr_Target)7u)
# endif
# if (defined RTE_CONST_I_C04_GR_TARGET_D8) || (defined I_C04_GR_TARGET_D8)
#  if (!defined RTE_CONST_I_C04_GR_TARGET_D8) || (RTE_CONST_I_C04_GR_TARGET_D8 != 8u)
#   error "Enumeration constant <I_C04_GR_TARGET_D8> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_GR_TARGET_D8 (8u)
#  define I_C04_GR_TARGET_D8 ((c04_Gr_Target)8u)
# endif
# if (defined RTE_CONST_I_C04_GR_TARGET_D9) || (defined I_C04_GR_TARGET_D9)
#  if (!defined RTE_CONST_I_C04_GR_TARGET_D9) || (RTE_CONST_I_C04_GR_TARGET_D9 != 9u)
#   error "Enumeration constant <I_C04_GR_TARGET_D9> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_GR_TARGET_D9 (9u)
#  define I_C04_GR_TARGET_D9 ((c04_Gr_Target)9u)
# endif
# if (defined RTE_CONST_I_C04_GR_TARGET_R) || (defined I_C04_GR_TARGET_R)
#  if (!defined RTE_CONST_I_C04_GR_TARGET_R) || (RTE_CONST_I_C04_GR_TARGET_R != 11u)
#   error "Enumeration constant <I_C04_GR_TARGET_R> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_GR_TARGET_R (11u)
#  define I_C04_GR_TARGET_R ((c04_Gr_Target)11u)
# endif
# if (defined RTE_CONST_I_C04_GR_TARGET_P) || (defined I_C04_GR_TARGET_P)
#  if (!defined RTE_CONST_I_C04_GR_TARGET_P) || (RTE_CONST_I_C04_GR_TARGET_P != 13u)
#   error "Enumeration constant <I_C04_GR_TARGET_P> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_GR_TARGET_P (13u)
#  define I_C04_GR_TARGET_P ((c04_Gr_Target)13u)
# endif
# if (defined RTE_CONST_I_C04_GR_TARGET_ABORT) || (defined I_C04_GR_TARGET_ABORT)
#  if (!defined RTE_CONST_I_C04_GR_TARGET_ABORT) || (RTE_CONST_I_C04_GR_TARGET_ABORT != 14u)
#   error "Enumeration constant <I_C04_GR_TARGET_ABORT> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_GR_TARGET_ABORT (14u)
#  define I_C04_GR_TARGET_ABORT ((c04_Gr_Target)14u)
# endif
# if (defined RTE_CONST_I_C04_GR_TARGET_SNA) || (defined I_C04_GR_TARGET_SNA)
#  if (!defined RTE_CONST_I_C04_GR_TARGET_SNA) || (RTE_CONST_I_C04_GR_TARGET_SNA != 15u)
#   error "Enumeration constant <I_C04_GR_TARGET_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_GR_TARGET_SNA (15u)
#  define I_C04_GR_TARGET_SNA ((c04_Gr_Target)15u)
# endif

# define Rte_TypeDef_c04_LDC_DTR_Stat
typedef uint8 c04_LDC_DTR_Stat;
# define c04_LDC_DTR_Stat_LowerLimit ((c04_LDC_DTR_Stat)0u)
# define c04_LDC_DTR_Stat_UpperLimit ((c04_LDC_DTR_Stat)15u)
# define Rte_InvalidValue_c04_LDC_DTR_Stat ((c04_LDC_DTR_Stat)15u)
# if (defined RTE_CONST_I_C04_LDC_DTR_STAT_DTR_CC_OFF) || (defined I_C04_LDC_DTR_STAT_DTR_CC_OFF)
#  if (!defined RTE_CONST_I_C04_LDC_DTR_STAT_DTR_CC_OFF) || (RTE_CONST_I_C04_LDC_DTR_STAT_DTR_CC_OFF != 0u)
#   error "Enumeration constant <I_C04_LDC_DTR_STAT_DTR_CC_OFF> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_LDC_DTR_STAT_DTR_CC_OFF (0u)
#  define I_C04_LDC_DTR_STAT_DTR_CC_OFF ((c04_LDC_DTR_Stat)0u)
# endif
# if (defined RTE_CONST_I_C04_LDC_DTR_STAT_DTR_ON) || (defined I_C04_LDC_DTR_STAT_DTR_ON)
#  if (!defined RTE_CONST_I_C04_LDC_DTR_STAT_DTR_ON) || (RTE_CONST_I_C04_LDC_DTR_STAT_DTR_ON != 1u)
#   error "Enumeration constant <I_C04_LDC_DTR_STAT_DTR_ON> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_LDC_DTR_STAT_DTR_ON (1u)
#  define I_C04_LDC_DTR_STAT_DTR_ON ((c04_LDC_DTR_Stat)1u)
# endif
# if (defined RTE_CONST_I_C04_LDC_DTR_STAT_DTR_DEF) || (defined I_C04_LDC_DTR_STAT_DTR_DEF)
#  if (!defined RTE_CONST_I_C04_LDC_DTR_STAT_DTR_DEF) || (RTE_CONST_I_C04_LDC_DTR_STAT_DTR_DEF != 2u)
#   error "Enumeration constant <I_C04_LDC_DTR_STAT_DTR_DEF> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_LDC_DTR_STAT_DTR_DEF (2u)
#  define I_C04_LDC_DTR_STAT_DTR_DEF ((c04_LDC_DTR_Stat)2u)
# endif
# if (defined RTE_CONST_I_C04_LDC_DTR_STAT_DTR_OFF_GPS) || (defined I_C04_LDC_DTR_STAT_DTR_OFF_GPS)
#  if (!defined RTE_CONST_I_C04_LDC_DTR_STAT_DTR_OFF_GPS) || (RTE_CONST_I_C04_LDC_DTR_STAT_DTR_OFF_GPS != 3u)
#   error "Enumeration constant <I_C04_LDC_DTR_STAT_DTR_OFF_GPS> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_LDC_DTR_STAT_DTR_OFF_GPS (3u)
#  define I_C04_LDC_DTR_STAT_DTR_OFF_GPS ((c04_LDC_DTR_Stat)3u)
# endif
# if (defined RTE_CONST_I_C04_LDC_DTR_STAT_DTR_OFF_RADAR) || (defined I_C04_LDC_DTR_STAT_DTR_OFF_RADAR)
#  if (!defined RTE_CONST_I_C04_LDC_DTR_STAT_DTR_OFF_RADAR) || (RTE_CONST_I_C04_LDC_DTR_STAT_DTR_OFF_RADAR != 4u)
#   error "Enumeration constant <I_C04_LDC_DTR_STAT_DTR_OFF_RADAR> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_LDC_DTR_STAT_DTR_OFF_RADAR (4u)
#  define I_C04_LDC_DTR_STAT_DTR_OFF_RADAR ((c04_LDC_DTR_Stat)4u)
# endif
# if (defined RTE_CONST_I_C04_LDC_DTR_STAT_DTR_PSV) || (defined I_C04_LDC_DTR_STAT_DTR_PSV)
#  if (!defined RTE_CONST_I_C04_LDC_DTR_STAT_DTR_PSV) || (RTE_CONST_I_C04_LDC_DTR_STAT_DTR_PSV != 5u)
#   error "Enumeration constant <I_C04_LDC_DTR_STAT_DTR_PSV> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_LDC_DTR_STAT_DTR_PSV (5u)
#  define I_C04_LDC_DTR_STAT_DTR_PSV ((c04_LDC_DTR_Stat)5u)
# endif
# if (defined RTE_CONST_I_C04_LDC_DTR_STAT_CC_ON) || (defined I_C04_LDC_DTR_STAT_CC_ON)
#  if (!defined RTE_CONST_I_C04_LDC_DTR_STAT_CC_ON) || (RTE_CONST_I_C04_LDC_DTR_STAT_CC_ON != 6u)
#   error "Enumeration constant <I_C04_LDC_DTR_STAT_CC_ON> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_LDC_DTR_STAT_CC_ON (6u)
#  define I_C04_LDC_DTR_STAT_CC_ON ((c04_LDC_DTR_Stat)6u)
# endif
# if (defined RTE_CONST_I_C04_LDC_DTR_STAT_CC_DEF) || (defined I_C04_LDC_DTR_STAT_CC_DEF)
#  if (!defined RTE_CONST_I_C04_LDC_DTR_STAT_CC_DEF) || (RTE_CONST_I_C04_LDC_DTR_STAT_CC_DEF != 7u)
#   error "Enumeration constant <I_C04_LDC_DTR_STAT_CC_DEF> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_LDC_DTR_STAT_CC_DEF (7u)
#  define I_C04_LDC_DTR_STAT_CC_DEF ((c04_LDC_DTR_Stat)7u)
# endif
# if (defined RTE_CONST_I_C04_LDC_DTR_STAT_CC_OVRRUN) || (defined I_C04_LDC_DTR_STAT_CC_OVRRUN)
#  if (!defined RTE_CONST_I_C04_LDC_DTR_STAT_CC_OVRRUN) || (RTE_CONST_I_C04_LDC_DTR_STAT_CC_OVRRUN != 8u)
#   error "Enumeration constant <I_C04_LDC_DTR_STAT_CC_OVRRUN> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_LDC_DTR_STAT_CC_OVRRUN (8u)
#  define I_C04_LDC_DTR_STAT_CC_OVRRUN ((c04_LDC_DTR_Stat)8u)
# endif
# if (defined RTE_CONST_I_C04_LDC_DTR_STAT_SNA) || (defined I_C04_LDC_DTR_STAT_SNA)
#  if (!defined RTE_CONST_I_C04_LDC_DTR_STAT_SNA) || (RTE_CONST_I_C04_LDC_DTR_STAT_SNA != 15u)
#   error "Enumeration constant <I_C04_LDC_DTR_STAT_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_LDC_DTR_STAT_SNA (15u)
#  define I_C04_LDC_DTR_STAT_SNA ((c04_LDC_DTR_Stat)15u)
# endif

# define Rte_TypeDef_c04_NaviSpdLmtVld_Stat
typedef uint8 c04_NaviSpdLmtVld_Stat;
# define c04_NaviSpdLmtVld_Stat_LowerLimit ((c04_NaviSpdLmtVld_Stat)0u)
# define c04_NaviSpdLmtVld_Stat_UpperLimit ((c04_NaviSpdLmtVld_Stat)15u)
# define Rte_InvalidValue_c04_NaviSpdLmtVld_Stat ((c04_NaviSpdLmtVld_Stat)15u)
# if (defined RTE_CONST_I_C04_NAVISPDLMTVLD_STAT_IDLE) || (defined I_C04_NAVISPDLMTVLD_STAT_IDLE)
#  if (!defined RTE_CONST_I_C04_NAVISPDLMTVLD_STAT_IDLE) || (RTE_CONST_I_C04_NAVISPDLMTVLD_STAT_IDLE != 0u)
#   error "Enumeration constant <I_C04_NAVISPDLMTVLD_STAT_IDLE> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_NAVISPDLMTVLD_STAT_IDLE (0u)
#  define I_C04_NAVISPDLMTVLD_STAT_IDLE ((c04_NaviSpdLmtVld_Stat)0u)
# endif
# if (defined RTE_CONST_I_C04_NAVISPDLMTVLD_STAT_NO_RES) || (defined I_C04_NAVISPDLMTVLD_STAT_NO_RES)
#  if (!defined RTE_CONST_I_C04_NAVISPDLMTVLD_STAT_NO_RES) || (RTE_CONST_I_C04_NAVISPDLMTVLD_STAT_NO_RES != 1u)
#   error "Enumeration constant <I_C04_NAVISPDLMTVLD_STAT_NO_RES> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_NAVISPDLMTVLD_STAT_NO_RES (1u)
#  define I_C04_NAVISPDLMTVLD_STAT_NO_RES ((c04_NaviSpdLmtVld_Stat)1u)
# endif
# if (defined RTE_CONST_I_C04_NAVISPDLMTVLD_STAT_WET) || (defined I_C04_NAVISPDLMTVLD_STAT_WET)
#  if (!defined RTE_CONST_I_C04_NAVISPDLMTVLD_STAT_WET) || (RTE_CONST_I_C04_NAVISPDLMTVLD_STAT_WET != 2u)
#   error "Enumeration constant <I_C04_NAVISPDLMTVLD_STAT_WET> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_NAVISPDLMTVLD_STAT_WET (2u)
#  define I_C04_NAVISPDLMTVLD_STAT_WET ((c04_NaviSpdLmtVld_Stat)2u)
# endif
# if (defined RTE_CONST_I_C04_NAVISPDLMTVLD_STAT_ICY) || (defined I_C04_NAVISPDLMTVLD_STAT_ICY)
#  if (!defined RTE_CONST_I_C04_NAVISPDLMTVLD_STAT_ICY) || (RTE_CONST_I_C04_NAVISPDLMTVLD_STAT_ICY != 3u)
#   error "Enumeration constant <I_C04_NAVISPDLMTVLD_STAT_ICY> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_NAVISPDLMTVLD_STAT_ICY (3u)
#  define I_C04_NAVISPDLMTVLD_STAT_ICY ((c04_NaviSpdLmtVld_Stat)3u)
# endif
# if (defined RTE_CONST_I_C04_NAVISPDLMTVLD_STAT_FOG) || (defined I_C04_NAVISPDLMTVLD_STAT_FOG)
#  if (!defined RTE_CONST_I_C04_NAVISPDLMTVLD_STAT_FOG) || (RTE_CONST_I_C04_NAVISPDLMTVLD_STAT_FOG != 4u)
#   error "Enumeration constant <I_C04_NAVISPDLMTVLD_STAT_FOG> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_NAVISPDLMTVLD_STAT_FOG (4u)
#  define I_C04_NAVISPDLMTVLD_STAT_FOG ((c04_NaviSpdLmtVld_Stat)4u)
# endif
# if (defined RTE_CONST_I_C04_NAVISPDLMTVLD_STAT_VAL_UNKN) || (defined I_C04_NAVISPDLMTVLD_STAT_VAL_UNKN)
#  if (!defined RTE_CONST_I_C04_NAVISPDLMTVLD_STAT_VAL_UNKN) || (RTE_CONST_I_C04_NAVISPDLMTVLD_STAT_VAL_UNKN != 5u)
#   error "Enumeration constant <I_C04_NAVISPDLMTVLD_STAT_VAL_UNKN> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_NAVISPDLMTVLD_STAT_VAL_UNKN (5u)
#  define I_C04_NAVISPDLMTVLD_STAT_VAL_UNKN ((c04_NaviSpdLmtVld_Stat)5u)
# endif
# if (defined RTE_CONST_I_C04_NAVISPDLMTVLD_STAT_NOT_APPLABLE) || (defined I_C04_NAVISPDLMTVLD_STAT_NOT_APPLABLE)
#  if (!defined RTE_CONST_I_C04_NAVISPDLMTVLD_STAT_NOT_APPLABLE) || (RTE_CONST_I_C04_NAVISPDLMTVLD_STAT_NOT_APPLABLE != 6u)
#   error "Enumeration constant <I_C04_NAVISPDLMTVLD_STAT_NOT_APPLABLE> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_NAVISPDLMTVLD_STAT_NOT_APPLABLE (6u)
#  define I_C04_NAVISPDLMTVLD_STAT_NOT_APPLABLE ((c04_NaviSpdLmtVld_Stat)6u)
# endif
# if (defined RTE_CONST_I_C04_NAVISPDLMTVLD_STAT_RES_APPL) || (defined I_C04_NAVISPDLMTVLD_STAT_RES_APPL)
#  if (!defined RTE_CONST_I_C04_NAVISPDLMTVLD_STAT_RES_APPL) || (RTE_CONST_I_C04_NAVISPDLMTVLD_STAT_RES_APPL != 7u)
#   error "Enumeration constant <I_C04_NAVISPDLMTVLD_STAT_RES_APPL> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_NAVISPDLMTVLD_STAT_RES_APPL (7u)
#  define I_C04_NAVISPDLMTVLD_STAT_RES_APPL ((c04_NaviSpdLmtVld_Stat)7u)
# endif
# if (defined RTE_CONST_I_C04_NAVISPDLMTVLD_STAT_WEIGHT) || (defined I_C04_NAVISPDLMTVLD_STAT_WEIGHT)
#  if (!defined RTE_CONST_I_C04_NAVISPDLMTVLD_STAT_WEIGHT) || (RTE_CONST_I_C04_NAVISPDLMTVLD_STAT_WEIGHT != 8u)
#   error "Enumeration constant <I_C04_NAVISPDLMTVLD_STAT_WEIGHT> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_NAVISPDLMTVLD_STAT_WEIGHT (8u)
#  define I_C04_NAVISPDLMTVLD_STAT_WEIGHT ((c04_NaviSpdLmtVld_Stat)8u)
# endif
# if (defined RTE_CONST_I_C04_NAVISPDLMTVLD_STAT_VEHICLE) || (defined I_C04_NAVISPDLMTVLD_STAT_VEHICLE)
#  if (!defined RTE_CONST_I_C04_NAVISPDLMTVLD_STAT_VEHICLE) || (RTE_CONST_I_C04_NAVISPDLMTVLD_STAT_VEHICLE != 9u)
#   error "Enumeration constant <I_C04_NAVISPDLMTVLD_STAT_VEHICLE> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_NAVISPDLMTVLD_STAT_VEHICLE (9u)
#  define I_C04_NAVISPDLMTVLD_STAT_VEHICLE ((c04_NaviSpdLmtVld_Stat)9u)
# endif
# if (defined RTE_CONST_I_C04_NAVISPDLMTVLD_STAT_DARK) || (defined I_C04_NAVISPDLMTVLD_STAT_DARK)
#  if (!defined RTE_CONST_I_C04_NAVISPDLMTVLD_STAT_DARK) || (RTE_CONST_I_C04_NAVISPDLMTVLD_STAT_DARK != 10u)
#   error "Enumeration constant <I_C04_NAVISPDLMTVLD_STAT_DARK> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_NAVISPDLMTVLD_STAT_DARK (10u)
#  define I_C04_NAVISPDLMTVLD_STAT_DARK ((c04_NaviSpdLmtVld_Stat)10u)
# endif
# if (defined RTE_CONST_I_C04_NAVISPDLMTVLD_STAT_SNA) || (defined I_C04_NAVISPDLMTVLD_STAT_SNA)
#  if (!defined RTE_CONST_I_C04_NAVISPDLMTVLD_STAT_SNA) || (RTE_CONST_I_C04_NAVISPDLMTVLD_STAT_SNA != 15u)
#   error "Enumeration constant <I_C04_NAVISPDLMTVLD_STAT_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_NAVISPDLMTVLD_STAT_SNA (15u)
#  define I_C04_NAVISPDLMTVLD_STAT_SNA ((c04_NaviSpdLmtVld_Stat)15u)
# endif

# define Rte_TypeDef_c04_SPCR_Md
typedef uint8 c04_SPCR_Md;
# define c04_SPCR_Md_LowerLimit ((c04_SPCR_Md)0u)
# define c04_SPCR_Md_UpperLimit ((c04_SPCR_Md)15u)
# if (defined RTE_CONST_I_C04_SPCR_MD_IDLE) || (defined I_C04_SPCR_MD_IDLE)
#  if (!defined RTE_CONST_I_C04_SPCR_MD_IDLE) || (RTE_CONST_I_C04_SPCR_MD_IDLE != 0u)
#   error "Enumeration constant <I_C04_SPCR_MD_IDLE> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_SPCR_MD_IDLE (0u)
#  define I_C04_SPCR_MD_IDLE ((c04_SPCR_Md)0u)
# endif
# if (defined RTE_CONST_I_C04_SPCR_MD_HOLD) || (defined I_C04_SPCR_MD_HOLD)
#  if (!defined RTE_CONST_I_C04_SPCR_MD_HOLD) || (RTE_CONST_I_C04_SPCR_MD_HOLD != 1u)
#   error "Enumeration constant <I_C04_SPCR_MD_HOLD> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_SPCR_MD_HOLD (1u)
#  define I_C04_SPCR_MD_HOLD ((c04_SPCR_Md)1u)
# endif
# if (defined RTE_CONST_I_C04_SPCR_MD_GO) || (defined I_C04_SPCR_MD_GO)
#  if (!defined RTE_CONST_I_C04_SPCR_MD_GO) || (RTE_CONST_I_C04_SPCR_MD_GO != 2u)
#   error "Enumeration constant <I_C04_SPCR_MD_GO> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_SPCR_MD_GO (2u)
#  define I_C04_SPCR_MD_GO ((c04_SPCR_Md)2u)
# endif
# if (defined RTE_CONST_I_C04_SPCR_MD_SLP) || (defined I_C04_SPCR_MD_SLP)
#  if (!defined RTE_CONST_I_C04_SPCR_MD_SLP) || (RTE_CONST_I_C04_SPCR_MD_SLP != 4u)
#   error "Enumeration constant <I_C04_SPCR_MD_SLP> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_SPCR_MD_SLP (4u)
#  define I_C04_SPCR_MD_SLP ((c04_SPCR_Md)4u)
# endif
# if (defined RTE_CONST_I_C04_SPCR_MD_SPCR_ACTV) || (defined I_C04_SPCR_MD_SPCR_ACTV)
#  if (!defined RTE_CONST_I_C04_SPCR_MD_SPCR_ACTV) || (RTE_CONST_I_C04_SPCR_MD_SPCR_ACTV != 8u)
#   error "Enumeration constant <I_C04_SPCR_MD_SPCR_ACTV> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_SPCR_MD_SPCR_ACTV (8u)
#  define I_C04_SPCR_MD_SPCR_ACTV ((c04_SPCR_Md)8u)
# endif
# if (defined RTE_CONST_I_C04_SPCR_MD_SPCR_ACTV_HOLD) || (defined I_C04_SPCR_MD_SPCR_ACTV_HOLD)
#  if (!defined RTE_CONST_I_C04_SPCR_MD_SPCR_ACTV_HOLD) || (RTE_CONST_I_C04_SPCR_MD_SPCR_ACTV_HOLD != 9u)
#   error "Enumeration constant <I_C04_SPCR_MD_SPCR_ACTV_HOLD> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_SPCR_MD_SPCR_ACTV_HOLD (9u)
#  define I_C04_SPCR_MD_SPCR_ACTV_HOLD ((c04_SPCR_Md)9u)
# endif
# if (defined RTE_CONST_I_C04_SPCR_MD_SPCR_ACTV_GO) || (defined I_C04_SPCR_MD_SPCR_ACTV_GO)
#  if (!defined RTE_CONST_I_C04_SPCR_MD_SPCR_ACTV_GO) || (RTE_CONST_I_C04_SPCR_MD_SPCR_ACTV_GO != 10u)
#   error "Enumeration constant <I_C04_SPCR_MD_SPCR_ACTV_GO> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_SPCR_MD_SPCR_ACTV_GO (10u)
#  define I_C04_SPCR_MD_SPCR_ACTV_GO ((c04_SPCR_Md)10u)
# endif
# if (defined RTE_CONST_I_C04_SPCR_MD_SPCR_ACTV_SLP) || (defined I_C04_SPCR_MD_SPCR_ACTV_SLP)
#  if (!defined RTE_CONST_I_C04_SPCR_MD_SPCR_ACTV_SLP) || (RTE_CONST_I_C04_SPCR_MD_SPCR_ACTV_SLP != 12u)
#   error "Enumeration constant <I_C04_SPCR_MD_SPCR_ACTV_SLP> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_SPCR_MD_SPCR_ACTV_SLP (12u)
#  define I_C04_SPCR_MD_SPCR_ACTV_SLP ((c04_SPCR_Md)12u)
# endif
# if (defined RTE_CONST_I_C04_SPCR_MD_SPCR_PSV) || (defined I_C04_SPCR_MD_SPCR_PSV)
#  if (!defined RTE_CONST_I_C04_SPCR_MD_SPCR_PSV) || (RTE_CONST_I_C04_SPCR_MD_SPCR_PSV != 15u)
#   error "Enumeration constant <I_C04_SPCR_MD_SPCR_PSV> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_SPCR_MD_SPCR_PSV (15u)
#  define I_C04_SPCR_MD_SPCR_PSV ((c04_SPCR_Md)15u)
# endif

# define Rte_TypeDef_c04_W_32_38_0k5
typedef uint8 c04_W_32_38_0k5;
# define c04_W_32_38_0k5_LowerLimit ((c04_W_32_38_0k5)0u)
# define c04_W_32_38_0k5_UpperLimit ((c04_W_32_38_0k5)15u)
# define Rte_InvalidValue_c04_W_32_38_0k5 ((c04_W_32_38_0k5)15u)
# if (defined RTE_CONST_I_C04_W_32_38_0K5_SNA) || (defined I_C04_W_32_38_0K5_SNA)
#  if (!defined RTE_CONST_I_C04_W_32_38_0K5_SNA) || (RTE_CONST_I_C04_W_32_38_0K5_SNA != 15u)
#   error "Enumeration constant <I_C04_W_32_38_0K5_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_W_32_38_0K5_SNA (15u)
#  define I_C04_W_32_38_0K5_SNA ((c04_W_32_38_0k5)15u)
# endif

# define Rte_TypeDef_c04_m0to1k4_0d1
typedef uint8 c04_m0to1k4_0d1;
# define c04_m0to1k4_0d1_LowerLimit ((c04_m0to1k4_0d1)0u)
# define c04_m0to1k4_0d1_UpperLimit ((c04_m0to1k4_0d1)15u)
# define Rte_InvalidValue_c04_m0to1k4_0d1 ((c04_m0to1k4_0d1)15u)
# if (defined RTE_CONST_I_C04_M0TO1K4_0D1_SNA) || (defined I_C04_M0TO1K4_0D1_SNA)
#  if (!defined RTE_CONST_I_C04_M0TO1K4_0D1_SNA) || (RTE_CONST_I_C04_M0TO1K4_0D1_SNA != 15u)
#   error "Enumeration constant <I_C04_M0TO1K4_0D1_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_M0TO1K4_0D1_SNA (15u)
#  define I_C04_M0TO1K4_0D1_SNA ((c04_m0to1k4_0d1)15u)
# endif

# define Rte_TypeDef_c04_m_0_1k4_0k1
typedef uint8 c04_m_0_1k4_0k1;
# define c04_m_0_1k4_0k1_LowerLimit ((c04_m_0_1k4_0k1)0u)
# define c04_m_0_1k4_0k1_UpperLimit ((c04_m_0_1k4_0k1)15u)
# define Rte_InvalidValue_c04_m_0_1k4_0k1 ((c04_m_0_1k4_0k1)15u)
# if (defined RTE_CONST_I_C04_M_0_1K4_0K1_SNA) || (defined I_C04_M_0_1K4_0K1_SNA)
#  if (!defined RTE_CONST_I_C04_M_0_1K4_0K1_SNA) || (RTE_CONST_I_C04_M_0_1K4_0K1_SNA != 15u)
#   error "Enumeration constant <I_C04_M_0_1K4_0K1_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_M_0_1K4_0K1_SNA (15u)
#  define I_C04_M_0_1K4_0K1_SNA ((c04_m_0_1k4_0k1)15u)
# endif

# define Rte_TypeDef_c04_m_0_2k8_0k2
typedef uint8 c04_m_0_2k8_0k2;
# define c04_m_0_2k8_0k2_LowerLimit ((c04_m_0_2k8_0k2)0u)
# define c04_m_0_2k8_0k2_UpperLimit ((c04_m_0_2k8_0k2)15u)
# define Rte_InvalidValue_c04_m_0_2k8_0k2 ((c04_m_0_2k8_0k2)15u)
# if (defined RTE_CONST_I_C04_M_0_2K8_0K2_SNA) || (defined I_C04_M_0_2K8_0K2_SNA)
#  if (!defined RTE_CONST_I_C04_M_0_2K8_0K2_SNA) || (RTE_CONST_I_C04_M_0_2K8_0K2_SNA != 15u)
#   error "Enumeration constant <I_C04_M_0_2K8_0K2_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_M_0_2K8_0K2_SNA (15u)
#  define I_C04_M_0_2K8_0K2_SNA ((c04_m_0_2k8_0k2)15u)
# endif

# define Rte_TypeDef_c04_m_per_s_0_1d4_0d1
typedef uint8 c04_m_per_s_0_1d4_0d1;
# define c04_m_per_s_0_1d4_0d1_LowerLimit ((c04_m_per_s_0_1d4_0d1)0u)
# define c04_m_per_s_0_1d4_0d1_UpperLimit ((c04_m_per_s_0_1d4_0d1)15u)
# define Rte_InvalidValue_c04_m_per_s_0_1d4_0d1 ((c04_m_per_s_0_1d4_0d1)15u)
# if (defined RTE_CONST_I_C04_M_PER_S_0_1D4_0D1_SNA) || (defined I_C04_M_PER_S_0_1D4_0D1_SNA)
#  if (!defined RTE_CONST_I_C04_M_PER_S_0_1D4_0D1_SNA) || (RTE_CONST_I_C04_M_PER_S_0_1D4_0D1_SNA != 15u)
#   error "Enumeration constant <I_C04_M_PER_S_0_1D4_0D1_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_M_PER_S_0_1D4_0D1_SNA (15u)
#  define I_C04_M_PER_S_0_1D4_0D1_SNA ((c04_m_per_s_0_1d4_0d1)15u)
# endif

# define Rte_TypeDef_c04_m_per_s_0_2d8_0d2
typedef uint8 c04_m_per_s_0_2d8_0d2;
# define c04_m_per_s_0_2d8_0d2_LowerLimit ((c04_m_per_s_0_2d8_0d2)0u)
# define c04_m_per_s_0_2d8_0d2_UpperLimit ((c04_m_per_s_0_2d8_0d2)15u)
# define Rte_InvalidValue_c04_m_per_s_0_2d8_0d2 ((c04_m_per_s_0_2d8_0d2)15u)
# if (defined RTE_CONST_I_C04_M_PER_S_0_2D8_0D2_SNA) || (defined I_C04_M_PER_S_0_2D8_0D2_SNA)
#  if (!defined RTE_CONST_I_C04_M_PER_S_0_2D8_0D2_SNA) || (RTE_CONST_I_C04_M_PER_S_0_2D8_0D2_SNA != 15u)
#   error "Enumeration constant <I_C04_M_PER_S_0_2D8_0D2_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C04_M_PER_S_0_2D8_0D2_SNA (15u)
#  define I_C04_M_PER_S_0_2D8_0D2_SNA ((c04_m_per_s_0_2d8_0d2)15u)
# endif

# define Rte_TypeDef_c05_ADAS
typedef uint8 c05_ADAS;
# define c05_ADAS_LowerLimit ((c05_ADAS)0u)
# define c05_ADAS_UpperLimit ((c05_ADAS)31u)
# define Rte_InvalidValue_c05_ADAS ((c05_ADAS)31u)
# if (defined RTE_CONST_I_C05_ADAS_UNKNOWN) || (defined I_C05_ADAS_UNKNOWN)
#  if (!defined RTE_CONST_I_C05_ADAS_UNKNOWN) || (RTE_CONST_I_C05_ADAS_UNKNOWN != 0u)
#   error "Enumeration constant <I_C05_ADAS_UNKNOWN> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C05_ADAS_UNKNOWN (0u)
#  define I_C05_ADAS_UNKNOWN ((c05_ADAS)0u)
# endif
# if (defined RTE_CONST_I_C05_ADAS_KM_5_P_H__MPH) || (defined I_C05_ADAS_KM_5_P_H__MPH)
#  if (!defined RTE_CONST_I_C05_ADAS_KM_5_P_H__MPH) || (RTE_CONST_I_C05_ADAS_KM_5_P_H__MPH != 1u)
#   error "Enumeration constant <I_C05_ADAS_KM_5_P_H__MPH> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C05_ADAS_KM_5_P_H__MPH (1u)
#  define I_C05_ADAS_KM_5_P_H__MPH ((c05_ADAS)1u)
# endif
# if (defined RTE_CONST_I_C05_ADAS_KM_7_P_H__MPH) || (defined I_C05_ADAS_KM_7_P_H__MPH)
#  if (!defined RTE_CONST_I_C05_ADAS_KM_7_P_H__MPH) || (RTE_CONST_I_C05_ADAS_KM_7_P_H__MPH != 2u)
#   error "Enumeration constant <I_C05_ADAS_KM_7_P_H__MPH> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C05_ADAS_KM_7_P_H__MPH (2u)
#  define I_C05_ADAS_KM_7_P_H__MPH ((c05_ADAS)2u)
# endif
# if (defined RTE_CONST_I_C05_ADAS_KM_10_P_H__MPH) || (defined I_C05_ADAS_KM_10_P_H__MPH)
#  if (!defined RTE_CONST_I_C05_ADAS_KM_10_P_H__MPH) || (RTE_CONST_I_C05_ADAS_KM_10_P_H__MPH != 3u)
#   error "Enumeration constant <I_C05_ADAS_KM_10_P_H__MPH> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C05_ADAS_KM_10_P_H__MPH (3u)
#  define I_C05_ADAS_KM_10_P_H__MPH ((c05_ADAS)3u)
# endif
# if (defined RTE_CONST_I_C05_ADAS_KM_15_P_H__MPH) || (defined I_C05_ADAS_KM_15_P_H__MPH)
#  if (!defined RTE_CONST_I_C05_ADAS_KM_15_P_H__MPH) || (RTE_CONST_I_C05_ADAS_KM_15_P_H__MPH != 4u)
#   error "Enumeration constant <I_C05_ADAS_KM_15_P_H__MPH> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C05_ADAS_KM_15_P_H__MPH (4u)
#  define I_C05_ADAS_KM_15_P_H__MPH ((c05_ADAS)4u)
# endif
# if (defined RTE_CONST_I_C05_ADAS_KM_20_P_H__MPH) || (defined I_C05_ADAS_KM_20_P_H__MPH)
#  if (!defined RTE_CONST_I_C05_ADAS_KM_20_P_H__MPH) || (RTE_CONST_I_C05_ADAS_KM_20_P_H__MPH != 5u)
#   error "Enumeration constant <I_C05_ADAS_KM_20_P_H__MPH> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C05_ADAS_KM_20_P_H__MPH (5u)
#  define I_C05_ADAS_KM_20_P_H__MPH ((c05_ADAS)5u)
# endif
# if (defined RTE_CONST_I_C05_ADAS_KM_25_P_H__MPH) || (defined I_C05_ADAS_KM_25_P_H__MPH)
#  if (!defined RTE_CONST_I_C05_ADAS_KM_25_P_H__MPH) || (RTE_CONST_I_C05_ADAS_KM_25_P_H__MPH != 6u)
#   error "Enumeration constant <I_C05_ADAS_KM_25_P_H__MPH> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C05_ADAS_KM_25_P_H__MPH (6u)
#  define I_C05_ADAS_KM_25_P_H__MPH ((c05_ADAS)6u)
# endif
# if (defined RTE_CONST_I_C05_ADAS_KM_30_P_H__MPH) || (defined I_C05_ADAS_KM_30_P_H__MPH)
#  if (!defined RTE_CONST_I_C05_ADAS_KM_30_P_H__MPH) || (RTE_CONST_I_C05_ADAS_KM_30_P_H__MPH != 7u)
#   error "Enumeration constant <I_C05_ADAS_KM_30_P_H__MPH> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C05_ADAS_KM_30_P_H__MPH (7u)
#  define I_C05_ADAS_KM_30_P_H__MPH ((c05_ADAS)7u)
# endif
# if (defined RTE_CONST_I_C05_ADAS_KM_35_P_H__MPH) || (defined I_C05_ADAS_KM_35_P_H__MPH)
#  if (!defined RTE_CONST_I_C05_ADAS_KM_35_P_H__MPH) || (RTE_CONST_I_C05_ADAS_KM_35_P_H__MPH != 8u)
#   error "Enumeration constant <I_C05_ADAS_KM_35_P_H__MPH> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C05_ADAS_KM_35_P_H__MPH (8u)
#  define I_C05_ADAS_KM_35_P_H__MPH ((c05_ADAS)8u)
# endif
# if (defined RTE_CONST_I_C05_ADAS_KM_40_P_H__MPH) || (defined I_C05_ADAS_KM_40_P_H__MPH)
#  if (!defined RTE_CONST_I_C05_ADAS_KM_40_P_H__MPH) || (RTE_CONST_I_C05_ADAS_KM_40_P_H__MPH != 9u)
#   error "Enumeration constant <I_C05_ADAS_KM_40_P_H__MPH> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C05_ADAS_KM_40_P_H__MPH (9u)
#  define I_C05_ADAS_KM_40_P_H__MPH ((c05_ADAS)9u)
# endif
# if (defined RTE_CONST_I_C05_ADAS_KM_45_P_H__MPH) || (defined I_C05_ADAS_KM_45_P_H__MPH)
#  if (!defined RTE_CONST_I_C05_ADAS_KM_45_P_H__MPH) || (RTE_CONST_I_C05_ADAS_KM_45_P_H__MPH != 10u)
#   error "Enumeration constant <I_C05_ADAS_KM_45_P_H__MPH> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C05_ADAS_KM_45_P_H__MPH (10u)
#  define I_C05_ADAS_KM_45_P_H__MPH ((c05_ADAS)10u)
# endif
# if (defined RTE_CONST_I_C05_ADAS_KM_50_P_H__MPH) || (defined I_C05_ADAS_KM_50_P_H__MPH)
#  if (!defined RTE_CONST_I_C05_ADAS_KM_50_P_H__MPH) || (RTE_CONST_I_C05_ADAS_KM_50_P_H__MPH != 11u)
#   error "Enumeration constant <I_C05_ADAS_KM_50_P_H__MPH> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C05_ADAS_KM_50_P_H__MPH (11u)
#  define I_C05_ADAS_KM_50_P_H__MPH ((c05_ADAS)11u)
# endif
# if (defined RTE_CONST_I_C05_ADAS_KM_55_P_H__MPH) || (defined I_C05_ADAS_KM_55_P_H__MPH)
#  if (!defined RTE_CONST_I_C05_ADAS_KM_55_P_H__MPH) || (RTE_CONST_I_C05_ADAS_KM_55_P_H__MPH != 12u)
#   error "Enumeration constant <I_C05_ADAS_KM_55_P_H__MPH> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C05_ADAS_KM_55_P_H__MPH (12u)
#  define I_C05_ADAS_KM_55_P_H__MPH ((c05_ADAS)12u)
# endif
# if (defined RTE_CONST_I_C05_ADAS_KM_60_P_H__MPH) || (defined I_C05_ADAS_KM_60_P_H__MPH)
#  if (!defined RTE_CONST_I_C05_ADAS_KM_60_P_H__MPH) || (RTE_CONST_I_C05_ADAS_KM_60_P_H__MPH != 13u)
#   error "Enumeration constant <I_C05_ADAS_KM_60_P_H__MPH> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C05_ADAS_KM_60_P_H__MPH (13u)
#  define I_C05_ADAS_KM_60_P_H__MPH ((c05_ADAS)13u)
# endif
# if (defined RTE_CONST_I_C05_ADAS_KM_65_P_H__MPH) || (defined I_C05_ADAS_KM_65_P_H__MPH)
#  if (!defined RTE_CONST_I_C05_ADAS_KM_65_P_H__MPH) || (RTE_CONST_I_C05_ADAS_KM_65_P_H__MPH != 14u)
#   error "Enumeration constant <I_C05_ADAS_KM_65_P_H__MPH> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C05_ADAS_KM_65_P_H__MPH (14u)
#  define I_C05_ADAS_KM_65_P_H__MPH ((c05_ADAS)14u)
# endif
# if (defined RTE_CONST_I_C05_ADAS_KM_70_P_H__MPH) || (defined I_C05_ADAS_KM_70_P_H__MPH)
#  if (!defined RTE_CONST_I_C05_ADAS_KM_70_P_H__MPH) || (RTE_CONST_I_C05_ADAS_KM_70_P_H__MPH != 15u)
#   error "Enumeration constant <I_C05_ADAS_KM_70_P_H__MPH> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C05_ADAS_KM_70_P_H__MPH (15u)
#  define I_C05_ADAS_KM_70_P_H__MPH ((c05_ADAS)15u)
# endif
# if (defined RTE_CONST_I_C05_ADAS_KM_75_P_H__MPH) || (defined I_C05_ADAS_KM_75_P_H__MPH)
#  if (!defined RTE_CONST_I_C05_ADAS_KM_75_P_H__MPH) || (RTE_CONST_I_C05_ADAS_KM_75_P_H__MPH != 16u)
#   error "Enumeration constant <I_C05_ADAS_KM_75_P_H__MPH> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C05_ADAS_KM_75_P_H__MPH (16u)
#  define I_C05_ADAS_KM_75_P_H__MPH ((c05_ADAS)16u)
# endif
# if (defined RTE_CONST_I_C05_ADAS_KM_80_P_H__MPH) || (defined I_C05_ADAS_KM_80_P_H__MPH)
#  if (!defined RTE_CONST_I_C05_ADAS_KM_80_P_H__MPH) || (RTE_CONST_I_C05_ADAS_KM_80_P_H__MPH != 17u)
#   error "Enumeration constant <I_C05_ADAS_KM_80_P_H__MPH> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C05_ADAS_KM_80_P_H__MPH (17u)
#  define I_C05_ADAS_KM_80_P_H__MPH ((c05_ADAS)17u)
# endif
# if (defined RTE_CONST_I_C05_ADAS_KM_85_P_H__MPH) || (defined I_C05_ADAS_KM_85_P_H__MPH)
#  if (!defined RTE_CONST_I_C05_ADAS_KM_85_P_H__MPH) || (RTE_CONST_I_C05_ADAS_KM_85_P_H__MPH != 18u)
#   error "Enumeration constant <I_C05_ADAS_KM_85_P_H__MPH> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C05_ADAS_KM_85_P_H__MPH (18u)
#  define I_C05_ADAS_KM_85_P_H__MPH ((c05_ADAS)18u)
# endif
# if (defined RTE_CONST_I_C05_ADAS_KM_90_P_H__MPH) || (defined I_C05_ADAS_KM_90_P_H__MPH)
#  if (!defined RTE_CONST_I_C05_ADAS_KM_90_P_H__MPH) || (RTE_CONST_I_C05_ADAS_KM_90_P_H__MPH != 19u)
#   error "Enumeration constant <I_C05_ADAS_KM_90_P_H__MPH> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C05_ADAS_KM_90_P_H__MPH (19u)
#  define I_C05_ADAS_KM_90_P_H__MPH ((c05_ADAS)19u)
# endif
# if (defined RTE_CONST_I_C05_ADAS_KM_95_P_H__MPH) || (defined I_C05_ADAS_KM_95_P_H__MPH)
#  if (!defined RTE_CONST_I_C05_ADAS_KM_95_P_H__MPH) || (RTE_CONST_I_C05_ADAS_KM_95_P_H__MPH != 20u)
#   error "Enumeration constant <I_C05_ADAS_KM_95_P_H__MPH> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C05_ADAS_KM_95_P_H__MPH (20u)
#  define I_C05_ADAS_KM_95_P_H__MPH ((c05_ADAS)20u)
# endif
# if (defined RTE_CONST_I_C05_ADAS_KM_100_P_H__MPH) || (defined I_C05_ADAS_KM_100_P_H__MPH)
#  if (!defined RTE_CONST_I_C05_ADAS_KM_100_P_H__MPH) || (RTE_CONST_I_C05_ADAS_KM_100_P_H__MPH != 21u)
#   error "Enumeration constant <I_C05_ADAS_KM_100_P_H__MPH> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C05_ADAS_KM_100_P_H__MPH (21u)
#  define I_C05_ADAS_KM_100_P_H__MPH ((c05_ADAS)21u)
# endif
# if (defined RTE_CONST_I_C05_ADAS_KM_105_P_H__MPH) || (defined I_C05_ADAS_KM_105_P_H__MPH)
#  if (!defined RTE_CONST_I_C05_ADAS_KM_105_P_H__MPH) || (RTE_CONST_I_C05_ADAS_KM_105_P_H__MPH != 22u)
#   error "Enumeration constant <I_C05_ADAS_KM_105_P_H__MPH> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C05_ADAS_KM_105_P_H__MPH (22u)
#  define I_C05_ADAS_KM_105_P_H__MPH ((c05_ADAS)22u)
# endif
# if (defined RTE_CONST_I_C05_ADAS_KM_110_P_H__MPH) || (defined I_C05_ADAS_KM_110_P_H__MPH)
#  if (!defined RTE_CONST_I_C05_ADAS_KM_110_P_H__MPH) || (RTE_CONST_I_C05_ADAS_KM_110_P_H__MPH != 23u)
#   error "Enumeration constant <I_C05_ADAS_KM_110_P_H__MPH> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C05_ADAS_KM_110_P_H__MPH (23u)
#  define I_C05_ADAS_KM_110_P_H__MPH ((c05_ADAS)23u)
# endif
# if (defined RTE_CONST_I_C05_ADAS_KM_115_P_H__MPH) || (defined I_C05_ADAS_KM_115_P_H__MPH)
#  if (!defined RTE_CONST_I_C05_ADAS_KM_115_P_H__MPH) || (RTE_CONST_I_C05_ADAS_KM_115_P_H__MPH != 24u)
#   error "Enumeration constant <I_C05_ADAS_KM_115_P_H__MPH> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C05_ADAS_KM_115_P_H__MPH (24u)
#  define I_C05_ADAS_KM_115_P_H__MPH ((c05_ADAS)24u)
# endif
# if (defined RTE_CONST_I_C05_ADAS_KM_120_P_H__MPH) || (defined I_C05_ADAS_KM_120_P_H__MPH)
#  if (!defined RTE_CONST_I_C05_ADAS_KM_120_P_H__MPH) || (RTE_CONST_I_C05_ADAS_KM_120_P_H__MPH != 25u)
#   error "Enumeration constant <I_C05_ADAS_KM_120_P_H__MPH> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C05_ADAS_KM_120_P_H__MPH (25u)
#  define I_C05_ADAS_KM_120_P_H__MPH ((c05_ADAS)25u)
# endif
# if (defined RTE_CONST_I_C05_ADAS_KM_130_P_H__MPH) || (defined I_C05_ADAS_KM_130_P_H__MPH)
#  if (!defined RTE_CONST_I_C05_ADAS_KM_130_P_H__MPH) || (RTE_CONST_I_C05_ADAS_KM_130_P_H__MPH != 26u)
#   error "Enumeration constant <I_C05_ADAS_KM_130_P_H__MPH> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C05_ADAS_KM_130_P_H__MPH (26u)
#  define I_C05_ADAS_KM_130_P_H__MPH ((c05_ADAS)26u)
# endif
# if (defined RTE_CONST_I_C05_ADAS_KM_140_P_H__MPH) || (defined I_C05_ADAS_KM_140_P_H__MPH)
#  if (!defined RTE_CONST_I_C05_ADAS_KM_140_P_H__MPH) || (RTE_CONST_I_C05_ADAS_KM_140_P_H__MPH != 27u)
#   error "Enumeration constant <I_C05_ADAS_KM_140_P_H__MPH> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C05_ADAS_KM_140_P_H__MPH (27u)
#  define I_C05_ADAS_KM_140_P_H__MPH ((c05_ADAS)27u)
# endif
# if (defined RTE_CONST_I_C05_ADAS_KM_150_P_H__MPH) || (defined I_C05_ADAS_KM_150_P_H__MPH)
#  if (!defined RTE_CONST_I_C05_ADAS_KM_150_P_H__MPH) || (RTE_CONST_I_C05_ADAS_KM_150_P_H__MPH != 28u)
#   error "Enumeration constant <I_C05_ADAS_KM_150_P_H__MPH> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C05_ADAS_KM_150_P_H__MPH (28u)
#  define I_C05_ADAS_KM_150_P_H__MPH ((c05_ADAS)28u)
# endif
# if (defined RTE_CONST_I_C05_ADAS_KM_160_P_H__MPH) || (defined I_C05_ADAS_KM_160_P_H__MPH)
#  if (!defined RTE_CONST_I_C05_ADAS_KM_160_P_H__MPH) || (RTE_CONST_I_C05_ADAS_KM_160_P_H__MPH != 29u)
#   error "Enumeration constant <I_C05_ADAS_KM_160_P_H__MPH> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C05_ADAS_KM_160_P_H__MPH (29u)
#  define I_C05_ADAS_KM_160_P_H__MPH ((c05_ADAS)29u)
# endif
# if (defined RTE_CONST_I_C05_ADAS_KM_UNLIMITED) || (defined I_C05_ADAS_KM_UNLIMITED)
#  if (!defined RTE_CONST_I_C05_ADAS_KM_UNLIMITED) || (RTE_CONST_I_C05_ADAS_KM_UNLIMITED != 30u)
#   error "Enumeration constant <I_C05_ADAS_KM_UNLIMITED> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C05_ADAS_KM_UNLIMITED (30u)
#  define I_C05_ADAS_KM_UNLIMITED ((c05_ADAS)30u)
# endif
# if (defined RTE_CONST_I_C05_ADAS_SNA) || (defined I_C05_ADAS_SNA)
#  if (!defined RTE_CONST_I_C05_ADAS_SNA) || (RTE_CONST_I_C05_ADAS_SNA != 31u)
#   error "Enumeration constant <I_C05_ADAS_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C05_ADAS_SNA (31u)
#  define I_C05_ADAS_SNA ((c05_ADAS)31u)
# endif

# define Rte_TypeDef_c05_ADAS_ProfLong_ProfTyp
typedef uint8 c05_ADAS_ProfLong_ProfTyp;
# define c05_ADAS_ProfLong_ProfTyp_LowerLimit ((c05_ADAS_ProfLong_ProfTyp)0u)
# define c05_ADAS_ProfLong_ProfTyp_UpperLimit ((c05_ADAS_ProfLong_ProfTyp)31u)
# define Rte_InvalidValue_c05_ADAS_ProfLong_ProfTyp ((c05_ADAS_ProfLong_ProfTyp)31u)
# if (defined RTE_CONST_I_C05_ADAS_PROFLONG_PROFTYP_NDEF0) || (defined I_C05_ADAS_PROFLONG_PROFTYP_NDEF0)
#  if (!defined RTE_CONST_I_C05_ADAS_PROFLONG_PROFTYP_NDEF0) || (RTE_CONST_I_C05_ADAS_PROFLONG_PROFTYP_NDEF0 != 0u)
#   error "Enumeration constant <I_C05_ADAS_PROFLONG_PROFTYP_NDEF0> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C05_ADAS_PROFLONG_PROFTYP_NDEF0 (0u)
#  define I_C05_ADAS_PROFLONG_PROFTYP_NDEF0 ((c05_ADAS_ProfLong_ProfTyp)0u)
# endif
# if (defined RTE_CONST_I_C05_ADAS_PROFLONG_PROFTYP_LONGITUDE) || (defined I_C05_ADAS_PROFLONG_PROFTYP_LONGITUDE)
#  if (!defined RTE_CONST_I_C05_ADAS_PROFLONG_PROFTYP_LONGITUDE) || (RTE_CONST_I_C05_ADAS_PROFLONG_PROFTYP_LONGITUDE != 1u)
#   error "Enumeration constant <I_C05_ADAS_PROFLONG_PROFTYP_LONGITUDE> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C05_ADAS_PROFLONG_PROFTYP_LONGITUDE (1u)
#  define I_C05_ADAS_PROFLONG_PROFTYP_LONGITUDE ((c05_ADAS_ProfLong_ProfTyp)1u)
# endif
# if (defined RTE_CONST_I_C05_ADAS_PROFLONG_PROFTYP_LATITUDE) || (defined I_C05_ADAS_PROFLONG_PROFTYP_LATITUDE)
#  if (!defined RTE_CONST_I_C05_ADAS_PROFLONG_PROFTYP_LATITUDE) || (RTE_CONST_I_C05_ADAS_PROFLONG_PROFTYP_LATITUDE != 2u)
#   error "Enumeration constant <I_C05_ADAS_PROFLONG_PROFTYP_LATITUDE> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C05_ADAS_PROFLONG_PROFTYP_LATITUDE (2u)
#  define I_C05_ADAS_PROFLONG_PROFTYP_LATITUDE ((c05_ADAS_ProfLong_ProfTyp)2u)
# endif
# if (defined RTE_CONST_I_C05_ADAS_PROFLONG_PROFTYP_MBC_SLA_SPDSIGN1) || (defined I_C05_ADAS_PROFLONG_PROFTYP_MBC_SLA_SPDSIGN1)
#  if (!defined RTE_CONST_I_C05_ADAS_PROFLONG_PROFTYP_MBC_SLA_SPDSIGN1) || (RTE_CONST_I_C05_ADAS_PROFLONG_PROFTYP_MBC_SLA_SPDSIGN1 != 16u)
#   error "Enumeration constant <I_C05_ADAS_PROFLONG_PROFTYP_MBC_SLA_SPDSIGN1> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C05_ADAS_PROFLONG_PROFTYP_MBC_SLA_SPDSIGN1 (16u)
#  define I_C05_ADAS_PROFLONG_PROFTYP_MBC_SLA_SPDSIGN1 ((c05_ADAS_ProfLong_ProfTyp)16u)
# endif
# if (defined RTE_CONST_I_C05_ADAS_PROFLONG_PROFTYP_MBC_SLA_SPDSIGN2) || (defined I_C05_ADAS_PROFLONG_PROFTYP_MBC_SLA_SPDSIGN2)
#  if (!defined RTE_CONST_I_C05_ADAS_PROFLONG_PROFTYP_MBC_SLA_SPDSIGN2) || (RTE_CONST_I_C05_ADAS_PROFLONG_PROFTYP_MBC_SLA_SPDSIGN2 != 17u)
#   error "Enumeration constant <I_C05_ADAS_PROFLONG_PROFTYP_MBC_SLA_SPDSIGN2> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C05_ADAS_PROFLONG_PROFTYP_MBC_SLA_SPDSIGN2 (17u)
#  define I_C05_ADAS_PROFLONG_PROFTYP_MBC_SLA_SPDSIGN2 ((c05_ADAS_ProfLong_ProfTyp)17u)
# endif
# if (defined RTE_CONST_I_C05_ADAS_PROFLONG_PROFTYP_SNA) || (defined I_C05_ADAS_PROFLONG_PROFTYP_SNA)
#  if (!defined RTE_CONST_I_C05_ADAS_PROFLONG_PROFTYP_SNA) || (RTE_CONST_I_C05_ADAS_PROFLONG_PROFTYP_SNA != 31u)
#   error "Enumeration constant <I_C05_ADAS_PROFLONG_PROFTYP_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C05_ADAS_PROFLONG_PROFTYP_SNA (31u)
#  define I_C05_ADAS_PROFLONG_PROFTYP_SNA ((c05_ADAS_ProfLong_ProfTyp)31u)
# endif

# define Rte_TypeDef_c05_ADAS_ProfShort_ProfTyp
typedef uint8 c05_ADAS_ProfShort_ProfTyp;
# define c05_ADAS_ProfShort_ProfTyp_LowerLimit ((c05_ADAS_ProfShort_ProfTyp)0u)
# define c05_ADAS_ProfShort_ProfTyp_UpperLimit ((c05_ADAS_ProfShort_ProfTyp)31u)
# define Rte_InvalidValue_c05_ADAS_ProfShort_ProfTyp ((c05_ADAS_ProfShort_ProfTyp)31u)
# if (defined RTE_CONST_I_C05_ADAS_PROFSHORT_PROFTYP_NDEF0) || (defined I_C05_ADAS_PROFSHORT_PROFTYP_NDEF0)
#  if (!defined RTE_CONST_I_C05_ADAS_PROFSHORT_PROFTYP_NDEF0) || (RTE_CONST_I_C05_ADAS_PROFSHORT_PROFTYP_NDEF0 != 0u)
#   error "Enumeration constant <I_C05_ADAS_PROFSHORT_PROFTYP_NDEF0> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C05_ADAS_PROFSHORT_PROFTYP_NDEF0 (0u)
#  define I_C05_ADAS_PROFSHORT_PROFTYP_NDEF0 ((c05_ADAS_ProfShort_ProfTyp)0u)
# endif
# if (defined RTE_CONST_I_C05_ADAS_PROFSHORT_PROFTYP_CURVATURE_LINEAR) || (defined I_C05_ADAS_PROFSHORT_PROFTYP_CURVATURE_LINEAR)
#  if (!defined RTE_CONST_I_C05_ADAS_PROFSHORT_PROFTYP_CURVATURE_LINEAR) || (RTE_CONST_I_C05_ADAS_PROFSHORT_PROFTYP_CURVATURE_LINEAR != 1u)
#   error "Enumeration constant <I_C05_ADAS_PROFSHORT_PROFTYP_CURVATURE_LINEAR> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C05_ADAS_PROFSHORT_PROFTYP_CURVATURE_LINEAR (1u)
#  define I_C05_ADAS_PROFSHORT_PROFTYP_CURVATURE_LINEAR ((c05_ADAS_ProfShort_ProfTyp)1u)
# endif
# if (defined RTE_CONST_I_C05_ADAS_PROFSHORT_PROFTYP_ROUTE_NUMBER_TYPES) || (defined I_C05_ADAS_PROFSHORT_PROFTYP_ROUTE_NUMBER_TYPES)
#  if (!defined RTE_CONST_I_C05_ADAS_PROFSHORT_PROFTYP_ROUTE_NUMBER_TYPES) || (RTE_CONST_I_C05_ADAS_PROFSHORT_PROFTYP_ROUTE_NUMBER_TYPES != 2u)
#   error "Enumeration constant <I_C05_ADAS_PROFSHORT_PROFTYP_ROUTE_NUMBER_TYPES> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C05_ADAS_PROFSHORT_PROFTYP_ROUTE_NUMBER_TYPES (2u)
#  define I_C05_ADAS_PROFSHORT_PROFTYP_ROUTE_NUMBER_TYPES ((c05_ADAS_ProfShort_ProfTyp)2u)
# endif
# if (defined RTE_CONST_I_C05_ADAS_PROFSHORT_PROFTYP_SLOPE_STEP) || (defined I_C05_ADAS_PROFSHORT_PROFTYP_SLOPE_STEP)
#  if (!defined RTE_CONST_I_C05_ADAS_PROFSHORT_PROFTYP_SLOPE_STEP) || (RTE_CONST_I_C05_ADAS_PROFSHORT_PROFTYP_SLOPE_STEP != 3u)
#   error "Enumeration constant <I_C05_ADAS_PROFSHORT_PROFTYP_SLOPE_STEP> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C05_ADAS_PROFSHORT_PROFTYP_SLOPE_STEP (3u)
#  define I_C05_ADAS_PROFSHORT_PROFTYP_SLOPE_STEP ((c05_ADAS_ProfShort_ProfTyp)3u)
# endif
# if (defined RTE_CONST_I_C05_ADAS_PROFSHORT_PROFTYP_SLOPE_LINEAR) || (defined I_C05_ADAS_PROFSHORT_PROFTYP_SLOPE_LINEAR)
#  if (!defined RTE_CONST_I_C05_ADAS_PROFSHORT_PROFTYP_SLOPE_LINEAR) || (RTE_CONST_I_C05_ADAS_PROFSHORT_PROFTYP_SLOPE_LINEAR != 4u)
#   error "Enumeration constant <I_C05_ADAS_PROFSHORT_PROFTYP_SLOPE_LINEAR> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C05_ADAS_PROFSHORT_PROFTYP_SLOPE_LINEAR (4u)
#  define I_C05_ADAS_PROFSHORT_PROFTYP_SLOPE_LINEAR ((c05_ADAS_ProfShort_ProfTyp)4u)
# endif
# if (defined RTE_CONST_I_C05_ADAS_PROFSHORT_PROFTYP_ROAD_ACCESSIBILITY) || (defined I_C05_ADAS_PROFSHORT_PROFTYP_ROAD_ACCESSIBILITY)
#  if (!defined RTE_CONST_I_C05_ADAS_PROFSHORT_PROFTYP_ROAD_ACCESSIBILITY) || (RTE_CONST_I_C05_ADAS_PROFSHORT_PROFTYP_ROAD_ACCESSIBILITY != 5u)
#   error "Enumeration constant <I_C05_ADAS_PROFSHORT_PROFTYP_ROAD_ACCESSIBILITY> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C05_ADAS_PROFSHORT_PROFTYP_ROAD_ACCESSIBILITY (5u)
#  define I_C05_ADAS_PROFSHORT_PROFTYP_ROAD_ACCESSIBILITY ((c05_ADAS_ProfShort_ProfTyp)5u)
# endif
# if (defined RTE_CONST_I_C05_ADAS_PROFSHORT_PROFTYP_ROAD_CONDITION) || (defined I_C05_ADAS_PROFSHORT_PROFTYP_ROAD_CONDITION)
#  if (!defined RTE_CONST_I_C05_ADAS_PROFSHORT_PROFTYP_ROAD_CONDITION) || (RTE_CONST_I_C05_ADAS_PROFSHORT_PROFTYP_ROAD_CONDITION != 6u)
#   error "Enumeration constant <I_C05_ADAS_PROFSHORT_PROFTYP_ROAD_CONDITION> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C05_ADAS_PROFSHORT_PROFTYP_ROAD_CONDITION (6u)
#  define I_C05_ADAS_PROFSHORT_PROFTYP_ROAD_CONDITION ((c05_ADAS_ProfShort_ProfTyp)6u)
# endif
# if (defined RTE_CONST_I_C05_ADAS_PROFSHORT_PROFTYP_VARIABLE_SPEED_SIGN_POSITION) || (defined I_C05_ADAS_PROFSHORT_PROFTYP_VARIABLE_SPEED_SIGN_POSITION)
#  if (!defined RTE_CONST_I_C05_ADAS_PROFSHORT_PROFTYP_VARIABLE_SPEED_SIGN_POSITION) || (RTE_CONST_I_C05_ADAS_PROFSHORT_PROFTYP_VARIABLE_SPEED_SIGN_POSITION != 7u)
#   error "Enumeration constant <I_C05_ADAS_PROFSHORT_PROFTYP_VARIABLE_SPEED_SIGN_POSITION> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C05_ADAS_PROFSHORT_PROFTYP_VARIABLE_SPEED_SIGN_POSITION (7u)
#  define I_C05_ADAS_PROFSHORT_PROFTYP_VARIABLE_SPEED_SIGN_POSITION ((c05_ADAS_ProfShort_ProfTyp)7u)
# endif
# if (defined RTE_CONST_I_C05_ADAS_PROFSHORT_PROFTYP_HEADING_CHANGE_SPOT) || (defined I_C05_ADAS_PROFSHORT_PROFTYP_HEADING_CHANGE_SPOT)
#  if (!defined RTE_CONST_I_C05_ADAS_PROFSHORT_PROFTYP_HEADING_CHANGE_SPOT) || (RTE_CONST_I_C05_ADAS_PROFSHORT_PROFTYP_HEADING_CHANGE_SPOT != 8u)
#   error "Enumeration constant <I_C05_ADAS_PROFSHORT_PROFTYP_HEADING_CHANGE_SPOT> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C05_ADAS_PROFSHORT_PROFTYP_HEADING_CHANGE_SPOT (8u)
#  define I_C05_ADAS_PROFSHORT_PROFTYP_HEADING_CHANGE_SPOT ((c05_ADAS_ProfShort_ProfTyp)8u)
# endif
# if (defined RTE_CONST_I_C05_ADAS_PROFSHORT_PROFTYP_MBC_SLA_LOCATION_TYPE) || (defined I_C05_ADAS_PROFSHORT_PROFTYP_MBC_SLA_LOCATION_TYPE)
#  if (!defined RTE_CONST_I_C05_ADAS_PROFSHORT_PROFTYP_MBC_SLA_LOCATION_TYPE) || (RTE_CONST_I_C05_ADAS_PROFSHORT_PROFTYP_MBC_SLA_LOCATION_TYPE != 16u)
#   error "Enumeration constant <I_C05_ADAS_PROFSHORT_PROFTYP_MBC_SLA_LOCATION_TYPE> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C05_ADAS_PROFSHORT_PROFTYP_MBC_SLA_LOCATION_TYPE (16u)
#  define I_C05_ADAS_PROFSHORT_PROFTYP_MBC_SLA_LOCATION_TYPE ((c05_ADAS_ProfShort_ProfTyp)16u)
# endif
# if (defined RTE_CONST_I_C05_ADAS_PROFSHORT_PROFTYP_SNA) || (defined I_C05_ADAS_PROFSHORT_PROFTYP_SNA)
#  if (!defined RTE_CONST_I_C05_ADAS_PROFSHORT_PROFTYP_SNA) || (RTE_CONST_I_C05_ADAS_PROFSHORT_PROFTYP_SNA != 31u)
#   error "Enumeration constant <I_C05_ADAS_PROFSHORT_PROFTYP_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C05_ADAS_PROFSHORT_PROFTYP_SNA (31u)
#  define I_C05_ADAS_PROFSHORT_PROFTYP_SNA ((c05_ADAS_ProfShort_ProfTyp)31u)
# endif

# define Rte_TypeDef_c05_DstType_Pred
typedef uint8 c05_DstType_Pred;
# define c05_DstType_Pred_LowerLimit ((c05_DstType_Pred)0u)
# define c05_DstType_Pred_UpperLimit ((c05_DstType_Pred)7u)
# define Rte_InvalidValue_c05_DstType_Pred ((c05_DstType_Pred)7u)
# if (defined RTE_CONST_I_C05_DSTTYPE_PRED_NO_DESTINATION) || (defined I_C05_DSTTYPE_PRED_NO_DESTINATION)
#  if (!defined RTE_CONST_I_C05_DSTTYPE_PRED_NO_DESTINATION) || (RTE_CONST_I_C05_DSTTYPE_PRED_NO_DESTINATION != 0u)
#   error "Enumeration constant <I_C05_DSTTYPE_PRED_NO_DESTINATION> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C05_DSTTYPE_PRED_NO_DESTINATION (0u)
#  define I_C05_DSTTYPE_PRED_NO_DESTINATION ((c05_DstType_Pred)0u)
# endif
# if (defined RTE_CONST_I_C05_DSTTYPE_PRED_VIA) || (defined I_C05_DSTTYPE_PRED_VIA)
#  if (!defined RTE_CONST_I_C05_DSTTYPE_PRED_VIA) || (RTE_CONST_I_C05_DSTTYPE_PRED_VIA != 1u)
#   error "Enumeration constant <I_C05_DSTTYPE_PRED_VIA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C05_DSTTYPE_PRED_VIA (1u)
#  define I_C05_DSTTYPE_PRED_VIA ((c05_DstType_Pred)1u)
# endif
# if (defined RTE_CONST_I_C05_DSTTYPE_PRED_DESTINATION) || (defined I_C05_DSTTYPE_PRED_DESTINATION)
#  if (!defined RTE_CONST_I_C05_DSTTYPE_PRED_DESTINATION) || (RTE_CONST_I_C05_DSTTYPE_PRED_DESTINATION != 2u)
#   error "Enumeration constant <I_C05_DSTTYPE_PRED_DESTINATION> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C05_DSTTYPE_PRED_DESTINATION (2u)
#  define I_C05_DSTTYPE_PRED_DESTINATION ((c05_DstType_Pred)2u)
# endif
# if (defined RTE_CONST_I_C05_DSTTYPE_PRED_DEST_PREFROUTE) || (defined I_C05_DSTTYPE_PRED_DEST_PREFROUTE)
#  if (!defined RTE_CONST_I_C05_DSTTYPE_PRED_DEST_PREFROUTE) || (RTE_CONST_I_C05_DSTTYPE_PRED_DEST_PREFROUTE != 3u)
#   error "Enumeration constant <I_C05_DSTTYPE_PRED_DEST_PREFROUTE> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C05_DSTTYPE_PRED_DEST_PREFROUTE (3u)
#  define I_C05_DSTTYPE_PRED_DEST_PREFROUTE ((c05_DstType_Pred)3u)
# endif
# if (defined RTE_CONST_I_C05_DSTTYPE_PRED_SNA) || (defined I_C05_DSTTYPE_PRED_SNA)
#  if (!defined RTE_CONST_I_C05_DSTTYPE_PRED_SNA) || (RTE_CONST_I_C05_DSTTYPE_PRED_SNA != 7u)
#   error "Enumeration constant <I_C05_DSTTYPE_PRED_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C05_DSTTYPE_PRED_SNA (7u)
#  define I_C05_DSTTYPE_PRED_SNA ((c05_DstType_Pred)7u)
# endif

# define Rte_TypeDef_c05_EVC_BodyStyle
typedef uint8 c05_EVC_BodyStyle;
# define c05_EVC_BodyStyle_LowerLimit ((c05_EVC_BodyStyle)0u)
# define c05_EVC_BodyStyle_UpperLimit ((c05_EVC_BodyStyle)31u)
# if (defined RTE_CONST_I_C05_EVC_BODYSTYLE_FW) || (defined I_C05_EVC_BODYSTYLE_FW)
#  if (!defined RTE_CONST_I_C05_EVC_BODYSTYLE_FW) || (RTE_CONST_I_C05_EVC_BODYSTYLE_FW != 0u)
#   error "Enumeration constant <I_C05_EVC_BODYSTYLE_FW> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C05_EVC_BODYSTYLE_FW (0u)
#  define I_C05_EVC_BODYSTYLE_FW ((c05_EVC_BodyStyle)0u)
# endif
# if (defined RTE_CONST_I_C05_EVC_BODYSTYLE_FV) || (defined I_C05_EVC_BODYSTYLE_FV)
#  if (!defined RTE_CONST_I_C05_EVC_BODYSTYLE_FV) || (RTE_CONST_I_C05_EVC_BODYSTYLE_FV != 1u)
#   error "Enumeration constant <I_C05_EVC_BODYSTYLE_FV> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C05_EVC_BODYSTYLE_FV (1u)
#  define I_C05_EVC_BODYSTYLE_FV ((c05_EVC_BodyStyle)1u)
# endif
# if (defined RTE_CONST_I_C05_EVC_BODYSTYLE_FC) || (defined I_C05_EVC_BODYSTYLE_FC)
#  if (!defined RTE_CONST_I_C05_EVC_BODYSTYLE_FC) || (RTE_CONST_I_C05_EVC_BODYSTYLE_FC != 2u)
#   error "Enumeration constant <I_C05_EVC_BODYSTYLE_FC> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C05_EVC_BODYSTYLE_FC (2u)
#  define I_C05_EVC_BODYSTYLE_FC ((c05_EVC_BodyStyle)2u)
# endif
# if (defined RTE_CONST_I_C05_EVC_BODYSTYLE_FS) || (defined I_C05_EVC_BODYSTYLE_FS)
#  if (!defined RTE_CONST_I_C05_EVC_BODYSTYLE_FS) || (RTE_CONST_I_C05_EVC_BODYSTYLE_FS != 3u)
#   error "Enumeration constant <I_C05_EVC_BODYSTYLE_FS> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C05_EVC_BODYSTYLE_FS (3u)
#  define I_C05_EVC_BODYSTYLE_FS ((c05_EVC_BodyStyle)3u)
# endif
# if (defined RTE_CONST_I_C05_EVC_BODYSTYLE_FA) || (defined I_C05_EVC_BODYSTYLE_FA)
#  if (!defined RTE_CONST_I_C05_EVC_BODYSTYLE_FA) || (RTE_CONST_I_C05_EVC_BODYSTYLE_FA != 4u)
#   error "Enumeration constant <I_C05_EVC_BODYSTYLE_FA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C05_EVC_BODYSTYLE_FA (4u)
#  define I_C05_EVC_BODYSTYLE_FA ((c05_EVC_BodyStyle)4u)
# endif
# if (defined RTE_CONST_I_C05_EVC_BODYSTYLE_FR) || (defined I_C05_EVC_BODYSTYLE_FR)
#  if (!defined RTE_CONST_I_C05_EVC_BODYSTYLE_FR) || (RTE_CONST_I_C05_EVC_BODYSTYLE_FR != 5u)
#   error "Enumeration constant <I_C05_EVC_BODYSTYLE_FR> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C05_EVC_BODYSTYLE_FR (5u)
#  define I_C05_EVC_BODYSTYLE_FR ((c05_EVC_BodyStyle)5u)
# endif
# if (defined RTE_CONST_I_C05_EVC_BODYSTYLE_FCL) || (defined I_C05_EVC_BODYSTYLE_FCL)
#  if (!defined RTE_CONST_I_C05_EVC_BODYSTYLE_FCL) || (RTE_CONST_I_C05_EVC_BODYSTYLE_FCL != 6u)
#   error "Enumeration constant <I_C05_EVC_BODYSTYLE_FCL> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C05_EVC_BODYSTYLE_FCL (6u)
#  define I_C05_EVC_BODYSTYLE_FCL ((c05_EVC_BodyStyle)6u)
# endif
# if (defined RTE_CONST_I_C05_EVC_BODYSTYLE_FVV) || (defined I_C05_EVC_BODYSTYLE_FVV)
#  if (!defined RTE_CONST_I_C05_EVC_BODYSTYLE_FVV) || (RTE_CONST_I_C05_EVC_BODYSTYLE_FVV != 7u)
#   error "Enumeration constant <I_C05_EVC_BODYSTYLE_FVV> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C05_EVC_BODYSTYLE_FVV (7u)
#  define I_C05_EVC_BODYSTYLE_FVV ((c05_EVC_BodyStyle)7u)
# endif
# if (defined RTE_CONST_I_C05_EVC_BODYSTYLE_FVF) || (defined I_C05_EVC_BODYSTYLE_FVF)
#  if (!defined RTE_CONST_I_C05_EVC_BODYSTYLE_FVF) || (RTE_CONST_I_C05_EVC_BODYSTYLE_FVF != 8u)
#   error "Enumeration constant <I_C05_EVC_BODYSTYLE_FVF> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C05_EVC_BODYSTYLE_FVF (8u)
#  define I_C05_EVC_BODYSTYLE_FVF ((c05_EVC_BodyStyle)8u)
# endif
# if (defined RTE_CONST_I_C05_EVC_BODYSTYLE_FF) || (defined I_C05_EVC_BODYSTYLE_FF)
#  if (!defined RTE_CONST_I_C05_EVC_BODYSTYLE_FF) || (RTE_CONST_I_C05_EVC_BODYSTYLE_FF != 9u)
#   error "Enumeration constant <I_C05_EVC_BODYSTYLE_FF> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C05_EVC_BODYSTYLE_FF (9u)
#  define I_C05_EVC_BODYSTYLE_FF ((c05_EVC_BodyStyle)9u)
# endif
# if (defined RTE_CONST_I_C05_EVC_BODYSTYLE_FT) || (defined I_C05_EVC_BODYSTYLE_FT)
#  if (!defined RTE_CONST_I_C05_EVC_BODYSTYLE_FT) || (RTE_CONST_I_C05_EVC_BODYSTYLE_FT != 12u)
#   error "Enumeration constant <I_C05_EVC_BODYSTYLE_FT> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C05_EVC_BODYSTYLE_FT (12u)
#  define I_C05_EVC_BODYSTYLE_FT ((c05_EVC_BodyStyle)12u)
# endif
# if (defined RTE_CONST_I_C05_EVC_BODYSTYLE_FX) || (defined I_C05_EVC_BODYSTYLE_FX)
#  if (!defined RTE_CONST_I_C05_EVC_BODYSTYLE_FX) || (RTE_CONST_I_C05_EVC_BODYSTYLE_FX != 13u)
#   error "Enumeration constant <I_C05_EVC_BODYSTYLE_FX> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C05_EVC_BODYSTYLE_FX (13u)
#  define I_C05_EVC_BODYSTYLE_FX ((c05_EVC_BodyStyle)13u)
# endif
# if (defined RTE_CONST_I_C05_EVC_BODYSTYLE_FCLA) || (defined I_C05_EVC_BODYSTYLE_FCLA)
#  if (!defined RTE_CONST_I_C05_EVC_BODYSTYLE_FCLA) || (RTE_CONST_I_C05_EVC_BODYSTYLE_FCLA != 14u)
#   error "Enumeration constant <I_C05_EVC_BODYSTYLE_FCLA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C05_EVC_BODYSTYLE_FCLA (14u)
#  define I_C05_EVC_BODYSTYLE_FCLA ((c05_EVC_BodyStyle)14u)
# endif
# if (defined RTE_CONST_I_C05_EVC_BODYSTYLE_SNA) || (defined I_C05_EVC_BODYSTYLE_SNA)
#  if (!defined RTE_CONST_I_C05_EVC_BODYSTYLE_SNA) || (RTE_CONST_I_C05_EVC_BODYSTYLE_SNA != 31u)
#   error "Enumeration constant <I_C05_EVC_BODYSTYLE_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C05_EVC_BODYSTYLE_SNA (31u)
#  define I_C05_EVC_BODYSTYLE_SNA ((c05_EVC_BodyStyle)31u)
# endif

# define Rte_TypeDef_c05_EVC_HU_Style
typedef uint8 c05_EVC_HU_Style;
# define c05_EVC_HU_Style_LowerLimit ((c05_EVC_HU_Style)0u)
# define c05_EVC_HU_Style_UpperLimit ((c05_EVC_HU_Style)31u)
# if (defined RTE_CONST_I_C05_EVC_HU_STYLE_CMD_APS) || (defined I_C05_EVC_HU_STYLE_CMD_APS)
#  if (!defined RTE_CONST_I_C05_EVC_HU_STYLE_CMD_APS) || (RTE_CONST_I_C05_EVC_HU_STYLE_CMD_APS != 0u)
#   error "Enumeration constant <I_C05_EVC_HU_STYLE_CMD_APS> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C05_EVC_HU_STYLE_CMD_APS (0u)
#  define I_C05_EVC_HU_STYLE_CMD_APS ((c05_EVC_HU_Style)0u)
# endif
# if (defined RTE_CONST_I_C05_EVC_HU_STYLE_AUDIO_20) || (defined I_C05_EVC_HU_STYLE_AUDIO_20)
#  if (!defined RTE_CONST_I_C05_EVC_HU_STYLE_AUDIO_20) || (RTE_CONST_I_C05_EVC_HU_STYLE_AUDIO_20 != 1u)
#   error "Enumeration constant <I_C05_EVC_HU_STYLE_AUDIO_20> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C05_EVC_HU_STYLE_AUDIO_20 (1u)
#  define I_C05_EVC_HU_STYLE_AUDIO_20 ((c05_EVC_HU_Style)1u)
# endif
# if (defined RTE_CONST_I_C05_EVC_HU_STYLE_HU_USB) || (defined I_C05_EVC_HU_STYLE_HU_USB)
#  if (!defined RTE_CONST_I_C05_EVC_HU_STYLE_HU_USB) || (RTE_CONST_I_C05_EVC_HU_STYLE_HU_USB != 2u)
#   error "Enumeration constant <I_C05_EVC_HU_STYLE_HU_USB> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C05_EVC_HU_STYLE_HU_USB (2u)
#  define I_C05_EVC_HU_STYLE_HU_USB ((c05_EVC_HU_Style)2u)
# endif
# if (defined RTE_CONST_I_C05_EVC_HU_STYLE_SNA) || (defined I_C05_EVC_HU_STYLE_SNA)
#  if (!defined RTE_CONST_I_C05_EVC_HU_STYLE_SNA) || (RTE_CONST_I_C05_EVC_HU_STYLE_SNA != 31u)
#   error "Enumeration constant <I_C05_EVC_HU_STYLE_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C05_EVC_HU_STYLE_SNA (31u)
#  define I_C05_EVC_HU_STYLE_SNA ((c05_EVC_HU_Style)31u)
# endif

# define Rte_TypeDef_c05_EVC_VehLineYear
typedef uint8 c05_EVC_VehLineYear;
# define c05_EVC_VehLineYear_LowerLimit ((c05_EVC_VehLineYear)0u)
# define c05_EVC_VehLineYear_UpperLimit ((c05_EVC_VehLineYear)31u)
# define Rte_InvalidValue_c05_EVC_VehLineYear ((c05_EVC_VehLineYear)31u)
# if (defined RTE_CONST_I_C05_EVC_VEHLINEYEAR_SNA) || (defined I_C05_EVC_VEHLINEYEAR_SNA)
#  if (!defined RTE_CONST_I_C05_EVC_VEHLINEYEAR_SNA) || (RTE_CONST_I_C05_EVC_VEHLINEYEAR_SNA != 31u)
#   error "Enumeration constant <I_C05_EVC_VEHLINEYEAR_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C05_EVC_VEHLINEYEAR_SNA (31u)
#  define I_C05_EVC_VEHLINEYEAR_SNA ((c05_EVC_VehLineYear)31u)
# endif

# define Rte_TypeDef_c05_LctType_Pred
typedef uint8 c05_LctType_Pred;
# define c05_LctType_Pred_LowerLimit ((c05_LctType_Pred)0u)
# define c05_LctType_Pred_UpperLimit ((c05_LctType_Pred)31u)
# define Rte_InvalidValue_c05_LctType_Pred ((c05_LctType_Pred)31u)
# if (defined RTE_CONST_I_C05_LCTTYPE_PRED_IDLE) || (defined I_C05_LCTTYPE_PRED_IDLE)
#  if (!defined RTE_CONST_I_C05_LCTTYPE_PRED_IDLE) || (RTE_CONST_I_C05_LCTTYPE_PRED_IDLE != 0u)
#   error "Enumeration constant <I_C05_LCTTYPE_PRED_IDLE> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C05_LCTTYPE_PRED_IDLE (0u)
#  define I_C05_LCTTYPE_PRED_IDLE ((c05_LctType_Pred)0u)
# endif
# if (defined RTE_CONST_I_C05_LCTTYPE_PRED_T_JUNC) || (defined I_C05_LCTTYPE_PRED_T_JUNC)
#  if (!defined RTE_CONST_I_C05_LCTTYPE_PRED_T_JUNC) || (RTE_CONST_I_C05_LCTTYPE_PRED_T_JUNC != 1u)
#   error "Enumeration constant <I_C05_LCTTYPE_PRED_T_JUNC> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C05_LCTTYPE_PRED_T_JUNC (1u)
#  define I_C05_LCTTYPE_PRED_T_JUNC ((c05_LctType_Pred)1u)
# endif
# if (defined RTE_CONST_I_C05_LCTTYPE_PRED_ROUNDABOUT) || (defined I_C05_LCTTYPE_PRED_ROUNDABOUT)
#  if (!defined RTE_CONST_I_C05_LCTTYPE_PRED_ROUNDABOUT) || (RTE_CONST_I_C05_LCTTYPE_PRED_ROUNDABOUT != 2u)
#   error "Enumeration constant <I_C05_LCTTYPE_PRED_ROUNDABOUT> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C05_LCTTYPE_PRED_ROUNDABOUT (2u)
#  define I_C05_LCTTYPE_PRED_ROUNDABOUT ((c05_LctType_Pred)2u)
# endif
# if (defined RTE_CONST_I_C05_LCTTYPE_PRED_TOLL) || (defined I_C05_LCTTYPE_PRED_TOLL)
#  if (!defined RTE_CONST_I_C05_LCTTYPE_PRED_TOLL) || (RTE_CONST_I_C05_LCTTYPE_PRED_TOLL != 3u)
#   error "Enumeration constant <I_C05_LCTTYPE_PRED_TOLL> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C05_LCTTYPE_PRED_TOLL (3u)
#  define I_C05_LCTTYPE_PRED_TOLL ((c05_LctType_Pred)3u)
# endif
# if (defined RTE_CONST_I_C05_LCTTYPE_PRED_LEFT_EXIT_RMP) || (defined I_C05_LCTTYPE_PRED_LEFT_EXIT_RMP)
#  if (!defined RTE_CONST_I_C05_LCTTYPE_PRED_LEFT_EXIT_RMP) || (RTE_CONST_I_C05_LCTTYPE_PRED_LEFT_EXIT_RMP != 4u)
#   error "Enumeration constant <I_C05_LCTTYPE_PRED_LEFT_EXIT_RMP> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C05_LCTTYPE_PRED_LEFT_EXIT_RMP (4u)
#  define I_C05_LCTTYPE_PRED_LEFT_EXIT_RMP ((c05_LctType_Pred)4u)
# endif
# if (defined RTE_CONST_I_C05_LCTTYPE_PRED_RGT_EXIT_RMP) || (defined I_C05_LCTTYPE_PRED_RGT_EXIT_RMP)
#  if (!defined RTE_CONST_I_C05_LCTTYPE_PRED_RGT_EXIT_RMP) || (RTE_CONST_I_C05_LCTTYPE_PRED_RGT_EXIT_RMP != 5u)
#   error "Enumeration constant <I_C05_LCTTYPE_PRED_RGT_EXIT_RMP> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C05_LCTTYPE_PRED_RGT_EXIT_RMP (5u)
#  define I_C05_LCTTYPE_PRED_RGT_EXIT_RMP ((c05_LctType_Pred)5u)
# endif
# if (defined RTE_CONST_I_C05_LCTTYPE_PRED_LFT_ENT_RMP) || (defined I_C05_LCTTYPE_PRED_LFT_ENT_RMP)
#  if (!defined RTE_CONST_I_C05_LCTTYPE_PRED_LFT_ENT_RMP) || (RTE_CONST_I_C05_LCTTYPE_PRED_LFT_ENT_RMP != 6u)
#   error "Enumeration constant <I_C05_LCTTYPE_PRED_LFT_ENT_RMP> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C05_LCTTYPE_PRED_LFT_ENT_RMP (6u)
#  define I_C05_LCTTYPE_PRED_LFT_ENT_RMP ((c05_LctType_Pred)6u)
# endif
# if (defined RTE_CONST_I_C05_LCTTYPE_PRED_RGT_ENT_RMP) || (defined I_C05_LCTTYPE_PRED_RGT_ENT_RMP)
#  if (!defined RTE_CONST_I_C05_LCTTYPE_PRED_RGT_ENT_RMP) || (RTE_CONST_I_C05_LCTTYPE_PRED_RGT_ENT_RMP != 7u)
#   error "Enumeration constant <I_C05_LCTTYPE_PRED_RGT_ENT_RMP> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C05_LCTTYPE_PRED_RGT_ENT_RMP (7u)
#  define I_C05_LCTTYPE_PRED_RGT_ENT_RMP ((c05_LctType_Pred)7u)
# endif
# if (defined RTE_CONST_I_C05_LCTTYPE_PRED_TUNNEL_AHD) || (defined I_C05_LCTTYPE_PRED_TUNNEL_AHD)
#  if (!defined RTE_CONST_I_C05_LCTTYPE_PRED_TUNNEL_AHD) || (RTE_CONST_I_C05_LCTTYPE_PRED_TUNNEL_AHD != 8u)
#   error "Enumeration constant <I_C05_LCTTYPE_PRED_TUNNEL_AHD> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C05_LCTTYPE_PRED_TUNNEL_AHD (8u)
#  define I_C05_LCTTYPE_PRED_TUNNEL_AHD ((c05_LctType_Pred)8u)
# endif
# if (defined RTE_CONST_I_C05_LCTTYPE_PRED_NO_EVENT) || (defined I_C05_LCTTYPE_PRED_NO_EVENT)
#  if (!defined RTE_CONST_I_C05_LCTTYPE_PRED_NO_EVENT) || (RTE_CONST_I_C05_LCTTYPE_PRED_NO_EVENT != 9u)
#   error "Enumeration constant <I_C05_LCTTYPE_PRED_NO_EVENT> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C05_LCTTYPE_PRED_NO_EVENT (9u)
#  define I_C05_LCTTYPE_PRED_NO_EVENT ((c05_LctType_Pred)9u)
# endif
# if (defined RTE_CONST_I_C05_LCTTYPE_PRED_LFT_EXIT_INSD_TUNNEL) || (defined I_C05_LCTTYPE_PRED_LFT_EXIT_INSD_TUNNEL)
#  if (!defined RTE_CONST_I_C05_LCTTYPE_PRED_LFT_EXIT_INSD_TUNNEL) || (RTE_CONST_I_C05_LCTTYPE_PRED_LFT_EXIT_INSD_TUNNEL != 10u)
#   error "Enumeration constant <I_C05_LCTTYPE_PRED_LFT_EXIT_INSD_TUNNEL> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C05_LCTTYPE_PRED_LFT_EXIT_INSD_TUNNEL (10u)
#  define I_C05_LCTTYPE_PRED_LFT_EXIT_INSD_TUNNEL ((c05_LctType_Pred)10u)
# endif
# if (defined RTE_CONST_I_C05_LCTTYPE_PRED_RGT_EXIT_INSD_TUNNEL) || (defined I_C05_LCTTYPE_PRED_RGT_EXIT_INSD_TUNNEL)
#  if (!defined RTE_CONST_I_C05_LCTTYPE_PRED_RGT_EXIT_INSD_TUNNEL) || (RTE_CONST_I_C05_LCTTYPE_PRED_RGT_EXIT_INSD_TUNNEL != 11u)
#   error "Enumeration constant <I_C05_LCTTYPE_PRED_RGT_EXIT_INSD_TUNNEL> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C05_LCTTYPE_PRED_RGT_EXIT_INSD_TUNNEL (11u)
#  define I_C05_LCTTYPE_PRED_RGT_EXIT_INSD_TUNNEL ((c05_LctType_Pred)11u)
# endif
# if (defined RTE_CONST_I_C05_LCTTYPE_PRED_LFT_ENT_INSD_TUNNEL) || (defined I_C05_LCTTYPE_PRED_LFT_ENT_INSD_TUNNEL)
#  if (!defined RTE_CONST_I_C05_LCTTYPE_PRED_LFT_ENT_INSD_TUNNEL) || (RTE_CONST_I_C05_LCTTYPE_PRED_LFT_ENT_INSD_TUNNEL != 12u)
#   error "Enumeration constant <I_C05_LCTTYPE_PRED_LFT_ENT_INSD_TUNNEL> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C05_LCTTYPE_PRED_LFT_ENT_INSD_TUNNEL (12u)
#  define I_C05_LCTTYPE_PRED_LFT_ENT_INSD_TUNNEL ((c05_LctType_Pred)12u)
# endif
# if (defined RTE_CONST_I_C05_LCTTYPE_PRED_RGT_ENT_INSD_TUNNEL) || (defined I_C05_LCTTYPE_PRED_RGT_ENT_INSD_TUNNEL)
#  if (!defined RTE_CONST_I_C05_LCTTYPE_PRED_RGT_ENT_INSD_TUNNEL) || (RTE_CONST_I_C05_LCTTYPE_PRED_RGT_ENT_INSD_TUNNEL != 13u)
#   error "Enumeration constant <I_C05_LCTTYPE_PRED_RGT_ENT_INSD_TUNNEL> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C05_LCTTYPE_PRED_RGT_ENT_INSD_TUNNEL (13u)
#  define I_C05_LCTTYPE_PRED_RGT_ENT_INSD_TUNNEL ((c05_LctType_Pred)13u)
# endif
# if (defined RTE_CONST_I_C05_LCTTYPE_PRED_TUNNEL_END) || (defined I_C05_LCTTYPE_PRED_TUNNEL_END)
#  if (!defined RTE_CONST_I_C05_LCTTYPE_PRED_TUNNEL_END) || (RTE_CONST_I_C05_LCTTYPE_PRED_TUNNEL_END != 14u)
#   error "Enumeration constant <I_C05_LCTTYPE_PRED_TUNNEL_END> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C05_LCTTYPE_PRED_TUNNEL_END (14u)
#  define I_C05_LCTTYPE_PRED_TUNNEL_END ((c05_LctType_Pred)14u)
# endif
# if (defined RTE_CONST_I_C05_LCTTYPE_PRED_RAILWAY_XING) || (defined I_C05_LCTTYPE_PRED_RAILWAY_XING)
#  if (!defined RTE_CONST_I_C05_LCTTYPE_PRED_RAILWAY_XING) || (RTE_CONST_I_C05_LCTTYPE_PRED_RAILWAY_XING != 15u)
#   error "Enumeration constant <I_C05_LCTTYPE_PRED_RAILWAY_XING> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C05_LCTTYPE_PRED_RAILWAY_XING (15u)
#  define I_C05_LCTTYPE_PRED_RAILWAY_XING ((c05_LctType_Pred)15u)
# endif
# if (defined RTE_CONST_I_C05_LCTTYPE_PRED_BORDER_XING) || (defined I_C05_LCTTYPE_PRED_BORDER_XING)
#  if (!defined RTE_CONST_I_C05_LCTTYPE_PRED_BORDER_XING) || (RTE_CONST_I_C05_LCTTYPE_PRED_BORDER_XING != 16u)
#   error "Enumeration constant <I_C05_LCTTYPE_PRED_BORDER_XING> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C05_LCTTYPE_PRED_BORDER_XING (16u)
#  define I_C05_LCTTYPE_PRED_BORDER_XING ((c05_LctType_Pred)16u)
# endif
# if (defined RTE_CONST_I_C05_LCTTYPE_PRED_PHYS_DEADEND) || (defined I_C05_LCTTYPE_PRED_PHYS_DEADEND)
#  if (!defined RTE_CONST_I_C05_LCTTYPE_PRED_PHYS_DEADEND) || (RTE_CONST_I_C05_LCTTYPE_PRED_PHYS_DEADEND != 17u)
#   error "Enumeration constant <I_C05_LCTTYPE_PRED_PHYS_DEADEND> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C05_LCTTYPE_PRED_PHYS_DEADEND (17u)
#  define I_C05_LCTTYPE_PRED_PHYS_DEADEND ((c05_LctType_Pred)17u)
# endif
# if (defined RTE_CONST_I_C05_LCTTYPE_PRED_LEGAL_DEADEND) || (defined I_C05_LCTTYPE_PRED_LEGAL_DEADEND)
#  if (!defined RTE_CONST_I_C05_LCTTYPE_PRED_LEGAL_DEADEND) || (RTE_CONST_I_C05_LCTTYPE_PRED_LEGAL_DEADEND != 18u)
#   error "Enumeration constant <I_C05_LCTTYPE_PRED_LEGAL_DEADEND> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C05_LCTTYPE_PRED_LEGAL_DEADEND (18u)
#  define I_C05_LCTTYPE_PRED_LEGAL_DEADEND ((c05_LctType_Pred)18u)
# endif
# if (defined RTE_CONST_I_C05_LCTTYPE_PRED_FERRY_DEADEND) || (defined I_C05_LCTTYPE_PRED_FERRY_DEADEND)
#  if (!defined RTE_CONST_I_C05_LCTTYPE_PRED_FERRY_DEADEND) || (RTE_CONST_I_C05_LCTTYPE_PRED_FERRY_DEADEND != 19u)
#   error "Enumeration constant <I_C05_LCTTYPE_PRED_FERRY_DEADEND> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C05_LCTTYPE_PRED_FERRY_DEADEND (19u)
#  define I_C05_LCTTYPE_PRED_FERRY_DEADEND ((c05_LctType_Pred)19u)
# endif
# if (defined RTE_CONST_I_C05_LCTTYPE_PRED_MAP_DEADEND) || (defined I_C05_LCTTYPE_PRED_MAP_DEADEND)
#  if (!defined RTE_CONST_I_C05_LCTTYPE_PRED_MAP_DEADEND) || (RTE_CONST_I_C05_LCTTYPE_PRED_MAP_DEADEND != 20u)
#   error "Enumeration constant <I_C05_LCTTYPE_PRED_MAP_DEADEND> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C05_LCTTYPE_PRED_MAP_DEADEND (20u)
#  define I_C05_LCTTYPE_PRED_MAP_DEADEND ((c05_LctType_Pred)20u)
# endif
# if (defined RTE_CONST_I_C05_LCTTYPE_PRED_TRANS_FORK) || (defined I_C05_LCTTYPE_PRED_TRANS_FORK)
#  if (!defined RTE_CONST_I_C05_LCTTYPE_PRED_TRANS_FORK) || (RTE_CONST_I_C05_LCTTYPE_PRED_TRANS_FORK != 21u)
#   error "Enumeration constant <I_C05_LCTTYPE_PRED_TRANS_FORK> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C05_LCTTYPE_PRED_TRANS_FORK (21u)
#  define I_C05_LCTTYPE_PRED_TRANS_FORK ((c05_LctType_Pred)21u)
# endif
# if (defined RTE_CONST_I_C05_LCTTYPE_PRED_TRANS_MERGE) || (defined I_C05_LCTTYPE_PRED_TRANS_MERGE)
#  if (!defined RTE_CONST_I_C05_LCTTYPE_PRED_TRANS_MERGE) || (RTE_CONST_I_C05_LCTTYPE_PRED_TRANS_MERGE != 22u)
#   error "Enumeration constant <I_C05_LCTTYPE_PRED_TRANS_MERGE> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C05_LCTTYPE_PRED_TRANS_MERGE (22u)
#  define I_C05_LCTTYPE_PRED_TRANS_MERGE ((c05_LctType_Pred)22u)
# endif
# if (defined RTE_CONST_I_C05_LCTTYPE_PRED_SNA) || (defined I_C05_LCTTYPE_PRED_SNA)
#  if (!defined RTE_CONST_I_C05_LCTTYPE_PRED_SNA) || (RTE_CONST_I_C05_LCTTYPE_PRED_SNA != 31u)
#   error "Enumeration constant <I_C05_LCTTYPE_PRED_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C05_LCTTYPE_PRED_SNA (31u)
#  define I_C05_LCTTYPE_PRED_SNA ((c05_LctType_Pred)31u)
# endif

# define Rte_TypeDef_c05_m_0_180_6
typedef uint8 c05_m_0_180_6;
# define c05_m_0_180_6_LowerLimit ((c05_m_0_180_6)0u)
# define c05_m_0_180_6_UpperLimit ((c05_m_0_180_6)31u)
# define Rte_InvalidValue_c05_m_0_180_6 ((c05_m_0_180_6)31u)
# if (defined RTE_CONST_I_C05_M_0_180_6_SNA) || (defined I_C05_M_0_180_6_SNA)
#  if (!defined RTE_CONST_I_C05_M_0_180_6_SNA) || (RTE_CONST_I_C05_M_0_180_6_SNA != 31u)
#   error "Enumeration constant <I_C05_M_0_180_6_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C05_M_0_180_6_SNA (31u)
#  define I_C05_M_0_180_6_SNA ((c05_m_0_180_6)31u)
# endif

# define Rte_TypeDef_c05_m_0_60_2
typedef uint8 c05_m_0_60_2;
# define c05_m_0_60_2_LowerLimit ((c05_m_0_60_2)0u)
# define c05_m_0_60_2_UpperLimit ((c05_m_0_60_2)31u)
# define Rte_InvalidValue_c05_m_0_60_2 ((c05_m_0_60_2)31u)
# if (defined RTE_CONST_I_C05_M_0_60_2_SNA) || (defined I_C05_M_0_60_2_SNA)
#  if (!defined RTE_CONST_I_C05_M_0_60_2_SNA) || (RTE_CONST_I_C05_M_0_60_2_SNA != 31u)
#   error "Enumeration constant <I_C05_M_0_60_2_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C05_M_0_60_2_SNA (31u)
#  define I_C05_M_0_60_2_SNA ((c05_m_0_60_2)31u)
# endif

# define Rte_TypeDef_c05_m_0_90_3
typedef uint8 c05_m_0_90_3;
# define c05_m_0_90_3_LowerLimit ((c05_m_0_90_3)0u)
# define c05_m_0_90_3_UpperLimit ((c05_m_0_90_3)31u)
# define Rte_InvalidValue_c05_m_0_90_3 ((c05_m_0_90_3)31u)
# if (defined RTE_CONST_I_C05_M_0_90_3_SNA) || (defined I_C05_M_0_90_3_SNA)
#  if (!defined RTE_CONST_I_C05_M_0_90_3_SNA) || (RTE_CONST_I_C05_M_0_90_3_SNA != 31u)
#   error "Enumeration constant <I_C05_M_0_90_3_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C05_M_0_90_3_SNA (31u)
#  define I_C05_M_0_90_3_SNA ((c05_m_0_90_3)31u)
# endif

# define Rte_TypeDef_c05_ms_16_132_4
typedef uint8 c05_ms_16_132_4;
# define c05_ms_16_132_4_LowerLimit ((c05_ms_16_132_4)0u)
# define c05_ms_16_132_4_UpperLimit ((c05_ms_16_132_4)31u)
# define Rte_InvalidValue_c05_ms_16_132_4 ((c05_ms_16_132_4)31u)
# if (defined RTE_CONST_I_C05_MS_16_132_4_IDLE) || (defined I_C05_MS_16_132_4_IDLE)
#  if (!defined RTE_CONST_I_C05_MS_16_132_4_IDLE) || (RTE_CONST_I_C05_MS_16_132_4_IDLE != 0u)
#   error "Enumeration constant <I_C05_MS_16_132_4_IDLE> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C05_MS_16_132_4_IDLE (0u)
#  define I_C05_MS_16_132_4_IDLE ((c05_ms_16_132_4)0u)
# endif
# if (defined RTE_CONST_I_C05_MS_16_132_4_SNA) || (defined I_C05_MS_16_132_4_SNA)
#  if (!defined RTE_CONST_I_C05_MS_16_132_4_SNA) || (RTE_CONST_I_C05_MS_16_132_4_SNA != 31u)
#   error "Enumeration constant <I_C05_MS_16_132_4_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C05_MS_16_132_4_SNA (31u)
#  define I_C05_MS_16_132_4_SNA ((c05_ms_16_132_4)31u)
# endif

# define Rte_TypeDef_c05_perc_0_31_3k333
typedef uint8 c05_perc_0_31_3k333;
# define c05_perc_0_31_3k333_LowerLimit ((c05_perc_0_31_3k333)0u)
# define c05_perc_0_31_3k333_UpperLimit ((c05_perc_0_31_3k333)31u)
# define Rte_InvalidValue_c05_perc_0_31_3k333 ((c05_perc_0_31_3k333)31u)
# if (defined RTE_CONST_I_C05_PERC_0_31_3K333_SNA) || (defined I_C05_PERC_0_31_3K333_SNA)
#  if (!defined RTE_CONST_I_C05_PERC_0_31_3K333_SNA) || (RTE_CONST_I_C05_PERC_0_31_3K333_SNA != 31u)
#   error "Enumeration constant <I_C05_PERC_0_31_3K333_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C05_PERC_0_31_3K333_SNA (31u)
#  define I_C05_PERC_0_31_3K333_SNA ((c05_perc_0_31_3k333)31u)
# endif

# define Rte_TypeDef_c06_0_50_0d02_SNA_3Fh
typedef uint8 c06_0_50_0d02_SNA_3Fh;
# define c06_0_50_0d02_SNA_3Fh_LowerLimit ((c06_0_50_0d02_SNA_3Fh)0u)
# define c06_0_50_0d02_SNA_3Fh_UpperLimit ((c06_0_50_0d02_SNA_3Fh)63u)
# define Rte_InvalidValue_c06_0_50_0d02_SNA_3Fh ((c06_0_50_0d02_SNA_3Fh)63u)
# if (defined RTE_CONST_I_C06_0_50_0D02_SNA_3FH_SNA) || (defined I_C06_0_50_0D02_SNA_3FH_SNA)
#  if (!defined RTE_CONST_I_C06_0_50_0D02_SNA_3FH_SNA) || (RTE_CONST_I_C06_0_50_0D02_SNA_3FH_SNA != 63u)
#   error "Enumeration constant <I_C06_0_50_0D02_SNA_3FH_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C06_0_50_0D02_SNA_3FH_SNA (63u)
#  define I_C06_0_50_0D02_SNA_3FH_SNA ((c06_0_50_0d02_SNA_3Fh)63u)
# endif

# define Rte_TypeDef_c06_ADAS_MapVerYear
typedef uint8 c06_ADAS_MapVerYear;
# define c06_ADAS_MapVerYear_LowerLimit ((c06_ADAS_MapVerYear)0u)
# define c06_ADAS_MapVerYear_UpperLimit ((c06_ADAS_MapVerYear)63u)
# define Rte_InvalidValue_c06_ADAS_MapVerYear ((c06_ADAS_MapVerYear)63u)
# if (defined RTE_CONST_I_C06_ADAS_MAPVERYEAR_SNA) || (defined I_C06_ADAS_MAPVERYEAR_SNA)
#  if (!defined RTE_CONST_I_C06_ADAS_MAPVERYEAR_SNA) || (RTE_CONST_I_C06_ADAS_MAPVERYEAR_SNA != 63u)
#   error "Enumeration constant <I_C06_ADAS_MAPVERYEAR_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C06_ADAS_MAPVERYEAR_SNA (63u)
#  define I_C06_ADAS_MAPVERYEAR_SNA ((c06_ADAS_MapVerYear)63u)
# endif

# define Rte_TypeDef_c06_EVC_VehLine
typedef uint8 c06_EVC_VehLine;
# define c06_EVC_VehLine_LowerLimit ((c06_EVC_VehLine)1u)
# define c06_EVC_VehLine_UpperLimit ((c06_EVC_VehLine)63u)
# if (defined RTE_CONST_I_C06_EVC_VEHLINE_BR231) || (defined I_C06_EVC_VEHLINE_BR231)
#  if (!defined RTE_CONST_I_C06_EVC_VEHLINE_BR231) || (RTE_CONST_I_C06_EVC_VEHLINE_BR231 != 1u)
#   error "Enumeration constant <I_C06_EVC_VEHLINE_BR231> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C06_EVC_VEHLINE_BR231 (1u)
#  define I_C06_EVC_VEHLINE_BR231 ((c06_EVC_VehLine)1u)
# endif
# if (defined RTE_CONST_I_C06_EVC_VEHLINE_BR212) || (defined I_C06_EVC_VEHLINE_BR212)
#  if (!defined RTE_CONST_I_C06_EVC_VEHLINE_BR212) || (RTE_CONST_I_C06_EVC_VEHLINE_BR212 != 2u)
#   error "Enumeration constant <I_C06_EVC_VEHLINE_BR212> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C06_EVC_VEHLINE_BR212 (2u)
#  define I_C06_EVC_VEHLINE_BR212 ((c06_EVC_VehLine)2u)
# endif
# if (defined RTE_CONST_I_C06_EVC_VEHLINE_BR222) || (defined I_C06_EVC_VEHLINE_BR222)
#  if (!defined RTE_CONST_I_C06_EVC_VEHLINE_BR222) || (RTE_CONST_I_C06_EVC_VEHLINE_BR222 != 4u)
#   error "Enumeration constant <I_C06_EVC_VEHLINE_BR222> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C06_EVC_VEHLINE_BR222 (4u)
#  define I_C06_EVC_VEHLINE_BR222 ((c06_EVC_VehLine)4u)
# endif
# if (defined RTE_CONST_I_C06_EVC_VEHLINE_BR205) || (defined I_C06_EVC_VEHLINE_BR205)
#  if (!defined RTE_CONST_I_C06_EVC_VEHLINE_BR205) || (RTE_CONST_I_C06_EVC_VEHLINE_BR205 != 6u)
#   error "Enumeration constant <I_C06_EVC_VEHLINE_BR205> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C06_EVC_VEHLINE_BR205 (6u)
#  define I_C06_EVC_VEHLINE_BR205 ((c06_EVC_VehLine)6u)
# endif
# if (defined RTE_CONST_I_C06_EVC_VEHLINE_BR166) || (defined I_C06_EVC_VEHLINE_BR166)
#  if (!defined RTE_CONST_I_C06_EVC_VEHLINE_BR166) || (RTE_CONST_I_C06_EVC_VEHLINE_BR166 != 8u)
#   error "Enumeration constant <I_C06_EVC_VEHLINE_BR166> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C06_EVC_VEHLINE_BR166 (8u)
#  define I_C06_EVC_VEHLINE_BR166 ((c06_EVC_VehLine)8u)
# endif
# if (defined RTE_CONST_I_C06_EVC_VEHLINE_BR217) || (defined I_C06_EVC_VEHLINE_BR217)
#  if (!defined RTE_CONST_I_C06_EVC_VEHLINE_BR217) || (RTE_CONST_I_C06_EVC_VEHLINE_BR217 != 11u)
#   error "Enumeration constant <I_C06_EVC_VEHLINE_BR217> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C06_EVC_VEHLINE_BR217 (11u)
#  define I_C06_EVC_VEHLINE_BR217 ((c06_EVC_VehLine)11u)
# endif
# if (defined RTE_CONST_I_C06_EVC_VEHLINE_BR213) || (defined I_C06_EVC_VEHLINE_BR213)
#  if (!defined RTE_CONST_I_C06_EVC_VEHLINE_BR213) || (RTE_CONST_I_C06_EVC_VEHLINE_BR213 != 13u)
#   error "Enumeration constant <I_C06_EVC_VEHLINE_BR213> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C06_EVC_VEHLINE_BR213 (13u)
#  define I_C06_EVC_VEHLINE_BR213 ((c06_EVC_VehLine)13u)
# endif
# if (defined RTE_CONST_I_C06_EVC_VEHLINE_BR218) || (defined I_C06_EVC_VEHLINE_BR218)
#  if (!defined RTE_CONST_I_C06_EVC_VEHLINE_BR218) || (RTE_CONST_I_C06_EVC_VEHLINE_BR218 != 32u)
#   error "Enumeration constant <I_C06_EVC_VEHLINE_BR218> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C06_EVC_VEHLINE_BR218 (32u)
#  define I_C06_EVC_VEHLINE_BR218 ((c06_EVC_VehLine)32u)
# endif
# if (defined RTE_CONST_I_C06_EVC_VEHLINE_SNA) || (defined I_C06_EVC_VEHLINE_SNA)
#  if (!defined RTE_CONST_I_C06_EVC_VEHLINE_SNA) || (RTE_CONST_I_C06_EVC_VEHLINE_SNA != 63u)
#   error "Enumeration constant <I_C06_EVC_VEHLINE_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C06_EVC_VEHLINE_SNA (63u)
#  define I_C06_EVC_VEHLINE_SNA ((c06_EVC_VehLine)63u)
# endif

# define Rte_TypeDef_c06_Idx_0_to_63_1
typedef uint8 c06_Idx_0_to_63_1;
# define c06_Idx_0_to_63_1_LowerLimit ((c06_Idx_0_to_63_1)0u)
# define c06_Idx_0_to_63_1_UpperLimit ((c06_Idx_0_to_63_1)63u)
# if (defined RTE_CONST_I_C06_IDX_0_TO_63_1_UNKNOWN) || (defined I_C06_IDX_0_TO_63_1_UNKNOWN)
#  if (!defined RTE_CONST_I_C06_IDX_0_TO_63_1_UNKNOWN) || (RTE_CONST_I_C06_IDX_0_TO_63_1_UNKNOWN != 0u)
#   error "Enumeration constant <I_C06_IDX_0_TO_63_1_UNKNOWN> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C06_IDX_0_TO_63_1_UNKNOWN (0u)
#  define I_C06_IDX_0_TO_63_1_UNKNOWN ((c06_Idx_0_to_63_1)0u)
# endif
# if (defined RTE_CONST_I_C06_IDX_0_TO_63_1_NOT_DIGIT) || (defined I_C06_IDX_0_TO_63_1_NOT_DIGIT)
#  if (!defined RTE_CONST_I_C06_IDX_0_TO_63_1_NOT_DIGIT) || (RTE_CONST_I_C06_IDX_0_TO_63_1_NOT_DIGIT != 1u)
#   error "Enumeration constant <I_C06_IDX_0_TO_63_1_NOT_DIGIT> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C06_IDX_0_TO_63_1_NOT_DIGIT (1u)
#  define I_C06_IDX_0_TO_63_1_NOT_DIGIT ((c06_Idx_0_to_63_1)1u)
# endif
# if (defined RTE_CONST_I_C06_IDX_0_TO_63_1_NOT_ROAD) || (defined I_C06_IDX_0_TO_63_1_NOT_ROAD)
#  if (!defined RTE_CONST_I_C06_IDX_0_TO_63_1_NOT_ROAD) || (RTE_CONST_I_C06_IDX_0_TO_63_1_NOT_ROAD != 2u)
#   error "Enumeration constant <I_C06_IDX_0_TO_63_1_NOT_ROAD> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C06_IDX_0_TO_63_1_NOT_ROAD (2u)
#  define I_C06_IDX_0_TO_63_1_NOT_ROAD ((c06_Idx_0_to_63_1)2u)
# endif
# if (defined RTE_CONST_I_C06_IDX_0_TO_63_1_NOT_CALIB) || (defined I_C06_IDX_0_TO_63_1_NOT_CALIB)
#  if (!defined RTE_CONST_I_C06_IDX_0_TO_63_1_NOT_CALIB) || (RTE_CONST_I_C06_IDX_0_TO_63_1_NOT_CALIB != 3u)
#   error "Enumeration constant <I_C06_IDX_0_TO_63_1_NOT_CALIB> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C06_IDX_0_TO_63_1_NOT_CALIB (3u)
#  define I_C06_IDX_0_TO_63_1_NOT_CALIB ((c06_Idx_0_to_63_1)3u)
# endif
# if (defined RTE_CONST_I_C06_IDX_0_TO_63_1_CURR_SEG) || (defined I_C06_IDX_0_TO_63_1_CURR_SEG)
#  if (!defined RTE_CONST_I_C06_IDX_0_TO_63_1_CURR_SEG) || (RTE_CONST_I_C06_IDX_0_TO_63_1_CURR_SEG != 4u)
#   error "Enumeration constant <I_C06_IDX_0_TO_63_1_CURR_SEG> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C06_IDX_0_TO_63_1_CURR_SEG (4u)
#  define I_C06_IDX_0_TO_63_1_CURR_SEG ((c06_Idx_0_to_63_1)4u)
# endif
# if (defined RTE_CONST_I_C06_IDX_0_TO_63_1_STUB_ONLY) || (defined I_C06_IDX_0_TO_63_1_STUB_ONLY)
#  if (!defined RTE_CONST_I_C06_IDX_0_TO_63_1_STUB_ONLY) || (RTE_CONST_I_C06_IDX_0_TO_63_1_STUB_ONLY != 5u)
#   error "Enumeration constant <I_C06_IDX_0_TO_63_1_STUB_ONLY> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C06_IDX_0_TO_63_1_STUB_ONLY (5u)
#  define I_C06_IDX_0_TO_63_1_STUB_ONLY ((c06_Idx_0_to_63_1)5u)
# endif
# if (defined RTE_CONST_I_C06_IDX_0_TO_63_1_THIS_PATH) || (defined I_C06_IDX_0_TO_63_1_THIS_PATH)
#  if (!defined RTE_CONST_I_C06_IDX_0_TO_63_1_THIS_PATH) || (RTE_CONST_I_C06_IDX_0_TO_63_1_THIS_PATH != 6u)
#   error "Enumeration constant <I_C06_IDX_0_TO_63_1_THIS_PATH> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C06_IDX_0_TO_63_1_THIS_PATH (6u)
#  define I_C06_IDX_0_TO_63_1_THIS_PATH ((c06_Idx_0_to_63_1)6u)
# endif
# if (defined RTE_CONST_I_C06_IDX_0_TO_63_1_RES7) || (defined I_C06_IDX_0_TO_63_1_RES7)
#  if (!defined RTE_CONST_I_C06_IDX_0_TO_63_1_RES7) || (RTE_CONST_I_C06_IDX_0_TO_63_1_RES7 != 7u)
#   error "Enumeration constant <I_C06_IDX_0_TO_63_1_RES7> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C06_IDX_0_TO_63_1_RES7 (7u)
#  define I_C06_IDX_0_TO_63_1_RES7 ((c06_Idx_0_to_63_1)7u)
# endif

# define Rte_TypeDef_c06_SpdCtrlLvr_Stat
typedef uint8 c06_SpdCtrlLvr_Stat;
# define c06_SpdCtrlLvr_Stat_LowerLimit ((c06_SpdCtrlLvr_Stat)0u)
# define c06_SpdCtrlLvr_Stat_UpperLimit ((c06_SpdCtrlLvr_Stat)32u)
# if (defined RTE_CONST_I_C06_SPDCTRLLVR_STAT_IDLE) || (defined I_C06_SPDCTRLLVR_STAT_IDLE)
#  if (!defined RTE_CONST_I_C06_SPDCTRLLVR_STAT_IDLE) || (RTE_CONST_I_C06_SPDCTRLLVR_STAT_IDLE != 0u)
#   error "Enumeration constant <I_C06_SPDCTRLLVR_STAT_IDLE> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C06_SPDCTRLLVR_STAT_IDLE (0u)
#  define I_C06_SPDCTRLLVR_STAT_IDLE ((c06_SpdCtrlLvr_Stat)0u)
# endif
# if (defined RTE_CONST_I_C06_SPDCTRLLVR_STAT_FWD) || (defined I_C06_SPDCTRLLVR_STAT_FWD)
#  if (!defined RTE_CONST_I_C06_SPDCTRLLVR_STAT_FWD) || (RTE_CONST_I_C06_SPDCTRLLVR_STAT_FWD != 1u)
#   error "Enumeration constant <I_C06_SPDCTRLLVR_STAT_FWD> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C06_SPDCTRLLVR_STAT_FWD (1u)
#  define I_C06_SPDCTRLLVR_STAT_FWD ((c06_SpdCtrlLvr_Stat)1u)
# endif
# if (defined RTE_CONST_I_C06_SPDCTRLLVR_STAT_RWD) || (defined I_C06_SPDCTRLLVR_STAT_RWD)
#  if (!defined RTE_CONST_I_C06_SPDCTRLLVR_STAT_RWD) || (RTE_CONST_I_C06_SPDCTRLLVR_STAT_RWD != 2u)
#   error "Enumeration constant <I_C06_SPDCTRLLVR_STAT_RWD> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C06_SPDCTRLLVR_STAT_RWD (2u)
#  define I_C06_SPDCTRLLVR_STAT_RWD ((c06_SpdCtrlLvr_Stat)2u)
# endif
# if (defined RTE_CONST_I_C06_SPDCTRLLVR_STAT_UP_2ND) || (defined I_C06_SPDCTRLLVR_STAT_UP_2ND)
#  if (!defined RTE_CONST_I_C06_SPDCTRLLVR_STAT_UP_2ND) || (RTE_CONST_I_C06_SPDCTRLLVR_STAT_UP_2ND != 4u)
#   error "Enumeration constant <I_C06_SPDCTRLLVR_STAT_UP_2ND> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C06_SPDCTRLLVR_STAT_UP_2ND (4u)
#  define I_C06_SPDCTRLLVR_STAT_UP_2ND ((c06_SpdCtrlLvr_Stat)4u)
# endif
# if (defined RTE_CONST_I_C06_SPDCTRLLVR_STAT_DN_2ND) || (defined I_C06_SPDCTRLLVR_STAT_DN_2ND)
#  if (!defined RTE_CONST_I_C06_SPDCTRLLVR_STAT_DN_2ND) || (RTE_CONST_I_C06_SPDCTRLLVR_STAT_DN_2ND != 8u)
#   error "Enumeration constant <I_C06_SPDCTRLLVR_STAT_DN_2ND> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C06_SPDCTRLLVR_STAT_DN_2ND (8u)
#  define I_C06_SPDCTRLLVR_STAT_DN_2ND ((c06_SpdCtrlLvr_Stat)8u)
# endif
# if (defined RTE_CONST_I_C06_SPDCTRLLVR_STAT_UP_1ST) || (defined I_C06_SPDCTRLLVR_STAT_UP_1ST)
#  if (!defined RTE_CONST_I_C06_SPDCTRLLVR_STAT_UP_1ST) || (RTE_CONST_I_C06_SPDCTRLLVR_STAT_UP_1ST != 16u)
#   error "Enumeration constant <I_C06_SPDCTRLLVR_STAT_UP_1ST> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C06_SPDCTRLLVR_STAT_UP_1ST (16u)
#  define I_C06_SPDCTRLLVR_STAT_UP_1ST ((c06_SpdCtrlLvr_Stat)16u)
# endif
# if (defined RTE_CONST_I_C06_SPDCTRLLVR_STAT_DN_1ST) || (defined I_C06_SPDCTRLLVR_STAT_DN_1ST)
#  if (!defined RTE_CONST_I_C06_SPDCTRLLVR_STAT_DN_1ST) || (RTE_CONST_I_C06_SPDCTRLLVR_STAT_DN_1ST != 32u)
#   error "Enumeration constant <I_C06_SPDCTRLLVR_STAT_DN_1ST> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C06_SPDCTRLLVR_STAT_DN_1ST (32u)
#  define I_C06_SPDCTRLLVR_STAT_DN_1ST ((c06_SpdCtrlLvr_Stat)32u)
# endif

# define Rte_TypeDef_c06_km_p_h_or_mph_0_310_5
typedef uint8 c06_km_p_h_or_mph_0_310_5;
# define c06_km_p_h_or_mph_0_310_5_LowerLimit ((c06_km_p_h_or_mph_0_310_5)0u)
# define c06_km_p_h_or_mph_0_310_5_UpperLimit ((c06_km_p_h_or_mph_0_310_5)63u)
# define Rte_InvalidValue_c06_km_p_h_or_mph_0_310_5 ((c06_km_p_h_or_mph_0_310_5)63u)
# if (defined RTE_CONST_I_C06_KM_P_H_OR_MPH_0_310_5_SNA) || (defined I_C06_KM_P_H_OR_MPH_0_310_5_SNA)
#  if (!defined RTE_CONST_I_C06_KM_P_H_OR_MPH_0_310_5_SNA) || (RTE_CONST_I_C06_KM_P_H_OR_MPH_0_310_5_SNA != 63u)
#   error "Enumeration constant <I_C06_KM_P_H_OR_MPH_0_310_5_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C06_KM_P_H_OR_MPH_0_310_5_SNA (63u)
#  define I_C06_KM_P_H_OR_MPH_0_310_5_SNA ((c06_km_p_h_or_mph_0_310_5)63u)
# endif

# define Rte_TypeDef_c06_m_0_6k2_0k1
typedef uint8 c06_m_0_6k2_0k1;
# define c06_m_0_6k2_0k1_LowerLimit ((c06_m_0_6k2_0k1)0u)
# define c06_m_0_6k2_0k1_UpperLimit ((c06_m_0_6k2_0k1)63u)
# define Rte_InvalidValue_c06_m_0_6k2_0k1 ((c06_m_0_6k2_0k1)63u)
# if (defined RTE_CONST_I_C06_M_0_6K2_0K1_SNA) || (defined I_C06_M_0_6K2_0K1_SNA)
#  if (!defined RTE_CONST_I_C06_M_0_6K2_0K1_SNA) || (RTE_CONST_I_C06_M_0_6K2_0K1_SNA != 63u)
#   error "Enumeration constant <I_C06_M_0_6K2_0K1_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C06_M_0_6K2_0K1_SNA (63u)
#  define I_C06_M_0_6K2_0K1_SNA ((c06_m_0_6k2_0k1)63u)
# endif

# define Rte_TypeDef_c06_m_m31_31_1
typedef uint8 c06_m_m31_31_1;
# define c06_m_m31_31_1_LowerLimit ((c06_m_m31_31_1)0u)
# define c06_m_m31_31_1_UpperLimit ((c06_m_m31_31_1)63u)
# define Rte_InvalidValue_c06_m_m31_31_1 ((c06_m_m31_31_1)63u)
# if (defined RTE_CONST_I_C06_M_M31_31_1_SNA) || (defined I_C06_M_M31_31_1_SNA)
#  if (!defined RTE_CONST_I_C06_M_M31_31_1_SNA) || (RTE_CONST_I_C06_M_M31_31_1_SNA != 63u)
#   error "Enumeration constant <I_C06_M_M31_31_1_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C06_M_M31_31_1_SNA (63u)
#  define I_C06_M_M31_31_1_SNA ((c06_m_m31_31_1)63u)
# endif

# define Rte_TypeDef_c07_0_1_0k01
typedef uint8 c07_0_1_0k01;
# define c07_0_1_0k01_LowerLimit ((c07_0_1_0k01)0u)
# define c07_0_1_0k01_UpperLimit ((c07_0_1_0k01)127u)
# define Rte_InvalidValue_c07_0_1_0k01 ((c07_0_1_0k01)127u)
# if (defined RTE_CONST_I_C07_0_1_0K01_SNA) || (defined I_C07_0_1_0K01_SNA)
#  if (!defined RTE_CONST_I_C07_0_1_0K01_SNA) || (RTE_CONST_I_C07_0_1_0K01_SNA != 127u)
#   error "Enumeration constant <I_C07_0_1_0K01_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C07_0_1_0K01_SNA (127u)
#  define I_C07_0_1_0K01_SNA ((c07_0_1_0k01)127u)
# endif

# define Rte_TypeDef_c07_m64_62_1
typedef uint8 c07_m64_62_1;
# define c07_m64_62_1_LowerLimit ((c07_m64_62_1)0u)
# define c07_m64_62_1_UpperLimit ((c07_m64_62_1)127u)
# define Rte_InvalidValue_c07_m64_62_1 ((c07_m64_62_1)127u)
# if (defined RTE_CONST_I_C07_M64_62_1_SNA) || (defined I_C07_M64_62_1_SNA)
#  if (!defined RTE_CONST_I_C07_M64_62_1_SNA) || (RTE_CONST_I_C07_M64_62_1_SNA != 127u)
#   error "Enumeration constant <I_C07_M64_62_1_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C07_M64_62_1_SNA (127u)
#  define I_C07_M64_62_1_SNA ((c07_m64_62_1)127u)
# endif

# define Rte_TypeDef_c07_m_0_1k26_0k01
typedef uint8 c07_m_0_1k26_0k01;
# define c07_m_0_1k26_0k01_LowerLimit ((c07_m_0_1k26_0k01)0u)
# define c07_m_0_1k26_0k01_UpperLimit ((c07_m_0_1k26_0k01)127u)
# define Rte_InvalidValue_c07_m_0_1k26_0k01 ((c07_m_0_1k26_0k01)127u)
# if (defined RTE_CONST_I_C07_M_0_1K26_0K01_SNA) || (defined I_C07_M_0_1K26_0K01_SNA)
#  if (!defined RTE_CONST_I_C07_M_0_1K26_0K01_SNA) || (RTE_CONST_I_C07_M_0_1K26_0K01_SNA != 127u)
#   error "Enumeration constant <I_C07_M_0_1K26_0K01_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C07_M_0_1K26_0K01_SNA (127u)
#  define I_C07_M_0_1K26_0K01_SNA ((c07_m_0_1k26_0k01)127u)
# endif

# define Rte_TypeDef_c07_m_m0d64_p0d62_0d01
typedef uint8 c07_m_m0d64_p0d62_0d01;
# define c07_m_m0d64_p0d62_0d01_LowerLimit ((c07_m_m0d64_p0d62_0d01)0u)
# define c07_m_m0d64_p0d62_0d01_UpperLimit ((c07_m_m0d64_p0d62_0d01)127u)
# define Rte_InvalidValue_c07_m_m0d64_p0d62_0d01 ((c07_m_m0d64_p0d62_0d01)127u)
# if (defined RTE_CONST_I_C07_M_M0D64_P0D62_0D01_SNA) || (defined I_C07_M_M0D64_P0D62_0D01_SNA)
#  if (!defined RTE_CONST_I_C07_M_M0D64_P0D62_0D01_SNA) || (RTE_CONST_I_C07_M_M0D64_P0D62_0D01_SNA != 127u)
#   error "Enumeration constant <I_C07_M_M0D64_P0D62_0D01_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C07_M_M0D64_P0D62_0D01_SNA (127u)
#  define I_C07_M_M0D64_P0D62_0D01_SNA ((c07_m_m0d64_p0d62_0d01)127u)
# endif

# define Rte_TypeDef_c08_0_1k98_0k0078
typedef uint8 c08_0_1k98_0k0078;
# define c08_0_1k98_0k0078_LowerLimit ((c08_0_1k98_0k0078)0u)
# define c08_0_1k98_0k0078_UpperLimit ((c08_0_1k98_0k0078)255u)
# define Rte_InvalidValue_c08_0_1k98_0k0078 ((c08_0_1k98_0k0078)255u)
# if (defined RTE_CONST_I_C08_0_1K98_0K0078_SNA) || (defined I_C08_0_1K98_0K0078_SNA)
#  if (!defined RTE_CONST_I_C08_0_1K98_0K0078_SNA) || (RTE_CONST_I_C08_0_1K98_0K0078_SNA != 255u)
#   error "Enumeration constant <I_C08_0_1K98_0K0078_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_0_1K98_0K0078_SNA (255u)
#  define I_C08_0_1K98_0K0078_SNA ((c08_0_1k98_0k0078)255u)
# endif

# define Rte_TypeDef_c08_0_200_1
typedef uint8 c08_0_200_1;
# define c08_0_200_1_LowerLimit ((c08_0_200_1)0u)
# define c08_0_200_1_UpperLimit ((c08_0_200_1)255u)
# define Rte_InvalidValue_c08_0_200_1 ((c08_0_200_1)255u)
# if (defined RTE_CONST_I_C08_0_200_1_SNA) || (defined I_C08_0_200_1_SNA)
#  if (!defined RTE_CONST_I_C08_0_200_1_SNA) || (RTE_CONST_I_C08_0_200_1_SNA != 255u)
#   error "Enumeration constant <I_C08_0_200_1_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_0_200_1_SNA (255u)
#  define I_C08_0_200_1_SNA ((c08_0_200_1)255u)
# endif

# define Rte_TypeDef_c08_0_250_1
typedef uint8 c08_0_250_1;
# define c08_0_250_1_LowerLimit ((c08_0_250_1)0u)
# define c08_0_250_1_UpperLimit ((c08_0_250_1)255u)
# define Rte_InvalidValue_c08_0_250_1 ((c08_0_250_1)255u)
# if (defined RTE_CONST_I_C08_0_250_1_SNA) || (defined I_C08_0_250_1_SNA)
#  if (!defined RTE_CONST_I_C08_0_250_1_SNA) || (RTE_CONST_I_C08_0_250_1_SNA != 255u)
#   error "Enumeration constant <I_C08_0_250_1_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_0_250_1_SNA (255u)
#  define I_C08_0_250_1_SNA ((c08_0_250_1)255u)
# endif

# define Rte_TypeDef_c08_0_254_1
typedef uint8 c08_0_254_1;
# define c08_0_254_1_LowerLimit ((c08_0_254_1)0u)
# define c08_0_254_1_UpperLimit ((c08_0_254_1)255u)
# define Rte_InvalidValue_c08_0_254_1 ((c08_0_254_1)255u)
# if (defined RTE_CONST_I_C08_0_254_1_SNA) || (defined I_C08_0_254_1_SNA)
#  if (!defined RTE_CONST_I_C08_0_254_1_SNA) || (RTE_CONST_I_C08_0_254_1_SNA != 255u)
#   error "Enumeration constant <I_C08_0_254_1_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_0_254_1_SNA (255u)
#  define I_C08_0_254_1_SNA ((c08_0_254_1)255u)
# endif

# define Rte_TypeDef_c08_1_8_0k1
typedef uint8 c08_1_8_0k1;
# define c08_1_8_0k1_LowerLimit ((c08_1_8_0k1)10u)
# define c08_1_8_0k1_UpperLimit ((c08_1_8_0k1)255u)
# define Rte_InvalidValue_c08_1_8_0k1 ((c08_1_8_0k1)255u)
# if (defined RTE_CONST_I_C08_1_8_0K1_SNA) || (defined I_C08_1_8_0K1_SNA)
#  if (!defined RTE_CONST_I_C08_1_8_0K1_SNA) || (RTE_CONST_I_C08_1_8_0K1_SNA != 255u)
#   error "Enumeration constant <I_C08_1_8_0K1_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_1_8_0K1_SNA (255u)
#  define I_C08_1_8_0K1_SNA ((c08_1_8_0k1)255u)
# endif

# define Rte_TypeDef_c08_Cycles_0_254
typedef uint8 c08_Cycles_0_254;
# define c08_Cycles_0_254_LowerLimit ((c08_Cycles_0_254)0u)
# define c08_Cycles_0_254_UpperLimit ((c08_Cycles_0_254)255u)
# define Rte_InvalidValue_c08_Cycles_0_254 ((c08_Cycles_0_254)255u)
# if (defined RTE_CONST_I_C08_CYCLES_0_254_SNA) || (defined I_C08_CYCLES_0_254_SNA)
#  if (!defined RTE_CONST_I_C08_CYCLES_0_254_SNA) || (RTE_CONST_I_C08_CYCLES_0_254_SNA != 255u)
#   error "Enumeration constant <I_C08_CYCLES_0_254_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_CYCLES_0_254_SNA (255u)
#  define I_C08_CYCLES_0_254_SNA ((c08_Cycles_0_254)255u)
# endif

# define Rte_TypeDef_c08_Days_1_31_1
typedef uint8 c08_Days_1_31_1;
# define c08_Days_1_31_1_LowerLimit ((c08_Days_1_31_1)1u)
# define c08_Days_1_31_1_UpperLimit ((c08_Days_1_31_1)255u)
# define Rte_InvalidValue_c08_Days_1_31_1 ((c08_Days_1_31_1)255u)
# if (defined RTE_CONST_I_C08_DAYS_1_31_1_SNA) || (defined I_C08_DAYS_1_31_1_SNA)
#  if (!defined RTE_CONST_I_C08_DAYS_1_31_1_SNA) || (RTE_CONST_I_C08_DAYS_1_31_1_SNA != 255u)
#   error "Enumeration constant <I_C08_DAYS_1_31_1_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_DAYS_1_31_1_SNA (255u)
#  define I_C08_DAYS_1_31_1_SNA ((c08_Days_1_31_1)255u)
# endif

# define Rte_TypeDef_c08_EVC_Country
typedef uint8 c08_EVC_Country;
# define c08_EVC_Country_LowerLimit ((c08_EVC_Country)0u)
# define c08_EVC_Country_UpperLimit ((c08_EVC_Country)255u)
# if (defined RTE_CONST_I_C08_EVC_COUNTRY_DEU) || (defined I_C08_EVC_COUNTRY_DEU)
#  if (!defined RTE_CONST_I_C08_EVC_COUNTRY_DEU) || (RTE_CONST_I_C08_EVC_COUNTRY_DEU != 0u)
#   error "Enumeration constant <I_C08_EVC_COUNTRY_DEU> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_EVC_COUNTRY_DEU (0u)
#  define I_C08_EVC_COUNTRY_DEU ((c08_EVC_Country)0u)
# endif
# if (defined RTE_CONST_I_C08_EVC_COUNTRY_DEU_IMPORT) || (defined I_C08_EVC_COUNTRY_DEU_IMPORT)
#  if (!defined RTE_CONST_I_C08_EVC_COUNTRY_DEU_IMPORT) || (RTE_CONST_I_C08_EVC_COUNTRY_DEU_IMPORT != 1u)
#   error "Enumeration constant <I_C08_EVC_COUNTRY_DEU_IMPORT> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_EVC_COUNTRY_DEU_IMPORT (1u)
#  define I_C08_EVC_COUNTRY_DEU_IMPORT ((c08_EVC_Country)1u)
# endif
# if (defined RTE_CONST_I_C08_EVC_COUNTRY_BEL) || (defined I_C08_EVC_COUNTRY_BEL)
#  if (!defined RTE_CONST_I_C08_EVC_COUNTRY_BEL) || (RTE_CONST_I_C08_EVC_COUNTRY_BEL != 20u)
#   error "Enumeration constant <I_C08_EVC_COUNTRY_BEL> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_EVC_COUNTRY_BEL (20u)
#  define I_C08_EVC_COUNTRY_BEL ((c08_EVC_Country)20u)
# endif
# if (defined RTE_CONST_I_C08_EVC_COUNTRY_DNK) || (defined I_C08_EVC_COUNTRY_DNK)
#  if (!defined RTE_CONST_I_C08_EVC_COUNTRY_DNK) || (RTE_CONST_I_C08_EVC_COUNTRY_DNK != 21u)
#   error "Enumeration constant <I_C08_EVC_COUNTRY_DNK> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_EVC_COUNTRY_DNK (21u)
#  define I_C08_EVC_COUNTRY_DNK ((c08_EVC_Country)21u)
# endif
# if (defined RTE_CONST_I_C08_EVC_COUNTRY_FRA) || (defined I_C08_EVC_COUNTRY_FRA)
#  if (!defined RTE_CONST_I_C08_EVC_COUNTRY_FRA) || (RTE_CONST_I_C08_EVC_COUNTRY_FRA != 22u)
#   error "Enumeration constant <I_C08_EVC_COUNTRY_FRA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_EVC_COUNTRY_FRA (22u)
#  define I_C08_EVC_COUNTRY_FRA ((c08_EVC_Country)22u)
# endif
# if (defined RTE_CONST_I_C08_EVC_COUNTRY_GBR) || (defined I_C08_EVC_COUNTRY_GBR)
#  if (!defined RTE_CONST_I_C08_EVC_COUNTRY_GBR) || (RTE_CONST_I_C08_EVC_COUNTRY_GBR != 24u)
#   error "Enumeration constant <I_C08_EVC_COUNTRY_GBR> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_EVC_COUNTRY_GBR (24u)
#  define I_C08_EVC_COUNTRY_GBR ((c08_EVC_Country)24u)
# endif
# if (defined RTE_CONST_I_C08_EVC_COUNTRY_IRL) || (defined I_C08_EVC_COUNTRY_IRL)
#  if (!defined RTE_CONST_I_C08_EVC_COUNTRY_IRL) || (RTE_CONST_I_C08_EVC_COUNTRY_IRL != 25u)
#   error "Enumeration constant <I_C08_EVC_COUNTRY_IRL> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_EVC_COUNTRY_IRL (25u)
#  define I_C08_EVC_COUNTRY_IRL ((c08_EVC_Country)25u)
# endif
# if (defined RTE_CONST_I_C08_EVC_COUNTRY_ITA) || (defined I_C08_EVC_COUNTRY_ITA)
#  if (!defined RTE_CONST_I_C08_EVC_COUNTRY_ITA) || (RTE_CONST_I_C08_EVC_COUNTRY_ITA != 26u)
#   error "Enumeration constant <I_C08_EVC_COUNTRY_ITA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_EVC_COUNTRY_ITA (26u)
#  define I_C08_EVC_COUNTRY_ITA ((c08_EVC_Country)26u)
# endif
# if (defined RTE_CONST_I_C08_EVC_COUNTRY_LUX) || (defined I_C08_EVC_COUNTRY_LUX)
#  if (!defined RTE_CONST_I_C08_EVC_COUNTRY_LUX) || (RTE_CONST_I_C08_EVC_COUNTRY_LUX != 28u)
#   error "Enumeration constant <I_C08_EVC_COUNTRY_LUX> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_EVC_COUNTRY_LUX (28u)
#  define I_C08_EVC_COUNTRY_LUX ((c08_EVC_Country)28u)
# endif
# if (defined RTE_CONST_I_C08_EVC_COUNTRY_NDL) || (defined I_C08_EVC_COUNTRY_NDL)
#  if (!defined RTE_CONST_I_C08_EVC_COUNTRY_NDL) || (RTE_CONST_I_C08_EVC_COUNTRY_NDL != 30u)
#   error "Enumeration constant <I_C08_EVC_COUNTRY_NDL> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_EVC_COUNTRY_NDL (30u)
#  define I_C08_EVC_COUNTRY_NDL ((c08_EVC_Country)30u)
# endif
# if (defined RTE_CONST_I_C08_EVC_COUNTRY_AUT) || (defined I_C08_EVC_COUNTRY_AUT)
#  if (!defined RTE_CONST_I_C08_EVC_COUNTRY_AUT) || (RTE_CONST_I_C08_EVC_COUNTRY_AUT != 31u)
#   error "Enumeration constant <I_C08_EVC_COUNTRY_AUT> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_EVC_COUNTRY_AUT (31u)
#  define I_C08_EVC_COUNTRY_AUT ((c08_EVC_Country)31u)
# endif
# if (defined RTE_CONST_I_C08_EVC_COUNTRY_PRT) || (defined I_C08_EVC_COUNTRY_PRT)
#  if (!defined RTE_CONST_I_C08_EVC_COUNTRY_PRT) || (RTE_CONST_I_C08_EVC_COUNTRY_PRT != 32u)
#   error "Enumeration constant <I_C08_EVC_COUNTRY_PRT> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_EVC_COUNTRY_PRT (32u)
#  define I_C08_EVC_COUNTRY_PRT ((c08_EVC_Country)32u)
# endif
# if (defined RTE_CONST_I_C08_EVC_COUNTRY_SWE) || (defined I_C08_EVC_COUNTRY_SWE)
#  if (!defined RTE_CONST_I_C08_EVC_COUNTRY_SWE) || (RTE_CONST_I_C08_EVC_COUNTRY_SWE != 33u)
#   error "Enumeration constant <I_C08_EVC_COUNTRY_SWE> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_EVC_COUNTRY_SWE (33u)
#  define I_C08_EVC_COUNTRY_SWE ((c08_EVC_Country)33u)
# endif
# if (defined RTE_CONST_I_C08_EVC_COUNTRY_CHE) || (defined I_C08_EVC_COUNTRY_CHE)
#  if (!defined RTE_CONST_I_C08_EVC_COUNTRY_CHE) || (RTE_CONST_I_C08_EVC_COUNTRY_CHE != 34u)
#   error "Enumeration constant <I_C08_EVC_COUNTRY_CHE> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_EVC_COUNTRY_CHE (34u)
#  define I_C08_EVC_COUNTRY_CHE ((c08_EVC_Country)34u)
# endif
# if (defined RTE_CONST_I_C08_EVC_COUNTRY_ESP) || (defined I_C08_EVC_COUNTRY_ESP)
#  if (!defined RTE_CONST_I_C08_EVC_COUNTRY_ESP) || (RTE_CONST_I_C08_EVC_COUNTRY_ESP != 35u)
#   error "Enumeration constant <I_C08_EVC_COUNTRY_ESP> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_EVC_COUNTRY_ESP (35u)
#  define I_C08_EVC_COUNTRY_ESP ((c08_EVC_Country)35u)
# endif
# if (defined RTE_CONST_I_C08_EVC_COUNTRY_ZAF) || (defined I_C08_EVC_COUNTRY_ZAF)
#  if (!defined RTE_CONST_I_C08_EVC_COUNTRY_ZAF) || (RTE_CONST_I_C08_EVC_COUNTRY_ZAF != 53u)
#   error "Enumeration constant <I_C08_EVC_COUNTRY_ZAF> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_EVC_COUNTRY_ZAF (53u)
#  define I_C08_EVC_COUNTRY_ZAF ((c08_EVC_Country)53u)
# endif
# if (defined RTE_CONST_I_C08_EVC_COUNTRY_CAN) || (defined I_C08_EVC_COUNTRY_CAN)
#  if (!defined RTE_CONST_I_C08_EVC_COUNTRY_CAN) || (RTE_CONST_I_C08_EVC_COUNTRY_CAN != 70u)
#   error "Enumeration constant <I_C08_EVC_COUNTRY_CAN> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_EVC_COUNTRY_CAN (70u)
#  define I_C08_EVC_COUNTRY_CAN ((c08_EVC_Country)70u)
# endif
# if (defined RTE_CONST_I_C08_EVC_COUNTRY_USA) || (defined I_C08_EVC_COUNTRY_USA)
#  if (!defined RTE_CONST_I_C08_EVC_COUNTRY_USA) || (RTE_CONST_I_C08_EVC_COUNTRY_USA != 71u)
#   error "Enumeration constant <I_C08_EVC_COUNTRY_USA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_EVC_COUNTRY_USA (71u)
#  define I_C08_EVC_COUNTRY_USA ((c08_EVC_Country)71u)
# endif
# if (defined RTE_CONST_I_C08_EVC_COUNTRY_BHR) || (defined I_C08_EVC_COUNTRY_BHR)
#  if (!defined RTE_CONST_I_C08_EVC_COUNTRY_BHR) || (RTE_CONST_I_C08_EVC_COUNTRY_BHR != 90u)
#   error "Enumeration constant <I_C08_EVC_COUNTRY_BHR> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_EVC_COUNTRY_BHR (90u)
#  define I_C08_EVC_COUNTRY_BHR ((c08_EVC_Country)90u)
# endif
# if (defined RTE_CONST_I_C08_EVC_COUNTRY_QAT) || (defined I_C08_EVC_COUNTRY_QAT)
#  if (!defined RTE_CONST_I_C08_EVC_COUNTRY_QAT) || (RTE_CONST_I_C08_EVC_COUNTRY_QAT != 91u)
#   error "Enumeration constant <I_C08_EVC_COUNTRY_QAT> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_EVC_COUNTRY_QAT (91u)
#  define I_C08_EVC_COUNTRY_QAT ((c08_EVC_Country)91u)
# endif
# if (defined RTE_CONST_I_C08_EVC_COUNTRY_TWN) || (defined I_C08_EVC_COUNTRY_TWN)
#  if (!defined RTE_CONST_I_C08_EVC_COUNTRY_TWN) || (RTE_CONST_I_C08_EVC_COUNTRY_TWN != 92u)
#   error "Enumeration constant <I_C08_EVC_COUNTRY_TWN> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_EVC_COUNTRY_TWN (92u)
#  define I_C08_EVC_COUNTRY_TWN ((c08_EVC_Country)92u)
# endif
# if (defined RTE_CONST_I_C08_EVC_COUNTRY_CHN) || (defined I_C08_EVC_COUNTRY_CHN)
#  if (!defined RTE_CONST_I_C08_EVC_COUNTRY_CHN) || (RTE_CONST_I_C08_EVC_COUNTRY_CHN != 93u)
#   error "Enumeration constant <I_C08_EVC_COUNTRY_CHN> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_EVC_COUNTRY_CHN (93u)
#  define I_C08_EVC_COUNTRY_CHN ((c08_EVC_Country)93u)
# endif
# if (defined RTE_CONST_I_C08_EVC_COUNTRY_HKG) || (defined I_C08_EVC_COUNTRY_HKG)
#  if (!defined RTE_CONST_I_C08_EVC_COUNTRY_HKG) || (RTE_CONST_I_C08_EVC_COUNTRY_HKG != 94u)
#   error "Enumeration constant <I_C08_EVC_COUNTRY_HKG> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_EVC_COUNTRY_HKG (94u)
#  define I_C08_EVC_COUNTRY_HKG ((c08_EVC_Country)94u)
# endif
# if (defined RTE_CONST_I_C08_EVC_COUNTRY_MAC) || (defined I_C08_EVC_COUNTRY_MAC)
#  if (!defined RTE_CONST_I_C08_EVC_COUNTRY_MAC) || (RTE_CONST_I_C08_EVC_COUNTRY_MAC != 95u)
#   error "Enumeration constant <I_C08_EVC_COUNTRY_MAC> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_EVC_COUNTRY_MAC (95u)
#  define I_C08_EVC_COUNTRY_MAC ((c08_EVC_Country)95u)
# endif
# if (defined RTE_CONST_I_C08_EVC_COUNTRY_JPN) || (defined I_C08_EVC_COUNTRY_JPN)
#  if (!defined RTE_CONST_I_C08_EVC_COUNTRY_JPN) || (RTE_CONST_I_C08_EVC_COUNTRY_JPN != 96u)
#   error "Enumeration constant <I_C08_EVC_COUNTRY_JPN> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_EVC_COUNTRY_JPN (96u)
#  define I_C08_EVC_COUNTRY_JPN ((c08_EVC_Country)96u)
# endif
# if (defined RTE_CONST_I_C08_EVC_COUNTRY_KOR) || (defined I_C08_EVC_COUNTRY_KOR)
#  if (!defined RTE_CONST_I_C08_EVC_COUNTRY_KOR) || (RTE_CONST_I_C08_EVC_COUNTRY_KOR != 97u)
#   error "Enumeration constant <I_C08_EVC_COUNTRY_KOR> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_EVC_COUNTRY_KOR (97u)
#  define I_C08_EVC_COUNTRY_KOR ((c08_EVC_Country)97u)
# endif
# if (defined RTE_CONST_I_C08_EVC_COUNTRY_KWT) || (defined I_C08_EVC_COUNTRY_KWT)
#  if (!defined RTE_CONST_I_C08_EVC_COUNTRY_KWT) || (RTE_CONST_I_C08_EVC_COUNTRY_KWT != 98u)
#   error "Enumeration constant <I_C08_EVC_COUNTRY_KWT> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_EVC_COUNTRY_KWT (98u)
#  define I_C08_EVC_COUNTRY_KWT ((c08_EVC_Country)98u)
# endif
# if (defined RTE_CONST_I_C08_EVC_COUNTRY_MYS) || (defined I_C08_EVC_COUNTRY_MYS)
#  if (!defined RTE_CONST_I_C08_EVC_COUNTRY_MYS) || (RTE_CONST_I_C08_EVC_COUNTRY_MYS != 99u)
#   error "Enumeration constant <I_C08_EVC_COUNTRY_MYS> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_EVC_COUNTRY_MYS (99u)
#  define I_C08_EVC_COUNTRY_MYS ((c08_EVC_Country)99u)
# endif
# if (defined RTE_CONST_I_C08_EVC_COUNTRY_OMN) || (defined I_C08_EVC_COUNTRY_OMN)
#  if (!defined RTE_CONST_I_C08_EVC_COUNTRY_OMN) || (RTE_CONST_I_C08_EVC_COUNTRY_OMN != 100u)
#   error "Enumeration constant <I_C08_EVC_COUNTRY_OMN> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_EVC_COUNTRY_OMN (100u)
#  define I_C08_EVC_COUNTRY_OMN ((c08_EVC_Country)100u)
# endif
# if (defined RTE_CONST_I_C08_EVC_COUNTRY_MNG) || (defined I_C08_EVC_COUNTRY_MNG)
#  if (!defined RTE_CONST_I_C08_EVC_COUNTRY_MNG) || (RTE_CONST_I_C08_EVC_COUNTRY_MNG != 101u)
#   error "Enumeration constant <I_C08_EVC_COUNTRY_MNG> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_EVC_COUNTRY_MNG (101u)
#  define I_C08_EVC_COUNTRY_MNG ((c08_EVC_Country)101u)
# endif
# if (defined RTE_CONST_I_C08_EVC_COUNTRY_SAU) || (defined I_C08_EVC_COUNTRY_SAU)
#  if (!defined RTE_CONST_I_C08_EVC_COUNTRY_SAU) || (RTE_CONST_I_C08_EVC_COUNTRY_SAU != 102u)
#   error "Enumeration constant <I_C08_EVC_COUNTRY_SAU> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_EVC_COUNTRY_SAU (102u)
#  define I_C08_EVC_COUNTRY_SAU ((c08_EVC_Country)102u)
# endif
# if (defined RTE_CONST_I_C08_EVC_COUNTRY_SGP) || (defined I_C08_EVC_COUNTRY_SGP)
#  if (!defined RTE_CONST_I_C08_EVC_COUNTRY_SGP) || (RTE_CONST_I_C08_EVC_COUNTRY_SGP != 103u)
#   error "Enumeration constant <I_C08_EVC_COUNTRY_SGP> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_EVC_COUNTRY_SGP (103u)
#  define I_C08_EVC_COUNTRY_SGP ((c08_EVC_Country)103u)
# endif
# if (defined RTE_CONST_I_C08_EVC_COUNTRY_AE_AZ) || (defined I_C08_EVC_COUNTRY_AE_AZ)
#  if (!defined RTE_CONST_I_C08_EVC_COUNTRY_AE_AZ) || (RTE_CONST_I_C08_EVC_COUNTRY_AE_AZ != 104u)
#   error "Enumeration constant <I_C08_EVC_COUNTRY_AE_AZ> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_EVC_COUNTRY_AE_AZ (104u)
#  define I_C08_EVC_COUNTRY_AE_AZ ((c08_EVC_Country)104u)
# endif
# if (defined RTE_CONST_I_C08_EVC_COUNTRY_THA) || (defined I_C08_EVC_COUNTRY_THA)
#  if (!defined RTE_CONST_I_C08_EVC_COUNTRY_THA) || (RTE_CONST_I_C08_EVC_COUNTRY_THA != 105u)
#   error "Enumeration constant <I_C08_EVC_COUNTRY_THA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_EVC_COUNTRY_THA (105u)
#  define I_C08_EVC_COUNTRY_THA ((c08_EVC_Country)105u)
# endif
# if (defined RTE_CONST_I_C08_EVC_COUNTRY_AE_DU) || (defined I_C08_EVC_COUNTRY_AE_DU)
#  if (!defined RTE_CONST_I_C08_EVC_COUNTRY_AE_DU) || (RTE_CONST_I_C08_EVC_COUNTRY_AE_DU != 106u)
#   error "Enumeration constant <I_C08_EVC_COUNTRY_AE_DU> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_EVC_COUNTRY_AE_DU (106u)
#  define I_C08_EVC_COUNTRY_AE_DU ((c08_EVC_Country)106u)
# endif
# if (defined RTE_CONST_I_C08_EVC_COUNTRY_AUS) || (defined I_C08_EVC_COUNTRY_AUS)
#  if (!defined RTE_CONST_I_C08_EVC_COUNTRY_AUS) || (RTE_CONST_I_C08_EVC_COUNTRY_AUS != 120u)
#   error "Enumeration constant <I_C08_EVC_COUNTRY_AUS> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_EVC_COUNTRY_AUS (120u)
#  define I_C08_EVC_COUNTRY_AUS ((c08_EVC_Country)120u)
# endif
# if (defined RTE_CONST_I_C08_EVC_COUNTRY_PNG) || (defined I_C08_EVC_COUNTRY_PNG)
#  if (!defined RTE_CONST_I_C08_EVC_COUNTRY_PNG) || (RTE_CONST_I_C08_EVC_COUNTRY_PNG != 122u)
#   error "Enumeration constant <I_C08_EVC_COUNTRY_PNG> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_EVC_COUNTRY_PNG (122u)
#  define I_C08_EVC_COUNTRY_PNG ((c08_EVC_Country)122u)
# endif
# if (defined RTE_CONST_I_C08_EVC_COUNTRY_NZL) || (defined I_C08_EVC_COUNTRY_NZL)
#  if (!defined RTE_CONST_I_C08_EVC_COUNTRY_NZL) || (RTE_CONST_I_C08_EVC_COUNTRY_NZL != 123u)
#   error "Enumeration constant <I_C08_EVC_COUNTRY_NZL> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_EVC_COUNTRY_NZL (123u)
#  define I_C08_EVC_COUNTRY_NZL ((c08_EVC_Country)123u)
# endif
# if (defined RTE_CONST_I_C08_EVC_COUNTRY_PYF) || (defined I_C08_EVC_COUNTRY_PYF)
#  if (!defined RTE_CONST_I_C08_EVC_COUNTRY_PYF) || (RTE_CONST_I_C08_EVC_COUNTRY_PYF != 126u)
#   error "Enumeration constant <I_C08_EVC_COUNTRY_PYF> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_EVC_COUNTRY_PYF (126u)
#  define I_C08_EVC_COUNTRY_PYF ((c08_EVC_Country)126u)
# endif
# if (defined RTE_CONST_I_C08_EVC_COUNTRY_NCL) || (defined I_C08_EVC_COUNTRY_NCL)
#  if (!defined RTE_CONST_I_C08_EVC_COUNTRY_NCL) || (RTE_CONST_I_C08_EVC_COUNTRY_NCL != 127u)
#   error "Enumeration constant <I_C08_EVC_COUNTRY_NCL> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_EVC_COUNTRY_NCL (127u)
#  define I_C08_EVC_COUNTRY_NCL ((c08_EVC_Country)127u)
# endif
# if (defined RTE_CONST_I_C08_EVC_COUNTRY_TON) || (defined I_C08_EVC_COUNTRY_TON)
#  if (!defined RTE_CONST_I_C08_EVC_COUNTRY_TON) || (RTE_CONST_I_C08_EVC_COUNTRY_TON != 128u)
#   error "Enumeration constant <I_C08_EVC_COUNTRY_TON> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_EVC_COUNTRY_TON (128u)
#  define I_C08_EVC_COUNTRY_TON ((c08_EVC_Country)128u)
# endif
# if (defined RTE_CONST_I_C08_EVC_COUNTRY_WSM) || (defined I_C08_EVC_COUNTRY_WSM)
#  if (!defined RTE_CONST_I_C08_EVC_COUNTRY_WSM) || (RTE_CONST_I_C08_EVC_COUNTRY_WSM != 129u)
#   error "Enumeration constant <I_C08_EVC_COUNTRY_WSM> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_EVC_COUNTRY_WSM (129u)
#  define I_C08_EVC_COUNTRY_WSM ((c08_EVC_Country)129u)
# endif
# if (defined RTE_CONST_I_C08_EVC_COUNTRY_SNA) || (defined I_C08_EVC_COUNTRY_SNA)
#  if (!defined RTE_CONST_I_C08_EVC_COUNTRY_SNA) || (RTE_CONST_I_C08_EVC_COUNTRY_SNA != 255u)
#   error "Enumeration constant <I_C08_EVC_COUNTRY_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_EVC_COUNTRY_SNA (255u)
#  define I_C08_EVC_COUNTRY_SNA ((c08_EVC_Country)255u)
# endif

# define Rte_TypeDef_c08_EngStyle
typedef uint8 c08_EngStyle;
# define c08_EngStyle_LowerLimit ((c08_EngStyle)0u)
# define c08_EngStyle_UpperLimit ((c08_EngStyle)255u)
# define Rte_InvalidValue_c08_EngStyle ((c08_EngStyle)255u)
# if (defined RTE_CONST_I_C08_ENGSTYLE_M275E55) || (defined I_C08_ENGSTYLE_M275E55)
#  if (!defined RTE_CONST_I_C08_ENGSTYLE_M275E55) || (RTE_CONST_I_C08_ENGSTYLE_M275E55 != 0u)
#   error "Enumeration constant <I_C08_ENGSTYLE_M275E55> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_ENGSTYLE_M275E55 (0u)
#  define I_C08_ENGSTYLE_M275E55 ((c08_EngStyle)0u)
# endif
# if (defined RTE_CONST_I_C08_ENGSTYLE_M273E55) || (defined I_C08_ENGSTYLE_M273E55)
#  if (!defined RTE_CONST_I_C08_ENGSTYLE_M273E55) || (RTE_CONST_I_C08_ENGSTYLE_M273E55 != 1u)
#   error "Enumeration constant <I_C08_ENGSTYLE_M273E55> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_ENGSTYLE_M273E55 (1u)
#  define I_C08_ENGSTYLE_M273E55 ((c08_EngStyle)1u)
# endif
# if (defined RTE_CONST_I_C08_ENGSTYLE_M273E46) || (defined I_C08_ENGSTYLE_M273E46)
#  if (!defined RTE_CONST_I_C08_ENGSTYLE_M273E46) || (RTE_CONST_I_C08_ENGSTYLE_M273E46 != 2u)
#   error "Enumeration constant <I_C08_ENGSTYLE_M273E46> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_ENGSTYLE_M273E46 (2u)
#  define I_C08_ENGSTYLE_M273E46 ((c08_EngStyle)2u)
# endif
# if (defined RTE_CONST_I_C08_ENGSTYLE_M272E35) || (defined I_C08_ENGSTYLE_M272E35)
#  if (!defined RTE_CONST_I_C08_ENGSTYLE_M272E35) || (RTE_CONST_I_C08_ENGSTYLE_M272E35 != 3u)
#   error "Enumeration constant <I_C08_ENGSTYLE_M272E35> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_ENGSTYLE_M272E35 (3u)
#  define I_C08_ENGSTYLE_M272E35 ((c08_EngStyle)3u)
# endif
# if (defined RTE_CONST_I_C08_ENGSTYLE_M272E30) || (defined I_C08_ENGSTYLE_M272E30)
#  if (!defined RTE_CONST_I_C08_ENGSTYLE_M272E30) || (RTE_CONST_I_C08_ENGSTYLE_M272E30 != 4u)
#   error "Enumeration constant <I_C08_ENGSTYLE_M272E30> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_ENGSTYLE_M272E30 (4u)
#  define I_C08_ENGSTYLE_M272E30 ((c08_EngStyle)4u)
# endif
# if (defined RTE_CONST_I_C08_ENGSTYLE_M272E25) || (defined I_C08_ENGSTYLE_M272E25)
#  if (!defined RTE_CONST_I_C08_ENGSTYLE_M272E25) || (RTE_CONST_I_C08_ENGSTYLE_M272E25 != 5u)
#   error "Enumeration constant <I_C08_ENGSTYLE_M272E25> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_ENGSTYLE_M272E25 (5u)
#  define I_C08_ENGSTYLE_M272E25 ((c08_EngStyle)5u)
# endif
# if (defined RTE_CONST_I_C08_ENGSTYLE_M272E35DE) || (defined I_C08_ENGSTYLE_M272E35DE)
#  if (!defined RTE_CONST_I_C08_ENGSTYLE_M272E35DE) || (RTE_CONST_I_C08_ENGSTYLE_M272E35DE != 9u)
#   error "Enumeration constant <I_C08_ENGSTYLE_M272E35DE> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_ENGSTYLE_M272E35DE (9u)
#  define I_C08_ENGSTYLE_M272E35DE ((c08_EngStyle)9u)
# endif
# if (defined RTE_CONST_I_C08_ENGSTYLE_M271E18ML135ATT) || (defined I_C08_ENGSTYLE_M271E18ML135ATT)
#  if (!defined RTE_CONST_I_C08_ENGSTYLE_M271E18ML135ATT) || (RTE_CONST_I_C08_ENGSTYLE_M271E18ML135ATT != 12u)
#   error "Enumeration constant <I_C08_ENGSTYLE_M271E18ML135ATT> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_ENGSTYLE_M271E18ML135ATT (12u)
#  define I_C08_ENGSTYLE_M271E18ML135ATT ((c08_EngStyle)12u)
# endif
# if (defined RTE_CONST_I_C08_ENGSTYLE_M271E18ML115ATT) || (defined I_C08_ENGSTYLE_M271E18ML115ATT)
#  if (!defined RTE_CONST_I_C08_ENGSTYLE_M271E18ML115ATT) || (RTE_CONST_I_C08_ENGSTYLE_M271E18ML115ATT != 13u)
#   error "Enumeration constant <I_C08_ENGSTYLE_M271E18ML115ATT> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_ENGSTYLE_M271E18ML115ATT (13u)
#  define I_C08_ENGSTYLE_M271E18ML115ATT ((c08_EngStyle)13u)
# endif
# if (defined RTE_CONST_I_C08_ENGSTYLE_M272E35_224) || (defined I_C08_ENGSTYLE_M272E35_224)
#  if (!defined RTE_CONST_I_C08_ENGSTYLE_M272E35_224) || (RTE_CONST_I_C08_ENGSTYLE_M272E35_224 != 14u)
#   error "Enumeration constant <I_C08_ENGSTYLE_M272E35_224> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_ENGSTYLE_M272E35_224 (14u)
#  define I_C08_ENGSTYLE_M272E35_224 ((c08_EngStyle)14u)
# endif
# if (defined RTE_CONST_I_C08_ENGSTYLE_M276E30GDEHLA) || (defined I_C08_ENGSTYLE_M276E30GDEHLA)
#  if (!defined RTE_CONST_I_C08_ENGSTYLE_M276E30GDEHLA) || (RTE_CONST_I_C08_ENGSTYLE_M276E30GDEHLA != 15u)
#   error "Enumeration constant <I_C08_ENGSTYLE_M276E30GDEHLA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_ENGSTYLE_M276E30GDEHLA (15u)
#  define I_C08_ENGSTYLE_M276E30GDEHLA ((c08_EngStyle)15u)
# endif
# if (defined RTE_CONST_I_C08_ENGSTYLE_M276E35DES) || (defined I_C08_ENGSTYLE_M276E35DES)
#  if (!defined RTE_CONST_I_C08_ENGSTYLE_M276E35DES) || (RTE_CONST_I_C08_ENGSTYLE_M276E35DES != 16u)
#   error "Enumeration constant <I_C08_ENGSTYLE_M276E35DES> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_ENGSTYLE_M276E35DES (16u)
#  define I_C08_ENGSTYLE_M276E35DES ((c08_EngStyle)16u)
# endif
# if (defined RTE_CONST_I_C08_ENGSTYLE_M276E35DESRED) || (defined I_C08_ENGSTYLE_M276E35DESRED)
#  if (!defined RTE_CONST_I_C08_ENGSTYLE_M276E35DESRED) || (RTE_CONST_I_C08_ENGSTYLE_M276E35DESRED != 17u)
#   error "Enumeration constant <I_C08_ENGSTYLE_M276E35DESRED> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_ENGSTYLE_M276E35DESRED (17u)
#  define I_C08_ENGSTYLE_M276E35DESRED ((c08_EngStyle)17u)
# endif
# if (defined RTE_CONST_I_C08_ENGSTYLE_M278E46DEHLA) || (defined I_C08_ENGSTYLE_M278E46DEHLA)
#  if (!defined RTE_CONST_I_C08_ENGSTYLE_M278E46DEHLA) || (RTE_CONST_I_C08_ENGSTYLE_M278E46DEHLA != 18u)
#   error "Enumeration constant <I_C08_ENGSTYLE_M278E46DEHLA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_ENGSTYLE_M278E46DEHLA (18u)
#  define I_C08_ENGSTYLE_M278E46DEHLA ((c08_EngStyle)18u)
# endif
# if (defined RTE_CONST_I_C08_ENGSTYLE_M271E18LAEVO115) || (defined I_C08_ENGSTYLE_M271E18LAEVO115)
#  if (!defined RTE_CONST_I_C08_ENGSTYLE_M271E18LAEVO115) || (RTE_CONST_I_C08_ENGSTYLE_M271E18LAEVO115 != 19u)
#   error "Enumeration constant <I_C08_ENGSTYLE_M271E18LAEVO115> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_ENGSTYLE_M271E18LAEVO115 (19u)
#  define I_C08_ENGSTYLE_M271E18LAEVO115 ((c08_EngStyle)19u)
# endif
# if (defined RTE_CONST_I_C08_ENGSTYLE_M271E18LAEVO150) || (defined I_C08_ENGSTYLE_M271E18LAEVO150)
#  if (!defined RTE_CONST_I_C08_ENGSTYLE_M271E18LAEVO150) || (RTE_CONST_I_C08_ENGSTYLE_M271E18LAEVO150 != 20u)
#   error "Enumeration constant <I_C08_ENGSTYLE_M271E18LAEVO150> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_ENGSTYLE_M271E18LAEVO150 (20u)
#  define I_C08_ENGSTYLE_M271E18LAEVO150 ((c08_EngStyle)20u)
# endif
# if (defined RTE_CONST_I_C08_ENGSTYLE_M271E18LAEVO135) || (defined I_C08_ENGSTYLE_M271E18LAEVO135)
#  if (!defined RTE_CONST_I_C08_ENGSTYLE_M271E18LAEVO135) || (RTE_CONST_I_C08_ENGSTYLE_M271E18LAEVO135 != 21u)
#   error "Enumeration constant <I_C08_ENGSTYLE_M271E18LAEVO135> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_ENGSTYLE_M271E18LAEVO135 (21u)
#  define I_C08_ENGSTYLE_M271E18LAEVO135 ((c08_EngStyle)21u)
# endif
# if (defined RTE_CONST_I_C08_ENGSTYLE_M270DE16) || (defined I_C08_ENGSTYLE_M270DE16)
#  if (!defined RTE_CONST_I_C08_ENGSTYLE_M270DE16) || (RTE_CONST_I_C08_ENGSTYLE_M270DE16 != 22u)
#   error "Enumeration constant <I_C08_ENGSTYLE_M270DE16> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_ENGSTYLE_M270DE16 (22u)
#  define I_C08_ENGSTYLE_M270DE16 ((c08_EngStyle)22u)
# endif
# if (defined RTE_CONST_I_C08_ENGSTYLE_M270DE16LA115) || (defined I_C08_ENGSTYLE_M270DE16LA115)
#  if (!defined RTE_CONST_I_C08_ENGSTYLE_M270DE16LA115) || (RTE_CONST_I_C08_ENGSTYLE_M270DE16LA115 != 23u)
#   error "Enumeration constant <I_C08_ENGSTYLE_M270DE16LA115> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_ENGSTYLE_M270DE16LA115 (23u)
#  define I_C08_ENGSTYLE_M270DE16LA115 ((c08_EngStyle)23u)
# endif
# if (defined RTE_CONST_I_C08_ENGSTYLE_M270DE20LA150) || (defined I_C08_ENGSTYLE_M270DE20LA150)
#  if (!defined RTE_CONST_I_C08_ENGSTYLE_M270DE20LA150) || (RTE_CONST_I_C08_ENGSTYLE_M270DE20LA150 != 24u)
#   error "Enumeration constant <I_C08_ENGSTYLE_M270DE20LA150> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_ENGSTYLE_M270DE20LA150 (24u)
#  define I_C08_ENGSTYLE_M270DE20LA150 ((c08_EngStyle)24u)
# endif
# if (defined RTE_CONST_I_C08_ENGSTYLE_M276E35DEH) || (defined I_C08_ENGSTYLE_M276E35DEH)
#  if (!defined RTE_CONST_I_C08_ENGSTYLE_M276E35DEH) || (RTE_CONST_I_C08_ENGSTYLE_M276E35DEH != 25u)
#   error "Enumeration constant <I_C08_ENGSTYLE_M276E35DEH> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_ENGSTYLE_M276E35DEH (25u)
#  define I_C08_ENGSTYLE_M276E35DEH ((c08_EngStyle)25u)
# endif
# if (defined RTE_CONST_I_C08_ENGSTYLE_M276E35DEHRED) || (defined I_C08_ENGSTYLE_M276E35DEHRED)
#  if (!defined RTE_CONST_I_C08_ENGSTYLE_M276E35DEHRED) || (RTE_CONST_I_C08_ENGSTYLE_M276E35DEHRED != 26u)
#   error "Enumeration constant <I_C08_ENGSTYLE_M276E35DEHRED> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_ENGSTYLE_M276E35DEHRED (26u)
#  define I_C08_ENGSTYLE_M276E35DEHRED ((c08_EngStyle)26u)
# endif
# if (defined RTE_CONST_I_C08_ENGSTYLE_M276E35DESLA) || (defined I_C08_ENGSTYLE_M276E35DESLA)
#  if (!defined RTE_CONST_I_C08_ENGSTYLE_M276E35DESLA) || (RTE_CONST_I_C08_ENGSTYLE_M276E35DESLA != 27u)
#   error "Enumeration constant <I_C08_ENGSTYLE_M276E35DESLA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_ENGSTYLE_M276E35DESLA (27u)
#  define I_C08_ENGSTYLE_M276E35DESLA ((c08_EngStyle)27u)
# endif
# if (defined RTE_CONST_I_C08_ENGSTYLE_M274DEH16LA115) || (defined I_C08_ENGSTYLE_M274DEH16LA115)
#  if (!defined RTE_CONST_I_C08_ENGSTYLE_M274DEH16LA115) || (RTE_CONST_I_C08_ENGSTYLE_M274DEH16LA115 != 28u)
#   error "Enumeration constant <I_C08_ENGSTYLE_M274DEH16LA115> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_ENGSTYLE_M274DEH16LA115 (28u)
#  define I_C08_ENGSTYLE_M274DEH16LA115 ((c08_EngStyle)28u)
# endif
# if (defined RTE_CONST_I_C08_ENGSTYLE_M274DEH20LA135) || (defined I_C08_ENGSTYLE_M274DEH20LA135)
#  if (!defined RTE_CONST_I_C08_ENGSTYLE_M274DEH20LA135) || (RTE_CONST_I_C08_ENGSTYLE_M274DEH20LA135 != 29u)
#   error "Enumeration constant <I_C08_ENGSTYLE_M274DEH20LA135> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_ENGSTYLE_M274DEH20LA135 (29u)
#  define I_C08_ENGSTYLE_M274DEH20LA135 ((c08_EngStyle)29u)
# endif
# if (defined RTE_CONST_I_C08_ENGSTYLE_M274DES20LA135) || (defined I_C08_ENGSTYLE_M274DES20LA135)
#  if (!defined RTE_CONST_I_C08_ENGSTYLE_M274DES20LA135) || (RTE_CONST_I_C08_ENGSTYLE_M274DES20LA135 != 30u)
#   error "Enumeration constant <I_C08_ENGSTYLE_M274DES20LA135> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_ENGSTYLE_M274DES20LA135 (30u)
#  define I_C08_ENGSTYLE_M274DES20LA135 ((c08_EngStyle)30u)
# endif
# if (defined RTE_CONST_I_C08_ENGSTYLE_M274DEH20LA150) || (defined I_C08_ENGSTYLE_M274DEH20LA150)
#  if (!defined RTE_CONST_I_C08_ENGSTYLE_M274DEH20LA150) || (RTE_CONST_I_C08_ENGSTYLE_M274DEH20LA150 != 31u)
#   error "Enumeration constant <I_C08_ENGSTYLE_M274DEH20LA150> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_ENGSTYLE_M274DEH20LA150 (31u)
#  define I_C08_ENGSTYLE_M274DEH20LA150 ((c08_EngStyle)31u)
# endif
# if (defined RTE_CONST_I_C08_ENGSTYLE_M274DES20LA150) || (defined I_C08_ENGSTYLE_M274DES20LA150)
#  if (!defined RTE_CONST_I_C08_ENGSTYLE_M274DES20LA150) || (RTE_CONST_I_C08_ENGSTYLE_M274DES20LA150 != 32u)
#   error "Enumeration constant <I_C08_ENGSTYLE_M274DES20LA150> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_ENGSTYLE_M274DES20LA150 (32u)
#  define I_C08_ENGSTYLE_M274DES20LA150 ((c08_EngStyle)32u)
# endif
# if (defined RTE_CONST_I_C08_ENGSTYLE_M274DEH20LA175) || (defined I_C08_ENGSTYLE_M274DEH20LA175)
#  if (!defined RTE_CONST_I_C08_ENGSTYLE_M274DEH20LA175) || (RTE_CONST_I_C08_ENGSTYLE_M274DEH20LA175 != 33u)
#   error "Enumeration constant <I_C08_ENGSTYLE_M274DEH20LA175> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_ENGSTYLE_M274DEH20LA175 (33u)
#  define I_C08_ENGSTYLE_M274DEH20LA175 ((c08_EngStyle)33u)
# endif
# if (defined RTE_CONST_I_C08_ENGSTYLE_M274DES20LA175) || (defined I_C08_ENGSTYLE_M274DES20LA175)
#  if (!defined RTE_CONST_I_C08_ENGSTYLE_M274DES20LA175) || (RTE_CONST_I_C08_ENGSTYLE_M274DES20LA175 != 34u)
#   error "Enumeration constant <I_C08_ENGSTYLE_M274DES20LA175> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_ENGSTYLE_M274DES20LA175 (34u)
#  define I_C08_ENGSTYLE_M274DES20LA175 ((c08_EngStyle)34u)
# endif
# if (defined RTE_CONST_I_C08_ENGSTYLE_M279E55LA) || (defined I_C08_ENGSTYLE_M279E55LA)
#  if (!defined RTE_CONST_I_C08_ENGSTYLE_M279E55LA) || (RTE_CONST_I_C08_ENGSTYLE_M279E55LA != 35u)
#   error "Enumeration constant <I_C08_ENGSTYLE_M279E55LA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_ENGSTYLE_M279E55LA (35u)
#  define I_C08_ENGSTYLE_M279E55LA ((c08_EngStyle)35u)
# endif
# if (defined RTE_CONST_I_C08_ENGSTYLE_M276E30DEHLA) || (defined I_C08_ENGSTYLE_M276E30DEHLA)
#  if (!defined RTE_CONST_I_C08_ENGSTYLE_M276E30DEHLA) || (RTE_CONST_I_C08_ENGSTYLE_M276E30DEHLA != 36u)
#   error "Enumeration constant <I_C08_ENGSTYLE_M276E30DEHLA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_ENGSTYLE_M276E30DEHLA (36u)
#  define I_C08_ENGSTYLE_M276E30DEHLA ((c08_EngStyle)36u)
# endif
# if (defined RTE_CONST_I_C08_ENGSTYLE_M281E10_45) || (defined I_C08_ENGSTYLE_M281E10_45)
#  if (!defined RTE_CONST_I_C08_ENGSTYLE_M281E10_45) || (RTE_CONST_I_C08_ENGSTYLE_M281E10_45 != 37u)
#   error "Enumeration constant <I_C08_ENGSTYLE_M281E10_45> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_ENGSTYLE_M281E10_45 (37u)
#  define I_C08_ENGSTYLE_M281E10_45 ((c08_EngStyle)37u)
# endif
# if (defined RTE_CONST_I_C08_ENGSTYLE_M281E10_51) || (defined I_C08_ENGSTYLE_M281E10_51)
#  if (!defined RTE_CONST_I_C08_ENGSTYLE_M281E10_51) || (RTE_CONST_I_C08_ENGSTYLE_M281E10_51 != 38u)
#   error "Enumeration constant <I_C08_ENGSTYLE_M281E10_51> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_ENGSTYLE_M281E10_51 (38u)
#  define I_C08_ENGSTYLE_M281E10_51 ((c08_EngStyle)38u)
# endif
# if (defined RTE_CONST_I_C08_ENGSTYLE_M281DE09LA) || (defined I_C08_ENGSTYLE_M281DE09LA)
#  if (!defined RTE_CONST_I_C08_ENGSTYLE_M281DE09LA) || (RTE_CONST_I_C08_ENGSTYLE_M281DE09LA != 39u)
#   error "Enumeration constant <I_C08_ENGSTYLE_M281DE09LA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_ENGSTYLE_M281DE09LA (39u)
#  define I_C08_ENGSTYLE_M281DE09LA ((c08_EngStyle)39u)
# endif
# if (defined RTE_CONST_I_C08_ENGSTYLE_M282DE12LA) || (defined I_C08_ENGSTYLE_M282DE12LA)
#  if (!defined RTE_CONST_I_C08_ENGSTYLE_M282DE12LA) || (RTE_CONST_I_C08_ENGSTYLE_M282DE12LA != 40u)
#   error "Enumeration constant <I_C08_ENGSTYLE_M282DE12LA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_ENGSTYLE_M282DE12LA (40u)
#  define I_C08_ENGSTYLE_M282DE12LA ((c08_EngStyle)40u)
# endif
# if (defined RTE_CONST_I_C08_ENGSTYLE_M276E30DEHLARED) || (defined I_C08_ENGSTYLE_M276E30DEHLARED)
#  if (!defined RTE_CONST_I_C08_ENGSTYLE_M276E30DEHLARED) || (RTE_CONST_I_C08_ENGSTYLE_M276E30DEHLARED != 41u)
#   error "Enumeration constant <I_C08_ENGSTYLE_M276E30DEHLARED> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_ENGSTYLE_M276E30DEHLARED (41u)
#  define I_C08_ENGSTYLE_M276E30DEHLARED ((c08_EngStyle)41u)
# endif
# if (defined RTE_CONST_I_C08_ENGSTYLE_AMGM279E60LA) || (defined I_C08_ENGSTYLE_AMGM279E60LA)
#  if (!defined RTE_CONST_I_C08_ENGSTYLE_AMGM279E60LA) || (RTE_CONST_I_C08_ENGSTYLE_AMGM279E60LA != 118u)
#   error "Enumeration constant <I_C08_ENGSTYLE_AMGM279E60LA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_ENGSTYLE_AMGM279E60LA (118u)
#  define I_C08_ENGSTYLE_AMGM279E60LA ((c08_EngStyle)118u)
# endif
# if (defined RTE_CONST_I_C08_ENGSTYLE_AMGM133DE20LA) || (defined I_C08_ENGSTYLE_AMGM133DE20LA)
#  if (!defined RTE_CONST_I_C08_ENGSTYLE_AMGM133DE20LA) || (RTE_CONST_I_C08_ENGSTYLE_AMGM133DE20LA != 119u)
#   error "Enumeration constant <I_C08_ENGSTYLE_AMGM133DE20LA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_ENGSTYLE_AMGM133DE20LA (119u)
#  define I_C08_ENGSTYLE_AMGM133DE20LA ((c08_EngStyle)119u)
# endif
# if (defined RTE_CONST_I_C08_ENGSTYLE_AMGM159E63) || (defined I_C08_ENGSTYLE_AMGM159E63)
#  if (!defined RTE_CONST_I_C08_ENGSTYLE_AMGM159E63) || (RTE_CONST_I_C08_ENGSTYLE_AMGM159E63 != 120u)
#   error "Enumeration constant <I_C08_ENGSTYLE_AMGM159E63> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_ENGSTYLE_AMGM159E63 (120u)
#  define I_C08_ENGSTYLE_AMGM159E63 ((c08_EngStyle)120u)
# endif
# if (defined RTE_CONST_I_C08_ENGSTYLE_AMGM152E55DE) || (defined I_C08_ENGSTYLE_AMGM152E55DE)
#  if (!defined RTE_CONST_I_C08_ENGSTYLE_AMGM152E55DE) || (RTE_CONST_I_C08_ENGSTYLE_AMGM152E55DE != 121u)
#   error "Enumeration constant <I_C08_ENGSTYLE_AMGM152E55DE> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_ENGSTYLE_AMGM152E55DE (121u)
#  define I_C08_ENGSTYLE_AMGM152E55DE ((c08_EngStyle)121u)
# endif
# if (defined RTE_CONST_I_C08_ENGSTYLE_AMGM157E55DEHLA) || (defined I_C08_ENGSTYLE_AMGM157E55DEHLA)
#  if (!defined RTE_CONST_I_C08_ENGSTYLE_AMGM157E55DEHLA) || (RTE_CONST_I_C08_ENGSTYLE_AMGM157E55DEHLA != 122u)
#   error "Enumeration constant <I_C08_ENGSTYLE_AMGM157E55DEHLA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_ENGSTYLE_AMGM157E55DEHLA (122u)
#  define I_C08_ENGSTYLE_AMGM157E55DEHLA ((c08_EngStyle)122u)
# endif
# if (defined RTE_CONST_I_C08_ENGSTYLE_AMGM156E63HP) || (defined I_C08_ENGSTYLE_AMGM156E63HP)
#  if (!defined RTE_CONST_I_C08_ENGSTYLE_AMGM156E63HP) || (RTE_CONST_I_C08_ENGSTYLE_AMGM156E63HP != 123u)
#   error "Enumeration constant <I_C08_ENGSTYLE_AMGM156E63HP> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_ENGSTYLE_AMGM156E63HP (123u)
#  define I_C08_ENGSTYLE_AMGM156E63HP ((c08_EngStyle)123u)
# endif
# if (defined RTE_CONST_I_C08_ENGSTYLE_AMGM275E60LA) || (defined I_C08_ENGSTYLE_AMGM275E60LA)
#  if (!defined RTE_CONST_I_C08_ENGSTYLE_AMGM275E60LA) || (RTE_CONST_I_C08_ENGSTYLE_AMGM275E60LA != 124u)
#   error "Enumeration constant <I_C08_ENGSTYLE_AMGM275E60LA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_ENGSTYLE_AMGM275E60LA (124u)
#  define I_C08_ENGSTYLE_AMGM275E60LA ((c08_EngStyle)124u)
# endif
# if (defined RTE_CONST_I_C08_ENGSTYLE_AMGM156E63) || (defined I_C08_ENGSTYLE_AMGM156E63)
#  if (!defined RTE_CONST_I_C08_ENGSTYLE_AMGM156E63) || (RTE_CONST_I_C08_ENGSTYLE_AMGM156E63 != 126u)
#   error "Enumeration constant <I_C08_ENGSTYLE_AMGM156E63> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_ENGSTYLE_AMGM156E63 (126u)
#  define I_C08_ENGSTYLE_AMGM156E63 ((c08_EngStyle)126u)
# endif
# if (defined RTE_CONST_I_C08_ENGSTYLE_OM642DE30LA160) || (defined I_C08_ENGSTYLE_OM642DE30LA160)
#  if (!defined RTE_CONST_I_C08_ENGSTYLE_OM642DE30LA160) || (RTE_CONST_I_C08_ENGSTYLE_OM642DE30LA160 != 129u)
#   error "Enumeration constant <I_C08_ENGSTYLE_OM642DE30LA160> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_ENGSTYLE_OM642DE30LA160 (129u)
#  define I_C08_ENGSTYLE_OM642DE30LA160 ((c08_EngStyle)129u)
# endif
# if (defined RTE_CONST_I_C08_ENGSTYLE_OM629DE40LA) || (defined I_C08_ENGSTYLE_OM629DE40LA)
#  if (!defined RTE_CONST_I_C08_ENGSTYLE_OM629DE40LA) || (RTE_CONST_I_C08_ENGSTYLE_OM629DE40LA != 130u)
#   error "Enumeration constant <I_C08_ENGSTYLE_OM629DE40LA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_ENGSTYLE_OM629DE40LA (130u)
#  define I_C08_ENGSTYLE_OM629DE40LA ((c08_EngStyle)130u)
# endif
# if (defined RTE_CONST_I_C08_ENGSTYLE_OM642DE30LA140) || (defined I_C08_ENGSTYLE_OM642DE30LA140)
#  if (!defined RTE_CONST_I_C08_ENGSTYLE_OM642DE30LA140) || (RTE_CONST_I_C08_ENGSTYLE_OM642DE30LA140 != 131u)
#   error "Enumeration constant <I_C08_ENGSTYLE_OM642DE30LA140> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_ENGSTYLE_OM642DE30LA140 (131u)
#  define I_C08_ENGSTYLE_OM642DE30LA140 ((c08_EngStyle)131u)
# endif
# if (defined RTE_CONST_I_C08_ENGSTYLE_OM646EVODE22LA125) || (defined I_C08_ENGSTYLE_OM646EVODE22LA125)
#  if (!defined RTE_CONST_I_C08_ENGSTYLE_OM646EVODE22LA125) || (RTE_CONST_I_C08_ENGSTYLE_OM646EVODE22LA125 != 132u)
#   error "Enumeration constant <I_C08_ENGSTYLE_OM646EVODE22LA125> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_ENGSTYLE_OM646EVODE22LA125 (132u)
#  define I_C08_ENGSTYLE_OM646EVODE22LA125 ((c08_EngStyle)132u)
# endif
# if (defined RTE_CONST_I_C08_ENGSTYLE_OM646EVODE22LA100) || (defined I_C08_ENGSTYLE_OM646EVODE22LA100)
#  if (!defined RTE_CONST_I_C08_ENGSTYLE_OM646EVODE22LA100) || (RTE_CONST_I_C08_ENGSTYLE_OM646EVODE22LA100 != 133u)
#   error "Enumeration constant <I_C08_ENGSTYLE_OM646EVODE22LA100> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_ENGSTYLE_OM646EVODE22LA100 (133u)
#  define I_C08_ENGSTYLE_OM646EVODE22LA100 ((c08_EngStyle)133u)
# endif
# if (defined RTE_CONST_I_C08_ENGSTYLE_OM646EVODE22LA85) || (defined I_C08_ENGSTYLE_OM646EVODE22LA85)
#  if (!defined RTE_CONST_I_C08_ENGSTYLE_OM646EVODE22LA85) || (RTE_CONST_I_C08_ENGSTYLE_OM646EVODE22LA85 != 134u)
#   error "Enumeration constant <I_C08_ENGSTYLE_OM646EVODE22LA85> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_ENGSTYLE_OM646EVODE22LA85 (134u)
#  define I_C08_ENGSTYLE_OM646EVODE22LA85 ((c08_EngStyle)134u)
# endif
# if (defined RTE_CONST_I_C08_ENGSTYLE_OM651DE22LA150) || (defined I_C08_ENGSTYLE_OM651DE22LA150)
#  if (!defined RTE_CONST_I_C08_ENGSTYLE_OM651DE22LA150) || (RTE_CONST_I_C08_ENGSTYLE_OM651DE22LA150 != 135u)
#   error "Enumeration constant <I_C08_ENGSTYLE_OM651DE22LA150> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_ENGSTYLE_OM651DE22LA150 (135u)
#  define I_C08_ENGSTYLE_OM651DE22LA150 ((c08_EngStyle)135u)
# endif
# if (defined RTE_CONST_I_C08_ENGSTYLE_OM651DE22LA125) || (defined I_C08_ENGSTYLE_OM651DE22LA125)
#  if (!defined RTE_CONST_I_C08_ENGSTYLE_OM651DE22LA125) || (RTE_CONST_I_C08_ENGSTYLE_OM651DE22LA125 != 136u)
#   error "Enumeration constant <I_C08_ENGSTYLE_OM651DE22LA125> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_ENGSTYLE_OM651DE22LA125 (136u)
#  define I_C08_ENGSTYLE_OM651DE22LA125 ((c08_EngStyle)136u)
# endif
# if (defined RTE_CONST_I_C08_ENGSTYLE_OM651DE22LA100) || (defined I_C08_ENGSTYLE_OM651DE22LA100)
#  if (!defined RTE_CONST_I_C08_ENGSTYLE_OM651DE22LA100) || (RTE_CONST_I_C08_ENGSTYLE_OM651DE22LA100 != 137u)
#   error "Enumeration constant <I_C08_ENGSTYLE_OM651DE22LA100> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_ENGSTYLE_OM651DE22LA100 (137u)
#  define I_C08_ENGSTYLE_OM651DE22LA100 ((c08_EngStyle)137u)
# endif
# if (defined RTE_CONST_I_C08_ENGSTYLE_OM651DE22LA80) || (defined I_C08_ENGSTYLE_OM651DE22LA80)
#  if (!defined RTE_CONST_I_C08_ENGSTYLE_OM651DE22LA80) || (RTE_CONST_I_C08_ENGSTYLE_OM651DE22LA80 != 138u)
#   error "Enumeration constant <I_C08_ENGSTYLE_OM651DE22LA80> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_ENGSTYLE_OM651DE22LA80 (138u)
#  define I_C08_ENGSTYLE_OM651DE22LA80 ((c08_EngStyle)138u)
# endif
# if (defined RTE_CONST_I_C08_ENGSTYLE_OM642DE30LA185) || (defined I_C08_ENGSTYLE_OM642DE30LA185)
#  if (!defined RTE_CONST_I_C08_ENGSTYLE_OM642DE30LA185) || (RTE_CONST_I_C08_ENGSTYLE_OM642DE30LA185 != 139u)
#   error "Enumeration constant <I_C08_ENGSTYLE_OM642DE30LA185> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_ENGSTYLE_OM642DE30LA185 (139u)
#  define I_C08_ENGSTYLE_OM642DE30LA185 ((c08_EngStyle)139u)
# endif
# if (defined RTE_CONST_I_C08_ENGSTYLE_OM651DE18LA80) || (defined I_C08_ENGSTYLE_OM651DE18LA80)
#  if (!defined RTE_CONST_I_C08_ENGSTYLE_OM651DE18LA80) || (RTE_CONST_I_C08_ENGSTYLE_OM651DE18LA80 != 140u)
#   error "Enumeration constant <I_C08_ENGSTYLE_OM651DE18LA80> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_ENGSTYLE_OM651DE18LA80 (140u)
#  define I_C08_ENGSTYLE_OM651DE18LA80 ((c08_EngStyle)140u)
# endif
# if (defined RTE_CONST_I_C08_ENGSTYLE_OM651DE18LA100) || (defined I_C08_ENGSTYLE_OM651DE18LA100)
#  if (!defined RTE_CONST_I_C08_ENGSTYLE_OM651DE18LA100) || (RTE_CONST_I_C08_ENGSTYLE_OM651DE18LA100 != 141u)
#   error "Enumeration constant <I_C08_ENGSTYLE_OM651DE18LA100> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_ENGSTYLE_OM651DE18LA100 (141u)
#  define I_C08_ENGSTYLE_OM651DE18LA100 ((c08_EngStyle)141u)
# endif
# if (defined RTE_CONST_I_C08_ENGSTYLE_OM607DE14LA66) || (defined I_C08_ENGSTYLE_OM607DE14LA66)
#  if (!defined RTE_CONST_I_C08_ENGSTYLE_OM607DE14LA66) || (RTE_CONST_I_C08_ENGSTYLE_OM607DE14LA66 != 142u)
#   error "Enumeration constant <I_C08_ENGSTYLE_OM607DE14LA66> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_ENGSTYLE_OM607DE14LA66 (142u)
#  define I_C08_ENGSTYLE_OM607DE14LA66 ((c08_EngStyle)142u)
# endif
# if (defined RTE_CONST_I_C08_ENGSTYLE_OM607DE14LA81) || (defined I_C08_ENGSTYLE_OM607DE14LA81)
#  if (!defined RTE_CONST_I_C08_ENGSTYLE_OM607DE14LA81) || (RTE_CONST_I_C08_ENGSTYLE_OM607DE14LA81 != 143u)
#   error "Enumeration constant <I_C08_ENGSTYLE_OM607DE14LA81> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_ENGSTYLE_OM607DE14LA81 (143u)
#  define I_C08_ENGSTYLE_OM607DE14LA81 ((c08_EngStyle)143u)
# endif
# if (defined RTE_CONST_I_C08_ENGSTYLE_OM622DE16LA96) || (defined I_C08_ENGSTYLE_OM622DE16LA96)
#  if (!defined RTE_CONST_I_C08_ENGSTYLE_OM622DE16LA96) || (RTE_CONST_I_C08_ENGSTYLE_OM622DE16LA96 != 144u)
#   error "Enumeration constant <I_C08_ENGSTYLE_OM622DE16LA96> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_ENGSTYLE_OM622DE16LA96 (144u)
#  define I_C08_ENGSTYLE_OM622DE16LA96 ((c08_EngStyle)144u)
# endif
# if (defined RTE_CONST_I_C08_ENGSTYLE_OM622DE16LA118) || (defined I_C08_ENGSTYLE_OM622DE16LA118)
#  if (!defined RTE_CONST_I_C08_ENGSTYLE_OM622DE16LA118) || (RTE_CONST_I_C08_ENGSTYLE_OM622DE16LA118 != 145u)
#   error "Enumeration constant <I_C08_ENGSTYLE_OM622DE16LA118> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_ENGSTYLE_OM622DE16LA118 (145u)
#  define I_C08_ENGSTYLE_OM622DE16LA118 ((c08_EngStyle)145u)
# endif
# if (defined RTE_CONST_I_C08_ENGSTYLE_OM626DE16LA96) || (defined I_C08_ENGSTYLE_OM626DE16LA96)
#  if (!defined RTE_CONST_I_C08_ENGSTYLE_OM626DE16LA96) || (RTE_CONST_I_C08_ENGSTYLE_OM626DE16LA96 != 146u)
#   error "Enumeration constant <I_C08_ENGSTYLE_OM626DE16LA96> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_ENGSTYLE_OM626DE16LA96 (146u)
#  define I_C08_ENGSTYLE_OM626DE16LA96 ((c08_EngStyle)146u)
# endif
# if (defined RTE_CONST_I_C08_ENGSTYLE_OM626DE16LA118) || (defined I_C08_ENGSTYLE_OM626DE16LA118)
#  if (!defined RTE_CONST_I_C08_ENGSTYLE_OM626DE16LA118) || (RTE_CONST_I_C08_ENGSTYLE_OM626DE16LA118 != 147u)
#   error "Enumeration constant <I_C08_ENGSTYLE_OM626DE16LA118> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_ENGSTYLE_OM626DE16LA118 (147u)
#  define I_C08_ENGSTYLE_OM626DE16LA118 ((c08_EngStyle)147u)
# endif
# if (defined RTE_CONST_I_C08_ENGSTYLE_SNA) || (defined I_C08_ENGSTYLE_SNA)
#  if (!defined RTE_CONST_I_C08_ENGSTYLE_SNA) || (RTE_CONST_I_C08_ENGSTYLE_SNA != 255u)
#   error "Enumeration constant <I_C08_ENGSTYLE_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_ENGSTYLE_SNA (255u)
#  define I_C08_ENGSTYLE_SNA ((c08_EngStyle)255u)
# endif

# define Rte_TypeDef_c08_Impulses_0_254_1
typedef uint8 c08_Impulses_0_254_1;
# define c08_Impulses_0_254_1_LowerLimit ((c08_Impulses_0_254_1)0u)
# define c08_Impulses_0_254_1_UpperLimit ((c08_Impulses_0_254_1)255u)
# define Rte_InvalidValue_c08_Impulses_0_254_1 ((c08_Impulses_0_254_1)255u)
# if (defined RTE_CONST_I_C08_IMPULSES_0_254_1_SNA) || (defined I_C08_IMPULSES_0_254_1_SNA)
#  if (!defined RTE_CONST_I_C08_IMPULSES_0_254_1_SNA) || (RTE_CONST_I_C08_IMPULSES_0_254_1_SNA != 255u)
#   error "Enumeration constant <I_C08_IMPULSES_0_254_1_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_IMPULSES_0_254_1_SNA (255u)
#  define I_C08_IMPULSES_0_254_1_SNA ((c08_Impulses_0_254_1)255u)
# endif

# define Rte_TypeDef_c08_Months_1_12_1
typedef uint8 c08_Months_1_12_1;
# define c08_Months_1_12_1_LowerLimit ((c08_Months_1_12_1)1u)
# define c08_Months_1_12_1_UpperLimit ((c08_Months_1_12_1)255u)
# define Rte_InvalidValue_c08_Months_1_12_1 ((c08_Months_1_12_1)255u)
# if (defined RTE_CONST_I_C08_MONTHS_1_12_1_SNA) || (defined I_C08_MONTHS_1_12_1_SNA)
#  if (!defined RTE_CONST_I_C08_MONTHS_1_12_1_SNA) || (RTE_CONST_I_C08_MONTHS_1_12_1_SNA != 255u)
#   error "Enumeration constant <I_C08_MONTHS_1_12_1_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_MONTHS_1_12_1_SNA (255u)
#  define I_C08_MONTHS_1_12_1_SNA ((c08_Months_1_12_1)255u)
# endif

# define Rte_TypeDef_c08_Nm_0_63k5_0k25
typedef uint8 c08_Nm_0_63k5_0k25;
# define c08_Nm_0_63k5_0k25_LowerLimit ((c08_Nm_0_63k5_0k25)0u)
# define c08_Nm_0_63k5_0k25_UpperLimit ((c08_Nm_0_63k5_0k25)255u)
# define Rte_InvalidValue_c08_Nm_0_63k5_0k25 ((c08_Nm_0_63k5_0k25)255u)
# if (defined RTE_CONST_I_C08_NM_0_63K5_0K25_SNA) || (defined I_C08_NM_0_63K5_0K25_SNA)
#  if (!defined RTE_CONST_I_C08_NM_0_63K5_0K25_SNA) || (RTE_CONST_I_C08_NM_0_63K5_0K25_SNA != 255u)
#   error "Enumeration constant <I_C08_NM_0_63K5_0K25_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_NM_0_63K5_0K25_SNA (255u)
#  define I_C08_NM_0_63K5_0K25_SNA ((c08_Nm_0_63k5_0k25)255u)
# endif

# define Rte_TypeDef_c08_V_0_25k4_0k1
//typedef uint8 c08_V_0_25k4_0k1;
//# define c08_V_0_25k4_0k1_LowerLimit ((c08_V_0_25k4_0k1)0u)
//# define c08_V_0_25k4_0k1_UpperLimit ((c08_V_0_25k4_0k1)255u)
# define Rte_InvalidValue_c08_V_0_25k4_0k1 ((c08_V_0_25k4_0k1)255u)
# if (defined RTE_CONST_I_C08_V_0_25K4_0K1_SNA) || (defined I_C08_V_0_25K4_0K1_SNA)
#  if (!defined RTE_CONST_I_C08_V_0_25K4_0K1_SNA) || (RTE_CONST_I_C08_V_0_25K4_0K1_SNA != 255u)
#   error "Enumeration constant <I_C08_V_0_25K4_0K1_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_V_0_25K4_0K1_SNA (255u)
#  define I_C08_V_0_25K4_0K1_SNA ((c08_V_0_25k4_0k1)255u)
# endif

# define Rte_TypeDef_c08_WakeupRsn_MPC
typedef uint8 c08_WakeupRsn_MPC;
# define c08_WakeupRsn_MPC_LowerLimit ((c08_WakeupRsn_MPC)0u)
# define c08_WakeupRsn_MPC_UpperLimit ((c08_WakeupRsn_MPC)255u)
# define Rte_InvalidValue_c08_WakeupRsn_MPC ((c08_WakeupRsn_MPC)255u)
# if (defined RTE_CONST_I_C08_WAKEUPRSN_MPC_NETWORK) || (defined I_C08_WAKEUPRSN_MPC_NETWORK)
#  if (!defined RTE_CONST_I_C08_WAKEUPRSN_MPC_NETWORK) || (RTE_CONST_I_C08_WAKEUPRSN_MPC_NETWORK != 0u)
#   error "Enumeration constant <I_C08_WAKEUPRSN_MPC_NETWORK> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_WAKEUPRSN_MPC_NETWORK (0u)
#  define I_C08_WAKEUPRSN_MPC_NETWORK ((c08_WakeupRsn_MPC)0u)
# endif
# if (defined RTE_CONST_I_C08_WAKEUPRSN_MPC_SNA) || (defined I_C08_WAKEUPRSN_MPC_SNA)
#  if (!defined RTE_CONST_I_C08_WAKEUPRSN_MPC_SNA) || (RTE_CONST_I_C08_WAKEUPRSN_MPC_SNA != 255u)
#   error "Enumeration constant <I_C08_WAKEUPRSN_MPC_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_WAKEUPRSN_MPC_SNA (255u)
#  define I_C08_WAKEUPRSN_MPC_SNA ((c08_WakeupRsn_MPC)255u)
# endif

# define Rte_TypeDef_c08_Years_0_99_1
typedef uint8 c08_Years_0_99_1;
# define c08_Years_0_99_1_LowerLimit ((c08_Years_0_99_1)0u)
# define c08_Years_0_99_1_UpperLimit ((c08_Years_0_99_1)255u)
# define Rte_InvalidValue_c08_Years_0_99_1 ((c08_Years_0_99_1)255u)
# if (defined RTE_CONST_I_C08_YEARS_0_99_1_SNA) || (defined I_C08_YEARS_0_99_1_SNA)
#  if (!defined RTE_CONST_I_C08_YEARS_0_99_1_SNA) || (RTE_CONST_I_C08_YEARS_0_99_1_SNA != 255u)
#   error "Enumeration constant <I_C08_YEARS_0_99_1_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_YEARS_0_99_1_SNA (255u)
#  define I_C08_YEARS_0_99_1_SNA ((c08_Years_0_99_1)255u)
# endif

# define Rte_TypeDef_c08_degC_m40_214_1
typedef uint8 c08_degC_m40_214_1;
# define c08_degC_m40_214_1_LowerLimit ((c08_degC_m40_214_1)0u)
# define c08_degC_m40_214_1_UpperLimit ((c08_degC_m40_214_1)255u)
# define Rte_InvalidValue_c08_degC_m40_214_1 ((c08_degC_m40_214_1)255u)
# if (defined RTE_CONST_I_C08_DEGC_M40_214_1_SNA) || (defined I_C08_DEGC_M40_214_1_SNA)
#  if (!defined RTE_CONST_I_C08_DEGC_M40_214_1_SNA) || (RTE_CONST_I_C08_DEGC_M40_214_1_SNA != 255u)
#   error "Enumeration constant <I_C08_DEGC_M40_214_1_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_DEGC_M40_214_1_SNA (255u)
#  define I_C08_DEGC_M40_214_1_SNA ((c08_degC_m40_214_1)255u)
# endif

# define Rte_TypeDef_c08_degC_m40_85_0k5
typedef uint8 c08_degC_m40_85_0k5;
# define c08_degC_m40_85_0k5_LowerLimit ((c08_degC_m40_85_0k5)0u)
# define c08_degC_m40_85_0k5_UpperLimit ((c08_degC_m40_85_0k5)255u)
# define Rte_InvalidValue_c08_degC_m40_85_0k5 ((c08_degC_m40_85_0k5)255u)
# if (defined RTE_CONST_I_C08_DEGC_M40_85_0K5_SNA) || (defined I_C08_DEGC_M40_85_0K5_SNA)
#  if (!defined RTE_CONST_I_C08_DEGC_M40_85_0K5_SNA) || (RTE_CONST_I_C08_DEGC_M40_85_0K5_SNA != 255u)
#   error "Enumeration constant <I_C08_DEGC_M40_85_0K5_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_DEGC_M40_85_0K5_SNA (255u)
#  define I_C08_DEGC_M40_85_0K5_SNA ((c08_degC_m40_85_0k5)255u)
# endif

# define Rte_TypeDef_c08_deg_0_358k5_1k417
typedef uint8 c08_deg_0_358k5_1k417;
# define c08_deg_0_358k5_1k417_LowerLimit ((c08_deg_0_358k5_1k417)0u)
# define c08_deg_0_358k5_1k417_UpperLimit ((c08_deg_0_358k5_1k417)255u)
# define Rte_InvalidValue_c08_deg_0_358k5_1k417 ((c08_deg_0_358k5_1k417)255u)
# if (defined RTE_CONST_I_C08_DEG_0_358K5_1K417_UNKNOWN) || (defined I_C08_DEG_0_358K5_1K417_UNKNOWN)
#  if (!defined RTE_CONST_I_C08_DEG_0_358K5_1K417_UNKNOWN) || (RTE_CONST_I_C08_DEG_0_358K5_1K417_UNKNOWN != 254u)
#   error "Enumeration constant <I_C08_DEG_0_358K5_1K417_UNKNOWN> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_DEG_0_358K5_1K417_UNKNOWN (254u)
#  define I_C08_DEG_0_358K5_1K417_UNKNOWN ((c08_deg_0_358k5_1k417)254u)
# endif
# if (defined RTE_CONST_I_C08_DEG_0_358K5_1K417_SNA) || (defined I_C08_DEG_0_358K5_1K417_SNA)
#  if (!defined RTE_CONST_I_C08_DEG_0_358K5_1K417_SNA) || (RTE_CONST_I_C08_DEG_0_358K5_1K417_SNA != 255u)
#   error "Enumeration constant <I_C08_DEG_0_358K5_1K417_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_DEG_0_358K5_1K417_SNA (255u)
#  define I_C08_DEG_0_358K5_1K417_SNA ((c08_deg_0_358k5_1k417)255u)
# endif

# define Rte_TypeDef_c08_deg_m20_20_0k2
typedef uint8 c08_deg_m20_20_0k2;
# define c08_deg_m20_20_0k2_LowerLimit ((c08_deg_m20_20_0k2)0u)
# define c08_deg_m20_20_0k2_UpperLimit ((c08_deg_m20_20_0k2)255u)
# define Rte_InvalidValue_c08_deg_m20_20_0k2 ((c08_deg_m20_20_0k2)255u)
# if (defined RTE_CONST_I_C08_DEG_M20_20_0K2_SNA) || (defined I_C08_DEG_M20_20_0K2_SNA)
#  if (!defined RTE_CONST_I_C08_DEG_M20_20_0K2_SNA) || (RTE_CONST_I_C08_DEG_M20_20_0K2_SNA != 255u)
#   error "Enumeration constant <I_C08_DEG_M20_20_0K2_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_DEG_M20_20_0K2_SNA (255u)
#  define I_C08_DEG_M20_20_0K2_SNA ((c08_deg_m20_20_0k2)255u)
# endif

# define Rte_TypeDef_c08_deg_m3k2_p3k15_0k025
typedef uint8 c08_deg_m3k2_p3k15_0k025;
# define c08_deg_m3k2_p3k15_0k025_LowerLimit ((c08_deg_m3k2_p3k15_0k025)0u)
# define c08_deg_m3k2_p3k15_0k025_UpperLimit ((c08_deg_m3k2_p3k15_0k025)255u)
# define Rte_InvalidValue_c08_deg_m3k2_p3k15_0k025 ((c08_deg_m3k2_p3k15_0k025)255u)
# if (defined RTE_CONST_I_C08_DEG_M3K2_P3K15_0K025_SNA) || (defined I_C08_DEG_M3K2_P3K15_0K025_SNA)
#  if (!defined RTE_CONST_I_C08_DEG_M3K2_P3K15_0K025_SNA) || (RTE_CONST_I_C08_DEG_M3K2_P3K15_0K025_SNA != 255u)
#   error "Enumeration constant <I_C08_DEG_M3K2_P3K15_0K025_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_DEG_M3K2_P3K15_0K025_SNA (255u)
#  define I_C08_DEG_M3K2_P3K15_0K025_SNA ((c08_deg_m3k2_p3k15_0k025)255u)
# endif

# define Rte_TypeDef_c08_deg_p_s_m63k5top63k5_0d5
typedef uint8 c08_deg_p_s_m63k5top63k5_0d5;
# define c08_deg_p_s_m63k5top63k5_0d5_LowerLimit ((c08_deg_p_s_m63k5top63k5_0d5)0u)
# define c08_deg_p_s_m63k5top63k5_0d5_UpperLimit ((c08_deg_p_s_m63k5top63k5_0d5)255u)
# define Rte_InvalidValue_c08_deg_p_s_m63k5top63k5_0d5 ((c08_deg_p_s_m63k5top63k5_0d5)255u)
# if (defined RTE_CONST_I_C08_DEG_P_S_M63K5TOP63K5_0D5_SNA) || (defined I_C08_DEG_P_S_M63K5TOP63K5_0D5_SNA)
#  if (!defined RTE_CONST_I_C08_DEG_P_S_M63K5TOP63K5_0D5_SNA) || (RTE_CONST_I_C08_DEG_P_S_M63K5TOP63K5_0D5_SNA != 255u)
#   error "Enumeration constant <I_C08_DEG_P_S_M63K5TOP63K5_0D5_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_DEG_P_S_M63K5TOP63K5_0D5_SNA (255u)
#  define I_C08_DEG_P_S_M63K5TOP63K5_0D5_SNA ((c08_deg_p_s_m63k5top63k5_0d5)255u)
# endif

# define Rte_TypeDef_c08_deg_p_s_m6k96_6k96_0k08
typedef uint8 c08_deg_p_s_m6k96_6k96_0k08;
# define c08_deg_p_s_m6k96_6k96_0k08_LowerLimit ((c08_deg_p_s_m6k96_6k96_0k08)41u)
# define c08_deg_p_s_m6k96_6k96_0k08_UpperLimit ((c08_deg_p_s_m6k96_6k96_0k08)255u)
# define Rte_InvalidValue_c08_deg_p_s_m6k96_6k96_0k08 ((c08_deg_p_s_m6k96_6k96_0k08)255u)
# if (defined RTE_CONST_I_C08_DEG_P_S_M6K96_6K96_0K08_SNA) || (defined I_C08_DEG_P_S_M6K96_6K96_0K08_SNA)
#  if (!defined RTE_CONST_I_C08_DEG_P_S_M6K96_6K96_0K08_SNA) || (RTE_CONST_I_C08_DEG_P_S_M6K96_6K96_0K08_SNA != 255u)
#   error "Enumeration constant <I_C08_DEG_P_S_M6K96_6K96_0K08_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_DEG_P_S_M6K96_6K96_0K08_SNA (255u)
#  define I_C08_DEG_P_S_M6K96_6K96_0K08_SNA ((c08_deg_p_s_m6k96_6k96_0k08)255u)
# endif

# define Rte_TypeDef_c08_h_0_23_1
typedef uint8 c08_h_0_23_1;
# define c08_h_0_23_1_LowerLimit ((c08_h_0_23_1)0u)
# define c08_h_0_23_1_UpperLimit ((c08_h_0_23_1)255u)
# define Rte_InvalidValue_c08_h_0_23_1 ((c08_h_0_23_1)255u)
# if (defined RTE_CONST_I_C08_H_0_23_1_SNA) || (defined I_C08_H_0_23_1_SNA)
#  if (!defined RTE_CONST_I_C08_H_0_23_1_SNA) || (RTE_CONST_I_C08_H_0_23_1_SNA != 255u)
#   error "Enumeration constant <I_C08_H_0_23_1_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_H_0_23_1_SNA (255u)
#  define I_C08_H_0_23_1_SNA ((c08_h_0_23_1)255u)
# endif

# define Rte_TypeDef_c08_m_0_0kd0508_0d0002
typedef uint8 c08_m_0_0kd0508_0d0002;
# define c08_m_0_0kd0508_0d0002_LowerLimit ((c08_m_0_0kd0508_0d0002)0u)
# define c08_m_0_0kd0508_0d0002_UpperLimit ((c08_m_0_0kd0508_0d0002)255u)
# define Rte_InvalidValue_c08_m_0_0kd0508_0d0002 ((c08_m_0_0kd0508_0d0002)255u)
# if (defined RTE_CONST_I_C08_M_0_0KD0508_0D0002_SNA) || (defined I_C08_M_0_0KD0508_0D0002_SNA)
#  if (!defined RTE_CONST_I_C08_M_0_0KD0508_0D0002_SNA) || (RTE_CONST_I_C08_M_0_0KD0508_0D0002_SNA != 255u)
#   error "Enumeration constant <I_C08_M_0_0KD0508_0D0002_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_M_0_0KD0508_0D0002_SNA (255u)
#  define I_C08_M_0_0KD0508_0D0002_SNA ((c08_m_0_0kd0508_0d0002)255u)
# endif

# define Rte_TypeDef_c08_m_0_254_1
typedef uint8 c08_m_0_254_1;
# define c08_m_0_254_1_LowerLimit ((c08_m_0_254_1)0u)
# define c08_m_0_254_1_UpperLimit ((c08_m_0_254_1)255u)
# define Rte_InvalidValue_c08_m_0_254_1 ((c08_m_0_254_1)255u)
# if (defined RTE_CONST_I_C08_M_0_254_1_SNA) || (defined I_C08_M_0_254_1_SNA)
#  if (!defined RTE_CONST_I_C08_M_0_254_1_SNA) || (RTE_CONST_I_C08_M_0_254_1_SNA != 255u)
#   error "Enumeration constant <I_C08_M_0_254_1_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_M_0_254_1_SNA (255u)
#  define I_C08_M_0_254_1_SNA ((c08_m_0_254_1)255u)
# endif

# define Rte_TypeDef_c08_m_0_600_2k5
typedef uint8 c08_m_0_600_2k5;
# define c08_m_0_600_2k5_LowerLimit ((c08_m_0_600_2k5)0u)
# define c08_m_0_600_2k5_UpperLimit ((c08_m_0_600_2k5)255u)
# define Rte_InvalidValue_c08_m_0_600_2k5 ((c08_m_0_600_2k5)255u)
# if (defined RTE_CONST_I_C08_M_0_600_2K5_SNA) || (defined I_C08_M_0_600_2K5_SNA)
#  if (!defined RTE_CONST_I_C08_M_0_600_2K5_SNA) || (RTE_CONST_I_C08_M_0_600_2K5_SNA != 255u)
#   error "Enumeration constant <I_C08_M_0_600_2K5_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_M_0_600_2K5_SNA (255u)
#  define I_C08_M_0_600_2K5_SNA ((c08_m_0_600_2k5)255u)
# endif

# define Rte_TypeDef_c08_m_m12k7_12k7_0k1
typedef uint8 c08_m_m12k7_12k7_0k1;
# define c08_m_m12k7_12k7_0k1_LowerLimit ((c08_m_m12k7_12k7_0k1)0u)
# define c08_m_m12k7_12k7_0k1_UpperLimit ((c08_m_m12k7_12k7_0k1)255u)
# define Rte_InvalidValue_c08_m_m12k7_12k7_0k1 ((c08_m_m12k7_12k7_0k1)255u)
# if (defined RTE_CONST_I_C08_M_M12K7_12K7_0K1_SNA) || (defined I_C08_M_M12K7_12K7_0K1_SNA)
#  if (!defined RTE_CONST_I_C08_M_M12K7_12K7_0K1_SNA) || (RTE_CONST_I_C08_M_M12K7_12K7_0K1_SNA != 255u)
#   error "Enumeration constant <I_C08_M_M12K7_12K7_0K1_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_M_M12K7_12K7_0K1_SNA (255u)
#  define I_C08_M_M12K7_12K7_0K1_SNA ((c08_m_m12k7_12k7_0k1)255u)
# endif

# define Rte_TypeDef_c08_m_p_s_m127_127_1
typedef uint8 c08_m_p_s_m127_127_1;
# define c08_m_p_s_m127_127_1_LowerLimit ((c08_m_p_s_m127_127_1)0u)
# define c08_m_p_s_m127_127_1_UpperLimit ((c08_m_p_s_m127_127_1)255u)
# define Rte_InvalidValue_c08_m_p_s_m127_127_1 ((c08_m_p_s_m127_127_1)255u)
# if (defined RTE_CONST_I_C08_M_P_S_M127_127_1_SNA) || (defined I_C08_M_P_S_M127_127_1_SNA)
#  if (!defined RTE_CONST_I_C08_M_P_S_M127_127_1_SNA) || (RTE_CONST_I_C08_M_P_S_M127_127_1_SNA != 255u)
#   error "Enumeration constant <I_C08_M_P_S_M127_127_1_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_M_P_S_M127_127_1_SNA (255u)
#  define I_C08_M_P_S_M127_127_1_SNA ((c08_m_p_s_m127_127_1)255u)
# endif

# define Rte_TypeDef_c08_m_p_sq_s_m10k24_10k08_0k08
typedef uint8 c08_m_p_sq_s_m10k24_10k08_0k08;
# define c08_m_p_sq_s_m10k24_10k08_0k08_LowerLimit ((c08_m_p_sq_s_m10k24_10k08_0k08)0u)
# define c08_m_p_sq_s_m10k24_10k08_0k08_UpperLimit ((c08_m_p_sq_s_m10k24_10k08_0k08)255u)
# define Rte_InvalidValue_c08_m_p_sq_s_m10k24_10k08_0k08 ((c08_m_p_sq_s_m10k24_10k08_0k08)255u)
# if (defined RTE_CONST_I_C08_M_P_SQ_S_M10K24_10K08_0K08_SNA) || (defined I_C08_M_P_SQ_S_M10K24_10K08_0K08_SNA)
#  if (!defined RTE_CONST_I_C08_M_P_SQ_S_M10K24_10K08_0K08_SNA) || (RTE_CONST_I_C08_M_P_SQ_S_M10K24_10K08_0K08_SNA != 255u)
#   error "Enumeration constant <I_C08_M_P_SQ_S_M10K24_10K08_0K08_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_M_P_SQ_S_M10K24_10K08_0K08_SNA (255u)
#  define I_C08_M_P_SQ_S_M10K24_10K08_0K08_SNA ((c08_m_p_sq_s_m10k24_10k08_0k08)255u)
# endif

# define Rte_TypeDef_c08_m_p_sq_s_m2k56_2k52_0k02
typedef uint8 c08_m_p_sq_s_m2k56_2k52_0k02;
# define c08_m_p_sq_s_m2k56_2k52_0k02_LowerLimit ((c08_m_p_sq_s_m2k56_2k52_0k02)0u)
# define c08_m_p_sq_s_m2k56_2k52_0k02_UpperLimit ((c08_m_p_sq_s_m2k56_2k52_0k02)255u)
# define Rte_InvalidValue_c08_m_p_sq_s_m2k56_2k52_0k02 ((c08_m_p_sq_s_m2k56_2k52_0k02)255u)
# if (defined RTE_CONST_I_C08_M_P_SQ_S_M2K56_2K52_0K02_SNA) || (defined I_C08_M_P_SQ_S_M2K56_2K52_0K02_SNA)
#  if (!defined RTE_CONST_I_C08_M_P_SQ_S_M2K56_2K52_0K02_SNA) || (RTE_CONST_I_C08_M_P_SQ_S_M2K56_2K52_0K02_SNA != 255u)
#   error "Enumeration constant <I_C08_M_P_SQ_S_M2K56_2K52_0K02_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_M_P_SQ_S_M2K56_2K52_0K02_SNA (255u)
#  define I_C08_M_P_SQ_S_M2K56_2K52_0K02_SNA ((c08_m_p_sq_s_m2k56_2k52_0k02)255u)
# endif

# define Rte_TypeDef_c08_min_0_59_1
typedef uint8 c08_min_0_59_1;
# define c08_min_0_59_1_LowerLimit ((c08_min_0_59_1)0u)
# define c08_min_0_59_1_UpperLimit ((c08_min_0_59_1)255u)
# define Rte_InvalidValue_c08_min_0_59_1 ((c08_min_0_59_1)255u)
# if (defined RTE_CONST_I_C08_MIN_0_59_1_SNA) || (defined I_C08_MIN_0_59_1_SNA)
#  if (!defined RTE_CONST_I_C08_MIN_0_59_1_SNA) || (RTE_CONST_I_C08_MIN_0_59_1_SNA != 255u)
#   error "Enumeration constant <I_C08_MIN_0_59_1_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_MIN_0_59_1_SNA (255u)
#  define I_C08_MIN_0_59_1_SNA ((c08_min_0_59_1)255u)
# endif

# define Rte_TypeDef_c08_mm_m127_127_1
typedef uint8 c08_mm_m127_127_1;
# define c08_mm_m127_127_1_LowerLimit ((c08_mm_m127_127_1)0u)
# define c08_mm_m127_127_1_UpperLimit ((c08_mm_m127_127_1)255u)
# define Rte_InvalidValue_c08_mm_m127_127_1 ((c08_mm_m127_127_1)255u)
# if (defined RTE_CONST_I_C08_MM_M127_127_1_SNA) || (defined I_C08_MM_M127_127_1_SNA)
#  if (!defined RTE_CONST_I_C08_MM_M127_127_1_SNA) || (RTE_CONST_I_C08_MM_M127_127_1_SNA != 255u)
#   error "Enumeration constant <I_C08_MM_M127_127_1_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_MM_M127_127_1_SNA (255u)
#  define I_C08_MM_M127_127_1_SNA ((c08_mm_m127_127_1)255u)
# endif

# define Rte_TypeDef_c08_perc_0_100_0k4
typedef uint8 c08_perc_0_100_0k4;
# define c08_perc_0_100_0k4_LowerLimit ((c08_perc_0_100_0k4)0u)
# define c08_perc_0_100_0k4_UpperLimit ((c08_perc_0_100_0k4)255u)
# define Rte_InvalidValue_c08_perc_0_100_0k4 ((c08_perc_0_100_0k4)255u)
# if (defined RTE_CONST_I_C08_PERC_0_100_0K4_SNA) || (defined I_C08_PERC_0_100_0K4_SNA)
#  if (!defined RTE_CONST_I_C08_PERC_0_100_0K4_SNA) || (RTE_CONST_I_C08_PERC_0_100_0K4_SNA != 255u)
#   error "Enumeration constant <I_C08_PERC_0_100_0K4_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_PERC_0_100_0K4_SNA (255u)
#  define I_C08_PERC_0_100_0K4_SNA ((c08_perc_0_100_0k4)255u)
# endif

# define Rte_TypeDef_c08_s_0_59_1
typedef uint8 c08_s_0_59_1;
# define c08_s_0_59_1_LowerLimit ((c08_s_0_59_1)0u)
# define c08_s_0_59_1_UpperLimit ((c08_s_0_59_1)255u)
# define Rte_InvalidValue_c08_s_0_59_1 ((c08_s_0_59_1)255u)
# if (defined RTE_CONST_I_C08_S_0_59_1_SNA) || (defined I_C08_S_0_59_1_SNA)
#  if (!defined RTE_CONST_I_C08_S_0_59_1_SNA) || (RTE_CONST_I_C08_S_0_59_1_SNA != 255u)
#   error "Enumeration constant <I_C08_S_0_59_1_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C08_S_0_59_1_SNA (255u)
#  define I_C08_S_0_59_1_SNA ((c08_s_0_59_1)255u)
# endif

# define Rte_TypeDef_c09_ADAS_HwVer
typedef uint16 c09_ADAS_HwVer;
# define c09_ADAS_HwVer_LowerLimit ((c09_ADAS_HwVer)0u)
# define c09_ADAS_HwVer_UpperLimit ((c09_ADAS_HwVer)511u)
# if (defined RTE_CONST_I_C09_ADAS_HWVER_UNKNOWN) || (defined I_C09_ADAS_HWVER_UNKNOWN)
#  if (!defined RTE_CONST_I_C09_ADAS_HWVER_UNKNOWN) || (RTE_CONST_I_C09_ADAS_HWVER_UNKNOWN != 0u)
#   error "Enumeration constant <I_C09_ADAS_HWVER_UNKNOWN> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C09_ADAS_HWVER_UNKNOWN (0u)
#  define I_C09_ADAS_HWVER_UNKNOWN ((c09_ADAS_HwVer)0u)
# endif

# define Rte_TypeDef_c09_m_0to511_0d01
typedef uint16 c09_m_0to511_0d01;
# define c09_m_0to511_0d01_LowerLimit ((c09_m_0to511_0d01)0u)
# define c09_m_0to511_0d01_UpperLimit ((c09_m_0to511_0d01)511u)
# define Rte_InvalidValue_c09_m_0to511_0d01 ((c09_m_0to511_0d01)511u)
# if (defined RTE_CONST_I_C09_M_0TO511_0D01_SNA) || (defined I_C09_M_0TO511_0D01_SNA)
#  if (!defined RTE_CONST_I_C09_M_0TO511_0D01_SNA) || (RTE_CONST_I_C09_M_0TO511_0D01_SNA != 511u)
#   error "Enumeration constant <I_C09_M_0TO511_0D01_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C09_M_0TO511_0D01_SNA (511u)
#  define I_C09_M_0TO511_0D01_SNA ((c09_m_0to511_0d01)511u)
# endif

# define Rte_TypeDef_c09_m_m2d56_p2d54_0d01
typedef uint16 c09_m_m2d56_p2d54_0d01;
# define c09_m_m2d56_p2d54_0d01_LowerLimit ((c09_m_m2d56_p2d54_0d01)0u)
# define c09_m_m2d56_p2d54_0d01_UpperLimit ((c09_m_m2d56_p2d54_0d01)511u)
# define Rte_InvalidValue_c09_m_m2d56_p2d54_0d01 ((c09_m_m2d56_p2d54_0d01)511u)
# if (defined RTE_CONST_I_C09_M_M2D56_P2D54_0D01_SNA) || (defined I_C09_M_M2D56_P2D54_0D01_SNA)
#  if (!defined RTE_CONST_I_C09_M_M2D56_P2D54_0D01_SNA) || (RTE_CONST_I_C09_M_M2D56_P2D54_0D01_SNA != 511u)
#   error "Enumeration constant <I_C09_M_M2D56_P2D54_0D01_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C09_M_M2D56_P2D54_0D01_SNA (511u)
#  define I_C09_M_M2D56_P2D54_0D01_SNA ((c09_m_m2d56_p2d54_0d01)511u)
# endif

# define Rte_TypeDef_c09_m_p_s_m12k8_89k2_0k2
typedef uint16 c09_m_p_s_m12k8_89k2_0k2;
# define c09_m_p_s_m12k8_89k2_0k2_LowerLimit ((c09_m_p_s_m12k8_89k2_0k2)0u)
# define c09_m_p_s_m12k8_89k2_0k2_UpperLimit ((c09_m_p_s_m12k8_89k2_0k2)511u)
# define Rte_InvalidValue_c09_m_p_s_m12k8_89k2_0k2 ((c09_m_p_s_m12k8_89k2_0k2)511u)
# if (defined RTE_CONST_I_C09_M_P_S_M12K8_89K2_0K2_SNA) || (defined I_C09_M_P_S_M12K8_89K2_0K2_SNA)
#  if (!defined RTE_CONST_I_C09_M_P_S_M12K8_89K2_0K2_SNA) || (RTE_CONST_I_C09_M_P_S_M12K8_89K2_0K2_SNA != 511u)
#   error "Enumeration constant <I_C09_M_P_S_M12K8_89K2_0K2_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C09_M_P_S_M12K8_89K2_0K2_SNA (511u)
#  define I_C09_M_P_S_M12K8_89K2_0K2_SNA ((c09_m_p_s_m12k8_89k2_0k2)511u)
# endif

# define Rte_TypeDef_c09_ms_0_510_5
typedef uint16 c09_ms_0_510_5;
# define c09_ms_0_510_5_LowerLimit ((c09_ms_0_510_5)0u)
# define c09_ms_0_510_5_UpperLimit ((c09_ms_0_510_5)511u)
# define Rte_InvalidValue_c09_ms_0_510_5 ((c09_ms_0_510_5)511u)
# if (defined RTE_CONST_I_C09_MS_0_510_5_OLDER) || (defined I_C09_MS_0_510_5_OLDER)
#  if (!defined RTE_CONST_I_C09_MS_0_510_5_OLDER) || (RTE_CONST_I_C09_MS_0_510_5_OLDER != 510u)
#   error "Enumeration constant <I_C09_MS_0_510_5_OLDER> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C09_MS_0_510_5_OLDER (510u)
#  define I_C09_MS_0_510_5_OLDER ((c09_ms_0_510_5)510u)
# endif
# if (defined RTE_CONST_I_C09_MS_0_510_5_SNA) || (defined I_C09_MS_0_510_5_SNA)
#  if (!defined RTE_CONST_I_C09_MS_0_510_5_SNA) || (RTE_CONST_I_C09_MS_0_510_5_SNA != 511u)
#   error "Enumeration constant <I_C09_MS_0_510_5_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C09_MS_0_510_5_SNA (511u)
#  define I_C09_MS_0_510_5_SNA ((c09_ms_0_510_5)511u)
# endif

# define Rte_TypeDef_c10_1_p_sq_m_m0k000512_0k00051
typedef uint16 c10_1_p_sq_m_m0k000512_0k00051;
# define c10_1_p_sq_m_m0k000512_0k00051_LowerLimit ((c10_1_p_sq_m_m0k000512_0k00051)0u)
# define c10_1_p_sq_m_m0k000512_0k00051_UpperLimit ((c10_1_p_sq_m_m0k000512_0k00051)1023u)
# define Rte_InvalidValue_c10_1_p_sq_m_m0k000512_0k00051 ((c10_1_p_sq_m_m0k000512_0k00051)1023u)
# if (defined RTE_CONST_I_C10_1_P_SQ_M_M0K000512_0K00051_SNA) || (defined I_C10_1_P_SQ_M_M0K000512_0K00051_SNA)
#  if (!defined RTE_CONST_I_C10_1_P_SQ_M_M0K000512_0K00051_SNA) || (RTE_CONST_I_C10_1_P_SQ_M_M0K000512_0K00051_SNA != 1023u)
#   error "Enumeration constant <I_C10_1_P_SQ_M_M0K000512_0K00051_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_1_P_SQ_M_M0K000512_0K00051_SNA (1023u)
#  define I_C10_1_P_SQ_M_M0K000512_0K00051_SNA ((c10_1_p_sq_m_m0k000512_0k00051)1023u)
# endif

# define Rte_TypeDef_c10_ADAS_CountryCode
typedef uint16 c10_ADAS_CountryCode;
# define c10_ADAS_CountryCode_LowerLimit ((c10_ADAS_CountryCode)0u)
# define c10_ADAS_CountryCode_UpperLimit ((c10_ADAS_CountryCode)1023u)
# define Rte_InvalidValue_c10_ADAS_CountryCode ((c10_ADAS_CountryCode)1023u)
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_ESC_CODE) || (defined I_C10_ADAS_COUNTRYCODE_ESC_CODE)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_ESC_CODE) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_ESC_CODE != 0u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_ESC_CODE> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_ESC_CODE (0u)
#  define I_C10_ADAS_COUNTRYCODE_ESC_CODE ((c10_ADAS_CountryCode)0u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_AFG) || (defined I_C10_ADAS_COUNTRYCODE_AFG)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_AFG) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_AFG != 4u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_AFG> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_AFG (4u)
#  define I_C10_ADAS_COUNTRYCODE_AFG ((c10_ADAS_CountryCode)4u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_ALB) || (defined I_C10_ADAS_COUNTRYCODE_ALB)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_ALB) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_ALB != 8u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_ALB> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_ALB (8u)
#  define I_C10_ADAS_COUNTRYCODE_ALB ((c10_ADAS_CountryCode)8u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_ATA) || (defined I_C10_ADAS_COUNTRYCODE_ATA)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_ATA) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_ATA != 10u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_ATA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_ATA (10u)
#  define I_C10_ADAS_COUNTRYCODE_ATA ((c10_ADAS_CountryCode)10u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_DZA) || (defined I_C10_ADAS_COUNTRYCODE_DZA)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_DZA) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_DZA != 12u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_DZA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_DZA (12u)
#  define I_C10_ADAS_COUNTRYCODE_DZA ((c10_ADAS_CountryCode)12u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_ASM) || (defined I_C10_ADAS_COUNTRYCODE_ASM)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_ASM) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_ASM != 16u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_ASM> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_ASM (16u)
#  define I_C10_ADAS_COUNTRYCODE_ASM ((c10_ADAS_CountryCode)16u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_AND) || (defined I_C10_ADAS_COUNTRYCODE_AND)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_AND) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_AND != 20u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_AND> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_AND (20u)
#  define I_C10_ADAS_COUNTRYCODE_AND ((c10_ADAS_CountryCode)20u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_AGO) || (defined I_C10_ADAS_COUNTRYCODE_AGO)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_AGO) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_AGO != 24u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_AGO> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_AGO (24u)
#  define I_C10_ADAS_COUNTRYCODE_AGO ((c10_ADAS_CountryCode)24u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_ATG) || (defined I_C10_ADAS_COUNTRYCODE_ATG)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_ATG) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_ATG != 28u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_ATG> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_ATG (28u)
#  define I_C10_ADAS_COUNTRYCODE_ATG ((c10_ADAS_CountryCode)28u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_AZE) || (defined I_C10_ADAS_COUNTRYCODE_AZE)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_AZE) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_AZE != 31u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_AZE> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_AZE (31u)
#  define I_C10_ADAS_COUNTRYCODE_AZE ((c10_ADAS_CountryCode)31u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_ARG) || (defined I_C10_ADAS_COUNTRYCODE_ARG)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_ARG) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_ARG != 32u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_ARG> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_ARG (32u)
#  define I_C10_ADAS_COUNTRYCODE_ARG ((c10_ADAS_CountryCode)32u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_AUS) || (defined I_C10_ADAS_COUNTRYCODE_AUS)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_AUS) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_AUS != 36u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_AUS> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_AUS (36u)
#  define I_C10_ADAS_COUNTRYCODE_AUS ((c10_ADAS_CountryCode)36u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_AUT) || (defined I_C10_ADAS_COUNTRYCODE_AUT)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_AUT) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_AUT != 40u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_AUT> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_AUT (40u)
#  define I_C10_ADAS_COUNTRYCODE_AUT ((c10_ADAS_CountryCode)40u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_BHS) || (defined I_C10_ADAS_COUNTRYCODE_BHS)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_BHS) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_BHS != 44u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_BHS> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_BHS (44u)
#  define I_C10_ADAS_COUNTRYCODE_BHS ((c10_ADAS_CountryCode)44u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_BHR) || (defined I_C10_ADAS_COUNTRYCODE_BHR)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_BHR) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_BHR != 48u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_BHR> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_BHR (48u)
#  define I_C10_ADAS_COUNTRYCODE_BHR ((c10_ADAS_CountryCode)48u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_BGD) || (defined I_C10_ADAS_COUNTRYCODE_BGD)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_BGD) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_BGD != 50u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_BGD> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_BGD (50u)
#  define I_C10_ADAS_COUNTRYCODE_BGD ((c10_ADAS_CountryCode)50u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_ARM) || (defined I_C10_ADAS_COUNTRYCODE_ARM)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_ARM) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_ARM != 51u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_ARM> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_ARM (51u)
#  define I_C10_ADAS_COUNTRYCODE_ARM ((c10_ADAS_CountryCode)51u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_BRB) || (defined I_C10_ADAS_COUNTRYCODE_BRB)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_BRB) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_BRB != 52u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_BRB> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_BRB (52u)
#  define I_C10_ADAS_COUNTRYCODE_BRB ((c10_ADAS_CountryCode)52u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_BEL) || (defined I_C10_ADAS_COUNTRYCODE_BEL)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_BEL) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_BEL != 56u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_BEL> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_BEL (56u)
#  define I_C10_ADAS_COUNTRYCODE_BEL ((c10_ADAS_CountryCode)56u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_BMU) || (defined I_C10_ADAS_COUNTRYCODE_BMU)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_BMU) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_BMU != 60u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_BMU> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_BMU (60u)
#  define I_C10_ADAS_COUNTRYCODE_BMU ((c10_ADAS_CountryCode)60u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_BTN) || (defined I_C10_ADAS_COUNTRYCODE_BTN)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_BTN) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_BTN != 64u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_BTN> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_BTN (64u)
#  define I_C10_ADAS_COUNTRYCODE_BTN ((c10_ADAS_CountryCode)64u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_BOL) || (defined I_C10_ADAS_COUNTRYCODE_BOL)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_BOL) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_BOL != 68u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_BOL> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_BOL (68u)
#  define I_C10_ADAS_COUNTRYCODE_BOL ((c10_ADAS_CountryCode)68u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_BIH) || (defined I_C10_ADAS_COUNTRYCODE_BIH)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_BIH) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_BIH != 70u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_BIH> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_BIH (70u)
#  define I_C10_ADAS_COUNTRYCODE_BIH ((c10_ADAS_CountryCode)70u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_BWA) || (defined I_C10_ADAS_COUNTRYCODE_BWA)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_BWA) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_BWA != 72u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_BWA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_BWA (72u)
#  define I_C10_ADAS_COUNTRYCODE_BWA ((c10_ADAS_CountryCode)72u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_BVT) || (defined I_C10_ADAS_COUNTRYCODE_BVT)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_BVT) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_BVT != 74u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_BVT> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_BVT (74u)
#  define I_C10_ADAS_COUNTRYCODE_BVT ((c10_ADAS_CountryCode)74u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_BRA) || (defined I_C10_ADAS_COUNTRYCODE_BRA)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_BRA) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_BRA != 76u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_BRA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_BRA (76u)
#  define I_C10_ADAS_COUNTRYCODE_BRA ((c10_ADAS_CountryCode)76u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_BLZ) || (defined I_C10_ADAS_COUNTRYCODE_BLZ)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_BLZ) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_BLZ != 84u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_BLZ> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_BLZ (84u)
#  define I_C10_ADAS_COUNTRYCODE_BLZ ((c10_ADAS_CountryCode)84u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_IOT) || (defined I_C10_ADAS_COUNTRYCODE_IOT)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_IOT) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_IOT != 86u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_IOT> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_IOT (86u)
#  define I_C10_ADAS_COUNTRYCODE_IOT ((c10_ADAS_CountryCode)86u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_SLB) || (defined I_C10_ADAS_COUNTRYCODE_SLB)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_SLB) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_SLB != 90u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_SLB> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_SLB (90u)
#  define I_C10_ADAS_COUNTRYCODE_SLB ((c10_ADAS_CountryCode)90u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_VGB) || (defined I_C10_ADAS_COUNTRYCODE_VGB)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_VGB) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_VGB != 92u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_VGB> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_VGB (92u)
#  define I_C10_ADAS_COUNTRYCODE_VGB ((c10_ADAS_CountryCode)92u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_BRN) || (defined I_C10_ADAS_COUNTRYCODE_BRN)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_BRN) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_BRN != 96u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_BRN> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_BRN (96u)
#  define I_C10_ADAS_COUNTRYCODE_BRN ((c10_ADAS_CountryCode)96u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_BGR) || (defined I_C10_ADAS_COUNTRYCODE_BGR)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_BGR) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_BGR != 100u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_BGR> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_BGR (100u)
#  define I_C10_ADAS_COUNTRYCODE_BGR ((c10_ADAS_CountryCode)100u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_SNA) || (defined I_C10_ADAS_COUNTRYCODE_SNA)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_SNA) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_SNA != 1023u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_SNA (1023u)
#  define I_C10_ADAS_COUNTRYCODE_SNA ((c10_ADAS_CountryCode)1023u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_MMR) || (defined I_C10_ADAS_COUNTRYCODE_MMR)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_MMR) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_MMR != 104u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_MMR> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_MMR (104u)
#  define I_C10_ADAS_COUNTRYCODE_MMR ((c10_ADAS_CountryCode)104u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_BDI) || (defined I_C10_ADAS_COUNTRYCODE_BDI)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_BDI) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_BDI != 108u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_BDI> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_BDI (108u)
#  define I_C10_ADAS_COUNTRYCODE_BDI ((c10_ADAS_CountryCode)108u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_BLR) || (defined I_C10_ADAS_COUNTRYCODE_BLR)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_BLR) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_BLR != 112u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_BLR> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_BLR (112u)
#  define I_C10_ADAS_COUNTRYCODE_BLR ((c10_ADAS_CountryCode)112u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_KHM) || (defined I_C10_ADAS_COUNTRYCODE_KHM)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_KHM) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_KHM != 116u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_KHM> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_KHM (116u)
#  define I_C10_ADAS_COUNTRYCODE_KHM ((c10_ADAS_CountryCode)116u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_CMR) || (defined I_C10_ADAS_COUNTRYCODE_CMR)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_CMR) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_CMR != 120u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_CMR> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_CMR (120u)
#  define I_C10_ADAS_COUNTRYCODE_CMR ((c10_ADAS_CountryCode)120u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_CAN) || (defined I_C10_ADAS_COUNTRYCODE_CAN)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_CAN) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_CAN != 124u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_CAN> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_CAN (124u)
#  define I_C10_ADAS_COUNTRYCODE_CAN ((c10_ADAS_CountryCode)124u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_CPV) || (defined I_C10_ADAS_COUNTRYCODE_CPV)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_CPV) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_CPV != 132u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_CPV> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_CPV (132u)
#  define I_C10_ADAS_COUNTRYCODE_CPV ((c10_ADAS_CountryCode)132u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_CYM) || (defined I_C10_ADAS_COUNTRYCODE_CYM)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_CYM) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_CYM != 136u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_CYM> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_CYM (136u)
#  define I_C10_ADAS_COUNTRYCODE_CYM ((c10_ADAS_CountryCode)136u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_CAF) || (defined I_C10_ADAS_COUNTRYCODE_CAF)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_CAF) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_CAF != 140u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_CAF> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_CAF (140u)
#  define I_C10_ADAS_COUNTRYCODE_CAF ((c10_ADAS_CountryCode)140u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_LKA) || (defined I_C10_ADAS_COUNTRYCODE_LKA)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_LKA) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_LKA != 144u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_LKA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_LKA (144u)
#  define I_C10_ADAS_COUNTRYCODE_LKA ((c10_ADAS_CountryCode)144u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_TCD) || (defined I_C10_ADAS_COUNTRYCODE_TCD)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_TCD) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_TCD != 148u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_TCD> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_TCD (148u)
#  define I_C10_ADAS_COUNTRYCODE_TCD ((c10_ADAS_CountryCode)148u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_CHL) || (defined I_C10_ADAS_COUNTRYCODE_CHL)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_CHL) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_CHL != 152u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_CHL> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_CHL (152u)
#  define I_C10_ADAS_COUNTRYCODE_CHL ((c10_ADAS_CountryCode)152u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_CHN) || (defined I_C10_ADAS_COUNTRYCODE_CHN)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_CHN) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_CHN != 156u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_CHN> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_CHN (156u)
#  define I_C10_ADAS_COUNTRYCODE_CHN ((c10_ADAS_CountryCode)156u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_TWN) || (defined I_C10_ADAS_COUNTRYCODE_TWN)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_TWN) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_TWN != 158u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_TWN> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_TWN (158u)
#  define I_C10_ADAS_COUNTRYCODE_TWN ((c10_ADAS_CountryCode)158u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_CXR) || (defined I_C10_ADAS_COUNTRYCODE_CXR)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_CXR) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_CXR != 162u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_CXR> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_CXR (162u)
#  define I_C10_ADAS_COUNTRYCODE_CXR ((c10_ADAS_CountryCode)162u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_CCK) || (defined I_C10_ADAS_COUNTRYCODE_CCK)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_CCK) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_CCK != 166u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_CCK> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_CCK (166u)
#  define I_C10_ADAS_COUNTRYCODE_CCK ((c10_ADAS_CountryCode)166u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_COL) || (defined I_C10_ADAS_COUNTRYCODE_COL)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_COL) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_COL != 170u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_COL> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_COL (170u)
#  define I_C10_ADAS_COUNTRYCODE_COL ((c10_ADAS_CountryCode)170u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_COM) || (defined I_C10_ADAS_COUNTRYCODE_COM)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_COM) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_COM != 174u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_COM> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_COM (174u)
#  define I_C10_ADAS_COUNTRYCODE_COM ((c10_ADAS_CountryCode)174u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_MYT) || (defined I_C10_ADAS_COUNTRYCODE_MYT)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_MYT) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_MYT != 175u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_MYT> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_MYT (175u)
#  define I_C10_ADAS_COUNTRYCODE_MYT ((c10_ADAS_CountryCode)175u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_COG) || (defined I_C10_ADAS_COUNTRYCODE_COG)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_COG) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_COG != 178u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_COG> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_COG (178u)
#  define I_C10_ADAS_COUNTRYCODE_COG ((c10_ADAS_CountryCode)178u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_COD) || (defined I_C10_ADAS_COUNTRYCODE_COD)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_COD) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_COD != 180u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_COD> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_COD (180u)
#  define I_C10_ADAS_COUNTRYCODE_COD ((c10_ADAS_CountryCode)180u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_COK) || (defined I_C10_ADAS_COUNTRYCODE_COK)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_COK) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_COK != 184u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_COK> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_COK (184u)
#  define I_C10_ADAS_COUNTRYCODE_COK ((c10_ADAS_CountryCode)184u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_CRI) || (defined I_C10_ADAS_COUNTRYCODE_CRI)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_CRI) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_CRI != 188u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_CRI> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_CRI (188u)
#  define I_C10_ADAS_COUNTRYCODE_CRI ((c10_ADAS_CountryCode)188u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_HRV) || (defined I_C10_ADAS_COUNTRYCODE_HRV)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_HRV) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_HRV != 191u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_HRV> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_HRV (191u)
#  define I_C10_ADAS_COUNTRYCODE_HRV ((c10_ADAS_CountryCode)191u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_CUB) || (defined I_C10_ADAS_COUNTRYCODE_CUB)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_CUB) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_CUB != 192u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_CUB> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_CUB (192u)
#  define I_C10_ADAS_COUNTRYCODE_CUB ((c10_ADAS_CountryCode)192u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_CYP) || (defined I_C10_ADAS_COUNTRYCODE_CYP)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_CYP) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_CYP != 196u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_CYP> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_CYP (196u)
#  define I_C10_ADAS_COUNTRYCODE_CYP ((c10_ADAS_CountryCode)196u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_CZE) || (defined I_C10_ADAS_COUNTRYCODE_CZE)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_CZE) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_CZE != 203u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_CZE> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_CZE (203u)
#  define I_C10_ADAS_COUNTRYCODE_CZE ((c10_ADAS_CountryCode)203u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_BEN) || (defined I_C10_ADAS_COUNTRYCODE_BEN)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_BEN) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_BEN != 204u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_BEN> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_BEN (204u)
#  define I_C10_ADAS_COUNTRYCODE_BEN ((c10_ADAS_CountryCode)204u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_DNK) || (defined I_C10_ADAS_COUNTRYCODE_DNK)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_DNK) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_DNK != 208u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_DNK> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_DNK (208u)
#  define I_C10_ADAS_COUNTRYCODE_DNK ((c10_ADAS_CountryCode)208u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_DMA) || (defined I_C10_ADAS_COUNTRYCODE_DMA)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_DMA) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_DMA != 212u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_DMA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_DMA (212u)
#  define I_C10_ADAS_COUNTRYCODE_DMA ((c10_ADAS_CountryCode)212u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_DOM) || (defined I_C10_ADAS_COUNTRYCODE_DOM)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_DOM) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_DOM != 214u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_DOM> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_DOM (214u)
#  define I_C10_ADAS_COUNTRYCODE_DOM ((c10_ADAS_CountryCode)214u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_ECU) || (defined I_C10_ADAS_COUNTRYCODE_ECU)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_ECU) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_ECU != 218u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_ECU> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_ECU (218u)
#  define I_C10_ADAS_COUNTRYCODE_ECU ((c10_ADAS_CountryCode)218u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_SLV) || (defined I_C10_ADAS_COUNTRYCODE_SLV)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_SLV) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_SLV != 222u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_SLV> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_SLV (222u)
#  define I_C10_ADAS_COUNTRYCODE_SLV ((c10_ADAS_CountryCode)222u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_GNQ) || (defined I_C10_ADAS_COUNTRYCODE_GNQ)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_GNQ) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_GNQ != 226u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_GNQ> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_GNQ (226u)
#  define I_C10_ADAS_COUNTRYCODE_GNQ ((c10_ADAS_CountryCode)226u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_ETH) || (defined I_C10_ADAS_COUNTRYCODE_ETH)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_ETH) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_ETH != 231u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_ETH> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_ETH (231u)
#  define I_C10_ADAS_COUNTRYCODE_ETH ((c10_ADAS_CountryCode)231u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_ERI) || (defined I_C10_ADAS_COUNTRYCODE_ERI)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_ERI) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_ERI != 232u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_ERI> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_ERI (232u)
#  define I_C10_ADAS_COUNTRYCODE_ERI ((c10_ADAS_CountryCode)232u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_EST) || (defined I_C10_ADAS_COUNTRYCODE_EST)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_EST) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_EST != 233u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_EST> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_EST (233u)
#  define I_C10_ADAS_COUNTRYCODE_EST ((c10_ADAS_CountryCode)233u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_FRO) || (defined I_C10_ADAS_COUNTRYCODE_FRO)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_FRO) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_FRO != 234u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_FRO> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_FRO (234u)
#  define I_C10_ADAS_COUNTRYCODE_FRO ((c10_ADAS_CountryCode)234u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_FLK) || (defined I_C10_ADAS_COUNTRYCODE_FLK)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_FLK) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_FLK != 238u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_FLK> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_FLK (238u)
#  define I_C10_ADAS_COUNTRYCODE_FLK ((c10_ADAS_CountryCode)238u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_SGS) || (defined I_C10_ADAS_COUNTRYCODE_SGS)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_SGS) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_SGS != 239u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_SGS> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_SGS (239u)
#  define I_C10_ADAS_COUNTRYCODE_SGS ((c10_ADAS_CountryCode)239u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_FJI) || (defined I_C10_ADAS_COUNTRYCODE_FJI)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_FJI) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_FJI != 242u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_FJI> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_FJI (242u)
#  define I_C10_ADAS_COUNTRYCODE_FJI ((c10_ADAS_CountryCode)242u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_FIN) || (defined I_C10_ADAS_COUNTRYCODE_FIN)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_FIN) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_FIN != 246u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_FIN> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_FIN (246u)
#  define I_C10_ADAS_COUNTRYCODE_FIN ((c10_ADAS_CountryCode)246u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_ALA) || (defined I_C10_ADAS_COUNTRYCODE_ALA)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_ALA) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_ALA != 248u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_ALA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_ALA (248u)
#  define I_C10_ADAS_COUNTRYCODE_ALA ((c10_ADAS_CountryCode)248u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_FRA) || (defined I_C10_ADAS_COUNTRYCODE_FRA)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_FRA) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_FRA != 250u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_FRA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_FRA (250u)
#  define I_C10_ADAS_COUNTRYCODE_FRA ((c10_ADAS_CountryCode)250u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_GUF) || (defined I_C10_ADAS_COUNTRYCODE_GUF)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_GUF) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_GUF != 254u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_GUF> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_GUF (254u)
#  define I_C10_ADAS_COUNTRYCODE_GUF ((c10_ADAS_CountryCode)254u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_PYF) || (defined I_C10_ADAS_COUNTRYCODE_PYF)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_PYF) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_PYF != 258u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_PYF> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_PYF (258u)
#  define I_C10_ADAS_COUNTRYCODE_PYF ((c10_ADAS_CountryCode)258u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_ATF) || (defined I_C10_ADAS_COUNTRYCODE_ATF)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_ATF) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_ATF != 260u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_ATF> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_ATF (260u)
#  define I_C10_ADAS_COUNTRYCODE_ATF ((c10_ADAS_CountryCode)260u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_DJI) || (defined I_C10_ADAS_COUNTRYCODE_DJI)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_DJI) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_DJI != 262u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_DJI> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_DJI (262u)
#  define I_C10_ADAS_COUNTRYCODE_DJI ((c10_ADAS_CountryCode)262u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_GAB) || (defined I_C10_ADAS_COUNTRYCODE_GAB)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_GAB) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_GAB != 266u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_GAB> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_GAB (266u)
#  define I_C10_ADAS_COUNTRYCODE_GAB ((c10_ADAS_CountryCode)266u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_GEO) || (defined I_C10_ADAS_COUNTRYCODE_GEO)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_GEO) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_GEO != 268u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_GEO> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_GEO (268u)
#  define I_C10_ADAS_COUNTRYCODE_GEO ((c10_ADAS_CountryCode)268u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_GMB) || (defined I_C10_ADAS_COUNTRYCODE_GMB)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_GMB) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_GMB != 270u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_GMB> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_GMB (270u)
#  define I_C10_ADAS_COUNTRYCODE_GMB ((c10_ADAS_CountryCode)270u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_PSE) || (defined I_C10_ADAS_COUNTRYCODE_PSE)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_PSE) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_PSE != 275u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_PSE> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_PSE (275u)
#  define I_C10_ADAS_COUNTRYCODE_PSE ((c10_ADAS_CountryCode)275u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_DEU) || (defined I_C10_ADAS_COUNTRYCODE_DEU)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_DEU) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_DEU != 276u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_DEU> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_DEU (276u)
#  define I_C10_ADAS_COUNTRYCODE_DEU ((c10_ADAS_CountryCode)276u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_GHA) || (defined I_C10_ADAS_COUNTRYCODE_GHA)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_GHA) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_GHA != 288u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_GHA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_GHA (288u)
#  define I_C10_ADAS_COUNTRYCODE_GHA ((c10_ADAS_CountryCode)288u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_GIB) || (defined I_C10_ADAS_COUNTRYCODE_GIB)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_GIB) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_GIB != 292u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_GIB> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_GIB (292u)
#  define I_C10_ADAS_COUNTRYCODE_GIB ((c10_ADAS_CountryCode)292u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_KIR) || (defined I_C10_ADAS_COUNTRYCODE_KIR)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_KIR) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_KIR != 296u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_KIR> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_KIR (296u)
#  define I_C10_ADAS_COUNTRYCODE_KIR ((c10_ADAS_CountryCode)296u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_GRC) || (defined I_C10_ADAS_COUNTRYCODE_GRC)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_GRC) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_GRC != 300u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_GRC> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_GRC (300u)
#  define I_C10_ADAS_COUNTRYCODE_GRC ((c10_ADAS_CountryCode)300u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_GRL) || (defined I_C10_ADAS_COUNTRYCODE_GRL)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_GRL) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_GRL != 304u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_GRL> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_GRL (304u)
#  define I_C10_ADAS_COUNTRYCODE_GRL ((c10_ADAS_CountryCode)304u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_GRD) || (defined I_C10_ADAS_COUNTRYCODE_GRD)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_GRD) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_GRD != 308u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_GRD> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_GRD (308u)
#  define I_C10_ADAS_COUNTRYCODE_GRD ((c10_ADAS_CountryCode)308u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_GLP) || (defined I_C10_ADAS_COUNTRYCODE_GLP)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_GLP) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_GLP != 312u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_GLP> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_GLP (312u)
#  define I_C10_ADAS_COUNTRYCODE_GLP ((c10_ADAS_CountryCode)312u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_GUM) || (defined I_C10_ADAS_COUNTRYCODE_GUM)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_GUM) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_GUM != 316u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_GUM> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_GUM (316u)
#  define I_C10_ADAS_COUNTRYCODE_GUM ((c10_ADAS_CountryCode)316u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_GTM) || (defined I_C10_ADAS_COUNTRYCODE_GTM)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_GTM) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_GTM != 320u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_GTM> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_GTM (320u)
#  define I_C10_ADAS_COUNTRYCODE_GTM ((c10_ADAS_CountryCode)320u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_GIN) || (defined I_C10_ADAS_COUNTRYCODE_GIN)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_GIN) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_GIN != 324u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_GIN> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_GIN (324u)
#  define I_C10_ADAS_COUNTRYCODE_GIN ((c10_ADAS_CountryCode)324u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_GUY) || (defined I_C10_ADAS_COUNTRYCODE_GUY)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_GUY) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_GUY != 328u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_GUY> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_GUY (328u)
#  define I_C10_ADAS_COUNTRYCODE_GUY ((c10_ADAS_CountryCode)328u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_HTI) || (defined I_C10_ADAS_COUNTRYCODE_HTI)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_HTI) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_HTI != 332u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_HTI> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_HTI (332u)
#  define I_C10_ADAS_COUNTRYCODE_HTI ((c10_ADAS_CountryCode)332u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_HMD) || (defined I_C10_ADAS_COUNTRYCODE_HMD)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_HMD) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_HMD != 334u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_HMD> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_HMD (334u)
#  define I_C10_ADAS_COUNTRYCODE_HMD ((c10_ADAS_CountryCode)334u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_VAT) || (defined I_C10_ADAS_COUNTRYCODE_VAT)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_VAT) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_VAT != 336u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_VAT> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_VAT (336u)
#  define I_C10_ADAS_COUNTRYCODE_VAT ((c10_ADAS_CountryCode)336u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_HND) || (defined I_C10_ADAS_COUNTRYCODE_HND)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_HND) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_HND != 340u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_HND> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_HND (340u)
#  define I_C10_ADAS_COUNTRYCODE_HND ((c10_ADAS_CountryCode)340u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_HKG) || (defined I_C10_ADAS_COUNTRYCODE_HKG)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_HKG) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_HKG != 344u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_HKG> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_HKG (344u)
#  define I_C10_ADAS_COUNTRYCODE_HKG ((c10_ADAS_CountryCode)344u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_HUN) || (defined I_C10_ADAS_COUNTRYCODE_HUN)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_HUN) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_HUN != 348u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_HUN> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_HUN (348u)
#  define I_C10_ADAS_COUNTRYCODE_HUN ((c10_ADAS_CountryCode)348u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_ISL) || (defined I_C10_ADAS_COUNTRYCODE_ISL)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_ISL) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_ISL != 352u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_ISL> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_ISL (352u)
#  define I_C10_ADAS_COUNTRYCODE_ISL ((c10_ADAS_CountryCode)352u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_IND) || (defined I_C10_ADAS_COUNTRYCODE_IND)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_IND) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_IND != 356u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_IND> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_IND (356u)
#  define I_C10_ADAS_COUNTRYCODE_IND ((c10_ADAS_CountryCode)356u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_IDN) || (defined I_C10_ADAS_COUNTRYCODE_IDN)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_IDN) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_IDN != 360u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_IDN> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_IDN (360u)
#  define I_C10_ADAS_COUNTRYCODE_IDN ((c10_ADAS_CountryCode)360u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_IRN) || (defined I_C10_ADAS_COUNTRYCODE_IRN)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_IRN) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_IRN != 364u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_IRN> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_IRN (364u)
#  define I_C10_ADAS_COUNTRYCODE_IRN ((c10_ADAS_CountryCode)364u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_IRQ) || (defined I_C10_ADAS_COUNTRYCODE_IRQ)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_IRQ) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_IRQ != 368u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_IRQ> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_IRQ (368u)
#  define I_C10_ADAS_COUNTRYCODE_IRQ ((c10_ADAS_CountryCode)368u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_IRL) || (defined I_C10_ADAS_COUNTRYCODE_IRL)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_IRL) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_IRL != 372u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_IRL> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_IRL (372u)
#  define I_C10_ADAS_COUNTRYCODE_IRL ((c10_ADAS_CountryCode)372u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_ISR) || (defined I_C10_ADAS_COUNTRYCODE_ISR)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_ISR) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_ISR != 376u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_ISR> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_ISR (376u)
#  define I_C10_ADAS_COUNTRYCODE_ISR ((c10_ADAS_CountryCode)376u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_ITA) || (defined I_C10_ADAS_COUNTRYCODE_ITA)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_ITA) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_ITA != 380u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_ITA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_ITA (380u)
#  define I_C10_ADAS_COUNTRYCODE_ITA ((c10_ADAS_CountryCode)380u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_CIV) || (defined I_C10_ADAS_COUNTRYCODE_CIV)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_CIV) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_CIV != 384u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_CIV> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_CIV (384u)
#  define I_C10_ADAS_COUNTRYCODE_CIV ((c10_ADAS_CountryCode)384u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_JAM) || (defined I_C10_ADAS_COUNTRYCODE_JAM)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_JAM) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_JAM != 388u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_JAM> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_JAM (388u)
#  define I_C10_ADAS_COUNTRYCODE_JAM ((c10_ADAS_CountryCode)388u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_JPN) || (defined I_C10_ADAS_COUNTRYCODE_JPN)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_JPN) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_JPN != 392u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_JPN> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_JPN (392u)
#  define I_C10_ADAS_COUNTRYCODE_JPN ((c10_ADAS_CountryCode)392u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_KAZ) || (defined I_C10_ADAS_COUNTRYCODE_KAZ)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_KAZ) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_KAZ != 398u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_KAZ> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_KAZ (398u)
#  define I_C10_ADAS_COUNTRYCODE_KAZ ((c10_ADAS_CountryCode)398u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_JOR) || (defined I_C10_ADAS_COUNTRYCODE_JOR)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_JOR) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_JOR != 400u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_JOR> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_JOR (400u)
#  define I_C10_ADAS_COUNTRYCODE_JOR ((c10_ADAS_CountryCode)400u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_KEN) || (defined I_C10_ADAS_COUNTRYCODE_KEN)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_KEN) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_KEN != 404u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_KEN> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_KEN (404u)
#  define I_C10_ADAS_COUNTRYCODE_KEN ((c10_ADAS_CountryCode)404u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_PRK) || (defined I_C10_ADAS_COUNTRYCODE_PRK)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_PRK) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_PRK != 408u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_PRK> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_PRK (408u)
#  define I_C10_ADAS_COUNTRYCODE_PRK ((c10_ADAS_CountryCode)408u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_KOR) || (defined I_C10_ADAS_COUNTRYCODE_KOR)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_KOR) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_KOR != 410u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_KOR> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_KOR (410u)
#  define I_C10_ADAS_COUNTRYCODE_KOR ((c10_ADAS_CountryCode)410u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_KWT) || (defined I_C10_ADAS_COUNTRYCODE_KWT)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_KWT) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_KWT != 414u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_KWT> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_KWT (414u)
#  define I_C10_ADAS_COUNTRYCODE_KWT ((c10_ADAS_CountryCode)414u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_KGZ) || (defined I_C10_ADAS_COUNTRYCODE_KGZ)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_KGZ) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_KGZ != 417u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_KGZ> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_KGZ (417u)
#  define I_C10_ADAS_COUNTRYCODE_KGZ ((c10_ADAS_CountryCode)417u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_LAO) || (defined I_C10_ADAS_COUNTRYCODE_LAO)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_LAO) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_LAO != 418u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_LAO> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_LAO (418u)
#  define I_C10_ADAS_COUNTRYCODE_LAO ((c10_ADAS_CountryCode)418u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_LBN) || (defined I_C10_ADAS_COUNTRYCODE_LBN)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_LBN) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_LBN != 422u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_LBN> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_LBN (422u)
#  define I_C10_ADAS_COUNTRYCODE_LBN ((c10_ADAS_CountryCode)422u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_LSO) || (defined I_C10_ADAS_COUNTRYCODE_LSO)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_LSO) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_LSO != 426u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_LSO> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_LSO (426u)
#  define I_C10_ADAS_COUNTRYCODE_LSO ((c10_ADAS_CountryCode)426u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_LVA) || (defined I_C10_ADAS_COUNTRYCODE_LVA)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_LVA) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_LVA != 428u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_LVA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_LVA (428u)
#  define I_C10_ADAS_COUNTRYCODE_LVA ((c10_ADAS_CountryCode)428u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_LBR) || (defined I_C10_ADAS_COUNTRYCODE_LBR)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_LBR) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_LBR != 430u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_LBR> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_LBR (430u)
#  define I_C10_ADAS_COUNTRYCODE_LBR ((c10_ADAS_CountryCode)430u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_LBY) || (defined I_C10_ADAS_COUNTRYCODE_LBY)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_LBY) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_LBY != 434u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_LBY> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_LBY (434u)
#  define I_C10_ADAS_COUNTRYCODE_LBY ((c10_ADAS_CountryCode)434u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_LIE) || (defined I_C10_ADAS_COUNTRYCODE_LIE)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_LIE) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_LIE != 438u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_LIE> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_LIE (438u)
#  define I_C10_ADAS_COUNTRYCODE_LIE ((c10_ADAS_CountryCode)438u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_LTU) || (defined I_C10_ADAS_COUNTRYCODE_LTU)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_LTU) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_LTU != 440u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_LTU> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_LTU (440u)
#  define I_C10_ADAS_COUNTRYCODE_LTU ((c10_ADAS_CountryCode)440u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_LUX) || (defined I_C10_ADAS_COUNTRYCODE_LUX)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_LUX) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_LUX != 442u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_LUX> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_LUX (442u)
#  define I_C10_ADAS_COUNTRYCODE_LUX ((c10_ADAS_CountryCode)442u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_MAC) || (defined I_C10_ADAS_COUNTRYCODE_MAC)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_MAC) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_MAC != 446u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_MAC> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_MAC (446u)
#  define I_C10_ADAS_COUNTRYCODE_MAC ((c10_ADAS_CountryCode)446u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_MDG) || (defined I_C10_ADAS_COUNTRYCODE_MDG)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_MDG) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_MDG != 450u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_MDG> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_MDG (450u)
#  define I_C10_ADAS_COUNTRYCODE_MDG ((c10_ADAS_CountryCode)450u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_MWI) || (defined I_C10_ADAS_COUNTRYCODE_MWI)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_MWI) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_MWI != 454u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_MWI> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_MWI (454u)
#  define I_C10_ADAS_COUNTRYCODE_MWI ((c10_ADAS_CountryCode)454u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_MYS) || (defined I_C10_ADAS_COUNTRYCODE_MYS)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_MYS) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_MYS != 458u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_MYS> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_MYS (458u)
#  define I_C10_ADAS_COUNTRYCODE_MYS ((c10_ADAS_CountryCode)458u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_MDV) || (defined I_C10_ADAS_COUNTRYCODE_MDV)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_MDV) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_MDV != 462u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_MDV> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_MDV (462u)
#  define I_C10_ADAS_COUNTRYCODE_MDV ((c10_ADAS_CountryCode)462u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_MLI) || (defined I_C10_ADAS_COUNTRYCODE_MLI)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_MLI) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_MLI != 466u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_MLI> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_MLI (466u)
#  define I_C10_ADAS_COUNTRYCODE_MLI ((c10_ADAS_CountryCode)466u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_MLT) || (defined I_C10_ADAS_COUNTRYCODE_MLT)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_MLT) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_MLT != 470u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_MLT> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_MLT (470u)
#  define I_C10_ADAS_COUNTRYCODE_MLT ((c10_ADAS_CountryCode)470u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_MTQ) || (defined I_C10_ADAS_COUNTRYCODE_MTQ)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_MTQ) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_MTQ != 474u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_MTQ> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_MTQ (474u)
#  define I_C10_ADAS_COUNTRYCODE_MTQ ((c10_ADAS_CountryCode)474u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_MRT) || (defined I_C10_ADAS_COUNTRYCODE_MRT)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_MRT) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_MRT != 478u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_MRT> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_MRT (478u)
#  define I_C10_ADAS_COUNTRYCODE_MRT ((c10_ADAS_CountryCode)478u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_MUS) || (defined I_C10_ADAS_COUNTRYCODE_MUS)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_MUS) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_MUS != 480u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_MUS> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_MUS (480u)
#  define I_C10_ADAS_COUNTRYCODE_MUS ((c10_ADAS_CountryCode)480u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_MEX) || (defined I_C10_ADAS_COUNTRYCODE_MEX)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_MEX) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_MEX != 484u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_MEX> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_MEX (484u)
#  define I_C10_ADAS_COUNTRYCODE_MEX ((c10_ADAS_CountryCode)484u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_MCO) || (defined I_C10_ADAS_COUNTRYCODE_MCO)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_MCO) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_MCO != 492u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_MCO> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_MCO (492u)
#  define I_C10_ADAS_COUNTRYCODE_MCO ((c10_ADAS_CountryCode)492u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_MNG) || (defined I_C10_ADAS_COUNTRYCODE_MNG)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_MNG) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_MNG != 496u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_MNG> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_MNG (496u)
#  define I_C10_ADAS_COUNTRYCODE_MNG ((c10_ADAS_CountryCode)496u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_MDA) || (defined I_C10_ADAS_COUNTRYCODE_MDA)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_MDA) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_MDA != 498u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_MDA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_MDA (498u)
#  define I_C10_ADAS_COUNTRYCODE_MDA ((c10_ADAS_CountryCode)498u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_MNE) || (defined I_C10_ADAS_COUNTRYCODE_MNE)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_MNE) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_MNE != 499u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_MNE> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_MNE (499u)
#  define I_C10_ADAS_COUNTRYCODE_MNE ((c10_ADAS_CountryCode)499u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_MSR) || (defined I_C10_ADAS_COUNTRYCODE_MSR)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_MSR) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_MSR != 500u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_MSR> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_MSR (500u)
#  define I_C10_ADAS_COUNTRYCODE_MSR ((c10_ADAS_CountryCode)500u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_MAR) || (defined I_C10_ADAS_COUNTRYCODE_MAR)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_MAR) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_MAR != 504u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_MAR> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_MAR (504u)
#  define I_C10_ADAS_COUNTRYCODE_MAR ((c10_ADAS_CountryCode)504u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_MOZ) || (defined I_C10_ADAS_COUNTRYCODE_MOZ)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_MOZ) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_MOZ != 508u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_MOZ> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_MOZ (508u)
#  define I_C10_ADAS_COUNTRYCODE_MOZ ((c10_ADAS_CountryCode)508u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_OMN) || (defined I_C10_ADAS_COUNTRYCODE_OMN)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_OMN) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_OMN != 512u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_OMN> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_OMN (512u)
#  define I_C10_ADAS_COUNTRYCODE_OMN ((c10_ADAS_CountryCode)512u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_NAM) || (defined I_C10_ADAS_COUNTRYCODE_NAM)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_NAM) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_NAM != 516u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_NAM> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_NAM (516u)
#  define I_C10_ADAS_COUNTRYCODE_NAM ((c10_ADAS_CountryCode)516u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_NRU) || (defined I_C10_ADAS_COUNTRYCODE_NRU)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_NRU) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_NRU != 520u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_NRU> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_NRU (520u)
#  define I_C10_ADAS_COUNTRYCODE_NRU ((c10_ADAS_CountryCode)520u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_NPL) || (defined I_C10_ADAS_COUNTRYCODE_NPL)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_NPL) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_NPL != 524u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_NPL> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_NPL (524u)
#  define I_C10_ADAS_COUNTRYCODE_NPL ((c10_ADAS_CountryCode)524u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_NLD) || (defined I_C10_ADAS_COUNTRYCODE_NLD)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_NLD) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_NLD != 528u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_NLD> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_NLD (528u)
#  define I_C10_ADAS_COUNTRYCODE_NLD ((c10_ADAS_CountryCode)528u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_ANT) || (defined I_C10_ADAS_COUNTRYCODE_ANT)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_ANT) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_ANT != 530u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_ANT> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_ANT (530u)
#  define I_C10_ADAS_COUNTRYCODE_ANT ((c10_ADAS_CountryCode)530u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_ABW) || (defined I_C10_ADAS_COUNTRYCODE_ABW)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_ABW) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_ABW != 533u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_ABW> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_ABW (533u)
#  define I_C10_ADAS_COUNTRYCODE_ABW ((c10_ADAS_CountryCode)533u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_NCL) || (defined I_C10_ADAS_COUNTRYCODE_NCL)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_NCL) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_NCL != 540u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_NCL> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_NCL (540u)
#  define I_C10_ADAS_COUNTRYCODE_NCL ((c10_ADAS_CountryCode)540u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_VUT) || (defined I_C10_ADAS_COUNTRYCODE_VUT)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_VUT) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_VUT != 548u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_VUT> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_VUT (548u)
#  define I_C10_ADAS_COUNTRYCODE_VUT ((c10_ADAS_CountryCode)548u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_NZL) || (defined I_C10_ADAS_COUNTRYCODE_NZL)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_NZL) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_NZL != 554u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_NZL> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_NZL (554u)
#  define I_C10_ADAS_COUNTRYCODE_NZL ((c10_ADAS_CountryCode)554u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_NIC) || (defined I_C10_ADAS_COUNTRYCODE_NIC)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_NIC) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_NIC != 558u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_NIC> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_NIC (558u)
#  define I_C10_ADAS_COUNTRYCODE_NIC ((c10_ADAS_CountryCode)558u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_NER) || (defined I_C10_ADAS_COUNTRYCODE_NER)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_NER) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_NER != 562u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_NER> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_NER (562u)
#  define I_C10_ADAS_COUNTRYCODE_NER ((c10_ADAS_CountryCode)562u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_NGA) || (defined I_C10_ADAS_COUNTRYCODE_NGA)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_NGA) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_NGA != 566u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_NGA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_NGA (566u)
#  define I_C10_ADAS_COUNTRYCODE_NGA ((c10_ADAS_CountryCode)566u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_NIU) || (defined I_C10_ADAS_COUNTRYCODE_NIU)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_NIU) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_NIU != 570u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_NIU> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_NIU (570u)
#  define I_C10_ADAS_COUNTRYCODE_NIU ((c10_ADAS_CountryCode)570u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_NFK) || (defined I_C10_ADAS_COUNTRYCODE_NFK)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_NFK) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_NFK != 574u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_NFK> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_NFK (574u)
#  define I_C10_ADAS_COUNTRYCODE_NFK ((c10_ADAS_CountryCode)574u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_NOR) || (defined I_C10_ADAS_COUNTRYCODE_NOR)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_NOR) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_NOR != 578u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_NOR> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_NOR (578u)
#  define I_C10_ADAS_COUNTRYCODE_NOR ((c10_ADAS_CountryCode)578u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_MNP) || (defined I_C10_ADAS_COUNTRYCODE_MNP)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_MNP) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_MNP != 580u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_MNP> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_MNP (580u)
#  define I_C10_ADAS_COUNTRYCODE_MNP ((c10_ADAS_CountryCode)580u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_UMI) || (defined I_C10_ADAS_COUNTRYCODE_UMI)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_UMI) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_UMI != 581u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_UMI> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_UMI (581u)
#  define I_C10_ADAS_COUNTRYCODE_UMI ((c10_ADAS_CountryCode)581u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_FSM) || (defined I_C10_ADAS_COUNTRYCODE_FSM)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_FSM) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_FSM != 583u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_FSM> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_FSM (583u)
#  define I_C10_ADAS_COUNTRYCODE_FSM ((c10_ADAS_CountryCode)583u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_MHL) || (defined I_C10_ADAS_COUNTRYCODE_MHL)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_MHL) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_MHL != 584u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_MHL> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_MHL (584u)
#  define I_C10_ADAS_COUNTRYCODE_MHL ((c10_ADAS_CountryCode)584u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_PLW) || (defined I_C10_ADAS_COUNTRYCODE_PLW)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_PLW) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_PLW != 585u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_PLW> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_PLW (585u)
#  define I_C10_ADAS_COUNTRYCODE_PLW ((c10_ADAS_CountryCode)585u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_PAK) || (defined I_C10_ADAS_COUNTRYCODE_PAK)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_PAK) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_PAK != 586u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_PAK> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_PAK (586u)
#  define I_C10_ADAS_COUNTRYCODE_PAK ((c10_ADAS_CountryCode)586u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_PAN) || (defined I_C10_ADAS_COUNTRYCODE_PAN)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_PAN) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_PAN != 591u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_PAN> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_PAN (591u)
#  define I_C10_ADAS_COUNTRYCODE_PAN ((c10_ADAS_CountryCode)591u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_PNG) || (defined I_C10_ADAS_COUNTRYCODE_PNG)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_PNG) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_PNG != 598u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_PNG> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_PNG (598u)
#  define I_C10_ADAS_COUNTRYCODE_PNG ((c10_ADAS_CountryCode)598u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_PRY) || (defined I_C10_ADAS_COUNTRYCODE_PRY)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_PRY) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_PRY != 600u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_PRY> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_PRY (600u)
#  define I_C10_ADAS_COUNTRYCODE_PRY ((c10_ADAS_CountryCode)600u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_PER) || (defined I_C10_ADAS_COUNTRYCODE_PER)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_PER) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_PER != 604u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_PER> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_PER (604u)
#  define I_C10_ADAS_COUNTRYCODE_PER ((c10_ADAS_CountryCode)604u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_PHL) || (defined I_C10_ADAS_COUNTRYCODE_PHL)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_PHL) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_PHL != 608u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_PHL> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_PHL (608u)
#  define I_C10_ADAS_COUNTRYCODE_PHL ((c10_ADAS_CountryCode)608u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_PCN) || (defined I_C10_ADAS_COUNTRYCODE_PCN)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_PCN) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_PCN != 612u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_PCN> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_PCN (612u)
#  define I_C10_ADAS_COUNTRYCODE_PCN ((c10_ADAS_CountryCode)612u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_POL) || (defined I_C10_ADAS_COUNTRYCODE_POL)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_POL) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_POL != 616u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_POL> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_POL (616u)
#  define I_C10_ADAS_COUNTRYCODE_POL ((c10_ADAS_CountryCode)616u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_PRT) || (defined I_C10_ADAS_COUNTRYCODE_PRT)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_PRT) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_PRT != 620u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_PRT> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_PRT (620u)
#  define I_C10_ADAS_COUNTRYCODE_PRT ((c10_ADAS_CountryCode)620u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_GNB) || (defined I_C10_ADAS_COUNTRYCODE_GNB)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_GNB) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_GNB != 624u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_GNB> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_GNB (624u)
#  define I_C10_ADAS_COUNTRYCODE_GNB ((c10_ADAS_CountryCode)624u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_TLS) || (defined I_C10_ADAS_COUNTRYCODE_TLS)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_TLS) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_TLS != 626u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_TLS> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_TLS (626u)
#  define I_C10_ADAS_COUNTRYCODE_TLS ((c10_ADAS_CountryCode)626u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_PRI) || (defined I_C10_ADAS_COUNTRYCODE_PRI)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_PRI) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_PRI != 630u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_PRI> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_PRI (630u)
#  define I_C10_ADAS_COUNTRYCODE_PRI ((c10_ADAS_CountryCode)630u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_QAT) || (defined I_C10_ADAS_COUNTRYCODE_QAT)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_QAT) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_QAT != 634u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_QAT> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_QAT (634u)
#  define I_C10_ADAS_COUNTRYCODE_QAT ((c10_ADAS_CountryCode)634u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_REU) || (defined I_C10_ADAS_COUNTRYCODE_REU)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_REU) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_REU != 638u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_REU> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_REU (638u)
#  define I_C10_ADAS_COUNTRYCODE_REU ((c10_ADAS_CountryCode)638u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_ROU) || (defined I_C10_ADAS_COUNTRYCODE_ROU)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_ROU) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_ROU != 642u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_ROU> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_ROU (642u)
#  define I_C10_ADAS_COUNTRYCODE_ROU ((c10_ADAS_CountryCode)642u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_RUS) || (defined I_C10_ADAS_COUNTRYCODE_RUS)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_RUS) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_RUS != 643u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_RUS> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_RUS (643u)
#  define I_C10_ADAS_COUNTRYCODE_RUS ((c10_ADAS_CountryCode)643u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_RWA) || (defined I_C10_ADAS_COUNTRYCODE_RWA)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_RWA) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_RWA != 646u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_RWA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_RWA (646u)
#  define I_C10_ADAS_COUNTRYCODE_RWA ((c10_ADAS_CountryCode)646u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_SHN) || (defined I_C10_ADAS_COUNTRYCODE_SHN)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_SHN) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_SHN != 654u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_SHN> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_SHN (654u)
#  define I_C10_ADAS_COUNTRYCODE_SHN ((c10_ADAS_CountryCode)654u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_KNA) || (defined I_C10_ADAS_COUNTRYCODE_KNA)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_KNA) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_KNA != 659u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_KNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_KNA (659u)
#  define I_C10_ADAS_COUNTRYCODE_KNA ((c10_ADAS_CountryCode)659u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_AIA) || (defined I_C10_ADAS_COUNTRYCODE_AIA)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_AIA) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_AIA != 660u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_AIA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_AIA (660u)
#  define I_C10_ADAS_COUNTRYCODE_AIA ((c10_ADAS_CountryCode)660u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_LCA) || (defined I_C10_ADAS_COUNTRYCODE_LCA)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_LCA) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_LCA != 662u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_LCA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_LCA (662u)
#  define I_C10_ADAS_COUNTRYCODE_LCA ((c10_ADAS_CountryCode)662u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_SPM) || (defined I_C10_ADAS_COUNTRYCODE_SPM)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_SPM) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_SPM != 666u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_SPM> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_SPM (666u)
#  define I_C10_ADAS_COUNTRYCODE_SPM ((c10_ADAS_CountryCode)666u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_VCT) || (defined I_C10_ADAS_COUNTRYCODE_VCT)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_VCT) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_VCT != 670u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_VCT> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_VCT (670u)
#  define I_C10_ADAS_COUNTRYCODE_VCT ((c10_ADAS_CountryCode)670u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_SMR) || (defined I_C10_ADAS_COUNTRYCODE_SMR)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_SMR) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_SMR != 674u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_SMR> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_SMR (674u)
#  define I_C10_ADAS_COUNTRYCODE_SMR ((c10_ADAS_CountryCode)674u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_STP) || (defined I_C10_ADAS_COUNTRYCODE_STP)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_STP) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_STP != 678u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_STP> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_STP (678u)
#  define I_C10_ADAS_COUNTRYCODE_STP ((c10_ADAS_CountryCode)678u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_SAU) || (defined I_C10_ADAS_COUNTRYCODE_SAU)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_SAU) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_SAU != 682u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_SAU> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_SAU (682u)
#  define I_C10_ADAS_COUNTRYCODE_SAU ((c10_ADAS_CountryCode)682u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_SEN) || (defined I_C10_ADAS_COUNTRYCODE_SEN)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_SEN) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_SEN != 686u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_SEN> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_SEN (686u)
#  define I_C10_ADAS_COUNTRYCODE_SEN ((c10_ADAS_CountryCode)686u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_SRB) || (defined I_C10_ADAS_COUNTRYCODE_SRB)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_SRB) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_SRB != 688u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_SRB> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_SRB (688u)
#  define I_C10_ADAS_COUNTRYCODE_SRB ((c10_ADAS_CountryCode)688u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_SYC) || (defined I_C10_ADAS_COUNTRYCODE_SYC)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_SYC) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_SYC != 690u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_SYC> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_SYC (690u)
#  define I_C10_ADAS_COUNTRYCODE_SYC ((c10_ADAS_CountryCode)690u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_SLE) || (defined I_C10_ADAS_COUNTRYCODE_SLE)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_SLE) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_SLE != 694u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_SLE> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_SLE (694u)
#  define I_C10_ADAS_COUNTRYCODE_SLE ((c10_ADAS_CountryCode)694u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_SGP) || (defined I_C10_ADAS_COUNTRYCODE_SGP)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_SGP) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_SGP != 702u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_SGP> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_SGP (702u)
#  define I_C10_ADAS_COUNTRYCODE_SGP ((c10_ADAS_CountryCode)702u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_SVK) || (defined I_C10_ADAS_COUNTRYCODE_SVK)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_SVK) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_SVK != 703u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_SVK> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_SVK (703u)
#  define I_C10_ADAS_COUNTRYCODE_SVK ((c10_ADAS_CountryCode)703u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_VNM) || (defined I_C10_ADAS_COUNTRYCODE_VNM)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_VNM) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_VNM != 704u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_VNM> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_VNM (704u)
#  define I_C10_ADAS_COUNTRYCODE_VNM ((c10_ADAS_CountryCode)704u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_SVN) || (defined I_C10_ADAS_COUNTRYCODE_SVN)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_SVN) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_SVN != 705u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_SVN> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_SVN (705u)
#  define I_C10_ADAS_COUNTRYCODE_SVN ((c10_ADAS_CountryCode)705u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_SOM) || (defined I_C10_ADAS_COUNTRYCODE_SOM)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_SOM) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_SOM != 706u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_SOM> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_SOM (706u)
#  define I_C10_ADAS_COUNTRYCODE_SOM ((c10_ADAS_CountryCode)706u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_ZAF) || (defined I_C10_ADAS_COUNTRYCODE_ZAF)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_ZAF) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_ZAF != 710u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_ZAF> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_ZAF (710u)
#  define I_C10_ADAS_COUNTRYCODE_ZAF ((c10_ADAS_CountryCode)710u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_ZWE) || (defined I_C10_ADAS_COUNTRYCODE_ZWE)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_ZWE) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_ZWE != 716u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_ZWE> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_ZWE (716u)
#  define I_C10_ADAS_COUNTRYCODE_ZWE ((c10_ADAS_CountryCode)716u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_ESP) || (defined I_C10_ADAS_COUNTRYCODE_ESP)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_ESP) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_ESP != 724u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_ESP> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_ESP (724u)
#  define I_C10_ADAS_COUNTRYCODE_ESP ((c10_ADAS_CountryCode)724u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_ESH) || (defined I_C10_ADAS_COUNTRYCODE_ESH)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_ESH) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_ESH != 732u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_ESH> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_ESH (732u)
#  define I_C10_ADAS_COUNTRYCODE_ESH ((c10_ADAS_CountryCode)732u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_SDN) || (defined I_C10_ADAS_COUNTRYCODE_SDN)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_SDN) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_SDN != 736u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_SDN> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_SDN (736u)
#  define I_C10_ADAS_COUNTRYCODE_SDN ((c10_ADAS_CountryCode)736u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_SUR) || (defined I_C10_ADAS_COUNTRYCODE_SUR)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_SUR) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_SUR != 740u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_SUR> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_SUR (740u)
#  define I_C10_ADAS_COUNTRYCODE_SUR ((c10_ADAS_CountryCode)740u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_SJM) || (defined I_C10_ADAS_COUNTRYCODE_SJM)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_SJM) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_SJM != 744u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_SJM> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_SJM (744u)
#  define I_C10_ADAS_COUNTRYCODE_SJM ((c10_ADAS_CountryCode)744u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_SWZ) || (defined I_C10_ADAS_COUNTRYCODE_SWZ)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_SWZ) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_SWZ != 748u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_SWZ> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_SWZ (748u)
#  define I_C10_ADAS_COUNTRYCODE_SWZ ((c10_ADAS_CountryCode)748u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_SWE) || (defined I_C10_ADAS_COUNTRYCODE_SWE)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_SWE) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_SWE != 752u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_SWE> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_SWE (752u)
#  define I_C10_ADAS_COUNTRYCODE_SWE ((c10_ADAS_CountryCode)752u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_CHE) || (defined I_C10_ADAS_COUNTRYCODE_CHE)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_CHE) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_CHE != 756u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_CHE> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_CHE (756u)
#  define I_C10_ADAS_COUNTRYCODE_CHE ((c10_ADAS_CountryCode)756u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_SYR) || (defined I_C10_ADAS_COUNTRYCODE_SYR)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_SYR) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_SYR != 760u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_SYR> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_SYR (760u)
#  define I_C10_ADAS_COUNTRYCODE_SYR ((c10_ADAS_CountryCode)760u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_TJK) || (defined I_C10_ADAS_COUNTRYCODE_TJK)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_TJK) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_TJK != 762u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_TJK> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_TJK (762u)
#  define I_C10_ADAS_COUNTRYCODE_TJK ((c10_ADAS_CountryCode)762u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_THA) || (defined I_C10_ADAS_COUNTRYCODE_THA)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_THA) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_THA != 764u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_THA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_THA (764u)
#  define I_C10_ADAS_COUNTRYCODE_THA ((c10_ADAS_CountryCode)764u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_TGO) || (defined I_C10_ADAS_COUNTRYCODE_TGO)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_TGO) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_TGO != 768u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_TGO> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_TGO (768u)
#  define I_C10_ADAS_COUNTRYCODE_TGO ((c10_ADAS_CountryCode)768u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_TKL) || (defined I_C10_ADAS_COUNTRYCODE_TKL)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_TKL) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_TKL != 772u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_TKL> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_TKL (772u)
#  define I_C10_ADAS_COUNTRYCODE_TKL ((c10_ADAS_CountryCode)772u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_TON) || (defined I_C10_ADAS_COUNTRYCODE_TON)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_TON) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_TON != 776u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_TON> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_TON (776u)
#  define I_C10_ADAS_COUNTRYCODE_TON ((c10_ADAS_CountryCode)776u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_TTO) || (defined I_C10_ADAS_COUNTRYCODE_TTO)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_TTO) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_TTO != 780u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_TTO> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_TTO (780u)
#  define I_C10_ADAS_COUNTRYCODE_TTO ((c10_ADAS_CountryCode)780u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_ARE) || (defined I_C10_ADAS_COUNTRYCODE_ARE)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_ARE) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_ARE != 784u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_ARE> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_ARE (784u)
#  define I_C10_ADAS_COUNTRYCODE_ARE ((c10_ADAS_CountryCode)784u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_TUN) || (defined I_C10_ADAS_COUNTRYCODE_TUN)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_TUN) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_TUN != 788u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_TUN> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_TUN (788u)
#  define I_C10_ADAS_COUNTRYCODE_TUN ((c10_ADAS_CountryCode)788u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_TUR) || (defined I_C10_ADAS_COUNTRYCODE_TUR)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_TUR) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_TUR != 792u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_TUR> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_TUR (792u)
#  define I_C10_ADAS_COUNTRYCODE_TUR ((c10_ADAS_CountryCode)792u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_TKM) || (defined I_C10_ADAS_COUNTRYCODE_TKM)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_TKM) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_TKM != 795u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_TKM> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_TKM (795u)
#  define I_C10_ADAS_COUNTRYCODE_TKM ((c10_ADAS_CountryCode)795u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_TCA) || (defined I_C10_ADAS_COUNTRYCODE_TCA)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_TCA) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_TCA != 796u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_TCA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_TCA (796u)
#  define I_C10_ADAS_COUNTRYCODE_TCA ((c10_ADAS_CountryCode)796u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_TUV) || (defined I_C10_ADAS_COUNTRYCODE_TUV)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_TUV) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_TUV != 798u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_TUV> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_TUV (798u)
#  define I_C10_ADAS_COUNTRYCODE_TUV ((c10_ADAS_CountryCode)798u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_UGA) || (defined I_C10_ADAS_COUNTRYCODE_UGA)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_UGA) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_UGA != 800u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_UGA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_UGA (800u)
#  define I_C10_ADAS_COUNTRYCODE_UGA ((c10_ADAS_CountryCode)800u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_UKR) || (defined I_C10_ADAS_COUNTRYCODE_UKR)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_UKR) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_UKR != 804u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_UKR> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_UKR (804u)
#  define I_C10_ADAS_COUNTRYCODE_UKR ((c10_ADAS_CountryCode)804u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_MKD) || (defined I_C10_ADAS_COUNTRYCODE_MKD)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_MKD) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_MKD != 807u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_MKD> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_MKD (807u)
#  define I_C10_ADAS_COUNTRYCODE_MKD ((c10_ADAS_CountryCode)807u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_EGY) || (defined I_C10_ADAS_COUNTRYCODE_EGY)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_EGY) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_EGY != 818u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_EGY> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_EGY (818u)
#  define I_C10_ADAS_COUNTRYCODE_EGY ((c10_ADAS_CountryCode)818u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_GBR) || (defined I_C10_ADAS_COUNTRYCODE_GBR)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_GBR) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_GBR != 826u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_GBR> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_GBR (826u)
#  define I_C10_ADAS_COUNTRYCODE_GBR ((c10_ADAS_CountryCode)826u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_GGY) || (defined I_C10_ADAS_COUNTRYCODE_GGY)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_GGY) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_GGY != 831u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_GGY> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_GGY (831u)
#  define I_C10_ADAS_COUNTRYCODE_GGY ((c10_ADAS_CountryCode)831u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_JEY) || (defined I_C10_ADAS_COUNTRYCODE_JEY)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_JEY) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_JEY != 832u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_JEY> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_JEY (832u)
#  define I_C10_ADAS_COUNTRYCODE_JEY ((c10_ADAS_CountryCode)832u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_IMN) || (defined I_C10_ADAS_COUNTRYCODE_IMN)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_IMN) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_IMN != 833u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_IMN> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_IMN (833u)
#  define I_C10_ADAS_COUNTRYCODE_IMN ((c10_ADAS_CountryCode)833u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_TZA) || (defined I_C10_ADAS_COUNTRYCODE_TZA)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_TZA) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_TZA != 834u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_TZA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_TZA (834u)
#  define I_C10_ADAS_COUNTRYCODE_TZA ((c10_ADAS_CountryCode)834u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_USA) || (defined I_C10_ADAS_COUNTRYCODE_USA)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_USA) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_USA != 840u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_USA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_USA (840u)
#  define I_C10_ADAS_COUNTRYCODE_USA ((c10_ADAS_CountryCode)840u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_VIR) || (defined I_C10_ADAS_COUNTRYCODE_VIR)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_VIR) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_VIR != 850u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_VIR> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_VIR (850u)
#  define I_C10_ADAS_COUNTRYCODE_VIR ((c10_ADAS_CountryCode)850u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_BFA) || (defined I_C10_ADAS_COUNTRYCODE_BFA)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_BFA) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_BFA != 854u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_BFA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_BFA (854u)
#  define I_C10_ADAS_COUNTRYCODE_BFA ((c10_ADAS_CountryCode)854u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_URY) || (defined I_C10_ADAS_COUNTRYCODE_URY)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_URY) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_URY != 858u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_URY> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_URY (858u)
#  define I_C10_ADAS_COUNTRYCODE_URY ((c10_ADAS_CountryCode)858u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_UZB) || (defined I_C10_ADAS_COUNTRYCODE_UZB)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_UZB) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_UZB != 860u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_UZB> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_UZB (860u)
#  define I_C10_ADAS_COUNTRYCODE_UZB ((c10_ADAS_CountryCode)860u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_VEN) || (defined I_C10_ADAS_COUNTRYCODE_VEN)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_VEN) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_VEN != 862u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_VEN> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_VEN (862u)
#  define I_C10_ADAS_COUNTRYCODE_VEN ((c10_ADAS_CountryCode)862u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_WLF) || (defined I_C10_ADAS_COUNTRYCODE_WLF)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_WLF) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_WLF != 876u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_WLF> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_WLF (876u)
#  define I_C10_ADAS_COUNTRYCODE_WLF ((c10_ADAS_CountryCode)876u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_WSM) || (defined I_C10_ADAS_COUNTRYCODE_WSM)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_WSM) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_WSM != 882u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_WSM> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_WSM (882u)
#  define I_C10_ADAS_COUNTRYCODE_WSM ((c10_ADAS_CountryCode)882u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_YEM) || (defined I_C10_ADAS_COUNTRYCODE_YEM)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_YEM) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_YEM != 887u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_YEM> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_YEM (887u)
#  define I_C10_ADAS_COUNTRYCODE_YEM ((c10_ADAS_CountryCode)887u)
# endif
# if (defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_ZMB) || (defined I_C10_ADAS_COUNTRYCODE_ZMB)
#  if (!defined RTE_CONST_I_C10_ADAS_COUNTRYCODE_ZMB) || (RTE_CONST_I_C10_ADAS_COUNTRYCODE_ZMB != 894u)
#   error "Enumeration constant <I_C10_ADAS_COUNTRYCODE_ZMB> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_ADAS_COUNTRYCODE_ZMB (894u)
#  define I_C10_ADAS_COUNTRYCODE_ZMB ((c10_ADAS_CountryCode)894u)
# endif

# define Rte_TypeDef_c10_deg_m10d24_p10d2_0d02
typedef uint16 c10_deg_m10d24_p10d2_0d02;
# define c10_deg_m10d24_p10d2_0d02_LowerLimit ((c10_deg_m10d24_p10d2_0d02)0u)
# define c10_deg_m10d24_p10d2_0d02_UpperLimit ((c10_deg_m10d24_p10d2_0d02)1023u)
# define Rte_InvalidValue_c10_deg_m10d24_p10d2_0d02 ((c10_deg_m10d24_p10d2_0d02)1023u)
# if (defined RTE_CONST_I_C10_DEG_M10D24_P10D2_0D02_SNA) || (defined I_C10_DEG_M10D24_P10D2_0D02_SNA)
#  if (!defined RTE_CONST_I_C10_DEG_M10D24_P10D2_0D02_SNA) || (RTE_CONST_I_C10_DEG_M10D24_P10D2_0D02_SNA != 1023u)
#   error "Enumeration constant <I_C10_DEG_M10D24_P10D2_0D02_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_DEG_M10D24_P10D2_0D02_SNA (1023u)
#  define I_C10_DEG_M10D24_P10D2_0D02_SNA ((c10_deg_m10d24_p10d2_0d02)1023u)
# endif

# define Rte_TypeDef_c10_deg_m5k12_5k1_0k01
typedef uint16 c10_deg_m5k12_5k1_0k01;
# define c10_deg_m5k12_5k1_0k01_LowerLimit ((c10_deg_m5k12_5k1_0k01)0u)
# define c10_deg_m5k12_5k1_0k01_UpperLimit ((c10_deg_m5k12_5k1_0k01)1023u)
# define Rte_InvalidValue_c10_deg_m5k12_5k1_0k01 ((c10_deg_m5k12_5k1_0k01)1023u)
# if (defined RTE_CONST_I_C10_DEG_M5K12_5K1_0K01_SNA) || (defined I_C10_DEG_M5K12_5K1_0K01_SNA)
#  if (!defined RTE_CONST_I_C10_DEG_M5K12_5K1_0K01_SNA) || (RTE_CONST_I_C10_DEG_M5K12_5K1_0K01_SNA != 1023u)
#   error "Enumeration constant <I_C10_DEG_M5K12_5K1_0K01_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_DEG_M5K12_5K1_0K01_SNA (1023u)
#  define I_C10_DEG_M5K12_5K1_0K01_SNA ((c10_deg_m5k12_5k1_0k01)1023u)
# endif

# define Rte_TypeDef_c10_m_0_510_1
typedef uint16 c10_m_0_510_1;
# define c10_m_0_510_1_LowerLimit ((c10_m_0_510_1)0u)
# define c10_m_0_510_1_UpperLimit ((c10_m_0_510_1)1023u)
# define Rte_InvalidValue_c10_m_0_510_1 ((c10_m_0_510_1)1023u)
# if (defined RTE_CONST_I_C10_M_0_510_1_SNA) || (defined I_C10_M_0_510_1_SNA)
#  if (!defined RTE_CONST_I_C10_M_0_510_1_SNA) || (RTE_CONST_I_C10_M_0_510_1_SNA != 1023u)
#   error "Enumeration constant <I_C10_M_0_510_1_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_M_0_510_1_SNA (1023u)
#  define I_C10_M_0_510_1_SNA ((c10_m_0_510_1)1023u)
# endif

# define Rte_TypeDef_c10_m_m0d63_p0d63_0d00125
typedef uint16 c10_m_m0d63_p0d63_0d00125;
# define c10_m_m0d63_p0d63_0d00125_LowerLimit ((c10_m_m0d63_p0d63_0d00125)0u)
# define c10_m_m0d63_p0d63_0d00125_UpperLimit ((c10_m_m0d63_p0d63_0d00125)1023u)
# define Rte_InvalidValue_c10_m_m0d63_p0d63_0d00125 ((c10_m_m0d63_p0d63_0d00125)1023u)
# if (defined RTE_CONST_I_C10_M_M0D63_P0D63_0D00125_SNA) || (defined I_C10_M_M0D63_P0D63_0D00125_SNA)
#  if (!defined RTE_CONST_I_C10_M_M0D63_P0D63_0D00125_SNA) || (RTE_CONST_I_C10_M_M0D63_P0D63_0D00125_SNA != 1023u)
#   error "Enumeration constant <I_C10_M_M0D63_P0D63_0D00125_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_M_M0D63_P0D63_0D00125_SNA (1023u)
#  define I_C10_M_M0D63_P0D63_0D00125_SNA ((c10_m_m0d63_p0d63_0d00125)1023u)
# endif

# define Rte_TypeDef_c10_m_m2d56_p7d66_0d01
typedef uint16 c10_m_m2d56_p7d66_0d01;
# define c10_m_m2d56_p7d66_0d01_LowerLimit ((c10_m_m2d56_p7d66_0d01)0u)
# define c10_m_m2d56_p7d66_0d01_UpperLimit ((c10_m_m2d56_p7d66_0d01)1023u)
# define Rte_InvalidValue_c10_m_m2d56_p7d66_0d01 ((c10_m_m2d56_p7d66_0d01)1023u)
# if (defined RTE_CONST_I_C10_M_M2D56_P7D66_0D01_SNA) || (defined I_C10_M_M2D56_P7D66_0D01_SNA)
#  if (!defined RTE_CONST_I_C10_M_M2D56_P7D66_0D01_SNA) || (RTE_CONST_I_C10_M_M2D56_P7D66_0D01_SNA != 1023u)
#   error "Enumeration constant <I_C10_M_M2D56_P7D66_0D01_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_M_M2D56_P7D66_0D01_SNA (1023u)
#  define I_C10_M_M2D56_P7D66_0D01_SNA ((c10_m_m2d56_p7d66_0d01)1023u)
# endif

# define Rte_TypeDef_c10_m_m5k12_5k1_0k01
typedef uint16 c10_m_m5k12_5k1_0k01;
# define c10_m_m5k12_5k1_0k01_LowerLimit ((c10_m_m5k12_5k1_0k01)0u)
# define c10_m_m5k12_5k1_0k01_UpperLimit ((c10_m_m5k12_5k1_0k01)1023u)
# define Rte_InvalidValue_c10_m_m5k12_5k1_0k01 ((c10_m_m5k12_5k1_0k01)1023u)
# if (defined RTE_CONST_I_C10_M_M5K12_5K1_0K01_SNA) || (defined I_C10_M_M5K12_5K1_0K01_SNA)
#  if (!defined RTE_CONST_I_C10_M_M5K12_5K1_0K01_SNA) || (RTE_CONST_I_C10_M_M5K12_5K1_0K01_SNA != 1023u)
#   error "Enumeration constant <I_C10_M_M5K12_5K1_0K01_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_M_M5K12_5K1_0K01_SNA (1023u)
#  define I_C10_M_M5K12_5K1_0K01_SNA ((c10_m_m5k12_5k1_0k01)1023u)
# endif

# define Rte_TypeDef_c10_m_p_sq_s_m15d36_15d3_0d03
typedef uint16 c10_m_p_sq_s_m15d36_15d3_0d03;
# define c10_m_p_sq_s_m15d36_15d3_0d03_LowerLimit ((c10_m_p_sq_s_m15d36_15d3_0d03)0u)
# define c10_m_p_sq_s_m15d36_15d3_0d03_UpperLimit ((c10_m_p_sq_s_m15d36_15d3_0d03)1023u)
# define Rte_InvalidValue_c10_m_p_sq_s_m15d36_15d3_0d03 ((c10_m_p_sq_s_m15d36_15d3_0d03)1023u)
# if (defined RTE_CONST_I_C10_M_P_SQ_S_M15D36_15D3_0D03_SNA) || (defined I_C10_M_P_SQ_S_M15D36_15D3_0D03_SNA)
#  if (!defined RTE_CONST_I_C10_M_P_SQ_S_M15D36_15D3_0D03_SNA) || (RTE_CONST_I_C10_M_P_SQ_S_M15D36_15D3_0D03_SNA != 1023u)
#   error "Enumeration constant <I_C10_M_P_SQ_S_M15D36_15D3_0D03_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_M_P_SQ_S_M15D36_15D3_0D03_SNA (1023u)
#  define I_C10_M_P_SQ_S_M15D36_15D3_0D03_SNA ((c10_m_p_sq_s_m15d36_15d3_0d03)1023u)
# endif

# define Rte_TypeDef_c10_m_p_sq_s_m51k2_51_0k1
typedef uint16 c10_m_p_sq_s_m51k2_51_0k1;
# define c10_m_p_sq_s_m51k2_51_0k1_LowerLimit ((c10_m_p_sq_s_m51k2_51_0k1)0u)
# define c10_m_p_sq_s_m51k2_51_0k1_UpperLimit ((c10_m_p_sq_s_m51k2_51_0k1)1023u)
# define Rte_InvalidValue_c10_m_p_sq_s_m51k2_51_0k1 ((c10_m_p_sq_s_m51k2_51_0k1)1023u)
# if (defined RTE_CONST_I_C10_M_P_SQ_S_M51K2_51_0K1_SNA) || (defined I_C10_M_P_SQ_S_M51K2_51_0K1_SNA)
#  if (!defined RTE_CONST_I_C10_M_P_SQ_S_M51K2_51_0K1_SNA) || (RTE_CONST_I_C10_M_P_SQ_S_M51K2_51_0K1_SNA != 1023u)
#   error "Enumeration constant <I_C10_M_P_SQ_S_M51K2_51_0K1_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_M_P_SQ_S_M51K2_51_0K1_SNA (1023u)
#  define I_C10_M_P_SQ_S_M51K2_51_0K1_SNA ((c10_m_p_sq_s_m51k2_51_0k1)1023u)
# endif

# define Rte_TypeDef_c10_ms_m25k55_0d05
typedef uint16 c10_ms_m25k55_0d05;
# define c10_ms_m25k55_0d05_LowerLimit ((c10_ms_m25k55_0d05)0u)
# define c10_ms_m25k55_0d05_UpperLimit ((c10_ms_m25k55_0d05)1023u)
# define Rte_InvalidValue_c10_ms_m25k55_0d05 ((c10_ms_m25k55_0d05)1023u)
# if (defined RTE_CONST_I_C10_MS_M25K55_0D05_SNA) || (defined I_C10_MS_M25K55_0D05_SNA)
#  if (!defined RTE_CONST_I_C10_MS_M25K55_0D05_SNA) || (RTE_CONST_I_C10_MS_M25K55_0D05_SNA != 1023u)
#   error "Enumeration constant <I_C10_MS_M25K55_0D05_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_MS_M25K55_0D05_SNA (1023u)
#  define I_C10_MS_M25K55_0D05_SNA ((c10_ms_m25k55_0d05)1023u)
# endif

# define Rte_TypeDef_c10_ms_m67top32k2_0k1
typedef uint16 c10_ms_m67top32k2_0k1;
# define c10_ms_m67top32k2_0k1_LowerLimit ((c10_ms_m67top32k2_0k1)0u)
# define c10_ms_m67top32k2_0k1_UpperLimit ((c10_ms_m67top32k2_0k1)1023u)
# define Rte_InvalidValue_c10_ms_m67top32k2_0k1 ((c10_ms_m67top32k2_0k1)1023u)
# if (defined RTE_CONST_I_C10_MS_M67TOP32K2_0K1_SNA) || (defined I_C10_MS_M67TOP32K2_0K1_SNA)
#  if (!defined RTE_CONST_I_C10_MS_M67TOP32K2_0K1_SNA) || (RTE_CONST_I_C10_MS_M67TOP32K2_0K1_SNA != 1023u)
#   error "Enumeration constant <I_C10_MS_M67TOP32K2_0K1_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_MS_M67TOP32K2_0K1_SNA (1023u)
#  define I_C10_MS_M67TOP32K2_0K1_SNA ((c10_ms_m67top32k2_0k1)1023u)
# endif

# define Rte_TypeDef_c10_rad_p_sq_s_m10d24_10d2_0d02
typedef uint16 c10_rad_p_sq_s_m10d24_10d2_0d02;
# define c10_rad_p_sq_s_m10d24_10d2_0d02_LowerLimit ((c10_rad_p_sq_s_m10d24_10d2_0d02)0u)
# define c10_rad_p_sq_s_m10d24_10d2_0d02_UpperLimit ((c10_rad_p_sq_s_m10d24_10d2_0d02)1023u)
# define Rte_InvalidValue_c10_rad_p_sq_s_m10d24_10d2_0d02 ((c10_rad_p_sq_s_m10d24_10d2_0d02)1023u)
# if (defined RTE_CONST_I_C10_RAD_P_SQ_S_M10D24_10D2_0D02_SNA) || (defined I_C10_RAD_P_SQ_S_M10D24_10D2_0D02_SNA)
#  if (!defined RTE_CONST_I_C10_RAD_P_SQ_S_M10D24_10D2_0D02_SNA) || (RTE_CONST_I_C10_RAD_P_SQ_S_M10D24_10D2_0D02_SNA != 1023u)
#   error "Enumeration constant <I_C10_RAD_P_SQ_S_M10D24_10D2_0D02_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_RAD_P_SQ_S_M10D24_10D2_0D02_SNA (1023u)
#  define I_C10_RAD_P_SQ_S_M10D24_10D2_0D02_SNA ((c10_rad_p_sq_s_m10d24_10d2_0d02)1023u)
# endif

# define Rte_TypeDef_c10_rad_p_sq_s_m20d48_20d4_0d04
typedef uint16 c10_rad_p_sq_s_m20d48_20d4_0d04;
# define c10_rad_p_sq_s_m20d48_20d4_0d04_LowerLimit ((c10_rad_p_sq_s_m20d48_20d4_0d04)0u)
# define c10_rad_p_sq_s_m20d48_20d4_0d04_UpperLimit ((c10_rad_p_sq_s_m20d48_20d4_0d04)1023u)
# define Rte_InvalidValue_c10_rad_p_sq_s_m20d48_20d4_0d04 ((c10_rad_p_sq_s_m20d48_20d4_0d04)1023u)
# if (defined RTE_CONST_I_C10_RAD_P_SQ_S_M20D48_20D4_0D04_SNA) || (defined I_C10_RAD_P_SQ_S_M20D48_20D4_0D04_SNA)
#  if (!defined RTE_CONST_I_C10_RAD_P_SQ_S_M20D48_20D4_0D04_SNA) || (RTE_CONST_I_C10_RAD_P_SQ_S_M20D48_20D4_0D04_SNA != 1023u)
#   error "Enumeration constant <I_C10_RAD_P_SQ_S_M20D48_20D4_0D04_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_RAD_P_SQ_S_M20D48_20D4_0D04_SNA (1023u)
#  define I_C10_RAD_P_SQ_S_M20D48_20D4_0D04_SNA ((c10_rad_p_sq_s_m20d48_20d4_0d04)1023u)
# endif

# define Rte_TypeDef_c10_to_1022_1
typedef uint16 c10_to_1022_1;
# define c10_to_1022_1_LowerLimit ((c10_to_1022_1)0u)
# define c10_to_1022_1_UpperLimit ((c10_to_1022_1)1023u)
# define Rte_InvalidValue_c10_to_1022_1 ((c10_to_1022_1)1023u)
# if (defined RTE_CONST_I_C10_TO_1022_1_SNA) || (defined I_C10_TO_1022_1_SNA)
#  if (!defined RTE_CONST_I_C10_TO_1022_1_SNA) || (RTE_CONST_I_C10_TO_1022_1_SNA != 1023u)
#   error "Enumeration constant <I_C10_TO_1022_1_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C10_TO_1022_1_SNA (1023u)
#  define I_C10_TO_1022_1_SNA ((c10_to_1022_1)1023u)
# endif

# define Rte_TypeDef_c12_Nm_0_12282_3
typedef uint16 c12_Nm_0_12282_3;
# define c12_Nm_0_12282_3_LowerLimit ((c12_Nm_0_12282_3)0u)
# define c12_Nm_0_12282_3_UpperLimit ((c12_Nm_0_12282_3)4095u)
# define Rte_InvalidValue_c12_Nm_0_12282_3 ((c12_Nm_0_12282_3)4095u)
# if (defined RTE_CONST_I_C12_NM_0_12282_3_SNA) || (defined I_C12_NM_0_12282_3_SNA)
#  if (!defined RTE_CONST_I_C12_NM_0_12282_3_SNA) || (RTE_CONST_I_C12_NM_0_12282_3_SNA != 4095u)
#   error "Enumeration constant <I_C12_NM_0_12282_3_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C12_NM_0_12282_3_SNA (4095u)
#  define I_C12_NM_0_12282_3_SNA ((c12_Nm_0_12282_3)4095u)
# endif

# define Rte_TypeDef_c12_deg_m20_20_0k01
typedef uint16 c12_deg_m20_20_0k01;
# define c12_deg_m20_20_0k01_LowerLimit ((c12_deg_m20_20_0k01)0u)
# define c12_deg_m20_20_0k01_UpperLimit ((c12_deg_m20_20_0k01)4095u)
# define Rte_InvalidValue_c12_deg_m20_20_0k01 ((c12_deg_m20_20_0k01)4095u)
# if (defined RTE_CONST_I_C12_DEG_M20_20_0K01_SNA) || (defined I_C12_DEG_M20_20_0K01_SNA)
#  if (!defined RTE_CONST_I_C12_DEG_M20_20_0K01_SNA) || (RTE_CONST_I_C12_DEG_M20_20_0K01_SNA != 4095u)
#   error "Enumeration constant <I_C12_DEG_M20_20_0K01_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C12_DEG_M20_20_0K01_SNA (4095u)
#  define I_C12_DEG_M20_20_0K01_SNA ((c12_deg_m20_20_0k01)4095u)
# endif

# define Rte_TypeDef_c12_deg_m40k94_40k94_0k02
typedef uint16 c12_deg_m40k94_40k94_0k02;
# define c12_deg_m40k94_40k94_0k02_LowerLimit ((c12_deg_m40k94_40k94_0k02)0u)
# define c12_deg_m40k94_40k94_0k02_UpperLimit ((c12_deg_m40k94_40k94_0k02)4095u)
# define Rte_InvalidValue_c12_deg_m40k94_40k94_0k02 ((c12_deg_m40k94_40k94_0k02)4095u)
# if (defined RTE_CONST_I_C12_DEG_M40K94_40K94_0K02_SNA) || (defined I_C12_DEG_M40K94_40K94_0K02_SNA)
#  if (!defined RTE_CONST_I_C12_DEG_M40K94_40K94_0K02_SNA) || (RTE_CONST_I_C12_DEG_M40K94_40K94_0K02_SNA != 4095u)
#   error "Enumeration constant <I_C12_DEG_M40K94_40K94_0K02_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C12_DEG_M40K94_40K94_0K02_SNA (4095u)
#  define I_C12_DEG_M40K94_40K94_0K02_SNA ((c12_deg_m40k94_40k94_0k02)4095u)
# endif

# define Rte_TypeDef_c12_deg_p_s_m63k5_64k437_0k03125
typedef uint16 c12_deg_p_s_m63k5_64k437_0k03125;
# define c12_deg_p_s_m63k5_64k437_0k03125_LowerLimit ((c12_deg_p_s_m63k5_64k437_0k03125)0u)
# define c12_deg_p_s_m63k5_64k437_0k03125_UpperLimit ((c12_deg_p_s_m63k5_64k437_0k03125)4095u)
# define Rte_InvalidValue_c12_deg_p_s_m63k5_64k437_0k03125 ((c12_deg_p_s_m63k5_64k437_0k03125)4095u)
# if (defined RTE_CONST_I_C12_DEG_P_S_M63K5_64K437_0K03125_SNA) || (defined I_C12_DEG_P_S_M63K5_64K437_0K03125_SNA)
#  if (!defined RTE_CONST_I_C12_DEG_P_S_M63K5_64K437_0K03125_SNA) || (RTE_CONST_I_C12_DEG_P_S_M63K5_64K437_0K03125_SNA != 4095u)
#   error "Enumeration constant <I_C12_DEG_P_S_M63K5_64K437_0K03125_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C12_DEG_P_S_M63K5_64K437_0K03125_SNA (4095u)
#  define I_C12_DEG_P_S_M63K5_64K437_0K03125_SNA ((c12_deg_p_s_m63k5_64k437_0k03125)4095u)
# endif

# define Rte_TypeDef_c12_km_p_h_0_409k4_0k1
typedef uint16 c12_km_p_h_0_409k4_0k1;
# define c12_km_p_h_0_409k4_0k1_LowerLimit ((c12_km_p_h_0_409k4_0k1)0u)
# define c12_km_p_h_0_409k4_0k1_UpperLimit ((c12_km_p_h_0_409k4_0k1)4095u)
# define Rte_InvalidValue_c12_km_p_h_0_409k4_0k1 ((c12_km_p_h_0_409k4_0k1)4095u)
# if (defined RTE_CONST_I_C12_KM_P_H_0_409K4_0K1_SNA) || (defined I_C12_KM_P_H_0_409K4_0K1_SNA)
#  if (!defined RTE_CONST_I_C12_KM_P_H_0_409K4_0K1_SNA) || (RTE_CONST_I_C12_KM_P_H_0_409K4_0K1_SNA != 4095u)
#   error "Enumeration constant <I_C12_KM_P_H_0_409K4_0K1_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C12_KM_P_H_0_409K4_0K1_SNA (4095u)
#  define I_C12_KM_P_H_0_409K4_0K1_SNA ((c12_km_p_h_0_409k4_0k1)4095u)
# endif

# define Rte_TypeDef_c12_m0to102k375_0k025
typedef uint16 c12_m0to102k375_0k025;
# define c12_m0to102k375_0k025_LowerLimit ((c12_m0to102k375_0k025)0u)
# define c12_m0to102k375_0k025_UpperLimit ((c12_m0to102k375_0k025)4095u)
# define Rte_InvalidValue_c12_m0to102k375_0k025 ((c12_m0to102k375_0k025)4095u)
# if (defined RTE_CONST_I_C12_M0TO102K375_0K025_SNA) || (defined I_C12_M0TO102K375_0K025_SNA)
#  if (!defined RTE_CONST_I_C12_M0TO102K375_0K025_SNA) || (RTE_CONST_I_C12_M0TO102K375_0K025_SNA != 4095u)
#   error "Enumeration constant <I_C12_M0TO102K375_0K025_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C12_M0TO102K375_0K025_SNA (4095u)
#  define I_C12_M0TO102K375_0K025_SNA ((c12_m0to102k375_0k025)4095u)
# endif

# define Rte_TypeDef_c12_m51k175_to_p51k175_0k025
typedef uint16 c12_m51k175_to_p51k175_0k025;
# define c12_m51k175_to_p51k175_0k025_LowerLimit ((c12_m51k175_to_p51k175_0k025)0u)
# define c12_m51k175_to_p51k175_0k025_UpperLimit ((c12_m51k175_to_p51k175_0k025)4095u)
# define Rte_InvalidValue_c12_m51k175_to_p51k175_0k025 ((c12_m51k175_to_p51k175_0k025)4095u)
# if (defined RTE_CONST_I_C12_M51K175_TO_P51K175_0K025_SNA) || (defined I_C12_M51K175_TO_P51K175_0K025_SNA)
#  if (!defined RTE_CONST_I_C12_M51K175_TO_P51K175_0K025_SNA) || (RTE_CONST_I_C12_M51K175_TO_P51K175_0K025_SNA != 4095u)
#   error "Enumeration constant <I_C12_M51K175_TO_P51K175_0K025_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C12_M51K175_TO_P51K175_0K025_SNA (4095u)
#  define I_C12_M51K175_TO_P51K175_0K025_SNA ((c12_m51k175_to_p51k175_0k025)4095u)
# endif

# define Rte_TypeDef_c12_m_m0d2048_0d2046_0k0001
typedef uint16 c12_m_m0d2048_0d2046_0k0001;
# define c12_m_m0d2048_0d2046_0k0001_LowerLimit ((c12_m_m0d2048_0d2046_0k0001)0u)
# define c12_m_m0d2048_0d2046_0k0001_UpperLimit ((c12_m_m0d2048_0d2046_0k0001)4095u)
# define Rte_InvalidValue_c12_m_m0d2048_0d2046_0k0001 ((c12_m_m0d2048_0d2046_0k0001)4095u)
# if (defined RTE_CONST_I_C12_M_M0D2048_0D2046_0K0001_SNA) || (defined I_C12_M_M0D2048_0D2046_0K0001_SNA)
#  if (!defined RTE_CONST_I_C12_M_M0D2048_0D2046_0K0001_SNA) || (RTE_CONST_I_C12_M_M0D2048_0D2046_0K0001_SNA != 4095u)
#   error "Enumeration constant <I_C12_M_M0D2048_0D2046_0K0001_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C12_M_M0D2048_0D2046_0K0001_SNA (4095u)
#  define I_C12_M_M0D2048_0D2046_0K0001_SNA ((c12_m_m0d2048_0d2046_0k0001)4095u)
# endif

# define Rte_TypeDef_c12_m_p_s_m10_10_0k005
typedef uint16 c12_m_p_s_m10_10_0k005;
# define c12_m_p_s_m10_10_0k005_LowerLimit ((c12_m_p_s_m10_10_0k005)0u)
# define c12_m_p_s_m10_10_0k005_UpperLimit ((c12_m_p_s_m10_10_0k005)4095u)
# define Rte_InvalidValue_c12_m_p_s_m10_10_0k005 ((c12_m_p_s_m10_10_0k005)4095u)
# if (defined RTE_CONST_I_C12_M_P_S_M10_10_0K005_SNA) || (defined I_C12_M_P_S_M10_10_0K005_SNA)
#  if (!defined RTE_CONST_I_C12_M_P_S_M10_10_0K005_SNA) || (RTE_CONST_I_C12_M_P_S_M10_10_0K005_SNA != 4095u)
#   error "Enumeration constant <I_C12_M_P_S_M10_10_0K005_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C12_M_P_S_M10_10_0K005_SNA (4095u)
#  define I_C12_M_P_S_M10_10_0K005_SNA ((c12_m_p_s_m10_10_0k005)4095u)
# endif

# define Rte_TypeDef_c12_m_p_s_m18k35_84_0k025
typedef uint16 c12_m_p_s_m18k35_84_0k025;
# define c12_m_p_s_m18k35_84_0k025_LowerLimit ((c12_m_p_s_m18k35_84_0k025)0u)
# define c12_m_p_s_m18k35_84_0k025_UpperLimit ((c12_m_p_s_m18k35_84_0k025)4095u)
# define Rte_InvalidValue_c12_m_p_s_m18k35_84_0k025 ((c12_m_p_s_m18k35_84_0k025)4095u)
# if (defined RTE_CONST_I_C12_M_P_S_M18K35_84_0K025_SNA) || (defined I_C12_M_P_S_M18K35_84_0K025_SNA)
#  if (!defined RTE_CONST_I_C12_M_P_S_M18K35_84_0K025_SNA) || (RTE_CONST_I_C12_M_P_S_M18K35_84_0K025_SNA != 4095u)
#   error "Enumeration constant <I_C12_M_P_S_M18K35_84_0K025_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C12_M_P_S_M18K35_84_0K025_SNA (4095u)
#  define I_C12_M_P_S_M18K35_84_0K025_SNA ((c12_m_p_s_m18k35_84_0k025)4095u)
# endif

# define Rte_TypeDef_c13_Nm_m500_1547k5_0k25
typedef uint16 c13_Nm_m500_1547k5_0k25;
# define c13_Nm_m500_1547k5_0k25_LowerLimit ((c13_Nm_m500_1547k5_0k25)0u)
# define c13_Nm_m500_1547k5_0k25_UpperLimit ((c13_Nm_m500_1547k5_0k25)8191u)
# define Rte_InvalidValue_c13_Nm_m500_1547k5_0k25 ((c13_Nm_m500_1547k5_0k25)8191u)
# if (defined RTE_CONST_I_C13_NM_M500_1547K5_0K25_SNA) || (defined I_C13_NM_M500_1547K5_0K25_SNA)
#  if (!defined RTE_CONST_I_C13_NM_M500_1547K5_0K25_SNA) || (RTE_CONST_I_C13_NM_M500_1547K5_0K25_SNA != 8191u)
#   error "Enumeration constant <I_C13_NM_M500_1547K5_0K25_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C13_NM_M500_1547K5_0K25_SNA (8191u)
#  define I_C13_NM_M500_1547K5_0K25_SNA ((c13_Nm_m500_1547k5_0k25)8191u)
# endif

# define Rte_TypeDef_c13_m_0_8190_1
typedef uint16 c13_m_0_8190_1;
# define c13_m_0_8190_1_LowerLimit ((c13_m_0_8190_1)0u)
# define c13_m_0_8190_1_UpperLimit ((c13_m_0_8190_1)8191u)
# define Rte_InvalidValue_c13_m_0_8190_1 ((c13_m_0_8190_1)8191u)
# if (defined RTE_CONST_I_C13_M_0_8190_1_SNA) || (defined I_C13_M_0_8190_1_SNA)
#  if (!defined RTE_CONST_I_C13_M_0_8190_1_SNA) || (RTE_CONST_I_C13_M_0_8190_1_SNA != 8191u)
#   error "Enumeration constant <I_C13_M_0_8190_1_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C13_M_0_8190_1_SNA (8191u)
#  define I_C13_M_0_8190_1_SNA ((c13_m_0_8190_1)8191u)
# endif

# define Rte_TypeDef_c14_0_163k82_0k01
typedef uint16 c14_0_163k82_0k01;
# define c14_0_163k82_0k01_LowerLimit ((c14_0_163k82_0k01)0u)
# define c14_0_163k82_0k01_UpperLimit ((c14_0_163k82_0k01)16383u)
# define Rte_InvalidValue_c14_0_163k82_0k01 ((c14_0_163k82_0k01)16383u)
# if (defined RTE_CONST_I_C14_0_163K82_0K01_SNA) || (defined I_C14_0_163K82_0K01_SNA)
#  if (!defined RTE_CONST_I_C14_0_163K82_0K01_SNA) || (RTE_CONST_I_C14_0_163K82_0K01_SNA != 16383u)
#   error "Enumeration constant <I_C14_0_163K82_0K01_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C14_0_163K82_0K01_SNA (16383u)
#  define I_C14_0_163K82_0K01_SNA ((c14_0_163k82_0k01)16383u)
# endif

# define Rte_TypeDef_c14_Nm_m81d92_p81d9_0d01
typedef uint16 c14_Nm_m81d92_p81d9_0d01;
# define c14_Nm_m81d92_p81d9_0d01_LowerLimit ((c14_Nm_m81d92_p81d9_0d01)0u)
# define c14_Nm_m81d92_p81d9_0d01_UpperLimit ((c14_Nm_m81d92_p81d9_0d01)16383u)
# define Rte_InvalidValue_c14_Nm_m81d92_p81d9_0d01 ((c14_Nm_m81d92_p81d9_0d01)16383u)
# if (defined RTE_CONST_I_C14_NM_M81D92_P81D9_0D01_SNA) || (defined I_C14_NM_M81D92_P81D9_0D01_SNA)
#  if (!defined RTE_CONST_I_C14_NM_M81D92_P81D9_0D01_SNA) || (RTE_CONST_I_C14_NM_M81D92_P81D9_0D01_SNA != 16383u)
#   error "Enumeration constant <I_C14_NM_M81D92_P81D9_0D01_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C14_NM_M81D92_P81D9_0D01_SNA (16383u)
#  define I_C14_NM_M81D92_P81D9_0D01_SNA ((c14_Nm_m81d92_p81d9_0d01)16383u)
# endif

# define Rte_TypeDef_c14_deg_m819k2_819_0k1
typedef uint16 c14_deg_m819k2_819_0k1;
# define c14_deg_m819k2_819_0k1_LowerLimit ((c14_deg_m819k2_819_0k1)0u)
# define c14_deg_m819k2_819_0k1_UpperLimit ((c14_deg_m819k2_819_0k1)16383u)
# define Rte_InvalidValue_c14_deg_m819k2_819_0k1 ((c14_deg_m819k2_819_0k1)16383u)
# if (defined RTE_CONST_I_C14_DEG_M819K2_819_0K1_SNA) || (defined I_C14_DEG_M819K2_819_0K1_SNA)
#  if (!defined RTE_CONST_I_C14_DEG_M819K2_819_0K1_SNA) || (RTE_CONST_I_C14_DEG_M819K2_819_0K1_SNA != 16383u)
#   error "Enumeration constant <I_C14_DEG_M819K2_819_0K1_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C14_DEG_M819K2_819_0K1_SNA (16383u)
#  define I_C14_DEG_M819K2_819_0K1_SNA ((c14_deg_m819k2_819_0k1)16383u)
# endif

# define Rte_TypeDef_c14_deg_p_s_m4096_4095_0k5
typedef uint16 c14_deg_p_s_m4096_4095_0k5;
# define c14_deg_p_s_m4096_4095_0k5_LowerLimit ((c14_deg_p_s_m4096_4095_0k5)0u)
# define c14_deg_p_s_m4096_4095_0k5_UpperLimit ((c14_deg_p_s_m4096_4095_0k5)16383u)
# define Rte_InvalidValue_c14_deg_p_s_m4096_4095_0k5 ((c14_deg_p_s_m4096_4095_0k5)16383u)
# if (defined RTE_CONST_I_C14_DEG_P_S_M4096_4095_0K5_SNA) || (defined I_C14_DEG_P_S_M4096_4095_0K5_SNA)
#  if (!defined RTE_CONST_I_C14_DEG_P_S_M4096_4095_0K5_SNA) || (RTE_CONST_I_C14_DEG_P_S_M4096_4095_0K5_SNA != 16383u)
#   error "Enumeration constant <I_C14_DEG_P_S_M4096_4095_0K5_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C14_DEG_P_S_M4096_4095_0K5_SNA (16383u)
#  define I_C14_DEG_P_S_M4096_4095_0K5_SNA ((c14_deg_p_s_m4096_4095_0k5)16383u)
# endif

# define Rte_TypeDef_c14_m_0_81k91_0k005
typedef uint16 c14_m_0_81k91_0k005;
# define c14_m_0_81k91_0k005_LowerLimit ((c14_m_0_81k91_0k005)0u)
# define c14_m_0_81k91_0k005_UpperLimit ((c14_m_0_81k91_0k005)16383u)
# define Rte_InvalidValue_c14_m_0_81k91_0k005 ((c14_m_0_81k91_0k005)16383u)
# if (defined RTE_CONST_I_C14_M_0_81K91_0K005_SNA) || (defined I_C14_M_0_81K91_0K005_SNA)
#  if (!defined RTE_CONST_I_C14_M_0_81K91_0K005_SNA) || (RTE_CONST_I_C14_M_0_81K91_0K005_SNA != 16383u)
#   error "Enumeration constant <I_C14_M_0_81K91_0K005_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C14_M_0_81K91_0K005_SNA (16383u)
#  define I_C14_M_0_81K91_0K005_SNA ((c14_m_0_81k91_0k005)16383u)
# endif

# define Rte_TypeDef_c14_m_m40k96_40k95_0k005
typedef uint16 c14_m_m40k96_40k95_0k005;
# define c14_m_m40k96_40k95_0k005_LowerLimit ((c14_m_m40k96_40k95_0k005)0u)
# define c14_m_m40k96_40k95_0k005_UpperLimit ((c14_m_m40k96_40k95_0k005)16383u)
# define Rte_InvalidValue_c14_m_m40k96_40k95_0k005 ((c14_m_m40k96_40k95_0k005)16383u)
# if (defined RTE_CONST_I_C14_M_M40K96_40K95_0K005_SNA) || (defined I_C14_M_M40K96_40K95_0K005_SNA)
#  if (!defined RTE_CONST_I_C14_M_M40K96_40K95_0K005_SNA) || (RTE_CONST_I_C14_M_M40K96_40K95_0K005_SNA != 16383u)
#   error "Enumeration constant <I_C14_M_M40K96_40K95_0K005_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C14_M_M40K96_40K95_0K005_SNA (16383u)
#  define I_C14_M_M40K96_40K95_0K005_SNA ((c14_m_m40k96_40k95_0k005)16383u)
# endif

# define Rte_TypeDef_c14_rpm_0_16382_1
typedef uint16 c14_rpm_0_16382_1;
# define c14_rpm_0_16382_1_LowerLimit ((c14_rpm_0_16382_1)0u)
# define c14_rpm_0_16382_1_UpperLimit ((c14_rpm_0_16382_1)16383u)
# define Rte_InvalidValue_c14_rpm_0_16382_1 ((c14_rpm_0_16382_1)16383u)
# if (defined RTE_CONST_I_C14_RPM_0_16382_1_SNA) || (defined I_C14_RPM_0_16382_1_SNA)
#  if (!defined RTE_CONST_I_C14_RPM_0_16382_1_SNA) || (RTE_CONST_I_C14_RPM_0_16382_1_SNA != 16383u)
#   error "Enumeration constant <I_C14_RPM_0_16382_1_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C14_RPM_0_16382_1_SNA (16383u)
#  define I_C14_RPM_0_16382_1_SNA ((c14_rpm_0_16382_1)16383u)
# endif

# define Rte_TypeDef_c14_rpm_0_8191_0k5
typedef uint16 c14_rpm_0_8191_0k5;
# define c14_rpm_0_8191_0k5_LowerLimit ((c14_rpm_0_8191_0k5)0u)
# define c14_rpm_0_8191_0k5_UpperLimit ((c14_rpm_0_8191_0k5)16383u)
# define Rte_InvalidValue_c14_rpm_0_8191_0k5 ((c14_rpm_0_8191_0k5)16383u)
# if (defined RTE_CONST_I_C14_RPM_0_8191_0K5_SNA) || (defined I_C14_RPM_0_8191_0K5_SNA)
#  if (!defined RTE_CONST_I_C14_RPM_0_8191_0K5_SNA) || (RTE_CONST_I_C14_RPM_0_8191_0K5_SNA != 16383u)
#   error "Enumeration constant <I_C14_RPM_0_8191_0K5_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C14_RPM_0_8191_0K5_SNA (16383u)
#  define I_C14_RPM_0_8191_0K5_SNA ((c14_rpm_0_8191_0k5)16383u)
# endif

# define Rte_TypeDef_c15_1_p_m_m0k0409575_0k0409575
typedef uint16 c15_1_p_m_m0k0409575_0k0409575;
# define c15_1_p_m_m0k0409575_0k0409575_LowerLimit ((c15_1_p_m_m0k0409575_0k0409575)0u)
# define c15_1_p_m_m0k0409575_0k0409575_UpperLimit ((c15_1_p_m_m0k0409575_0k0409575)32767u)
# define Rte_InvalidValue_c15_1_p_m_m0k0409575_0k0409575 ((c15_1_p_m_m0k0409575_0k0409575)32767u)
# if (defined RTE_CONST_I_C15_1_P_M_M0K0409575_0K0409575_SNA) || (defined I_C15_1_P_M_M0K0409575_0K0409575_SNA)
#  if (!defined RTE_CONST_I_C15_1_P_M_M0K0409575_0K0409575_SNA) || (RTE_CONST_I_C15_1_P_M_M0K0409575_0K0409575_SNA != 32767u)
#   error "Enumeration constant <I_C15_1_P_M_M0K0409575_0K0409575_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C15_1_P_M_M0K0409575_0K0409575_SNA (32767u)
#  define I_C15_1_P_M_M0K0409575_0K0409575_SNA ((c15_1_p_m_m0k0409575_0k0409575)32767u)
# endif

# define Rte_TypeDef_c15_ADAS_RegionCode
typedef uint16 c15_ADAS_RegionCode;
# define c15_ADAS_RegionCode_LowerLimit ((c15_ADAS_RegionCode)0u)
# define c15_ADAS_RegionCode_UpperLimit ((c15_ADAS_RegionCode)32767u)
# define Rte_InvalidValue_c15_ADAS_RegionCode ((c15_ADAS_RegionCode)32767u)
# if (defined RTE_CONST_I_C15_ADAS_REGIONCODE_UNKWN) || (defined I_C15_ADAS_REGIONCODE_UNKWN)
#  if (!defined RTE_CONST_I_C15_ADAS_REGIONCODE_UNKWN) || (RTE_CONST_I_C15_ADAS_REGIONCODE_UNKWN != 0u)
#   error "Enumeration constant <I_C15_ADAS_REGIONCODE_UNKWN> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C15_ADAS_REGIONCODE_UNKWN (0u)
#  define I_C15_ADAS_REGIONCODE_UNKWN ((c15_ADAS_RegionCode)0u)
# endif
# if (defined RTE_CONST_I_C15_ADAS_REGIONCODE_SNA) || (defined I_C15_ADAS_REGIONCODE_SNA)
#  if (!defined RTE_CONST_I_C15_ADAS_REGIONCODE_SNA) || (RTE_CONST_I_C15_ADAS_REGIONCODE_SNA != 32767u)
#   error "Enumeration constant <I_C15_ADAS_REGIONCODE_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C15_ADAS_REGIONCODE_SNA (32767u)
#  define I_C15_ADAS_REGIONCODE_SNA ((c15_ADAS_RegionCode)32767u)
# endif

# define Rte_TypeDef_c15_deg_m81k92_p80k91_0k005
typedef uint16 c15_deg_m81k92_p80k91_0k005;
# define c15_deg_m81k92_p80k91_0k005_LowerLimit ((c15_deg_m81k92_p80k91_0k005)0u)
# define c15_deg_m81k92_p80k91_0k005_UpperLimit ((c15_deg_m81k92_p80k91_0k005)32767u)
# define Rte_InvalidValue_c15_deg_m81k92_p80k91_0k005 ((c15_deg_m81k92_p80k91_0k005)32767u)
# if (defined RTE_CONST_I_C15_DEG_M81K92_P80K91_0K005_SNA) || (defined I_C15_DEG_M81K92_P80K91_0K005_SNA)
#  if (!defined RTE_CONST_I_C15_DEG_M81K92_P80K91_0K005_SNA) || (RTE_CONST_I_C15_DEG_M81K92_P80K91_0K005_SNA != 32767u)
#   error "Enumeration constant <I_C15_DEG_M81K92_P80K91_0K005_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C15_DEG_M81K92_P80K91_0K005_SNA (32767u)
#  define I_C15_DEG_M81K92_P80K91_0K005_SNA ((c15_deg_m81k92_p80k91_0k005)32767u)
# endif

# define Rte_TypeDef_c16_Nm_0_65534_1
typedef uint16 c16_Nm_0_65534_1;
# define c16_Nm_0_65534_1_LowerLimit ((c16_Nm_0_65534_1)0u)
# define c16_Nm_0_65534_1_UpperLimit ((c16_Nm_0_65534_1)65535u)
# define Rte_InvalidValue_c16_Nm_0_65534_1 ((c16_Nm_0_65534_1)65535u)
# if (defined RTE_CONST_I_C16_NM_0_65534_1_SNA) || (defined I_C16_NM_0_65534_1_SNA)
#  if (!defined RTE_CONST_I_C16_NM_0_65534_1_SNA) || (RTE_CONST_I_C16_NM_0_65534_1_SNA != 65535u)
#   error "Enumeration constant <I_C16_NM_0_65534_1_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C16_NM_0_65534_1_SNA (65535u)
#  define I_C16_NM_0_65534_1_SNA ((c16_Nm_0_65534_1)65535u)
# endif

# define Rte_TypeDef_c16_deg_m32k767_32k767_0k001
typedef uint16 c16_deg_m32k767_32k767_0k001;
# define c16_deg_m32k767_32k767_0k001_LowerLimit ((c16_deg_m32k767_32k767_0k001)0u)
# define c16_deg_m32k767_32k767_0k001_UpperLimit ((c16_deg_m32k767_32k767_0k001)65535u)
# define Rte_InvalidValue_c16_deg_m32k767_32k767_0k001 ((c16_deg_m32k767_32k767_0k001)65535u)
# if (defined RTE_CONST_I_C16_DEG_M32K767_32K767_0K001_SNA) || (defined I_C16_DEG_M32K767_32K767_0K001_SNA)
#  if (!defined RTE_CONST_I_C16_DEG_M32K767_32K767_0K001_SNA) || (RTE_CONST_I_C16_DEG_M32K767_32K767_0K001_SNA != 65535u)
#   error "Enumeration constant <I_C16_DEG_M32K767_32K767_0K001_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C16_DEG_M32K767_32K767_0K001_SNA (65535u)
#  define I_C16_DEG_M32K767_32K767_0K001_SNA ((c16_deg_m32k767_32k767_0k001)65535u)
# endif

# define Rte_TypeDef_c16_deg_p_s_m327k68_327k66_0k01
typedef uint16 c16_deg_p_s_m327k68_327k66_0k01;
# define c16_deg_p_s_m327k68_327k66_0k01_LowerLimit ((c16_deg_p_s_m327k68_327k66_0k01)0u)
# define c16_deg_p_s_m327k68_327k66_0k01_UpperLimit ((c16_deg_p_s_m327k68_327k66_0k01)65535u)
# define Rte_InvalidValue_c16_deg_p_s_m327k68_327k66_0k01 ((c16_deg_p_s_m327k68_327k66_0k01)65535u)
# if (defined RTE_CONST_I_C16_DEG_P_S_M327K68_327K66_0K01_SNA) || (defined I_C16_DEG_P_S_M327K68_327K66_0K01_SNA)
#  if (!defined RTE_CONST_I_C16_DEG_P_S_M327K68_327K66_0K01_SNA) || (RTE_CONST_I_C16_DEG_P_S_M327K68_327K66_0K01_SNA != 65535u)
#   error "Enumeration constant <I_C16_DEG_P_S_M327K68_327K66_0K01_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C16_DEG_P_S_M327K68_327K66_0K01_SNA (65535u)
#  define I_C16_DEG_P_S_M327K68_327K66_0K01_SNA ((c16_deg_p_s_m327k68_327k66_0k01)65535u)
# endif

# define Rte_TypeDef_c16_m_0_65k534_0k001
typedef uint16 c16_m_0_65k534_0k001;
# define c16_m_0_65k534_0k001_LowerLimit ((c16_m_0_65k534_0k001)0u)
# define c16_m_0_65k534_0k001_UpperLimit ((c16_m_0_65k534_0k001)65535u)
# define Rte_InvalidValue_c16_m_0_65k534_0k001 ((c16_m_0_65k534_0k001)65535u)
# if (defined RTE_CONST_I_C16_M_0_65K534_0K001_SNA) || (defined I_C16_M_0_65K534_0K001_SNA)
#  if (!defined RTE_CONST_I_C16_M_0_65K534_0K001_SNA) || (RTE_CONST_I_C16_M_0_65K534_0K001_SNA != 65535u)
#   error "Enumeration constant <I_C16_M_0_65K534_0K001_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C16_M_0_65K534_0K001_SNA (65535u)
#  define I_C16_M_0_65K534_0K001_SNA ((c16_m_0_65k534_0k001)65535u)
# endif

# define Rte_TypeDef_c16_m_m2d2768_4d2766_0d0001
typedef uint16 c16_m_m2d2768_4d2766_0d0001;
# define c16_m_m2d2768_4d2766_0d0001_LowerLimit ((c16_m_m2d2768_4d2766_0d0001)0u)
# define c16_m_m2d2768_4d2766_0d0001_UpperLimit ((c16_m_m2d2768_4d2766_0d0001)65535u)
# define Rte_InvalidValue_c16_m_m2d2768_4d2766_0d0001 ((c16_m_m2d2768_4d2766_0d0001)65535u)
# if (defined RTE_CONST_I_C16_M_M2D2768_4D2766_0D0001_SNA) || (defined I_C16_M_M2D2768_4D2766_0D0001_SNA)
#  if (!defined RTE_CONST_I_C16_M_M2D2768_4D2766_0D0001_SNA) || (RTE_CONST_I_C16_M_M2D2768_4D2766_0D0001_SNA != 65535u)
#   error "Enumeration constant <I_C16_M_M2D2768_4D2766_0D0001_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C16_M_M2D2768_4D2766_0D0001_SNA (65535u)
#  define I_C16_M_M2D2768_4D2766_0D0001_SNA ((c16_m_m2d2768_4d2766_0d0001)65535u)
# endif

# define Rte_TypeDef_c16_m_m3d2768_3d2766_0d0001
typedef uint16 c16_m_m3d2768_3d2766_0d0001;
# define c16_m_m3d2768_3d2766_0d0001_LowerLimit ((c16_m_m3d2768_3d2766_0d0001)0u)
# define c16_m_m3d2768_3d2766_0d0001_UpperLimit ((c16_m_m3d2768_3d2766_0d0001)65535u)
# define Rte_InvalidValue_c16_m_m3d2768_3d2766_0d0001 ((c16_m_m3d2768_3d2766_0d0001)65535u)
# if (defined RTE_CONST_I_C16_M_M3D2768_3D2766_0D0001_SNA) || (defined I_C16_M_M3D2768_3D2766_0D0001_SNA)
#  if (!defined RTE_CONST_I_C16_M_M3D2768_3D2766_0D0001_SNA) || (RTE_CONST_I_C16_M_M3D2768_3D2766_0D0001_SNA != 65535u)
#   error "Enumeration constant <I_C16_M_M3D2768_3D2766_0D0001_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C16_M_M3D2768_3D2766_0D0001_SNA (65535u)
#  define I_C16_M_M3D2768_3D2766_0D0001_SNA ((c16_m_m3d2768_3d2766_0d0001)65535u)
# endif

# define Rte_TypeDef_c16_ms_0_20970880_320
typedef uint16 c16_ms_0_20970880_320;
# define c16_ms_0_20970880_320_LowerLimit ((c16_ms_0_20970880_320)0u)
# define c16_ms_0_20970880_320_UpperLimit ((c16_ms_0_20970880_320)65535u)
# define Rte_InvalidValue_c16_ms_0_20970880_320 ((c16_ms_0_20970880_320)65535u)
# if (defined RTE_CONST_I_C16_MS_0_20970880_320_SNA) || (defined I_C16_MS_0_20970880_320_SNA)
#  if (!defined RTE_CONST_I_C16_MS_0_20970880_320_SNA) || (RTE_CONST_I_C16_MS_0_20970880_320_SNA != 65535u)
#   error "Enumeration constant <I_C16_MS_0_20970880_320_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C16_MS_0_20970880_320_SNA (65535u)
#  define I_C16_MS_0_20970880_320_SNA ((c16_ms_0_20970880_320)65535u)
# endif

# define Rte_TypeDef_c16_rad_m0d6553_p0d6553_0d00002
typedef uint16 c16_rad_m0d6553_p0d6553_0d00002;
# define c16_rad_m0d6553_p0d6553_0d00002_LowerLimit ((c16_rad_m0d6553_p0d6553_0d00002)0u)
# define c16_rad_m0d6553_p0d6553_0d00002_UpperLimit ((c16_rad_m0d6553_p0d6553_0d00002)65535u)
# define Rte_InvalidValue_c16_rad_m0d6553_p0d6553_0d00002 ((c16_rad_m0d6553_p0d6553_0d00002)65535u)
# if (defined RTE_CONST_I_C16_RAD_M0D6553_P0D6553_0D00002_SNA) || (defined I_C16_RAD_M0D6553_P0D6553_0D00002_SNA)
#  if (!defined RTE_CONST_I_C16_RAD_M0D6553_P0D6553_0D00002_SNA) || (RTE_CONST_I_C16_RAD_M0D6553_P0D6553_0D00002_SNA != 65535u)
#   error "Enumeration constant <I_C16_RAD_M0D6553_P0D6553_0D00002_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C16_RAD_M0D6553_P0D6553_0D00002_SNA (65535u)
#  define I_C16_RAD_M0D6553_P0D6553_0D00002_SNA ((c16_rad_m0d6553_p0d6553_0d00002)65535u)
# endif

# define Rte_TypeDef_c24_km_0_999999k9_0k1
//typedef uint32 c24_km_0_999999k9_0k1;
//# define c24_km_0_999999k9_0k1_LowerLimit ((c24_km_0_999999k9_0k1)0u)
//# define c24_km_0_999999k9_0k1_UpperLimit ((c24_km_0_999999k9_0k1)16777215u)
# define Rte_InvalidValue_c24_km_0_999999k9_0k1 ((c24_km_0_999999k9_0k1)16777215u)
# if (defined RTE_CONST_I_C24_KM_0_999999K9_0K1_SNA) || (defined I_C24_KM_0_999999K9_0K1_SNA)
#  if (!defined RTE_CONST_I_C24_KM_0_999999K9_0K1_SNA) || (RTE_CONST_I_C24_KM_0_999999K9_0K1_SNA != 16777215u)
#   error "Enumeration constant <I_C24_KM_0_999999K9_0K1_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C24_KM_0_999999K9_0K1_SNA (16777215u)
#  define I_C24_KM_0_999999K9_0K1_SNA ((c24_km_0_999999k9_0k1)16777215u)
# endif

# define Rte_TypeDef_c32_deg_m180_180_0k0000001
typedef uint32 c32_deg_m180_180_0k0000001;
# define c32_deg_m180_180_0k0000001_LowerLimit ((c32_deg_m180_180_0k0000001)0u)
# define c32_deg_m180_180_0k0000001_UpperLimit ((c32_deg_m180_180_0k0000001)4294967295u)
# define Rte_InvalidValue_c32_deg_m180_180_0k0000001 ((c32_deg_m180_180_0k0000001)4294967295u)
# if (defined RTE_CONST_I_C32_DEG_M180_180_0K0000001_SNA) || (defined I_C32_DEG_M180_180_0K0000001_SNA)
#  if (!defined RTE_CONST_I_C32_DEG_M180_180_0K0000001_SNA) || (RTE_CONST_I_C32_DEG_M180_180_0K0000001_SNA != 4294967295u)
#   error "Enumeration constant <I_C32_DEG_M180_180_0K0000001_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C32_DEG_M180_180_0K0000001_SNA (4294967295u)
#  define I_C32_DEG_M180_180_0K0000001_SNA ((c32_deg_m180_180_0k0000001)4294967295u)
# endif

# define Rte_TypeDef_c32_deg_m90_90_0k0000001
typedef uint32 c32_deg_m90_90_0k0000001;
# define c32_deg_m90_90_0k0000001_LowerLimit ((c32_deg_m90_90_0k0000001)0u)
# define c32_deg_m90_90_0k0000001_UpperLimit ((c32_deg_m90_90_0k0000001)4294967295u)
# define Rte_InvalidValue_c32_deg_m90_90_0k0000001 ((c32_deg_m90_90_0k0000001)4294967295u)
# if (defined RTE_CONST_I_C32_DEG_M90_90_0K0000001_SNA) || (defined I_C32_DEG_M90_90_0K0000001_SNA)
#  if (!defined RTE_CONST_I_C32_DEG_M90_90_0K0000001_SNA) || (RTE_CONST_I_C32_DEG_M90_90_0K0000001_SNA != 4294967295u)
#   error "Enumeration constant <I_C32_DEG_M90_90_0K0000001_SNA> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_C32_DEG_M90_90_0K0000001_SNA (4294967295u)
#  define I_C32_DEG_M90_90_0K0000001_SNA ((c32_deg_m90_90_0k0000001)4294967295u)
# endif

# define Rte_TypeDef_cIHC_Plus_HiBm_Stat_V2
typedef uint8 cIHC_Plus_HiBm_Stat_V2;
# define cIHC_Plus_HiBm_Stat_V2_LowerLimit ((cIHC_Plus_HiBm_Stat_V2)0u)
# define cIHC_Plus_HiBm_Stat_V2_UpperLimit ((cIHC_Plus_HiBm_Stat_V2)3u)
# if (defined RTE_CONST_I_CIHC_PLUS_HIBM_STAT_V2_OFF) || (defined I_CIHC_PLUS_HIBM_STAT_V2_OFF)
#  if (!defined RTE_CONST_I_CIHC_PLUS_HIBM_STAT_V2_OFF) || (RTE_CONST_I_CIHC_PLUS_HIBM_STAT_V2_OFF != 0u)
#   error "Enumeration constant <I_CIHC_PLUS_HIBM_STAT_V2_OFF> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_CIHC_PLUS_HIBM_STAT_V2_OFF (0u)
#  define I_CIHC_PLUS_HIBM_STAT_V2_OFF ((cIHC_Plus_HiBm_Stat_V2)0u)
# endif
# if (defined RTE_CONST_I_CIHC_PLUS_HIBM_STAT_V2_ON) || (defined I_CIHC_PLUS_HIBM_STAT_V2_ON)
#  if (!defined RTE_CONST_I_CIHC_PLUS_HIBM_STAT_V2_ON) || (RTE_CONST_I_CIHC_PLUS_HIBM_STAT_V2_ON != 1u)
#   error "Enumeration constant <I_CIHC_PLUS_HIBM_STAT_V2_ON> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_CIHC_PLUS_HIBM_STAT_V2_ON (1u)
#  define I_CIHC_PLUS_HIBM_STAT_V2_ON ((cIHC_Plus_HiBm_Stat_V2)1u)
# endif
# if (defined RTE_CONST_I_CIHC_PLUS_HIBM_STAT_V2_TFL_ON) || (defined I_CIHC_PLUS_HIBM_STAT_V2_TFL_ON)
#  if (!defined RTE_CONST_I_CIHC_PLUS_HIBM_STAT_V2_TFL_ON) || (RTE_CONST_I_CIHC_PLUS_HIBM_STAT_V2_TFL_ON != 2u)
#   error "Enumeration constant <I_CIHC_PLUS_HIBM_STAT_V2_TFL_ON> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_CIHC_PLUS_HIBM_STAT_V2_TFL_ON (2u)
#  define I_CIHC_PLUS_HIBM_STAT_V2_TFL_ON ((cIHC_Plus_HiBm_Stat_V2)2u)
# endif
# if (defined RTE_CONST_I_CIHC_PLUS_HIBM_STAT_V2_ML_ON) || (defined I_CIHC_PLUS_HIBM_STAT_V2_ML_ON)
#  if (!defined RTE_CONST_I_CIHC_PLUS_HIBM_STAT_V2_ML_ON) || (RTE_CONST_I_CIHC_PLUS_HIBM_STAT_V2_ML_ON != 3u)
#   error "Enumeration constant <I_CIHC_PLUS_HIBM_STAT_V2_ML_ON> conflicts with another constant."
#  endif
# else
#  define RTE_CONST_I_CIHC_PLUS_HIBM_STAT_V2_ML_ON (3u)
#  define I_CIHC_PLUS_HIBM_STAT_V2_ML_ON ((cIHC_Plus_HiBm_Stat_V2)3u)
# endif

# define Rte_TypeDef_ARR_08_UInt_noSNA_8
typedef c08_UInt_SNA_na ARR_08_UInt_noSNA_8[8];

#ifndef FR_BUS_ARCHT_STAR_1
# define Rte_TypeDef_Dcm_0Byte_Type
typedef UInt8 Dcm_0Byte_Type[1];

# define Rte_TypeDef_Dcm_10Byte_Type
typedef UInt8 Dcm_10Byte_Type[10];

# define Rte_TypeDef_Dcm_11Byte_Type
typedef UInt8 Dcm_11Byte_Type[11];

# define Rte_TypeDef_Dcm_12Byte_Type
typedef UInt8 Dcm_12Byte_Type[12];

# define Rte_TypeDef_Dcm_13Byte_Type
typedef UInt8 Dcm_13Byte_Type[13];

# define Rte_TypeDef_Dcm_14Byte_Type
typedef UInt8 Dcm_14Byte_Type[14];

# define Rte_TypeDef_Dcm_15Byte_Type
typedef UInt8 Dcm_15Byte_Type[15];

# define Rte_TypeDef_Dcm_16Byte_Type
typedef UInt8 Dcm_16Byte_Type[16];

# define Rte_TypeDef_Dcm_19Byte_Type
typedef UInt8 Dcm_19Byte_Type[19];

# define Rte_TypeDef_Dcm_1Byte_Type
typedef UInt8 Dcm_1Byte_Type[1];

# define Rte_TypeDef_Dcm_100Byte_Type
typedef UInt8 Dcm_100Byte_Type[100];

# define Rte_TypeDef_Dcm_110Byte_Type
typedef UInt8 Dcm_110Byte_Type[110];

# define Rte_TypeDef_Dcm_164Byte_Type
typedef UInt8 Dcm_164Byte_Type[164];

# define Rte_TypeDef_Dcm_172Byte_Type
typedef UInt8 Dcm_172Byte_Type[172];

# define Rte_TypeDef_Dcm_20Byte_Type
typedef UInt8 Dcm_20Byte_Type[20];

# define Rte_TypeDef_Dcm_21Byte_Type
typedef UInt8 Dcm_21Byte_Type[21];

# define Rte_TypeDef_Dcm_23Byte_Type
typedef UInt8 Dcm_23Byte_Type[23];

# define Rte_TypeDef_Dcm_24Byte_Type
typedef UInt8 Dcm_24Byte_Type[24];

# define Rte_TypeDef_Dcm_256Byte_Type
typedef UInt8 Dcm_256Byte_Type[256];

# define Rte_TypeDef_Dcm_26Byte_Type
typedef UInt8 Dcm_26Byte_Type[26];

# define Rte_TypeDef_Dcm_2Byte_Type
typedef UInt8 Dcm_2Byte_Type[2];

# define Rte_TypeDef_Dcm_33Byte_Type
typedef UInt8 Dcm_33Byte_Type[33];

# define Rte_TypeDef_Dcm_34Byte_Type
typedef UInt8 Dcm_34Byte_Type[34];

# define Rte_TypeDef_Dcm_36Byte_Type
typedef UInt8 Dcm_36Byte_Type[36];

# define Rte_TypeDef_Dcm_38Byte_Type
typedef UInt8 Dcm_38Byte_Type[38];

# define Rte_TypeDef_Dcm_39Byte_Type
typedef UInt8 Dcm_39Byte_Type[39];

# define Rte_TypeDef_Dcm_3Byte_Type
typedef UInt8 Dcm_3Byte_Type[3];

# define Rte_TypeDef_Dcm_42Byte_Type
typedef UInt8 Dcm_42Byte_Type[42];

# define Rte_TypeDef_Dcm_44Byte_Type
typedef UInt8 Dcm_44Byte_Type[44];

# define Rte_TypeDef_Dcm_452Byte_Type
typedef UInt8 Dcm_452Byte_Type[452];

# define Rte_TypeDef_Dcm_460Byte_Type
typedef UInt8 Dcm_460Byte_Type[460];

# define Rte_TypeDef_Dcm_4Byte_Type
typedef UInt8 Dcm_4Byte_Type[4];

# define Rte_TypeDef_Dcm_5Byte_Type
typedef UInt8 Dcm_5Byte_Type[5];

# define Rte_TypeDef_Dcm_50Byte_Type
typedef UInt8 Dcm_50Byte_Type[50];

# define Rte_TypeDef_Dcm_512Byte_Type
typedef UInt8 Dcm_512Byte_Type[512];

# define Rte_TypeDef_Dcm_53Byte_Type
typedef UInt8 Dcm_53Byte_Type[53];

# define Rte_TypeDef_Dcm_57Byte_Type
typedef UInt8 Dcm_57Byte_Type[57];

# define Rte_TypeDef_Dcm_59Byte_Type
typedef UInt8 Dcm_59Byte_Type[59];

# define Rte_TypeDef_Dcm_60Byte_Type
typedef UInt8 Dcm_60Byte_Type[60];

# define Rte_TypeDef_Dcm_61Byte_Type
typedef UInt8 Dcm_61Byte_Type[61];

# define Rte_TypeDef_Dcm_62Byte_Type
typedef UInt8 Dcm_62Byte_Type[62];

# define Rte_TypeDef_Dcm_67Byte_Type
typedef UInt8 Dcm_67Byte_Type[67];

# define Rte_TypeDef_Dcm_632Byte_Type
typedef UInt8 Dcm_632Byte_Type[632];

# define Rte_TypeDef_Dcm_90Byte_Type
typedef UInt8 Dcm_90Byte_Type[90];

# define Rte_TypeDef_Dcm_6Byte_Type
typedef UInt8 Dcm_6Byte_Type[6];

# define Rte_TypeDef_Dcm_76Byte_Type
typedef UInt8 Dcm_76Byte_Type[76];

# define Rte_TypeDef_Dcm_7Byte_Type
typedef UInt8 Dcm_7Byte_Type[7];

# define Rte_TypeDef_Dcm_87Byte_Type
typedef UInt8 Dcm_87Byte_Type[87];

# define Rte_TypeDef_Dcm_8Byte_Type
typedef UInt8 Dcm_8Byte_Type[8];

# define Rte_TypeDef_Dcm_9Byte_Type
typedef UInt8 Dcm_9Byte_Type[9];

# define Rte_TypeDef_Dcm_SecAccess_1_DataRecType
typedef UInt8 Dcm_SecAccess_1_DataRecType[1];

# define Rte_TypeDef_Dcm_SecAccess_1_KeyType
typedef UInt8 Dcm_SecAccess_1_KeyType[4];

# define Rte_TypeDef_Dcm_SecAccess_1_SeedType
typedef UInt8 Dcm_SecAccess_1_SeedType[8];

#endif


# define Rte_TypeDef_REC_08_UInt_Record8
typedef struct
{
  c08_UInt_SNA_na val1;
  c08_UInt_SNA_na val2;
  c08_UInt_SNA_na val3;
  c08_UInt_SNA_na val4;
  c08_UInt_SNA_na val5;
  c08_UInt_SNA_na val6;
  c08_UInt_SNA_na val7;
  c08_UInt_SNA_na val8;
} REC_08_UInt_Record8;

# define Rte_TypeDef_REC_ADAS_CuA
typedef struct
{
  c02_ADAS_AreaBuildUp ADAS_CuA_AreaBuildUp;
  c02_ADAS_Bridge ADAS_CuA_Bridge;
  c02_ADAS_CmpxInsct ADAS_CuA_CmpxInsct;
  c02_0_3_1_nSNA ADAS_CuA_CycCnt;
  c05_ADAS ADAS_CuA_EffSpdLmt;
  c03_ADAS_EffSpdLmtType ADAS_CuA_EffSpdLmtType;
  c05_perc_0_31_3k333 ADAS_CuA_RelProbb;
  c03_ADAS_FuncRoadClass ADAS_CuA_FuncRoadClass;
  c03_MsgTyp_1_to_7 ADAS_CuA_MsgTyp;
  c03_ADAS_NumOfLaneDrvDir ADAS_CuA_NumOfLaneDrvDir;
  c02_ADAS_NumOfLaneOppDir ADAS_CuA_NumOfLaneOppDir;
  c13_m_0_8190_1 ADAS_CuA_Offset;
  c02_ADAS_PartRoute ADAS_CuA_PartRoute;
  c06_Idx_0_to_63_1 ADAS_CuA_PathIdx;
  c01_FalseTrue ADAS_CuA_ReTr;
  c02_ADAS_RoadDivd ADAS_CuA_RoadDivd;
  c02_ADAS_Tunnel ADAS_CuA_Tunnel;
  c01_FalseTrue ADAS_CuA_Updt;
  c04_ADAS_WayForm ADAS_CuA_WayForm;
} REC_ADAS_CuA;

# define Rte_TypeDef_REC_ADAS_Meta
typedef struct
{
  c10_ADAS_CountryCode ADAS_Meta_CountryCode;
  c02_0_3_1_nSNA ADAS_Meta_CycCnt;
  c01_Right_Left ADAS_Meta_DrvSide;
  c03_0_to_7_1_no_SNA ADAS_Meta_ProtVer_MinorSub;
  c09_ADAS_HwVer ADAS_Meta_HwVer;
  c03_ADAS_MapProvid ADAS_Meta_MapProvid;
  c02_ADAS_MapVerQuar ADAS_Meta_MapVerQuar;
  c06_ADAS_MapVerYear ADAS_Meta_MapVerYear;
  c02_0_3_1_nSNA ADAS_Meta_ProtVer_Major;
  c04_0_15_1_SNA_na ADAS_Meta_ProtVer_Minor;
  c15_ADAS_RegionCode ADAS_Meta_RegionCode;
  c01_UnitVehSpd ADAS_Meta_SpdUnits;
} REC_ADAS_Meta;

# define Rte_TypeDef_REC_ADAS_Posn
typedef struct
{
  c09_ms_0_510_5 ADAS_Posn_Age;
  c03_ADAS_Posn_CurLane ADAS_Posn_CurLane;
  c02_0_3_1_nSNA ADAS_Posn_CycCnt;
  c03_ADAS_Posn_Idx ADAS_Posn_Idx;
  c03_MsgTyp_1_to_7 ADAS_Posn_MsgTyp;
  c13_m_0_8190_1 ADAS_Posn_Offset;
  c06_Idx_0_to_63_1 ADAS_Posn_PathIdx;
  c03_0_6_1 ADAS_Posn_PosConfdc;
  c05_perc_0_31_3k333 ADAS_Posn_PosProbb;
  c08_deg_0_358k5_1k417 ADAS_Posn_RelHead;
  c09_m_p_s_m12k8_89k2_0k2 ADAS_Posn_Spd;
} REC_ADAS_Posn;

# define Rte_TypeDef_REC_ADAS_Profile_Long_Latit
typedef struct
{
  c01_FalseTrue ADAS_ProfLong_CtrlPoint_Latit;
  c02_0_3_1_nSNA ADAS_ProfLong_CycCnt_Latit;
  c03_MsgTyp_1_to_7 ADAS_ProfLong_MsgTyp_Latit;
  c13_m_0_8190_1 ADAS_ProfLong_Offset_Latit;
  c06_Idx_0_to_63_1 ADAS_ProfLong_PathIdx_Latit;
  c01_FalseTrue ADAS_ProfLong_ReTr_Latit;
  c01_FalseTrue ADAS_ProfLong_Updt_Latit;
  c32_deg_m90_90_0k0000001 ADAS_ProfLong_Val_Latit;
} REC_ADAS_Profile_Long_Latit;

# define Rte_TypeDef_REC_ADAS_Profile_Long_Longit
typedef struct
{
  c01_FalseTrue ADAS_ProfLong_CtrlPoint_Longi;
  c02_0_3_1_nSNA ADAS_ProfLong_CycCnt_Longi;
  c03_MsgTyp_1_to_7 ADAS_ProfLong_MsgTyp_Longi;
  c13_m_0_8190_1 ADAS_ProfLong_Offset_Longi;
  c06_Idx_0_to_63_1 ADAS_ProfLong_PathIdx_Longi;
  c01_FalseTrue ADAS_ProfLong_ReTr_Longi;
  c01_FalseTrue ADAS_ProfLong_Updt_Longi;
  c32_deg_m180_180_0k0000001 ADAS_ProfLong_Val_Longit;
} REC_ADAS_Profile_Long_Longit;

# define Rte_TypeDef_REC_ADAS_Profile_Long_NPSL1
typedef struct
{
  c01_FalseTrue ADAS_ProfLong_CtrlPoint_NPSL1;
  c02_0_3_1_nSNA ADAS_ProfLong_CycCnt_NPSL1;
  c03_MsgTyp_1_to_7 ADAS_ProfLong_MsgTyp_NPSL1;
  c13_m_0_8190_1 ADAS_ProfLong_Offset_NPSL1;
  c06_Idx_0_to_63_1 ADAS_ProfLong_PathIdx_NPSL1;
  c01_FalseTrue ADAS_ProfLong_ReTr_NPSL1;
  c01_FalseTrue ADAS_ProfLong_Updt_NPSL1;
  c06_km_p_h_or_mph_0_310_5 ADAS_ProfLong_Val_SpdLmt;
  c06_km_p_h_or_mph_0_310_5 ADAS_ProfLong_Val_SpdLmt1;
  c03_NaviSpdLmtSignType ADAS_ProfLong_Val_SpdTyp;
  c03_NaviSpdLmtSignType ADAS_ProfLong_Val_SpdTyp1;
  c02_SpdUnit ADAS_ProfLong_Val_SpdUnt;
  c04_NaviSpdLmtVld_Stat ADAS_ProfLong_Val_SpdVld;
  c04_NaviSpdLmtVld_Stat ADAS_ProfLong_Val_SpdVld1;
} REC_ADAS_Profile_Long_NPSL1;

# define Rte_TypeDef_REC_ADAS_Profile_Long_NPSL2
typedef struct
{
  c01_FalseTrue ADAS_ProfLong_CtrlPoint_NPSL2;
  c02_0_3_1_nSNA ADAS_ProfLong_CycCnt_NPSL2;
  c03_MsgTyp_1_to_7 ADAS_ProfLong_MsgTyp_NPSL2;
  c13_m_0_8190_1 ADAS_ProfLong_Offset_NPSL2;
  c06_Idx_0_to_63_1 ADAS_ProfLong_PathIdx_NPSL2;
  c01_FalseTrue ADAS_ProfLong_ReTr_NPSL2;
  c01_FalseTrue ADAS_ProfLong_Updt_NPSL2;
  c06_km_p_h_or_mph_0_310_5 ADAS_ProfLong_Val_SpdLmt2;
  c03_NaviSpdLmtSignType ADAS_ProfLong_Val_SpdTyp2;
  c02_SpdUnit ADAS_ProfLong_Val_SpdUnt2;
  c04_NaviSpdLmtVld_Stat ADAS_ProfLong_Val_SpdVld2;
} REC_ADAS_Profile_Long_NPSL2;

# define Rte_TypeDef_REC_ADAS_Profile_Short_CurvLn
typedef struct
{
  c02_0_3_1_nSNA ADAS_ProfShort_AccurClass_CL;
  c10_m_0_510_1 ADAS_ProfShort_Dist1_CL;
  c13_m_0_8190_1 ADAS_ProfShort_Offset_CL;
  c10_to_1022_1 ADAS_ProfShort_Value0_CL;
  c10_to_1022_1 ADAS_ProfShort_Value1_CL;
  c01_FalseTrue ADAS_ProfShort_ReTr_CL;
  c01_FalseTrue ADAS_ProfShort_Updt_CL;
  c06_Idx_0_to_63_1 ADAS_ProfShort_PathIdx_CL;
  c03_MsgTyp_1_to_7 ADAS_ProfShort_MsgTyp_CL;
  c01_FalseTrue ADAS_ProfShort_CtrlPoint_CL;
  c02_0_3_1_nSNA ADAS_ProfShort_CycCnt_CL;
} REC_ADAS_Profile_Short_CurvLn;

# define Rte_TypeDef_REC_ADAS_Profile_Short_HeadChSp
typedef struct
{
  c02_0_3_1_nSNA ADAS_ProfShort_AccurClass_HCS;
  c10_m_0_510_1 ADAS_ProfShort_Dist1_HCS;
  c13_m_0_8190_1 ADAS_ProfShort_Offset_HCS;
  c10_to_1022_1 ADAS_ProfShort_Value0_HCS;
  c10_to_1022_1 ADAS_ProfShort_Value1_HCS;
  c01_FalseTrue ADAS_ProfShort_ReTr_HCS;
  c01_FalseTrue ADAS_ProfShort_CtrlPoint_HCS;
  c03_MsgTyp_1_to_7 ADAS_ProfShort_MsgTyp_HCS;
  c02_0_3_1_nSNA ADAS_ProfShort_CycCnt_HCS;
  c01_FalseTrue ADAS_ProfShort_Updt_HCS;
  c06_Idx_0_to_63_1 ADAS_ProfShort_PathIdx_HCS;
} REC_ADAS_Profile_Short_HeadChSp;

# define Rte_TypeDef_REC_ADAS_Profile_Short_LocDest
typedef struct
{
  c01_FalseTrue ADAS_ProfShort_CtrlPoint_LD;
  c02_0_3_1_nSNA ADAS_ProfShort_CycCnt_LD;
  c03_MsgTyp_1_to_7 ADAS_ProfShort_MsgTyp_LD;
  c13_m_0_8190_1 ADAS_ProfShort_Offset_LD;
  c06_Idx_0_to_63_1 ADAS_ProfShort_PathIdx_LD;
  c01_FalseTrue ADAS_ProfShort_ReTr_LD;
  c01_FalseTrue ADAS_ProfShort_Updt_LD;
  c05_DstType_Pred ADAS_ProfShort_Value0_DT;
  c05_LctType_Pred ADAS_ProfShort_Value0_LT;
  c05_DstType_Pred ADAS_ProfShort_Value1_DT;
  c05_LctType_Pred ADAS_ProfShort_Value1_LT;
  c02_0_3_1_nSNA ADAS_ProfShort_AccurClass_LD;
  c10_m_0_510_1 ADAS_ProfShort_Dist1_LD;
} REC_ADAS_Profile_Short_LocDest;

# define Rte_TypeDef_REC_ADAS_Profile_Short_RoadAcc
typedef struct
{
  c02_0_3_1_nSNA ADAS_ProfShort_AccurClass_RA;
  c10_m_0_510_1 ADAS_ProfShort_Dist1_RA;
  c03_MsgTyp_1_to_7 ADAS_ProfShort_MsgTyp_RA;
  c10_to_1022_1 ADAS_ProfShort_Value0_RA;
  c10_to_1022_1 ADAS_ProfShort_Value1_RA;
  c01_FalseTrue ADAS_ProfShort_Updt_RA;
  c02_0_3_1_nSNA ADAS_ProfShort_CycCnt_RA;
  c13_m_0_8190_1 ADAS_ProfShort_Offset_RA;
  c01_FalseTrue ADAS_ProfShort_ReTr_RA;
  c01_FalseTrue ADAS_ProfShort_CtrlPoint_RA;
  c06_Idx_0_to_63_1 ADAS_ProfShort_PathIdx_RA;
} REC_ADAS_Profile_Short_RoadAcc;

# define Rte_TypeDef_REC_ADAS_Profile_Short_RoadCon
typedef struct
{
  c02_0_3_1_nSNA ADAS_ProfShort_AccurClass_RC;
  c10_m_0_510_1 ADAS_ProfShort_Dist1_RC;
  c02_0_3_1_nSNA ADAS_ProfShort_CycCnt_RC;
  c10_to_1022_1 ADAS_ProfShort_Value0_RC;
  c10_to_1022_1 ADAS_ProfShort_Value1_RC;
  c01_FalseTrue ADAS_ProfShort_CtrlPoint_RC;
  c13_m_0_8190_1 ADAS_ProfShort_Offset_RC;
  c01_FalseTrue ADAS_ProfShort_Updt_RC;
  c03_MsgTyp_1_to_7 ADAS_ProfShort_MsgTyp_RC;
  c01_FalseTrue ADAS_ProfShort_ReTr_RC;
  c06_Idx_0_to_63_1 ADAS_ProfShort_PathIdx_RC;
} REC_ADAS_Profile_Short_RoadCon;

# define Rte_TypeDef_REC_ADAS_Profile_Short_RoutNum
typedef struct
{
  c02_0_3_1_nSNA ADAS_ProfShort_AccurClass_RN;
  c10_m_0_510_1 ADAS_ProfShort_Dist1_RN;
  c01_FalseTrue ADAS_ProfShort_Updt_RN;
  c10_to_1022_1 ADAS_ProfShort_Value0_RN;
  c10_to_1022_1 ADAS_ProfShort_Value1_RN;
  c01_FalseTrue ADAS_ProfShort_CtrlPoint_RN;
  c02_0_3_1_nSNA ADAS_ProfShort_CycCnt_RN;
  c01_FalseTrue ADAS_ProfShort_ReTr_RN;
  c13_m_0_8190_1 ADAS_ProfShort_Offset_RN;
  c03_MsgTyp_1_to_7 ADAS_ProfShort_MsgTyp_RN;
  c06_Idx_0_to_63_1 ADAS_ProfShort_PathIdx_RN;
} REC_ADAS_Profile_Short_RoutNum;

# define Rte_TypeDef_REC_ADAS_Profile_Short_SlopeLn
typedef struct
{
  c02_0_3_1_nSNA ADAS_ProfShort_AccurClass_SL;
  c10_m_0_510_1 ADAS_ProfShort_Dist1_SL;
  c01_FalseTrue ADAS_ProfShort_Updt_SL;
  c10_to_1022_1 ADAS_ProfShort_Value0_SL;
  c10_to_1022_1 ADAS_ProfShort_Value1_SL;
  c01_FalseTrue ADAS_ProfShort_CtrlPoint_SL;
  c06_Idx_0_to_63_1 ADAS_ProfShort_PathIdx_SL;
  c03_MsgTyp_1_to_7 ADAS_ProfShort_MsgTyp_SL;
  c02_0_3_1_nSNA ADAS_ProfShort_CycCnt_SL;
  c13_m_0_8190_1 ADAS_ProfShort_Offset_SL;
  c01_FalseTrue ADAS_ProfShort_ReTr_SL;
} REC_ADAS_Profile_Short_SlopeLn;

# define Rte_TypeDef_REC_ADAS_Profile_Short_SlopeSt
typedef struct
{
  c02_0_3_1_nSNA ADAS_ProfShort_AccurClass_SS;
  c10_m_0_510_1 ADAS_ProfShort_Dist1_SS;
  c02_0_3_1_nSNA ADAS_ProfShort_CycCnt_SS;
  c10_to_1022_1 ADAS_ProfShort_Value0_SS;
  c10_to_1022_1 ADAS_ProfShort_Value1_SS;
  c13_m_0_8190_1 ADAS_ProfShort_Offset_SS;
  c01_FalseTrue ADAS_ProfShort_ReTr_SS;
  c03_MsgTyp_1_to_7 ADAS_ProfShort_MsgTyp_SS;
  c06_Idx_0_to_63_1 ADAS_ProfShort_PathIdx_SS;
  c01_FalseTrue ADAS_ProfShort_CtrlPoint_SS;
  c01_FalseTrue ADAS_ProfShort_Updt_SS;
} REC_ADAS_Profile_Short_SlopeSt;

# define Rte_TypeDef_REC_ADAS_Profile_Short_VarSpSign
typedef struct
{
  c02_0_3_1_nSNA ADAS_ProfShort_AccurClass_VSS;
  c10_m_0_510_1 ADAS_ProfShort_Dist1_VSS;
  c13_m_0_8190_1 ADAS_ProfShort_Offset_VSS;
  c10_to_1022_1 ADAS_ProfShort_Value0_VSS;
  c10_to_1022_1 ADAS_ProfShort_Value1_VSS;
  c01_FalseTrue ADAS_ProfShort_Updt_VSS;
  c01_FalseTrue ADAS_ProfShort_ReTr_VSS;
  c06_Idx_0_to_63_1 ADAS_ProfShort_PathIdx_VSS;
  c02_0_3_1_nSNA ADAS_ProfShort_CycCnt_VSS;
  c01_FalseTrue ADAS_ProfShort_CtrlPoint_VSS;
  c03_MsgTyp_1_to_7 ADAS_ProfShort_MsgTyp_VSS;
} REC_ADAS_Profile_Short_VarSpSign;

# define Rte_TypeDef_REC_ADAS_Segment
typedef struct
{
  c02_ADAS_AreaBuildUp ADAS_Seg_AreaBuildUp;
  c02_ADAS_Bridge ADAS_Seg_Bridge;
  c02_ADAS_CmpxInsct ADAS_Seg_CmpxInsct;
  c02_0_3_1_nSNA ADAS_Seg_CycCnt;
  c05_ADAS ADAS_Seg_EffSpdLmt;
  c03_ADAS_EffSpdLmtType ADAS_Seg_EffSpdLmtType;
  c05_perc_0_31_3k333 ADAS_Seg_RelProbb;
  c03_ADAS_FuncRoadClass ADAS_Seg_FuncRoadClass;
  c03_ADAS_NumOfLaneDrvDir ADAS_Seg_NumOfLaneDrvDir;
  c02_ADAS_NumOfLaneOppDir ADAS_Seg_NumOfLaneOppDir;
  c13_m_0_8190_1 ADAS_Seg_Offset;
  c02_ADAS_PartRoute ADAS_Seg_PartRoute;
  c06_Idx_0_to_63_1 ADAS_Seg_PathIdx;
  c01_FalseTrue ADAS_Seg_ReTr;
  c02_ADAS_RoadDivd ADAS_Seg_RoadDivd;
  c02_ADAS_Tunnel ADAS_Seg_Tunnel;
  c01_FalseTrue ADAS_Seg_Updt;
  c04_ADAS_WayForm ADAS_Seg_WayForm;
} REC_ADAS_Segment;

# define Rte_TypeDef_REC_ADAS_Stub
typedef struct
{
  c02_ADAS_CmpxInsct ADAS_Stub_CmpxInsct;
  c02_0_3_1_nSNA ADAS_Stub_CycCnt;
  c01_FalseTrue ADAS_Stub_LastStub;
  c02_ADAS_PartRoute ADAS_Stub_PartRoute;
  c03_ADAS_NumOfLaneDrvDir ADAS_Stub_NumOfLaneDrvDir;
  c02_ADAS_NumOfLaneOppDir ADAS_Stub_NumOfLaneOppDir;
  c13_m_0_8190_1 ADAS_Stub_Offset;
  c06_Idx_0_to_63_1 ADAS_Stub_PathIdx;
  c01_FalseTrue ADAS_Stub_ReTr;
  c05_perc_0_31_3k333 ADAS_Stub_RelProbb;
  c03_ADAS_FuncRoadClass ADAS_Stub_FuncRoadClass;
  c06_Idx_0_to_63_1 ADAS_Stub_SubPathIdx;
  c08_deg_0_358k5_1k417 ADAS_Stub_TurnAngl;
  c01_FalseTrue ADAS_Stub_Updt;
  c04_ADAS_WayForm ADAS_Stub_WayForm;
  c02_ADAS_WayRt ADAS_Stub_WayRt;
} REC_ADAS_Stub;

# define Rte_TypeDef_REC_ALDW_Disp_Warn_Rq_515fv9hxb5jrzmunrr9r72aqj
typedef struct
{
  Rsrv03 Rsrv1_ALDW_Disp_Warn_Rq;
  c07_m_0_1k26_0k01 ALDW_LaneMarkWidth_Lt;
  c07_m_0_1k26_0k01 ALDW_LaneMarkWidth_Rt;
  c05_m_0_90_3 ALDW_LaneMark_DtctDist_Lt;
  c05_m_0_90_3 ALDW_LaneMark_DtctDist_Rt;
  Rsrv01 Rsrv2_ALDW_Disp_Warn_Rq;
  c02_ALDW_PulseTm_Rq ALDW_PulseTm_Rq;
  c05_ms_16_132_4 ALDW_VibTm_Rq;
  c01_ALDW_WarnMd_Rq ALDW_WarnMd_Rq;
  c03_ALDW_Warn_Rq ALDW_Warn_Rq;
  c08_CRC_woSNA CRC_ALDW_Disp_Warn_Rq;
  c04_0_15_1_SNA_na SQC_ALDW_Disp_Warn_Rq;
  c03_ALDW_BrkMsgDisp_Rq ALDW_BrkMsgDisp_Rq;
  DC_BOOL ALDW_Menu_Sw_Enbl_Rq;
  c02_ALDW_IndLmp_On_Rq ALDW_IndLmp_SwLED_On_Rq;
  c03_ALDW_MsgDisp_Rq ALDW_MsgDisp_Rq;
  c04_0_14_1 ALDW_ImgSyncNum;
} REC_ALDW_Disp_Warn_Rq_515fv9hxb5jrzmunrr9r72aqj;

# define Rte_TypeDef_REC_ALDW_LaneAttr1_evn08d6126fkfaksv87161o1j
typedef struct
{
  c02_ALDW_LaneChg_Stat ALDW_LaneChg_Stat;
  c08_CRC_woSNA CRC_ALDW_LaneAttr1;
  c04_0_1_0k1 ALDW_LaneDataQual_Rt;
  c10_m_m2d56_p7d66_0d01 ALDW_LaneLtrlDist_Lt;
  c10_m_m2d56_p7d66_0d01 ALDW_LaneLtrlDist_Rt;
  Rsrv01 Rsrv1_ALDW_LaneAttr1;
  c03_ALDW_RoadType ALDW_RoadType;
  c04_0_15_1_SNA_na SQC_ALDW_LaneAttr1;
  c02_ALDW_RoadExit_Stat ALDW_RoadExit_Stat;
  c03_1_6_1 ALDW_LaneNum;
  c04_0_1_0k1 ALDW_LaneDataQual_Lt;
  c03_1_6_1 ALDW_NumLane;
  c02_ALDW_LaneDscrb_Side ALDW_LaneDscrbSide;
  Rsrv01 Rsrv2_ALDW_LaneAttr1;
  c07_0_1_0k01 VLN_ConfdcLaneGeom;
} REC_ALDW_LaneAttr1_evn08d6126fkfaksv87161o1j;

# define Rte_TypeDef_REC_ALDW_LaneAttr2
typedef struct
{
  c02_DrvActvty ALDW_DrvActv_LDP;
  c15_1_p_m_m0k0409575_0k0409575 ALDW_LaneHrztCrv_Lt;
  c15_1_p_m_m0k0409575_0k0409575 ALDW_LaneHrztCrv_Rt;
  c03_ALDW_LaneMark_Stat ALDW_LaneMark_Lt_Stat;
  c03_ALDW_LaneMark_Stat ALDW_LaneMark_Rt_Stat;
  c04_ALDW_LaneMarkType ALDW_LaneMarkType_Lt;
  c04_ALDW_LaneMarkType ALDW_LaneMarkType_Rt;
  c02_ALDW_LaneSiteDtct_Stat ALDW_LaneSiteDtct_Stat;
  c08_CRC_woSNA CRC_ALDW_LaneAttr2;
  c04_0_15_1_SNA_na SQC_ALDW_LaneAttr2;
  c02_VLN_Lane_Stat_XX VLN_Lane_Stat_Lt;
  c02_VLN_Lane_Stat_XX VLN_Lane_Stat_Rt;
} REC_ALDW_LaneAttr2;

# define Rte_TypeDef_REC_ALDW_LaneAttr3
typedef struct
{
  c16_deg_m32k767_32k767_0k001 ALDW_LaneYawAngl_Lt;
  c10_1_p_sq_m_m0k000512_0k00051 ALDW_LaneClothoidPara_Rt;
  c10_1_p_sq_m_m0k000512_0k00051 ALDW_LaneClothoidPara_Lt;
  c16_deg_m32k767_32k767_0k001 ALDW_LaneYawAngl_Rt;
  c08_CRC_woSNA CRC_ALDW_LaneAttr3;
  c04_0_15_1_SNA_na SQC_ALDW_LaneAttr3;
} REC_ALDW_LaneAttr3;

# define Rte_TypeDef_REC_ALDW_LaneAttr4_2ahxpf4cam3pi2le1l2woky78
typedef struct
{
  c05_m_0_60_2 ALDW_LaneEventPosX_Lt;
  c05_m_0_60_2 ALDW_LaneEventPosX_Rt;
  c06_0_50_0d02_SNA_3Fh ALDW_LaneEventQual_Lt;
  c06_0_50_0d02_SNA_3Fh ALDW_LaneEventQual_Rt;
  c04_ALDW_LaneEvent ALDW_LaneEvent_Lt;
  c04_ALDW_LaneEvent ALDW_LaneEvent_Rt;
  c08_CRC_woSNA CRC_ALDW_LaneAttr4;
  Rsrv04 Rsrv1_ALDW_LaneAttr4;
  c02_ALDW_NumParallelLine ALDW_NumParallelStruct;
  c04_0_15_1_SNA_na SQC_ALDW_LaneAttr4;
  c03_ALDW_LaneMarkCol ALDW_LaneMarkCol_Lt;
  c03_ALDW_LaneMarkCol ALDW_LaneMarkCol_Rt;
  c10_deg_m5k12_5k1_0k01 ALDW_VehPitchAngl;
} REC_ALDW_LaneAttr4_2ahxpf4cam3pi2le1l2woky78;

# define Rte_TypeDef_REC_ALDW_Polyg_eymr1ts77ut9vrrgvrho4m92e
typedef struct
{
  c03_ALDW_PolygGroup ALDW_PolygGroup;
  c02_Lt_Rt_NDef_SNA ALDW_PolygOrient;
  c10_m_m5k12_5k1_0k01 ALDW_PolygY_A;
  c10_m_m5k12_5k1_0k01 ALDW_PolygY_B;
  c10_m_m5k12_5k1_0k01 ALDW_PolygY_C;
  c10_m_m5k12_5k1_0k01 ALDW_PolygY_D;
  c10_m_m5k12_5k1_0k01 ALDW_PolygY_E;
  c09_m_m2d56_p2d54_0d01 ALDW_PolygZ_A;
  c09_m_m2d56_p2d54_0d01 ALDW_PolygZ_B;
  c09_m_m2d56_p2d54_0d01 ALDW_PolygZ_C;
  c09_m_m2d56_p2d54_0d01 ALDW_PolygZ_D;
  c09_m_m2d56_p2d54_0d01 ALDW_PolygZ_E;
  c08_CRC_woSNA CRC_ALDW_Polyg;
  Rsrv01 Rsrv1_ALDW_Polyg_FR;
  Rsrv06 Rsrv2_ALDW_Polyg_FR;
  Rsrv05 Rsrv3_ALDW_Polyg_FR;
  Rsrv05 Rsrv4_ALDW_Polyg_FR;
  Rsrv05 Rsrv5_ALDW_Polyg_FR;
  Rsrv05 Rsrv6_ALDW_Polyg_FR;
  Rsrv05 Rsrv7_ALDW_Polyg_FR;
  c04_0_15_1_SNA_na SQC_ALDW_Polyg;
} REC_ALDW_Polyg_eymr1ts77ut9vrrgvrho4m92e;

# define Rte_TypeDef_REC_ALDW_VLN_a2qglp2324znbwefnu92uartf
typedef struct
{
  c02_ALDW_LaneChg_Stat ALDW_LaneChg_Stat_LDP;
  c08_0_254_1 ALDW_TmStmp;
  c07_m_m0d64_p0d62_0d01 ALDW_WarnDelay_Lt;
  c07_m_m0d64_p0d62_0d01 ALDW_WarnDelay_Rt;
  c04_ALDW_WarnSupp_Stat ALDW_WarnSupp_Stat;
  c08_CRC_woSNA CRC_ALDW_VLN;
  Rsrv01 Rsrv1_ALDW_VLN;
  Rsrv01 Rsrv2_ALDW_VLN;
  c04_0_15_1_SNA_na SQC_ALDW_VLN;
  Rsrv06 Rsrv3_ALDW_VLN;
  Rsrv08 Rsrv4_ALDW_VLN;
  c03_ALDW_StructElevat ALDW_StructElevat_Lt;
  c03_ALDW_StructElevat ALDW_StructElevat_Rt;
  c02_VLN_YawAngl_Vld VLN_YawAngl_Vld;
} REC_ALDW_VLN_a2qglp2324znbwefnu92uartf;

# define Rte_TypeDef_REC_BrkSys_Stat_d7pccc3s00bjj322036sa5kif
typedef struct
{
  c02_Brk_Stat Brk_Stat;
  c02_Pdl_Stat BrkPdl_Stat;
  c08_CRC_woSNA CRC_BrkSys_Stat;
  c04_0_15_1_SNA_na SQC_BrkSys_Stat;
  c12_Nm_0_12282_3 BrkTrq;
  c12_Nm_0_12282_3 BrkTrq_D;
  DC_BOOL FullBrk_Actv;
  DC_BOOL EmgBrk_Actv;
  DC_BOOL BrkIntrvntn_Actv_ESP;
  DC_BOOL BrkIntrvntn_Actv_EPKB;
  DC_BOOL BrkIntrvntn_Actv_AS;
  c04_ESP_Oprtn_Stat_AS ESP_Oprtn_Stat_AS;
  c03_ESP_Sys_Stat ESP_Sys_Stat_V2;
  Rsrv01 Rsrv2_BrkSys_Stat;
  c02_BrkRq_PT_Enbl BrkRq_PT_Enbl;
  c03_FTW_PressDrop_Stat FTW_PressDrop_Stat;
  Rsrv02 Rsrv4_BrkSys_Stat;
  Rsrv02 Rsrv5_BrkSys_Stat;
  DC_BOOL DSR_Actv;
  DC_BOOL DSR_Sys_Flt;
} REC_BrkSys_Stat_d7pccc3s00bjj322036sa5kif;

# define Rte_TypeDef_REC_CamObj_1_DTQ_d7pccc3s00bjj322036sa5kif
typedef struct
{
  c08_CRC_woSNA CRC_CamObj_1_DTQ;
  c08_0_254_1 CamObj_1_DTQ_BPQ_ID;
  c04_DTQ_ObjDataQual CamObj_1_DTQ_DataQual;
  c14_m_0_81k91_0k005 CamObj_1_DTQ_Dist_X;
  c14_m_m40k96_40k95_0k005 CamObj_1_DTQ_Offset_Y;
  c12_m_p_s_m10_10_0k005 CamObj_1_DTQ_VY;
  c08_0_254_1 CamObj_1_DTQ_ID;
  c08_0_254_1 CamObj_1_DTQ_PrimLoc_ID;
  c03_DTQ_ObjStat CamObj_1_DTQ_Stat;
  c08_Cycles_0_254 CamObj_1_DTQ_TrckTm;
  c02_DTQ_ObjType CamObj_1_DTQ_Type;
  DC_BOOL CamObj_1_DTQ_Vld;
  c09_m_0to511_0d01 CamObj_1_DTQ_Width;
  Rsrv04 Rsrv1_CamObj_1_DTQ;
  Rsrv05 Rsrv2_CamObj_1_DTQ;
  Rsrv06 Rsrv3_CamObj_1_DTQ;
  Rsrv02 Rsrv4_CamObj_1_DTQ;
  c08_0_254_1 CamObj_1_DTQ_TmStmp;
  Rsrv16 Rsrv6_CamObj_1_DTQ;
  c04_0_15_1_SNA_na SQC_CamObj_1_DTQ;
} REC_CamObj_1_DTQ_d7pccc3s00bjj322036sa5kif;

# define Rte_TypeDef_REC_CamObj_2_DTQ_d7pccc3s00bjj322036sa5kif
typedef struct
{
  c08_0_254_1 CamObj_2_DTQ_BPQ_ID;
  Rsrv02 Rsrv4_CamObj_2_DTQ;
  c08_0_254_1 CamObj_2_DTQ_PrimLoc_ID;
  c02_DTQ_ObjType CamObj_2_DTQ_Type;
  c08_0_254_1 CamObj_2_DTQ_ID;
  c14_m_m40k96_40k95_0k005 CamObj_2_DTQ_Offset_Y;
  c08_0_254_1 CamObj_2_DTQ_TmStmp;
  c12_m_p_s_m10_10_0k005 CamObj_2_DTQ_VY;
  Rsrv16 Rsrv6_CamObj_2_DTQ;
  Rsrv04 Rsrv1_CamObj_2_DTQ;
  c09_m_0to511_0d01 CamObj_2_DTQ_Width;
  DC_BOOL CamObj_2_DTQ_Vld;
  c04_0_15_1_SNA_na SQC_CamObj_2_DTQ;
  c14_m_0_81k91_0k005 CamObj_2_DTQ_Dist_X;
  c03_DTQ_ObjStat CamObj_2_DTQ_Stat;
  c08_CRC_woSNA CRC_CamObj_2_DTQ;
  c08_Cycles_0_254 CamObj_2_DTQ_TrckTm;
  c04_DTQ_ObjDataQual CamObj_2_DTQ_DataQual;
  Rsrv06 Rsrv3_CamObj_2_DTQ;
  Rsrv05 Rsrv2_CamObj_2_DTQ;
} REC_CamObj_2_DTQ_d7pccc3s00bjj322036sa5kif;

# define Rte_TypeDef_REC_CamObj_3_DTQ_d7pccc3s00bjj322036sa5kif
typedef struct
{
  Rsrv05 Rsrv2_CamObj_3_DTQ;
  c04_DTQ_ObjDataQual CamObj_3_DTQ_DataQual;
  c08_0_254_1 CamObj_3_DTQ_PrimLoc_ID;
  DC_BOOL CamObj_3_DTQ_Vld;
  Rsrv02 Rsrv4_CamObj_3_DTQ;
  c08_0_254_1 CamObj_3_DTQ_ID;
  c08_0_254_1 CamObj_3_DTQ_BPQ_ID;
  c08_Cycles_0_254 CamObj_3_DTQ_TrckTm;
  c09_m_0to511_0d01 CamObj_3_DTQ_Width;
  c08_CRC_woSNA CRC_CamObj_3_DTQ;
  Rsrv06 Rsrv3_CamObj_3_DTQ;
  c03_DTQ_ObjStat CamObj_3_DTQ_Stat;
  c14_m_0_81k91_0k005 CamObj_3_DTQ_Dist_X;
  c08_0_254_1 CamObj_3_DTQ_TmStmp;
  Rsrv16 Rsrv6_CamObj_3_DTQ;
  c04_0_15_1_SNA_na SQC_CamObj_3_DTQ;
  Rsrv04 Rsrv1_CamObj_3_DTQ;
  c14_m_m40k96_40k95_0k005 CamObj_3_DTQ_Offset_Y;
  c12_m_p_s_m10_10_0k005 CamObj_3_DTQ_VY;
  c02_DTQ_ObjType CamObj_3_DTQ_Type;
} REC_CamObj_3_DTQ_d7pccc3s00bjj322036sa5kif;

# define Rte_TypeDef_REC_CamObj_AB_BPQ_7e63hifz077cq0l1to4chei0g
typedef struct
{
  c08_CRC_woSNA CRC_CamObj_AB_BPQ;
  DC_BOOL CamObj_A_BPQ_BorderFlg_Lt;
  DC_BOOL CamObj_A_BPQ_BorderFlg_Rt;
  DC_BOOL CamObj_A_BPQ_CyclObsrvFlg;
  c08_0_254_1 CamObj_A_BPQ_Id;
  DC_BOOL CamObj_A_BPQ_MgFlg;
  DC_BOOL CamObj_A_BPQ_OcclFlg_Lt;
  DC_BOOL CamObj_A_BPQ_OcclFlg_Rt;
  c04_0_14_1 CamObj_A_BPQ_QualObjAppr;
  c02_Lt_Rt_InBet CamObj_A_BPQ_RefPointIdx;
  DC_BOOL CamObj_A_BPQ_SplFlg;
  c10_ms_m25k55_0d05 CamObj_A_BPQ_Y_Rt_Spd;
  c08_deg_p_s_m63k5top63k5_0d5 CamObj_A_BPQ_YawRateY;
  c08_0_254_1 CamObj_B_BPQ_Id;
  DC_BOOL CamObj_B_BPQ_MgFlg;
  DC_BOOL CamObj_B_BPQ_BorderFlg_Lt;
  DC_BOOL CamObj_B_BPQ_BorderFlg_Rt;
  DC_BOOL CamObj_B_BPQ_CyclObsrvFlg;
  DC_BOOL CamObj_B_BPQ_OcclFlg_Lt;
  DC_BOOL CamObj_B_BPQ_OcclFlg_Rt;
  c04_0_14_1 CamObj_B_BPQ_QualObjAppr;
  c02_Lt_Rt_InBet CamObj_B_BPQ_RefPointIdx;
  DC_BOOL CamObj_B_BPQ_SplFlg;
  c10_ms_m25k55_0d05 CamObj_B_BPQ_Y_Rt_Spd;
  c08_deg_p_s_m63k5top63k5_0d5 CamObj_B_BPQ_YawRateY;
  c04_0_15_1_SNA_na SQC_CamObj_AB_BPQ;
  Rsrv01 Rsrv5_CamObj_AB_BPQ;
  c02_CamObj_BPQ_VY_Conf CamObj_B_BPQ_Y_Rt_Spd_Confdc;
  Rsrv08 Rsrv4_CamObj_AB_BPQ;
  DC_BOOL CamObj_A_BPQ_StreetFlg;
  c04_0_14_1 CamObj_A_BPQ_FloxelDensity;
  Rsrv04 Rsrv1_CamObj_AB_BPQ;
  c02_CamObj_BPQ_VY_Conf CamObj_A_BPQ_Y_Rt_Spd_Confdc;
  Rsrv01 Rsrv2_CamObj_AB_BPQ;
  c08_0_254_1 CamObj_BPQ_TmStmp;
  DC_BOOL CamObj_B_BPQ_StreetFlg;
  DC_BOOL CamObj_B_BPQ_TunnelFlg;
  c04_0_14_1 CamObj_B_BPQ_FloxelDensity;
  DC_BOOL CamObj_A_BPQ_TunnelFlg;
  c02_CamObj_BPQ_PedestArea CamObj_A_BPQ_PedestArea;
  c02_CamObj_BPQ_PedestClass CamObj_A_BPQ_PedestClass;
  c04_0_14_1 CamObj_A_BPQ_PedestGroupId;
  c02_CamObj_BPQ_PedestArea CamObj_B_BPQ_PedestArea;
  c02_CamObj_BPQ_PedestClass CamObj_B_BPQ_PedestClass;
  c04_0_14_1 CamObj_B_BPQ_PedestGroupId;
} REC_CamObj_AB_BPQ_7e63hifz077cq0l1to4chei0g;

# define Rte_TypeDef_REC_CamObj_A_BPQ_Posn
typedef struct
{
  c08_CRC_woSNA CRC_CamObj_A_BPQ_Posn;
  c04_0_14_1 CamObj_A_BPQ_Class;
  c06_m_0_6k2_0k1 CamObj_A_BPQ_Hgt_Bound;
  c06_m_0_6k2_0k1 CamObj_A_BPQ_Hgt_LowBound;
  c04_Camcyc_0_to_14 CamObj_A_BPQ_LfTm;
  c04_0_14_1 CamObj_A_BPQ_QualityFrSp;
  c04_m_per_s_0_2d8_0d2 CamObj_A_BPQ_QualSpdX;
  c04_m_per_s_0_1d4_0d1 CamObj_A_BPQ_QualSpdY;
  c04_m_0_1k4_0k1 CamObj_A_BPQ_QualX;
  c04_m0to1k4_0d1 CamObj_A_BPQ_QualY;
  c12_m0to102k375_0k025 CamObj_A_BPQ_X_Inbet_Posn;
  c12_m0to102k375_0k025 CamObj_A_BPQ_X_OutLt_Posn;
  c12_m0to102k375_0k025 CamObj_A_BPQ_X_OutRt_Posn;
  c10_ms_m67top32k2_0k1 CamObj_A_BPQ_X_Spd;
  c12_m51k175_to_p51k175_0k025 CamObj_A_BPQ_Y_Inbet_Posn;
  c10_ms_m25k55_0d05 CamObj_A_BPQ_Y_Lt_Spd;
  c12_m51k175_to_p51k175_0k025 CamObj_A_BPQ_Y_OutLt_Posn;
  c12_m51k175_to_p51k175_0k025 CamObj_A_BPQ_Y_OutRt_Posn;
  c04_0_15_1_SNA_na SQC_CamObj_A_BPQ_Posn;
} REC_CamObj_A_BPQ_Posn;

# define Rte_TypeDef_REC_CamObj_B_BPQ_Posn
typedef struct
{
  c06_m_0_6k2_0k1 CamObj_B_BPQ_Hgt_LowBound;
  c10_ms_m67top32k2_0k1 CamObj_B_BPQ_X_Spd;
  c04_m_per_s_0_2d8_0d2 CamObj_B_BPQ_QualSpdX;
  c12_m0to102k375_0k025 CamObj_B_BPQ_X_OutLt_Posn;
  c04_m_0_1k4_0k1 CamObj_B_BPQ_QualX;
  c12_m51k175_to_p51k175_0k025 CamObj_B_BPQ_Y_OutRt_Posn;
  c12_m51k175_to_p51k175_0k025 CamObj_B_BPQ_Y_OutLt_Posn;
  c08_CRC_woSNA CRC_CamObj_B_BPQ_Posn;
  c04_0_15_1_SNA_na SQC_CamObj_B_BPQ_Posn;
  c04_0_14_1 CamObj_B_BPQ_Class;
  c06_m_0_6k2_0k1 CamObj_B_BPQ_Hgt_Bound;
  c12_m51k175_to_p51k175_0k025 CamObj_B_BPQ_Y_Inbet_Posn;
  c04_m0to1k4_0d1 CamObj_B_BPQ_QualY;
  c12_m0to102k375_0k025 CamObj_B_BPQ_X_Inbet_Posn;
  c12_m0to102k375_0k025 CamObj_B_BPQ_X_OutRt_Posn;
  c04_0_14_1 CamObj_B_BPQ_QualityFrSp;
  c04_m_per_s_0_1d4_0d1 CamObj_B_BPQ_QualSpdY;
  c04_Camcyc_0_to_14 CamObj_B_BPQ_LfTm;
  c10_ms_m25k55_0d05 CamObj_B_BPQ_Y_Lt_Spd;
} REC_CamObj_B_BPQ_Posn;

# define Rte_TypeDef_REC_Cam_Polyg_4hl0f8uklena7h1l78vguqx2i
typedef struct
{
  c08_0_254_1 CAM_TmStmp;
  c08_CRC_woSNA CRC_Cam_Polyg;
  c16_m_0_3276k7_0k05 Cam_PolygRngMax_X;
  c03_0_6_1 Cam_Polyg_0_Class_Y;
  c02_CAM_Polyg_Conf Cam_Polyg_0_Confdc_Y;
  c04_m_0_2k8_0k2 Cam_Polyg_0_Hgt_Y;
  c08_m_m12k7_12k7_0k1 Cam_Polyg_0_Y;
  c03_0_6_1 Cam_Polyg_1_Class_Y;
  c02_CAM_Polyg_Conf Cam_Polyg_1_Confdc_Y;
  c04_m_0_2k8_0k2 Cam_Polyg_1_Hgt_Y;
  c08_m_m12k7_12k7_0k1 Cam_Polyg_1_Y;
  c03_0_6_1 Cam_Polyg_2_Class_Y;
  c02_CAM_Polyg_Conf Cam_Polyg_2_Confdc_Y;
  c04_m_0_2k8_0k2 Cam_Polyg_2_Hgt_Y;
  c08_m_m12k7_12k7_0k1 Cam_Polyg_2_Y;
  c03_0_6_1 Cam_Polyg_3_Class_Y;
  c02_CAM_Polyg_Conf Cam_Polyg_3_Confdc_Y;
  c04_m_0_2k8_0k2 Cam_Polyg_3_Hgt_Y;
  c08_m_m12k7_12k7_0k1 Cam_Polyg_3_Y;
  c03_0_6_1 Cam_Polyg_4_Class_Y;
  c02_CAM_Polyg_Conf Cam_Polyg_4_Confdc_Y;
  c04_m_0_2k8_0k2 Cam_Polyg_4_Hgt_Y;
  c08_m_m12k7_12k7_0k1 Cam_Polyg_4_Y;
  Rsrv04 Rsrv1_Cam_Polyg;
  Rsrv03 Rsrv2_Cam_Polyg;
  Rsrv16 Rsrv3_Cam_Polyg;
  c04_0_15_1_SNA_na SQC_Cam_Polyg;
} REC_Cam_Polyg_4hl0f8uklena7h1l78vguqx2i;

# define Rte_TypeDef_REC_Cam_Stat_1lbtoaaebi5n2qvdq20f1phhd
typedef struct
{
  c08_CRC_woSNA CRC_Cam_Stat;
  c16_deg_p_s_m327k68_327k66_0k01 SMPC_YawRate;
  c04_0_15_1_SNA_na SQC_Cam_Stat;
  c02_SMPC_Cam_Stat_FOD SMPC_Cam_Stat_FOD;
  c02_SMPC_Cam_Stat_POD SMPC_Cam_Stat_POD;
  Rsrv05 Rsrv2_Cam_Stat;
  Rsrv16 Rsrv3_Cam_Stat;
  Rsrv03 Rsrv4_Cam_Stat;
  Rsrv08 Rsrv5_Cam_Stat;
} REC_Cam_Stat_1lbtoaaebi5n2qvdq20f1phhd;

# define Rte_TypeDef_REC_DTQ_Ctrl
typedef struct
{
  c04_EPS_Can_Stat_RDU DTQ_Can_Stat_RDU;
  c03_DTQ_Ctrl_Stat DTQ_Ctrl_Stat;
  c10_m_m0d63_p0d63_0d00125 DTQ_WarnDelay_Lt;
  c10_m_m0d63_p0d63_0d00125 DTQ_WarnDelay_Rt;
  c04_ALDW_WarnSupp_Stat DTQ_WarnSupp_Stat;
} REC_DTQ_Ctrl;

# define Rte_TypeDef_REC_DTQ_Disp_Rq_V2_b0ko81o0x5jgvwtduf99gvzi0
typedef struct
{
  c03_DTQ_Stat_Disp_Rq DTQ_Stat_Disp_Rq;
} REC_DTQ_Disp_Rq_V2_b0ko81o0x5jgvwtduf99gvzi0;

# define Rte_TypeDef_REC_DTQ_DrawbarAngl_dgfi1nrxtb0voy6rb7ybeonmv
typedef struct
{
  c08_CRC_woSNA CRC_DTQ_DrawbarAngl;
  c14_m_m40k96_40k95_0k005 Cam_LnMark_Lt_Offset_Y;
  c02_Cam_LnMark_Offset_Y_Qual Cam_LnMark_Lt_Offset_Y_Qual;
  c14_m_m40k96_40k95_0k005 Cam_LnMark_Rt_Offset_Y;
  c02_Cam_LnMark_Offset_Y_Qual Cam_LnMark_Rt_Offset_Y_Qual;
  c04_0_15_1_SNA_na SQC_DTQ_DrawbarAngl;
  Rsrv16 Rsrv2_DTQ_DrawbarAngl;
  Rsrv04 Rsrv1_DTQ_DrawbarAngl;
} REC_DTQ_DrawbarAngl_dgfi1nrxtb0voy6rb7ybeonmv;

# define Rte_TypeDef_REC_DTQ_Obj_Pres_4ahuc5cy8shtai9jzr7jgnsdp
typedef struct
{
  c08_CRC_woSNA CRC_DTQ_Obj_Pres;
  c08_0_254_1 RDU_DTQ_PLObj_A_FFT_SID;
  c02_RDU_DTQ_PLObj_RelFlg RDU_DTQ_PLObj_A_RelFlg;
  DC_BOOL RDU_DTQ_PLObj_A_Vld;
  c08_m_p_s_m127_127_1 RDU_DTQ_PLObj_A_vx;
  c08_m_0_254_1 RDU_DTQ_PLObj_A_x;
  c06_m_m31_31_1 RDU_DTQ_PLObj_A_y;
  c08_0_254_1 RDU_DTQ_PLObj_B_FFT_SID;
  c02_RDU_DTQ_PLObj_RelFlg RDU_DTQ_PLObj_B_RelFlg;
  DC_BOOL RDU_DTQ_PLObj_B_Vld;
  c08_m_p_s_m127_127_1 RDU_DTQ_PLObj_B_vx;
  c08_m_0_254_1 RDU_DTQ_PLObj_B_x;
  c06_m_m31_31_1 RDU_DTQ_PLObj_B_y;
  c08_0_254_1 RDU_DTQ_PLObj_C_FFT_SID;
  c02_RDU_DTQ_PLObj_RelFlg RDU_DTQ_PLObj_C_RelFlg;
  DC_BOOL RDU_DTQ_PLObj_C_Vld;
  c08_m_p_s_m127_127_1 RDU_DTQ_PLObj_C_vx;
  c08_m_0_254_1 RDU_DTQ_PLObj_C_x;
  c06_m_m31_31_1 RDU_DTQ_PLObj_C_y;
  c08_0_254_1 RDU_DTQ_PLObj_TmStmp;
  c04_0_15_1_SNA_na SQC_DTQ_Obj_Pres;
  Rsrv08 Rsrv3_DTQ_Obj_Pres;
  Rsrv08 Rsrv4_DTQ_Obj_Pres;
  Rsrv01 Rsrv1_DTQ_Obj_Pres;
  Rsrv08 Rsrv2_DTQ_Obj_Pres;
} REC_DTQ_Obj_Pres_4ahuc5cy8shtai9jzr7jgnsdp;

# define Rte_TypeDef_REC_DateTm
typedef struct
{
  c08_Days_1_31_1 DateTmDay;
  c08_h_0_23_1 DateTmHour;
  c08_min_0_59_1 DateTmMinute;
  c08_Months_1_12_1 DateTmMonth;
  c08_s_0_59_1 DateTmSecond;
  c08_Years_0_99_1 DateTmYear;
  c03_DateTm_Stat DateTm_Stat;
} REC_DateTm;

# define Rte_TypeDef_REC_EVC_CfgBit_01_32_580uwq34s0n14g39jbrwwepfe
typedef struct
{
  c08_CRC_woSNA CRC_EVC_CfgBit_01_32;
  c04_0_15_1_SNA_na SQC_EVC_CfgBit_01_32;
  DC_BOOL EVC_27_AddEquip_Avl;
  DC_BOOL EVC_28_AddEquip_Avl;
  DC_BOOL EVC_29_AddEquip_Avl;
  DC_BOOL EVC_2A_AddEquip_Avl;
  DC_BOOL EVC_2B_AddEquip_Avl;
  DC_BOOL EVC_2C_AddEquip_Avl;
  DC_BOOL EVC_2D_AddEquip_Avl;
  DC_BOOL EVC_2E_AddEquip_Avl;
  DC_BOOL EVC_2F_AddEquip_Avl;
  DC_BOOL EVC_30_AddEquip_Avl;
  DC_BOOL EVC_31_AddEquip_Avl;
  DC_BOOL EVC_32_AddEquip_Avl;
  DC_BOOL EVC_0D_4x2Drive_Avl;
  DC_BOOL EVC_0C_AllWheelDr_Avl;
  DC_BOOL EVC_18_AmbLgt_Avl;
  DC_BOOL EVC_12_AutRearDr_Avl;
  c02_EVC_Stat EVC_CfgBit_01_32_Stat;
  DC_BOOL EVC_15_DRLt_Avl;
  DC_BOOL EVC_19_ElDrPosnSel_Avl;
  DC_BOOL EVC_16_FogLmp_Avl;
  DC_BOOL EVC_09_FullHyb_Avl;
  DC_BOOL EVC_1E_GuardLvl_B4_Avl;
  DC_BOOL EVC_1F_GuardLvl_B6_Avl;
  DC_BOOL EVC_20_GuardLvl_B7_Avl;
  DC_BOOL EVC_25_HVAC_R_Avl;
  DC_BOOL EVC_1C_HghVTP_Avl;
  DC_BOOL EVC_24_ICH_Avl;
  DC_BOOL EVC_17_IL_Pk_Avl;
  DC_BOOL EVC_1A_IntSfProt_Avl;
  DC_BOOL EVC_10_KG_Avl;
  DC_BOOL EVC_23_PASS_Avl;
  DC_BOOL EVC_0A_MildHyb_Avl;
  DC_BOOL EVC_11_AutTrunkLid_Avl;
  DC_BOOL EVC_0B_PlugInHyb_Avl;
  DC_BOOL EVC_0E_Presf_Avl;
  DC_BOOL EVC_21_Pullman_Avl;
  DC_BOOL EVC_13_PwrCls_Avl;
  DC_BOOL EVC_14_RainSens_Avl;
  DC_BOOL EVC_26_SSA_Avl;
  DC_BOOL EVC_1D_SecurityVer_Avl;
  DC_BOOL EVC_22_SpecClos_Avl;
  DC_BOOL EVC_0F_TrlrHtch_Avl;
  DC_BOOL EVC_1B_VTA_Avl;
  DC_BOOL EVC_05_Ver_Australia_Avl;
  DC_BOOL EVC_08_Ver_Canada_Avl;
  DC_BOOL EVC_06_Ver_China_Avl;
  DC_BOOL EVC_04_Ver_GulfStates_Avl;
  DC_BOOL EVC_03_Ver_Japan_Avl;
  DC_BOOL EVC_02_Ver_Mexico_Avl;
  DC_BOOL EVC_07_Ver_S_Korea_Avl;
  DC_BOOL EVC_01_Ver_USA_Avl;
} REC_EVC_CfgBit_01_32_580uwq34s0n14g39jbrwwepfe;

# define Rte_TypeDef_REC_EVC_CfgBit_65_96_18cj3r9lb95cc7w4q3mwqkn86
typedef struct
{
  DC_BOOL EVC_69_BrkEngg_PP_Avl;
} REC_EVC_CfgBit_65_96_18cj3r9lb95cc7w4q3mwqkn86;

# define Rte_TypeDef_REC_EVC_CfgBit_65_96_580uwq34s0n14g39jbrwwepfe
typedef struct
{
  c08_CRC_woSNA CRC_EVC_CfgBit_65_96;
  DC_BOOL EVC_67_CMS_Avl;
  DC_BOOL EVC_68_CMS_R_Avl;
  DC_BOOL EVC_6A_BasExtd_Avl;
  c04_0_15_1_SNA_na SQC_EVC_CfgBit_65_96;
  DC_BOOL EVC_65_AddEquip_Avl;
  DC_BOOL EVC_66_AddEquip_Avl;
  DC_BOOL EVC_69_BrkEngg_PP_Avl;
  DC_BOOL EVC_81_ABC_Avl;
  DC_BOOL EVC_6F_ADTR_Avl;
  DC_BOOL EVC_71_ALS_Avl;
  DC_BOOL EVC_7A_APG_Avl;
  DC_BOOL EVC_7B_ActPKAS_Avl;
  DC_BOOL EVC_6D_ActvBSM_Avl;
  DC_BOOL EVC_72_ActvLDA_Avl;
  DC_BOOL EVC_83_AirSemiActv_Susp_Avl;
  DC_BOOL EVC_6C_BSM_Avl;
  DC_BOOL EVC_7E_BasPlusQ_Avl;
  c02_EVC_Stat EVC_CfgBit_65_96_Stat;
  DC_BOOL EVC_8B_DAB_Tun_Avl;
  DC_BOOL EVC_70_DTR_Pro_Avl;
  DC_BOOL EVC_8A_DigTV_Avl;
  DC_BOOL EVC_88_DualView_Avl;
  DC_BOOL EVC_7F_ECO_St_Avl;
  DC_BOOL EVC_89_Entertain_R_Avl;
  DC_BOOL EVC_7C_IHC_Avl;
  DC_BOOL EVC_7D_IHC_Plus_Avl;
  DC_BOOL EVC_73_FCW_Avl;
  DC_BOOL EVC_74_LaneRec_Avl;
  DC_BOOL EVC_8C_MTUS_Avl;
  DC_BOOL EVC_6B_MirrFld_Avl;
  DC_BOOL EVC_75_NV_Avl;
  DC_BOOL EVC_95_OptPack_Avan_Avl;
  DC_BOOL EVC_94_OptPack_Clas_Avl;
  DC_BOOL EVC_96_OptPack_Eleg_Avl;
  DC_BOOL EVC_80_PSTS_Avl;
  DC_BOOL EVC_79_PTS_Avl;
  DC_BOOL EVC_77_RVC_Avl;
  DC_BOOL EVC_76_RoadSignDtct_Avl;
  DC_BOOL EVC_8E_SndSys_Avl;
  DC_BOOL EVC_85_SportPk_AMG_Avl;
  DC_BOOL EVC_86_SportPk_Avl;
  DC_BOOL EVC_87_SportPk_Ext_Avl;
  DC_BOOL EVC_84_SportSusp_Avl;
  DC_BOOL EVC_82_SteelAirSusp_Avl;
  DC_BOOL EVC_78_SurrView_Avl;
  DC_BOOL EVC_6E_TurnAss_Avl;
  DC_BOOL EVC_8D_UCI_Avl;
  DC_BOOL EVC_92_WShBL_Prot_Avl;
  DC_BOOL EVC_8F_WShViewWin_Avl;
  DC_BOOL EVC_90_WSh_Clr_Avl;
  DC_BOOL EVC_91_WSh_Ht_Avl;
  DC_BOOL EVC_93_WSh_Ht_Lcut_Avl;
} REC_EVC_CfgBit_65_96_580uwq34s0n14g39jbrwwepfe;

# define Rte_TypeDef_REC_EVC_CfgBit_65_96_86np54yyz367qo0cci5oe9rjt
typedef struct
{
  DC_BOOL EVC_6D_ActvBSM_Avl;
  DC_BOOL EVC_6C_BSM_Avl;
  c02_EVC_Stat EVC_CfgBit_65_96_Stat;
} REC_EVC_CfgBit_65_96_86np54yyz367qo0cci5oe9rjt;

# define Rte_TypeDef_REC_EVC_CfgBit_65_96_93cqdgh4hhn5xns1hoko7garz
typedef struct
{
  c04_0_15_1_SNA_na SQC_EVC_CfgBit_65_96;
  c02_EVC_Stat EVC_CfgBit_65_96_Stat;
  DC_BOOL EVC_7C_IHC_Avl;
  DC_BOOL EVC_7D_IHC_Plus_Avl;
} REC_EVC_CfgBit_65_96_93cqdgh4hhn5xns1hoko7garz;

# define Rte_TypeDef_REC_EVC_CfgList_01_0C_evn08d6126fkfaksv87161o1j
typedef struct
{
  c08_CRC_woSNA CRC_EVC_CfgList_01_0C;
  c05_EVC_BodyStyle EVC_List02_BodyStyle;
  c02_EVC_Stat EVC_CfgList_01_0C_Stat;
  c08_EVC_Country EVC_List08_Country;
  c04_EVC_HL_Style EVC_List04_HL_Style;
  c03_EVC_HVAC_Style EVC_List07_HVAC_Style;
  c03_EVC_RoofStyle EVC_List03_RoofStyle;
  c02_StStyle EVC_List01_StStyle;
  c03_EVC_TPM_Style EVC_List0A_TPM_Style;
  c04_EVC_TxStyle EVC_List05_TxStyle;
  c06_EVC_VehLine EVC_List0C_VehLine;
  c05_EVC_VehLineYear EVC_List06_VehLineYear;
  c04_0_15_1_SNA_na SQC_EVC_CfgList_01_0C;
  c05_EVC_HU_Style EVC_List09_HU_Style;
  c02_EVC_AddEquip EVC_List0B_AddEquip;
} REC_EVC_CfgList_01_0C_evn08d6126fkfaksv87161o1j;

# define Rte_TypeDef_REC_Eng_Rs3_dgfi1nrxtb0voy6rb7ybeonmv
typedef struct
{
  c08_perc_0_100_0k4 AccelPdlPosn;
  DC_BOOL AccelPdlPosnSens_Flt;
  c08_perc_0_100_0k4 AccelPdlPosn_Raw;
  c08_CRC_woSNA CRC_Eng_Rs3;
  c04_0_15_1_SNA_na SQC_Eng_Rs3;
  DC_BOOL KickDnSw_Psd;
  Rsrv08 Rsrv1_Eng_Rs3;
  Rsrv02 Rsrv2_Eng_Rs3;
} REC_Eng_Rs3_dgfi1nrxtb0voy6rb7ybeonmv;

# define Rte_TypeDef_REC_Eng_Rs_EngCtrl_14lojwgkcazelrb438elf5h0j
typedef struct
{
  c08_EngStyle EngStyle;
  c13_Nm_m500_1547k5_0k25 EngTrq;
  DC_BOOL AddPwrCnsmr_On_Rq;
  c08_CRC_woSNA CRC_Eng_Rs_EngCtrl;
  c14_rpm_0_16382_1 EngRPM;
  c03_EngRun_Stat EngRun_Stat;
  c08_0_1k98_0k0078 EngTrqMaxCorrFctr;
  DC_BOOL EngRPM_Sens_LHOM;
  c04_0_15_1_SNA_na SQC_Eng_Rs_EngCtrl;
  Rsrv03 Rsrv2_Eng_Rs_EngCtrl;
  Rsrv01 Rsrv1_Eng_Rs_EngCtrl;
} REC_Eng_Rs_EngCtrl_14lojwgkcazelrb438elf5h0j;

# define Rte_TypeDef_REC_Eng_Rs_EngCtrl_1j00gxu3p5exa8awg915k1zy
typedef struct
{
  c03_EngRun_Stat EngRun_Stat;
} REC_Eng_Rs_EngCtrl_1j00gxu3p5exa8awg915k1zy;

# define Rte_TypeDef_REC_GPS_Pos_Stat_1wd2axd8vhko9tuswwmd68tp0
typedef struct
{
  c04_GPS_Fix GPS_Fix;
  c08_1_8_0k1 GPS_Hdop;
  c08_1_8_0k1 GPS_Pdop;
  c04_0_12_1 GPS_Trck_Sat;
  c08_1_8_0k1 GPS_Vdop;
  c04_0_12_1 GPS_Vsbl_Sat;
} REC_GPS_Pos_Stat_1wd2axd8vhko9tuswwmd68tp0;

# define Rte_TypeDef_REC_HiBm_Stat_9t50popkpz30is106xpis1iyh
typedef struct
{
  DC_BOOL HiBm_On;
} REC_HiBm_Stat_9t50popkpz30is106xpis1iyh;

# define Rte_TypeDef_REC_IHC_Lgt_Stat_HLI_2ahxpf4cam3pi2le1l2woky78
typedef struct
{
  Rsrv01 Rsrv2_IHC_Lgt_Stat_HLI;
  c02_Off_On IHC_HiBm_Stat_HLM_LT;
  c08_m_0_600_2k5 IHC_LgtDist;
  c08_deg_m20_20_0k2 IHC_Plus_CrvLgt_Lt_RotAngl;
  c08_deg_m20_20_0k2 IHC_Plus_CrvLgt_Rt_RotAngl;
  c03_IHC_Plus_LgtStyle IHC_Plus_LgtStyle_Lt;
  c03_IHC_Plus_LgtStyle IHC_Plus_LgtStyle_Rt;
  c08_deg_m20_20_0k2 IHC_Plus_Lt_RotAngl_Cutoff;
  c08_deg_m20_20_0k2 IHC_Plus_Rt_RotAngl_Cutoff;
  c02_IHC_Stat_HLM_LT IHC_Stat_HLM_LT;
  c04_0_15_1_SNA_na SQC_IHC_Lgt_Stat_HLI;
  c08_CRC_woSNA CRC_IHC_Lgt_Stat_HLI;
  Rsrv01 Rsrv1_IHC_Lgt_Stat_HLI;
} REC_IHC_Lgt_Stat_HLI_2ahxpf4cam3pi2le1l2woky78;

# define Rte_TypeDef_REC_IHC_Lgt_Stat_MPC_515fv9hxb5jrzmunrr9r72aqj
typedef struct
{
  c08_0_250_1 IHC_Brt_Outsd;
  c04_0_14_1 IHC_ChgovrLvl;
  c02_City_Dtct IHC_City_Dtct;
  c02_DrvDir IHC_DrvDir;
  c02_Off_On IHC_HiBm_Stat;
  c08_m_0_600_2k5 IHC_LgtDist_Rq;
  c08_deg_m20_20_0k2 IHC_ObjAngl;
  c02_Off_On IHC_OptHdLgtLvl_Stat;
  c02_IHC_Stat IHC_Stat_MPC;
  c02_TrffcStyle IHC_TrffcStyle;
  c02_IHC_Tunnel_Det IHC_Tunnel;
  c02_Off_On IHC_WShHt_Rq_Stat;
  c02_Wthr_Dtct IHC_Wthr_Dtct;
  c02_IHC_MotorWay_Dtct IHC_MotorWay_Dtct;
  c04_0_15_1_SNA_na SQC_IHC_Lgt_Stat_MPC;
  c08_CRC_woSNA CRC_IHC_Lgt_Stat_MPC;
  Rsrv04 Rsrv1_IHC_Lgt_Stat_MPC;
} REC_IHC_Lgt_Stat_MPC_515fv9hxb5jrzmunrr9r72aqj;

# define Rte_TypeDef_REC_IHC_Plus_HL_Stat_a2qglp2324znbwefnu92uartf
typedef struct
{
  c03_0_to_7_1_no_SNA IHC_Plus_HL_Lt_ChgovrLvl;
  c03_0_to_7_1_no_SNA IHC_Plus_HL_Rt_ChgovrLvl;
  c02_IHC_Plus_HL_LgtOut IHC_Plus_HL_Lt_LgtOut;
  c02_IHC_Plus_HL_LgtOut IHC_Plus_HL_Rt_LgtOut;
  c12_deg_m20_20_0k01 IHC_Plus_HL_Lt_Angl_Min;
  c12_deg_m20_20_0k01 IHC_Plus_HL_Rt_Angl_Min;
  cIHC_Plus_HiBm_Stat_V2 IHC_Plus_HiBm_Lt_Stat_V2;
  cIHC_Plus_HiBm_Stat_V2 IHC_Plus_HiBm_Rt_Stat_V2;
  c04_0_15_1_SNA_na SQC_IHC_Plus_HL_Stat;
  Rsrv08 Rsrv4_IHC_Plus_HL_Stat;
  c08_CRC_woSNA CRC_IHC_Plus_HL_Stat;
  Rsrv04 Rsrv1_IHC_Plus_HL_Stat;
  Rsrv01 Rsrv3_IHC_Plus_HL_Stat;
  Rsrv01 Rsrv2_IHC_Plus_HL_Stat;
} REC_IHC_Plus_HL_Stat_a2qglp2324znbwefnu92uartf;

# define Rte_TypeDef_REC_Ign_Stat_5wz7lvfuvag9tw5a51baqfzdd
typedef struct
{
  c03_ISw_Stat ISw_Stat;
  DC_BOOL Ign_On_StartProc_Inact;
  DC_BOOL KG_IgnCtrl_Actv;
  c08_CRC_woSNA CRC_Ign_Stat;
  c04_0_15_1_SNA_na SQC_Ign_Stat;
  c02_SPCR_Conf SPCR_Conf_EIS;
  DC_BOOL SPCR_AcustWarn_Rq_EIS;
  DC_BOOL SPCR_Flt_EIS;
  DC_BOOL TxPkPosn_Rq_SPCR_Enbl;
  DC_BOOL TxPkPosn_Emg_Rq;
  c02_ESL_Lk_Rq ESL_Lk_Rq;
  DC_BOOL TxPkPosn_Rq;
  DC_BOOL TxPkPosnAuto_Enbl;
  Rsrv03 Rsrv1_Ign_Stat;
  DC_BOOL KG_StartSw_Psd;
  DC_BOOL EngSt_Enbl_Rq_KG;
} REC_Ign_Stat_5wz7lvfuvag9tw5a51baqfzdd;

# define Rte_TypeDef_REC_Ign_Stat_b0ko81o0x5jgvwtduf99gvzi0
typedef struct
{
  c03_ISw_Stat ISw_Stat;
} REC_Ign_Stat_b0ko81o0x5jgvwtduf99gvzi0;

# define Rte_TypeDef_REC_Impact_aa136in54vwmtfkfrrvvjwue
typedef struct
{
  DC_BOOL Impact_X;
} REC_Impact_aa136in54vwmtfkfrrvvjwue;

# define Rte_TypeDef_REC_LDC_Disp_Rq_ESP_1j00gxu3p5exa8awg915k1zy
typedef struct
{
  c04_LDC_DTR_Stat LDC_DTR_Stat;
} REC_LDC_Disp_Rq_ESP_1j00gxu3p5exa8awg915k1zy;

# define Rte_TypeDef_REC_LDC_Disp_Rq_RDU_1j00gxu3p5exa8awg915k1zy
typedef struct
{
  c04_LDC_DTR_Stat LDC_DTR_Stat_RDU;
} REC_LDC_Disp_Rq_RDU_1j00gxu3p5exa8awg915k1zy;

# define Rte_TypeDef_REC_LDC_Rq_SCCM_5ella88r9jsc72fnnq5iugtsl
typedef struct
{
  c08_CRC_woSNA CRC_LDC_Rq_SCCM;
  c08_0_200_1 DTR_Dist_Rq;
  c04_0_15_1_SNA_na SQC_LDC_Rq_SCCM;
  DC_BOOL SpdCtrlLvrStat_Inv;
  c06_SpdCtrlLvr_Stat SpdCtrlLvr_Stat;
  Rsrv04 Rsrv1_LDC_Rq_SCCM;
  DC_BOOL VSL_Enbl_Rq;
} REC_LDC_Rq_SCCM_5ella88r9jsc72fnnq5iugtsl;

# define Rte_TypeDef_REC_LDP_Warn_Rq
typedef struct
{
  c03_ALDW_BrkMsgDisp_Rq LDP_BrkMsgDisp_Rq;
  c02_ALDW_IndLmp_On_Rq LDP_IndLmp_On_Rq;
  DC_BOOL LDP_Menu_Enbl_Rq;
  c03_LDP_MsgDisp_Rq LDP_MsgDisp_Rq;
} REC_LDP_Warn_Rq;

# define Rte_TypeDef_REC_LDP_Warn_Rq_2is6fi0meeac78nkn35zc5ui3
typedef struct
{
  c03_ALDW_BrkMsgDisp_Rq LDP_BrkMsgDisp_Rq;
  DC_BOOL LDP_Menu_Enbl_Rq;
} REC_LDP_Warn_Rq_2is6fi0meeac78nkn35zc5ui3;

# define Rte_TypeDef_REC_LgtSens_Stat_9in9byg63c2fufil0n24ot5bf
typedef struct
{
  DC_BOOL LgtSens_Flt;
  c01_LgtSens_Night LgtSens_Night;
  DC_BOOL LgtSens_SNA;
  DC_BOOL LgtSens_Tunnel;
  c03_Steps_0_7_1_SNA_na LgtSens_Twlgt;
} REC_LgtSens_Stat_9in9byg63c2fufil0n24ot5bf;

# define Rte_TypeDef_REC_MirrAdj_XX_Rq_MPM
typedef struct
{
  DC_BOOL MirrAdj_XX_Down_MPM;
  DC_BOOL MirrAdj_XX_Lt_MPM;
  DC_BOOL MirrAdj_XX_Rt_MPM;
  DC_BOOL MirrAdj_XX_Up_MPM;
} REC_MirrAdj_XX_Rq_MPM;

# define Rte_TypeDef_REC_MirrAdj_XX_Rq_dv7hr5qpr6sv4leh8gdnnmvy2
typedef struct
{
  DC_BOOL MirrAdj_XX_Lt;
  DC_BOOL MirrAdj_XX_Rt;
  DC_BOOL MirrAdj_XX_Up;
  DC_BOOL MirrAdj_XX_Down;
  c02_MirrFld_Rq MirrFld_XX_Rq;
} REC_MirrAdj_XX_Rq_dv7hr5qpr6sv4leh8gdnnmvy2;

# define Rte_TypeDef_REC_NVP_Stat1_18cj3r9lb95cc7w4q3mwqkn86
typedef struct
{
  c02_Ndef_Off_On NVP_WshHt_Rq;
} REC_NVP_Stat1_18cj3r9lb95cc7w4q3mwqkn86;

# define Rte_TypeDef_REC_PN14_SupBat_Stat_2is6fi0meeac78nkn35zc5ui3
typedef struct
{
  c02_BatCutSw_Stat PN14_SupBatCutSw_Stat;
  c08_V_0_25k4_0k1 PN14_SupBat_Volt;
} REC_PN14_SupBat_Stat_2is6fi0meeac78nkn35zc5ui3;

# define Rte_TypeDef_REC_PN14_SupBat_Stat_icptf500osz37cvz00rql74g
typedef struct
{
  c08_V_0_25k4_0k1 PN14_SupBat_Volt;
} REC_PN14_SupBat_Stat_icptf500osz37cvz00rql74g;

# define Rte_TypeDef_REC_Preview_Header1_a2qglp2324znbwefnu92uartf
typedef struct
{
  c08_CRC_woSNA CRC_Preview_Header1;
  c08_0_255_1_SNA_na Preview_HeaderCnt_Header1;
  c16_m_0_65k534_0k001 Preview_LtTrk_P0_Dist;
  c16_m_m3d2768_3d2766_0d0001 Preview_LtTrk_P0_Hgt;
  c08_m_0_0kd0508_0d0002 Preview_LtTrk_P0_Qual;
  c08_0_254_1 Preview_Prof_TmStmp;
  c16_m_0_65k534_0k001 Preview_RtTrk_P0_Dist;
  c16_m_m3d2768_3d2766_0d0001 Preview_RtTrk_P0_Hgt;
  c08_m_0_0kd0508_0d0002 Preview_RtTrk_P0_Qual;
  c02_PreviewTrk_Stat Preview_Trk_Stat;
  c04_0_15_1_SNA_na SQC_Preview_Header1;
  Rsrv16 Rsrv3_Preview_Header1;
  Rsrv02 Rsrv1_Preview_Header1;
  Rsrv16 Rsrv2_Preview_Header1;
} REC_Preview_Header1_a2qglp2324znbwefnu92uartf;

# define Rte_TypeDef_REC_Preview_Header2_1ae8w4ccn5pv3jukyqv8emy5n
typedef struct
{
  c08_CRC_woSNA CRC_Preview_Header2;
  c08_0_255_1_SNA_na Preview_HeaderCnt_Header2;
  c16_rad_m0d6553_p0d6553_0d00002 Preview_PitchAngleDelta;
  c16_rad_m0d6553_p0d6553_0d00002 Preview_RollAngleDelta;
  c16_m_m2d2768_4d2766_0d0001 Preview_ShiftDelta_X;
  c16_m_m3d2768_3d2766_0d0001 Preview_ShiftDelta_Y;
  c16_m_m3d2768_3d2766_0d0001 Preview_ShiftDelta_Z;
  c16_rad_m0d6553_p0d6553_0d00002 Preview_YawAngleDelta;
  c04_0_15_1_SNA_na SQC_Preview_Header2;
  Rsrv16 Rsrv3_Preview_Header2;
  Rsrv08 Rsrv2_Preview_Header2;
  Rsrv04 Rsrv1_Preview_Header2;
} REC_Preview_Header2_1ae8w4ccn5pv3jukyqv8emy5n;

# define Rte_TypeDef_REC_Preview_ProfData1
typedef struct
{
  c08_CRC_woSNA CRC_Preview_ProfData1;
  c08_0_255_1_SNA_na Preview_HeaderCnt_Data1;
  c08_m_0_0kd0508_0d0002 Preview_LtTrk_Qual1;
  c08_m_0_0kd0508_0d0002 Preview_LtTrk_Qual2;
  c08_m_0_0kd0508_0d0002 Preview_LtTrk_Qual3;
  c12_m_m0d2048_0d2046_0k0001 Preview_LtTrk_RelHgt1;
  c12_m_m0d2048_0d2046_0k0001 Preview_LtTrk_RelHgt2;
  c12_m_m0d2048_0d2046_0k0001 Preview_LtTrk_RelHgt3;
  c04_0_15_1_SNA_na Preview_ProfDataCnt_Data1;
  c08_m_0_0kd0508_0d0002 Preview_RtTrk_Qual1;
  c08_m_0_0kd0508_0d0002 Preview_RtTrk_Qual2;
  c08_m_0_0kd0508_0d0002 Preview_RtTrk_Qual3;
  c12_m_m0d2048_0d2046_0k0001 Preview_RtTrk_RelHgt1;
  c12_m_m0d2048_0d2046_0k0001 Preview_RtTrk_RelHgt2;
  c12_m_m0d2048_0d2046_0k0001 Preview_RtTrk_RelHgt3;
  c04_0_15_1_SNA_na SQC_Preview_ProfData1;
} REC_Preview_ProfData1;

# define Rte_TypeDef_REC_Preview_ProfData2
typedef struct
{
  c08_CRC_woSNA CRC_Preview_ProfData2;
  c08_0_255_1_SNA_na Preview_HeaderCnt_Data2;
  c08_m_0_0kd0508_0d0002 Preview_LtTrk_Qual4;
  c08_m_0_0kd0508_0d0002 Preview_LtTrk_Qual5;
  c08_m_0_0kd0508_0d0002 Preview_LtTrk_Qual6;
  c12_m_m0d2048_0d2046_0k0001 Preview_LtTrk_RelHgt4;
  c12_m_m0d2048_0d2046_0k0001 Preview_LtTrk_RelHgt5;
  c12_m_m0d2048_0d2046_0k0001 Preview_LtTrk_RelHgt6;
  c04_0_15_1_SNA_na Preview_ProfDataCnt_Data2;
  c08_m_0_0kd0508_0d0002 Preview_RtTrk_Qual4;
  c08_m_0_0kd0508_0d0002 Preview_RtTrk_Qual5;
  c08_m_0_0kd0508_0d0002 Preview_RtTrk_Qual6;
  c12_m_m0d2048_0d2046_0k0001 Preview_RtTrk_RelHgt4;
  c12_m_m0d2048_0d2046_0k0001 Preview_RtTrk_RelHgt5;
  c12_m_m0d2048_0d2046_0k0001 Preview_RtTrk_RelHgt6;
  c04_0_15_1_SNA_na SQC_Preview_ProfData2;
} REC_Preview_ProfData2;

# define Rte_TypeDef_REC_Preview_VehAccel
typedef struct
{
  c10_rad_p_sq_s_m10d24_10d2_0d02 VehAccel_Pitch;
  c10_rad_p_sq_s_m20d48_20d4_0d04 VehAccel_Roll;
  c10_m_p_sq_s_m15d36_15d3_0d03 VehAccel_Vert;
} REC_Preview_VehAccel;

# define Rte_TypeDef_REC_RDU_GlobalAttr_cp6wyrd9cg7ec7y2w3khz1gyt
typedef struct
{
  c08_CRC_woSNA CRC_RDU_GlobalAttr;
  c16_ms_0_20970880_320 RDU_GlobalTmStmp;
  Rsrv04 Rsrv1_RDU_GlobalAttr;
  Rsrv32 Rsrv2_RDU_GlobalAttr;
  c04_0_15_1_SNA_na SQC_RDU_GlobalAttr;
} REC_RDU_GlobalAttr_cp6wyrd9cg7ec7y2w3khz1gyt;

# define Rte_TypeDef_REC_RDU_Gnrl_Stat_dgfi1nrxtb0voy6rb7ybeonmv
typedef struct
{
  c08_CRC_woSNA CRC_RDU_Gnrl_Stat;
  c10_m_p_sq_s_m51k2_51_0k1 RDU_SysAccel_X;
  c12_m_p_s_m18k35_84_0k025 RDU_SysSpd_X;
  c12_deg_p_s_m63k5_64k437_0k03125 RDU_SysYawRate;
  c12_deg_m40k94_40k94_0k02 RDU_ToeAngl_Calc;
  Rsrv02 Rsrv1_RDU_Gnrl_Stat;
  c04_0_15_1_SNA_na SQC_RDU_Gnrl_Stat;
  Rsrv04 Rsrv2_RDU_Gnrl_Stat;
} REC_RDU_Gnrl_Stat_dgfi1nrxtb0voy6rb7ybeonmv;

# define Rte_TypeDef_REC_SCCM_Lvr_Stat_6v3sj55wsjghho72slblc9pby
typedef struct
{
  c02_TurnIndLvr_Stat TurnIndLvr_Stat;
} REC_SCCM_Lvr_Stat_6v3sj55wsjghho72slblc9pby;

# define Rte_TypeDef_REC_SLA_SpdOffset_Rq_D
typedef struct
{
  c01_UnitVehSpd SLA_SpdOffset_Rq_D_Unit;
  c07_m64_62_1 SLA_SpdOffset_Rq_D_Val;
} REC_SLA_SpdOffset_Rq_D;

# define Rte_TypeDef_REC_SPL_Obj1_Obj2_MPC_evn08d6126fkfaksv87161o1j
typedef struct
{
  c08_CRC_woSNA CRC_SPL_Obj1_Obj2_MPC;
  Rsrv04 Rsrv1_SPL_Obj1_Obj2_MPC;
  Rsrv02 Rsrv2_SPL_Obj1_Obj2_MPC;
  Rsrv02 Rsrv3_SPL_Obj1_Obj2_MPC;
  c05_m_0_180_6 SPL_Obj1_Dist_MPC;
  c10_deg_m10d24_p10d2_0d02 SPL_Obj1_HrztAngl_MPC;
  c03_0_6_1 SPL_Obj1_Id_MPC;
  c02_SPL_Obj_Ill_Rq_MPC SPL_Obj1_Ill_Rq_MPC;
  c02_DGL_Obj_Type SPL_Obj1_Type_MPC;
  c05_m_0_180_6 SPL_Obj2_Dist_MPC;
  c10_deg_m10d24_p10d2_0d02 SPL_Obj2_HrztAngl_MPC;
  c03_0_6_1 SPL_Obj2_Id_MPC;
  c02_SPL_Obj_Ill_Rq_MPC SPL_Obj2_Ill_Rq_MPC;
  c02_DGL_Obj_Type SPL_Obj2_Type_MPC;
  c04_0_15_1_SNA_na SQC_SPL_Obj1_Obj2_MPC;
} REC_SPL_Obj1_Obj2_MPC_evn08d6126fkfaksv87161o1j;

# define Rte_TypeDef_REC_SPL_Obj1_Obj2_NV_evn08d6126fkfaksv87161o1j
typedef struct
{
  c08_CRC_woSNA CRC_SPL_Obj1_Obj2_NV;
  Rsrv04 Rsrv1_SPL_Obj1_Obj2_NV;
  Rsrv02 Rsrv2_SPL_Obj1_Obj2_NV;
  Rsrv02 Rsrv3_SPL_Obj1_Obj2_NV;
  c05_m_0_180_6 SPL_Obj1_Dist_NV;
  c10_deg_m10d24_p10d2_0d02 SPL_Obj1_HrztAngl_NV;
  c03_0_6_1 SPL_Obj1_Id_NV;
  c02_SPL_Obj_Ill_Rq SPL_Obj1_Ill_Rq_NV;
  c02_DGL_Obj_Type SPL_Obj1_Type_NV;
  c05_m_0_180_6 SPL_Obj2_Dist_NV;
  c10_deg_m10d24_p10d2_0d02 SPL_Obj2_HrztAngl_NV;
  c03_0_6_1 SPL_Obj2_Id_NV;
  c02_SPL_Obj_Ill_Rq SPL_Obj2_Ill_Rq_NV;
  c02_DGL_Obj_Type SPL_Obj2_Type_NV;
  c04_0_15_1_SNA_na SQC_SPL_Obj1_Obj2_NV;
} REC_SPL_Obj1_Obj2_NV_evn08d6126fkfaksv87161o1j;

# define Rte_TypeDef_REC_STA_Rs1_b8u1rtjk1lcjd0w2lyxoy9rn2
typedef struct
{
  c08_CRC_woSNA CRC_STA_Rs1;
  c15_deg_m81k92_p80k91_0k005 EPS_FtWhlAngl;
  c02_FtWhlAngl_Stat EPS_FtWhlAngl_Stat;
  c04_0_15_1_SNA_na SQC_STA_Rs1;
  c02_STA_Stat STA_Stat;
  c14_Nm_m81d92_p81d9_0d01 StW_Trq_EPS;
  c08_deg_m3k2_p3k15_0k025 EPS_FtWhlAngl_Offset;
  Rsrv01 Rsrv1_STA_Rs1;
  Rsrv02 Rsrv2_STA_Rs1;
  Rsrv08 Rsrv3_STA_Rs1;
} REC_STA_Rs1_b8u1rtjk1lcjd0w2lyxoy9rn2;

# define Rte_TypeDef_REC_StWhl_Angl_Stat_1lbtoaaebi5n2qvdq20f1phhd
typedef struct
{
  c14_deg_m819k2_819_0k1 StWhl_Angl;
  c02_StWhl_AnglSens_Stat StWhl_AnglSens_Stat;
  c04_0_15_1_SNA_na SQC_StWhl_Angl_Stat;
  c08_CRC_woSNA CRC_StWhl_Angl_Stat;
  c02_StWhl_AnglSens_Id StWhl_AnglSens_Id;
  c14_deg_p_s_m4096_4095_0k5 StWhl_AnglSpd;
  Rsrv16 Rsrv3_StWhl_Angl_Stat;
  Rsrv02 Rsrv2_StWhl_Angl_Stat;
  Rsrv02 Rsrv1_StWhl_Angl_Stat;
} REC_StWhl_Angl_Stat_1lbtoaaebi5n2qvdq20f1phhd;

# define Rte_TypeDef_REC_TCM_Data2_b8u1rtjk1lcjd0w2lyxoy9rn2
typedef struct
{
  c08_CRC_woSNA CRC_TCM_Data2;
  c14_0_163k82_0k01 EngWhlTrqRatio_TCM;
  c04_Gr Gr;
  c04_Gr_Target Gr_Target;
  c04_0_15_1_SNA_na SQC_TCM_Data2;
  DC_BOOL SSA_Enbl_Rq_TCM;
  c02_SSA_ENBL_DSABL_PNA_TCM SSA_Enbl_Stat_TCM;
  c03_TSL_Posn TSL_Posn_TCM;
  c16_Nm_0_65534_1 TxDrvTrqAbsVal;
  c08_Nm_0_63k5_0k25 TxTrqLoss;
} REC_TCM_Data2_b8u1rtjk1lcjd0w2lyxoy9rn2;

# define Rte_TypeDef_REC_VIN
typedef struct
{
  c02_VIN VIN_MsgPart;
  c08_UInt_SNA_na VIN_Data1;
  c08_UInt_SNA_na VIN_Data2;
  c08_UInt_SNA_na VIN_Data3;
  c08_UInt_SNA_na VIN_Data4;
  c08_UInt_SNA_na VIN_Data5;
  c08_UInt_SNA_na VIN_Data6;
  c08_UInt_SNA_na VIN_Data7;
} REC_VIN;

# define Rte_TypeDef_REC_VehDyn_EPKB_Stat_1ae8w4ccn5pv3jukyqv8emy5n
typedef struct
{
  c08_m_p_sq_s_m10k24_10k08_0k08 VehAccel_X;
  c08_m_p_sq_s_m2k56_2k52_0k02 VehAccel_X_Offset;
  c08_m_p_sq_s_m10k24_10k08_0k08 VehAccel_Y;
  c08_m_p_sq_s_m2k56_2k52_0k02 VehAccel_Y_Offset;
  c04_0_15_1_SNA_na SQC_VehDyn_EPKB_Stat;
  c08_CRC_woSNA CRC_VehDyn_EPKB_Stat;
  c02_Signal_Qual VehAccel_Y_Qual;
  c02_Signal_Qual VehAccel_X_Qual;
  DC_BOOL EPKB_Enbl_Rq;
  c02_PkBrk_Rq_ESP PkBrk_Rq_SPCR;
  Rsrv08 Rsrv2_VehDyn_EPKB_Stat;
  Rsrv05 Rsrv1_VehDyn_EPKB_Stat;
} REC_VehDyn_EPKB_Stat_1ae8w4ccn5pv3jukyqv8emy5n;

# define Rte_TypeDef_REC_VehDyn_SPCR_Stat_5wz7lvfuvag9tw5a51baqfzdd
typedef struct
{
  c08_CRC_woSNA CRC_VehDyn_SPCR_Stat;
  DC_BOOL HSA_Sys_Flt;
  c04_0_15_1_SNA_na SQC_VehDyn_SPCR_Stat;
  c02_SPCR_AS_Dsabl SPCR_AS_Dsabl;
  c02_SPCR_AS_Off_Rq SPCR_AS_Off_Rq;
  c02_SPCR_Excpt_Rq_V2 SPCR_Excpt_Rq_V2;
  c04_SPCR_Md SPCR_Md;
  c02_SPCR_Sp_Stat SPCR_Sp_Stat;
  DC_BOOL SPCR_Veh_Immo;
  DC_BOOL TxPkPosn_Rq_SPCR;
  c08_deg_p_s_m6k96_6k96_0k08 VehYawRateOffset;
  c02_Signal_Qual VehYawRate_Raw_Qual;
  c02_SPCR_Style SPCR_Style;
  c16_deg_p_s_m327k68_327k66_0k01 VehYawRate_Raw;
  Rsrv01 Rsrv1_VehDyn_SPCR_Stat;
  Rsrv08 Rsrv2_VehDyn_SPCR_Stat;
} REC_VehDyn_SPCR_Stat_5wz7lvfuvag9tw5a51baqfzdd;

# define Rte_TypeDef_REC_VehLvl_Stat
typedef struct
{
  c08_mm_m127_127_1 VehLvl_FL;
  c08_mm_m127_127_1 VehLvl_FR;
  c08_mm_m127_127_1 VehLvl_RL;
  c08_mm_m127_127_1 VehLvl_RR;
} REC_VehLvl_Stat;

# define Rte_TypeDef_REC_Whl_Lt_Stat
typedef struct
{
  c08_CRC_woSNA CRC_Whl_Lt_Stat;
  c04_0_15_1_SNA_na SQC_Whl_Lt_Stat;
  c02_WhlDir WhlDir_FL_Stat;
  c02_Signal_Qual WhlRPM_RL_Qual;
  c08_Impulses_0_254_1 WhlPlsCnt_FL;
  c02_WhlDir WhlDir_RL_Stat;
  c14_rpm_0_8191_0k5 WhlRPM_FL;
  c14_rpm_0_8191_0k5 WhlRPM_RL;
  c08_Impulses_0_254_1 WhlPlsCnt_RL;
  c02_Signal_Qual WhlRPM_FL_Qual;
} REC_Whl_Lt_Stat;

# define Rte_TypeDef_REC_Whl_Rt_Stat_b8u1rtjk1lcjd0w2lyxoy9rn2
typedef struct
{
  c08_CRC_woSNA CRC_Whl_Rt_Stat;
  c04_0_15_1_SNA_na SQC_Whl_Rt_Stat;
  c02_WhlDir WhlDir_FR_Stat;
  c02_WhlDir WhlDir_RR_Stat;
  c14_rpm_0_8191_0k5 WhlRPM_FR;
  c08_Impulses_0_254_1 WhlPlsCnt_RR;
  c02_Signal_Qual WhlRPM_FR_Qual;
  c14_rpm_0_8191_0k5 WhlRPM_RR;
  c08_Impulses_0_254_1 WhlPlsCnt_FR;
  c02_Signal_Qual WhlRPM_RR_Qual;
} REC_Whl_Rt_Stat_b8u1rtjk1lcjd0w2lyxoy9rn2;

# define Rte_TypeDef_REC_WprWashSw_Stat_9t6sxiiysej7o2144of8lwc05
typedef struct
{
  c03_WprSw6Posn WprSw6Posn;
  c02_WprSw_Stat WprWashSw_Psd;
} REC_WprWashSw_Stat_9t6sxiiysej7o2144of8lwc05;

# define Rte_TypeDef_SwcDemSc_EngRsEngCtrl_GrpType
//typedef struct
//{
//  c03_EngRun_Stat EngRun_Stat;
//} SwcDemSc_EngRsEngCtrl_GrpType;

# define Rte_TypeDef_SwcDemSc_IgnStat_GrpType
//typedef struct
//{
//  c03_ISw_Stat ISw_Stat;
//} SwcDemSc_IgnStat_GrpType;

# define Rte_TypeDef_SwcDemSc_PN14SupBatStat_GrpType
//typedef struct
//{
//  c08_V_0_25k4_0k1 PN14_SupBat_Volt;
//} SwcDemSc_PN14SupBatStat_GrpType;

# define Rte_TypeDef_SwcRoElite_MsgType
//typedef struct
//{
//  c24_0_16777215_1_SNA_na ROE_DTC_XX;
//  c08_0_255_1_SNA_na ROE_DTC_Stat_XX;
//  c32_0_4294967295_1_SNA_na ROE_Header_XX;
//} SwcRoElite_MsgType;

# define Rte_TypeDef_SwcRoElite_QueueElementType
//typedef struct
//{
//  Dem_DTCType DTC;
//  Dem_DTCStatusMaskType DTCStatus;
//} SwcRoElite_QueueElementType;

# define Rte_TypeDef_SwcRoElite_QueueType
//typedef SwcRoElite_QueueElementType SwcRoElite_QueueType[5];

#define RTE_SUPPRESS_UNUSED_DATATYPES
//#undef RTE_SUPPRESS_UNUSED_DATATYPES

# ifndef RTE_SUPPRESS_UNUSED_DATATYPES
/**********************************************************************************************************************
 * Unused Data type definitions
 *********************************************************************************************************************/

#  define Rte_TypeDef_Double
typedef float64 Double;
#  define Double_LowerLimit ((Double)-DBL_MAX)
#  define Double_UpperLimit ((Double)DBL_MAX)

#  define Rte_TypeDef_Float
typedef float32 Float;
#  define Float_LowerLimit ((Float)-FLT_MAX)
#  define Float_UpperLimit ((Float)FLT_MAX)

#  define Rte_TypeDef_SInt16
typedef sint16 SInt16;
#  define SInt16_LowerLimit ((SInt16)-32768)
#  define SInt16_UpperLimit ((SInt16)32767)

#  define Rte_TypeDef_SInt32
typedef sint32 SInt32;
#  define SInt32_LowerLimit ((SInt32)-2147483648)
#  define SInt32_UpperLimit ((SInt32)2147483647)

#  define Rte_TypeDef_SInt4
typedef sint8 SInt4;
#  define SInt4_LowerLimit ((SInt4)-8)
#  define SInt4_UpperLimit ((SInt4)7)

#  define Rte_TypeDef_SInt8
typedef sint8 SInt8;
#  define SInt8_LowerLimit ((SInt8)-128)
#  define SInt8_UpperLimit ((SInt8)127)

#  define Rte_TypeDef_UInt4
typedef uint8 UInt4;
#  define UInt4_LowerLimit ((UInt4)0u)
#  define UInt4_UpperLimit ((UInt4)15u)

#  define Rte_TypeDef_Dcm_ProtocolType
typedef uint8 Dcm_ProtocolType;
#  define Dcm_ProtocolType_LowerLimit ((Dcm_ProtocolType)0u)
#  define Dcm_ProtocolType_UpperLimit ((Dcm_ProtocolType)255u)
#  if (defined RTE_CONST_DCM_OBD_ON_CAN) || (defined DCM_OBD_ON_CAN)
#   if (!defined RTE_CONST_DCM_OBD_ON_CAN) || (RTE_CONST_DCM_OBD_ON_CAN != 0u)
#    error "Enumeration constant <DCM_OBD_ON_CAN> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_DCM_OBD_ON_CAN (0u)
#   define DCM_OBD_ON_CAN ((Dcm_ProtocolType)0u)
#  endif
#  if (defined RTE_CONST_DCM_UDS_ON_CAN) || (defined DCM_UDS_ON_CAN)
#   if (!defined RTE_CONST_DCM_UDS_ON_CAN) || (RTE_CONST_DCM_UDS_ON_CAN != 1u)
#    error "Enumeration constant <DCM_UDS_ON_CAN> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_DCM_UDS_ON_CAN (1u)
#   define DCM_UDS_ON_CAN ((Dcm_ProtocolType)1u)
#  endif
#  if (defined RTE_CONST_DCM_UDS_ON_FLEXRAY) || (defined DCM_UDS_ON_FLEXRAY)
#   if (!defined RTE_CONST_DCM_UDS_ON_FLEXRAY) || (RTE_CONST_DCM_UDS_ON_FLEXRAY != 2u)
#    error "Enumeration constant <DCM_UDS_ON_FLEXRAY> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_DCM_UDS_ON_FLEXRAY (2u)
#   define DCM_UDS_ON_FLEXRAY ((Dcm_ProtocolType)2u)
#  endif
#  if (defined RTE_CONST_DCM_ROE_ON_CAN) || (defined DCM_ROE_ON_CAN)
#   if (!defined RTE_CONST_DCM_ROE_ON_CAN) || (RTE_CONST_DCM_ROE_ON_CAN != 3u)
#    error "Enumeration constant <DCM_ROE_ON_CAN> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_DCM_ROE_ON_CAN (3u)
#   define DCM_ROE_ON_CAN ((Dcm_ProtocolType)3u)
#  endif
#  if (defined RTE_CONST_DCM_ROE_ON_FLEXRAY) || (defined DCM_ROE_ON_FLEXRAY)
#   if (!defined RTE_CONST_DCM_ROE_ON_FLEXRAY) || (RTE_CONST_DCM_ROE_ON_FLEXRAY != 4u)
#    error "Enumeration constant <DCM_ROE_ON_FLEXRAY> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_DCM_ROE_ON_FLEXRAY (4u)
#   define DCM_ROE_ON_FLEXRAY ((Dcm_ProtocolType)4u)
#  endif
#  if (defined RTE_CONST_DCM_PERIODICTRANS_ON_CAN) || (defined DCM_PERIODICTRANS_ON_CAN)
#   if (!defined RTE_CONST_DCM_PERIODICTRANS_ON_CAN) || (RTE_CONST_DCM_PERIODICTRANS_ON_CAN != 5u)
#    error "Enumeration constant <DCM_PERIODICTRANS_ON_CAN> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_DCM_PERIODICTRANS_ON_CAN (5u)
#   define DCM_PERIODICTRANS_ON_CAN ((Dcm_ProtocolType)5u)
#  endif
#  if (defined RTE_CONST_DCM_PERIODICTRANS_ON_FLEXRAY) || (defined DCM_PERIODICTRANS_ON_FLEXRAY)
#   if (!defined RTE_CONST_DCM_PERIODICTRANS_ON_FLEXRAY) || (RTE_CONST_DCM_PERIODICTRANS_ON_FLEXRAY != 6u)
#    error "Enumeration constant <DCM_PERIODICTRANS_ON_FLEXRAY> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_DCM_PERIODICTRANS_ON_FLEXRAY (6u)
#   define DCM_PERIODICTRANS_ON_FLEXRAY ((Dcm_ProtocolType)6u)
#  endif

#  define Rte_TypeDef_Dem_InitMonitorKindType
typedef uint8 Dem_InitMonitorKindType;
#  define Dem_InitMonitorKindType_LowerLimit ((Dem_InitMonitorKindType)0u)
#  define Dem_InitMonitorKindType_UpperLimit ((Dem_InitMonitorKindType)2u)
#  if (defined RTE_CONST_DEM_INIT_MONITOR_CLEAR) || (defined DEM_INIT_MONITOR_CLEAR)
#   if (!defined RTE_CONST_DEM_INIT_MONITOR_CLEAR) || (RTE_CONST_DEM_INIT_MONITOR_CLEAR != 1u)
#    error "Enumeration constant <DEM_INIT_MONITOR_CLEAR> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_DEM_INIT_MONITOR_CLEAR (1u)
#   define DEM_INIT_MONITOR_CLEAR ((Dem_InitMonitorKindType)1u)
#  endif
#  if (defined RTE_CONST_DEM_INIT_MONITOR_RESTART) || (defined DEM_INIT_MONITOR_RESTART)
#   if (!defined RTE_CONST_DEM_INIT_MONITOR_RESTART) || (RTE_CONST_DEM_INIT_MONITOR_RESTART != 2u)
#    error "Enumeration constant <DEM_INIT_MONITOR_RESTART> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_DEM_INIT_MONITOR_RESTART (2u)
#   define DEM_INIT_MONITOR_RESTART ((Dem_InitMonitorKindType)2u)
#  endif

#  define Rte_TypeDef_c01_Inactive_Active
typedef uint8 c01_Inactive_Active;
#  define c01_Inactive_Active_LowerLimit ((c01_Inactive_Active)0u)
#  define c01_Inactive_Active_UpperLimit ((c01_Inactive_Active)1u)
#  if (defined RTE_CONST_I_C01_INACTIVE_ACTIVE_INACTIVE) || (defined I_C01_INACTIVE_ACTIVE_INACTIVE)
#   if (!defined RTE_CONST_I_C01_INACTIVE_ACTIVE_INACTIVE) || (RTE_CONST_I_C01_INACTIVE_ACTIVE_INACTIVE != 0u)
#    error "Enumeration constant <I_C01_INACTIVE_ACTIVE_INACTIVE> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C01_INACTIVE_ACTIVE_INACTIVE (0u)
#   define I_C01_INACTIVE_ACTIVE_INACTIVE ((c01_Inactive_Active)0u)
#  endif
#  if (defined RTE_CONST_I_C01_INACTIVE_ACTIVE_ACTIVE) || (defined I_C01_INACTIVE_ACTIVE_ACTIVE)
#   if (!defined RTE_CONST_I_C01_INACTIVE_ACTIVE_ACTIVE) || (RTE_CONST_I_C01_INACTIVE_ACTIVE_ACTIVE != 1u)
#    error "Enumeration constant <I_C01_INACTIVE_ACTIVE_ACTIVE> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C01_INACTIVE_ACTIVE_ACTIVE (1u)
#   define I_C01_INACTIVE_ACTIVE_ACTIVE ((c01_Inactive_Active)1u)
#  endif

#  define Rte_TypeDef_c01_NoFault_KeptAwake
typedef uint8 c01_NoFault_KeptAwake;
#  define c01_NoFault_KeptAwake_LowerLimit ((c01_NoFault_KeptAwake)0u)
#  define c01_NoFault_KeptAwake_UpperLimit ((c01_NoFault_KeptAwake)1u)
#  if (defined RTE_CONST_I_C01_NOFAULT_KEPTAWAKE_NO_FLT) || (defined I_C01_NOFAULT_KEPTAWAKE_NO_FLT)
#   if (!defined RTE_CONST_I_C01_NOFAULT_KEPTAWAKE_NO_FLT) || (RTE_CONST_I_C01_NOFAULT_KEPTAWAKE_NO_FLT != 0u)
#    error "Enumeration constant <I_C01_NOFAULT_KEPTAWAKE_NO_FLT> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C01_NOFAULT_KEPTAWAKE_NO_FLT (0u)
#   define I_C01_NOFAULT_KEPTAWAKE_NO_FLT ((c01_NoFault_KeptAwake)0u)
#  endif
#  if (defined RTE_CONST_I_C01_NOFAULT_KEPTAWAKE_BUS_FLT_KPT_AWAKE) || (defined I_C01_NOFAULT_KEPTAWAKE_BUS_FLT_KPT_AWAKE)
#   if (!defined RTE_CONST_I_C01_NOFAULT_KEPTAWAKE_BUS_FLT_KPT_AWAKE) || (RTE_CONST_I_C01_NOFAULT_KEPTAWAKE_BUS_FLT_KPT_AWAKE != 1u)
#    error "Enumeration constant <I_C01_NOFAULT_KEPTAWAKE_BUS_FLT_KPT_AWAKE> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C01_NOFAULT_KEPTAWAKE_BUS_FLT_KPT_AWAKE (1u)
#   define I_C01_NOFAULT_KEPTAWAKE_BUS_FLT_KPT_AWAKE ((c01_NoFault_KeptAwake)1u)
#  endif

#  define Rte_TypeDef_c02_02_Idle_On_NDef
typedef uint8 c02_02_Idle_On_NDef;
#  define c02_02_Idle_On_NDef_LowerLimit ((c02_02_Idle_On_NDef)0u)
#  define c02_02_Idle_On_NDef_UpperLimit ((c02_02_Idle_On_NDef)3u)
#  define Rte_InvalidValue_c02_02_Idle_On_NDef ((c02_02_Idle_On_NDef)3u)
#  if (defined RTE_CONST_I_C02_02_IDLE_ON_NDEF_IDLE) || (defined I_C02_02_IDLE_ON_NDEF_IDLE)
#   if (!defined RTE_CONST_I_C02_02_IDLE_ON_NDEF_IDLE) || (RTE_CONST_I_C02_02_IDLE_ON_NDEF_IDLE != 0u)
#    error "Enumeration constant <I_C02_02_IDLE_ON_NDEF_IDLE> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_02_IDLE_ON_NDEF_IDLE (0u)
#   define I_C02_02_IDLE_ON_NDEF_IDLE ((c02_02_Idle_On_NDef)0u)
#  endif
#  if (defined RTE_CONST_I_C02_02_IDLE_ON_NDEF_ON) || (defined I_C02_02_IDLE_ON_NDEF_ON)
#   if (!defined RTE_CONST_I_C02_02_IDLE_ON_NDEF_ON) || (RTE_CONST_I_C02_02_IDLE_ON_NDEF_ON != 1u)
#    error "Enumeration constant <I_C02_02_IDLE_ON_NDEF_ON> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_02_IDLE_ON_NDEF_ON (1u)
#   define I_C02_02_IDLE_ON_NDEF_ON ((c02_02_Idle_On_NDef)1u)
#  endif
#  if (defined RTE_CONST_I_C02_02_IDLE_ON_NDEF_NDEF2) || (defined I_C02_02_IDLE_ON_NDEF_NDEF2)
#   if (!defined RTE_CONST_I_C02_02_IDLE_ON_NDEF_NDEF2) || (RTE_CONST_I_C02_02_IDLE_ON_NDEF_NDEF2 != 2u)
#    error "Enumeration constant <I_C02_02_IDLE_ON_NDEF_NDEF2> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_02_IDLE_ON_NDEF_NDEF2 (2u)
#   define I_C02_02_IDLE_ON_NDEF_NDEF2 ((c02_02_Idle_On_NDef)2u)
#  endif
#  if (defined RTE_CONST_I_C02_02_IDLE_ON_NDEF_SNA) || (defined I_C02_02_IDLE_ON_NDEF_SNA)
#   if (!defined RTE_CONST_I_C02_02_IDLE_ON_NDEF_SNA) || (RTE_CONST_I_C02_02_IDLE_ON_NDEF_SNA != 3u)
#    error "Enumeration constant <I_C02_02_IDLE_ON_NDEF_SNA> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_02_IDLE_ON_NDEF_SNA (3u)
#   define I_C02_02_IDLE_ON_NDEF_SNA ((c02_02_Idle_On_NDef)3u)
#  endif

#  define Rte_TypeDef_c02_ADC_SwLED_Rq_V2
typedef uint8 c02_ADC_SwLED_Rq_V2;
#  define c02_ADC_SwLED_Rq_V2_LowerLimit ((c02_ADC_SwLED_Rq_V2)0u)
#  define c02_ADC_SwLED_Rq_V2_UpperLimit ((c02_ADC_SwLED_Rq_V2)3u)
#  if (defined RTE_CONST_I_C02_ADC_SWLED_RQ_V2_SPORT_COMFORT_OFF) || (defined I_C02_ADC_SWLED_RQ_V2_SPORT_COMFORT_OFF)
#   if (!defined RTE_CONST_I_C02_ADC_SWLED_RQ_V2_SPORT_COMFORT_OFF) || (RTE_CONST_I_C02_ADC_SWLED_RQ_V2_SPORT_COMFORT_OFF != 0u)
#    error "Enumeration constant <I_C02_ADC_SWLED_RQ_V2_SPORT_COMFORT_OFF> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_ADC_SWLED_RQ_V2_SPORT_COMFORT_OFF (0u)
#   define I_C02_ADC_SWLED_RQ_V2_SPORT_COMFORT_OFF ((c02_ADC_SwLED_Rq_V2)0u)
#  endif
#  if (defined RTE_CONST_I_C02_ADC_SWLED_RQ_V2_COMFORT_ON) || (defined I_C02_ADC_SWLED_RQ_V2_COMFORT_ON)
#   if (!defined RTE_CONST_I_C02_ADC_SWLED_RQ_V2_COMFORT_ON) || (RTE_CONST_I_C02_ADC_SWLED_RQ_V2_COMFORT_ON != 1u)
#    error "Enumeration constant <I_C02_ADC_SWLED_RQ_V2_COMFORT_ON> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_ADC_SWLED_RQ_V2_COMFORT_ON (1u)
#   define I_C02_ADC_SWLED_RQ_V2_COMFORT_ON ((c02_ADC_SwLED_Rq_V2)1u)
#  endif
#  if (defined RTE_CONST_I_C02_ADC_SWLED_RQ_V2_SPORT_ON) || (defined I_C02_ADC_SWLED_RQ_V2_SPORT_ON)
#   if (!defined RTE_CONST_I_C02_ADC_SWLED_RQ_V2_SPORT_ON) || (RTE_CONST_I_C02_ADC_SWLED_RQ_V2_SPORT_ON != 2u)
#    error "Enumeration constant <I_C02_ADC_SWLED_RQ_V2_SPORT_ON> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_ADC_SWLED_RQ_V2_SPORT_ON (2u)
#   define I_C02_ADC_SWLED_RQ_V2_SPORT_ON ((c02_ADC_SwLED_Rq_V2)2u)
#  endif
#  if (defined RTE_CONST_I_C02_ADC_SWLED_RQ_V2_SPORT_PLUS_ON) || (defined I_C02_ADC_SWLED_RQ_V2_SPORT_PLUS_ON)
#   if (!defined RTE_CONST_I_C02_ADC_SWLED_RQ_V2_SPORT_PLUS_ON) || (RTE_CONST_I_C02_ADC_SWLED_RQ_V2_SPORT_PLUS_ON != 3u)
#    error "Enumeration constant <I_C02_ADC_SWLED_RQ_V2_SPORT_PLUS_ON> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_ADC_SWLED_RQ_V2_SPORT_PLUS_ON (3u)
#   define I_C02_ADC_SWLED_RQ_V2_SPORT_PLUS_ON ((c02_ADC_SwLED_Rq_V2)3u)
#  endif

#  define Rte_TypeDef_c02_BSM_Md_Rq
typedef uint8 c02_BSM_Md_Rq;
#  define c02_BSM_Md_Rq_LowerLimit ((c02_BSM_Md_Rq)0u)
#  define c02_BSM_Md_Rq_UpperLimit ((c02_BSM_Md_Rq)3u)
#  define Rte_InvalidValue_c02_BSM_Md_Rq ((c02_BSM_Md_Rq)3u)
#  if (defined RTE_CONST_I_C02_BSM_MD_RQ_OFF) || (defined I_C02_BSM_MD_RQ_OFF)
#   if (!defined RTE_CONST_I_C02_BSM_MD_RQ_OFF) || (RTE_CONST_I_C02_BSM_MD_RQ_OFF != 0u)
#    error "Enumeration constant <I_C02_BSM_MD_RQ_OFF> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_BSM_MD_RQ_OFF (0u)
#   define I_C02_BSM_MD_RQ_OFF ((c02_BSM_Md_Rq)0u)
#  endif
#  if (defined RTE_CONST_I_C02_BSM_MD_RQ_PERM) || (defined I_C02_BSM_MD_RQ_PERM)
#   if (!defined RTE_CONST_I_C02_BSM_MD_RQ_PERM) || (RTE_CONST_I_C02_BSM_MD_RQ_PERM != 1u)
#    error "Enumeration constant <I_C02_BSM_MD_RQ_PERM> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_BSM_MD_RQ_PERM (1u)
#   define I_C02_BSM_MD_RQ_PERM ((c02_BSM_Md_Rq)1u)
#  endif
#  if (defined RTE_CONST_I_C02_BSM_MD_RQ_AUTO) || (defined I_C02_BSM_MD_RQ_AUTO)
#   if (!defined RTE_CONST_I_C02_BSM_MD_RQ_AUTO) || (RTE_CONST_I_C02_BSM_MD_RQ_AUTO != 2u)
#    error "Enumeration constant <I_C02_BSM_MD_RQ_AUTO> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_BSM_MD_RQ_AUTO (2u)
#   define I_C02_BSM_MD_RQ_AUTO ((c02_BSM_Md_Rq)2u)
#  endif
#  if (defined RTE_CONST_I_C02_BSM_MD_RQ_SNA) || (defined I_C02_BSM_MD_RQ_SNA)
#   if (!defined RTE_CONST_I_C02_BSM_MD_RQ_SNA) || (RTE_CONST_I_C02_BSM_MD_RQ_SNA != 3u)
#    error "Enumeration constant <I_C02_BSM_MD_RQ_SNA> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_BSM_MD_RQ_SNA (3u)
#   define I_C02_BSM_MD_RQ_SNA ((c02_BSM_Md_Rq)3u)
#  endif

#  define Rte_TypeDef_c02_BSM_WarnUnit_Stat
typedef uint8 c02_BSM_WarnUnit_Stat;
#  define c02_BSM_WarnUnit_Stat_LowerLimit ((c02_BSM_WarnUnit_Stat)0u)
#  define c02_BSM_WarnUnit_Stat_UpperLimit ((c02_BSM_WarnUnit_Stat)3u)
#  define Rte_InvalidValue_c02_BSM_WarnUnit_Stat ((c02_BSM_WarnUnit_Stat)3u)
#  if (defined RTE_CONST_I_C02_BSM_WARNUNIT_STAT_NDEF0) || (defined I_C02_BSM_WARNUNIT_STAT_NDEF0)
#   if (!defined RTE_CONST_I_C02_BSM_WARNUNIT_STAT_NDEF0) || (RTE_CONST_I_C02_BSM_WARNUNIT_STAT_NDEF0 != 0u)
#    error "Enumeration constant <I_C02_BSM_WARNUNIT_STAT_NDEF0> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_BSM_WARNUNIT_STAT_NDEF0 (0u)
#   define I_C02_BSM_WARNUNIT_STAT_NDEF0 ((c02_BSM_WarnUnit_Stat)0u)
#  endif
#  if (defined RTE_CONST_I_C02_BSM_WARNUNIT_STAT_OK) || (defined I_C02_BSM_WARNUNIT_STAT_OK)
#   if (!defined RTE_CONST_I_C02_BSM_WARNUNIT_STAT_OK) || (RTE_CONST_I_C02_BSM_WARNUNIT_STAT_OK != 1u)
#    error "Enumeration constant <I_C02_BSM_WARNUNIT_STAT_OK> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_BSM_WARNUNIT_STAT_OK (1u)
#   define I_C02_BSM_WARNUNIT_STAT_OK ((c02_BSM_WarnUnit_Stat)1u)
#  endif
#  if (defined RTE_CONST_I_C02_BSM_WARNUNIT_STAT_ERROR) || (defined I_C02_BSM_WARNUNIT_STAT_ERROR)
#   if (!defined RTE_CONST_I_C02_BSM_WARNUNIT_STAT_ERROR) || (RTE_CONST_I_C02_BSM_WARNUNIT_STAT_ERROR != 2u)
#    error "Enumeration constant <I_C02_BSM_WARNUNIT_STAT_ERROR> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_BSM_WARNUNIT_STAT_ERROR (2u)
#   define I_C02_BSM_WARNUNIT_STAT_ERROR ((c02_BSM_WarnUnit_Stat)2u)
#  endif
#  if (defined RTE_CONST_I_C02_BSM_WARNUNIT_STAT_SNA) || (defined I_C02_BSM_WARNUNIT_STAT_SNA)
#   if (!defined RTE_CONST_I_C02_BSM_WARNUNIT_STAT_SNA) || (RTE_CONST_I_C02_BSM_WARNUNIT_STAT_SNA != 3u)
#    error "Enumeration constant <I_C02_BSM_WARNUNIT_STAT_SNA> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_BSM_WARNUNIT_STAT_SNA (3u)
#   define I_C02_BSM_WARNUNIT_STAT_SNA ((c02_BSM_WarnUnit_Stat)3u)
#  endif

#  define Rte_TypeDef_c02_Bckl_Sw_Stat
typedef uint8 c02_Bckl_Sw_Stat;
#  define c02_Bckl_Sw_Stat_LowerLimit ((c02_Bckl_Sw_Stat)0u)
#  define c02_Bckl_Sw_Stat_UpperLimit ((c02_Bckl_Sw_Stat)3u)
#  define Rte_InvalidValue_c02_Bckl_Sw_Stat ((c02_Bckl_Sw_Stat)3u)
#  if (defined RTE_CONST_I_C02_BCKL_SW_STAT_OK) || (defined I_C02_BCKL_SW_STAT_OK)
#   if (!defined RTE_CONST_I_C02_BCKL_SW_STAT_OK) || (RTE_CONST_I_C02_BCKL_SW_STAT_OK != 0u)
#    error "Enumeration constant <I_C02_BCKL_SW_STAT_OK> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_BCKL_SW_STAT_OK (0u)
#   define I_C02_BCKL_SW_STAT_OK ((c02_Bckl_Sw_Stat)0u)
#  endif
#  if (defined RTE_CONST_I_C02_BCKL_SW_STAT_NOT) || (defined I_C02_BCKL_SW_STAT_NOT)
#   if (!defined RTE_CONST_I_C02_BCKL_SW_STAT_NOT) || (RTE_CONST_I_C02_BCKL_SW_STAT_NOT != 1u)
#    error "Enumeration constant <I_C02_BCKL_SW_STAT_NOT> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_BCKL_SW_STAT_NOT (1u)
#   define I_C02_BCKL_SW_STAT_NOT ((c02_Bckl_Sw_Stat)1u)
#  endif
#  if (defined RTE_CONST_I_C02_BCKL_SW_STAT_FLT) || (defined I_C02_BCKL_SW_STAT_FLT)
#   if (!defined RTE_CONST_I_C02_BCKL_SW_STAT_FLT) || (RTE_CONST_I_C02_BCKL_SW_STAT_FLT != 2u)
#    error "Enumeration constant <I_C02_BCKL_SW_STAT_FLT> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_BCKL_SW_STAT_FLT (2u)
#   define I_C02_BCKL_SW_STAT_FLT ((c02_Bckl_Sw_Stat)2u)
#  endif
#  if (defined RTE_CONST_I_C02_BCKL_SW_STAT_SNA) || (defined I_C02_BCKL_SW_STAT_SNA)
#   if (!defined RTE_CONST_I_C02_BCKL_SW_STAT_SNA) || (RTE_CONST_I_C02_BCKL_SW_STAT_SNA != 3u)
#    error "Enumeration constant <I_C02_BCKL_SW_STAT_SNA> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_BCKL_SW_STAT_SNA (3u)
#   define I_C02_BCKL_SW_STAT_SNA ((c02_Bckl_Sw_Stat)3u)
#  endif

#  define Rte_TypeDef_c02_BrLmpStyle
typedef uint8 c02_BrLmpStyle;
#  define c02_BrLmpStyle_LowerLimit ((c02_BrLmpStyle)0u)
#  define c02_BrLmpStyle_UpperLimit ((c02_BrLmpStyle)3u)
#  define Rte_InvalidValue_c02_BrLmpStyle ((c02_BrLmpStyle)3u)
#  if (defined RTE_CONST_I_C02_BRLMPSTYLE_BULB_DET) || (defined I_C02_BRLMPSTYLE_BULB_DET)
#   if (!defined RTE_CONST_I_C02_BRLMPSTYLE_BULB_DET) || (RTE_CONST_I_C02_BRLMPSTYLE_BULB_DET != 0u)
#    error "Enumeration constant <I_C02_BRLMPSTYLE_BULB_DET> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_BRLMPSTYLE_BULB_DET (0u)
#   define I_C02_BRLMPSTYLE_BULB_DET ((c02_BrLmpStyle)0u)
#  endif
#  if (defined RTE_CONST_I_C02_BRLMPSTYLE_LED_DET) || (defined I_C02_BRLMPSTYLE_LED_DET)
#   if (!defined RTE_CONST_I_C02_BRLMPSTYLE_LED_DET) || (RTE_CONST_I_C02_BRLMPSTYLE_LED_DET != 1u)
#    error "Enumeration constant <I_C02_BRLMPSTYLE_LED_DET> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_BRLMPSTYLE_LED_DET (1u)
#   define I_C02_BRLMPSTYLE_LED_DET ((c02_BrLmpStyle)1u)
#  endif
#  if (defined RTE_CONST_I_C02_BRLMPSTYLE_NDEF2) || (defined I_C02_BRLMPSTYLE_NDEF2)
#   if (!defined RTE_CONST_I_C02_BRLMPSTYLE_NDEF2) || (RTE_CONST_I_C02_BRLMPSTYLE_NDEF2 != 2u)
#    error "Enumeration constant <I_C02_BRLMPSTYLE_NDEF2> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_BRLMPSTYLE_NDEF2 (2u)
#   define I_C02_BRLMPSTYLE_NDEF2 ((c02_BrLmpStyle)2u)
#  endif
#  if (defined RTE_CONST_I_C02_BRLMPSTYLE_SNA) || (defined I_C02_BRLMPSTYLE_SNA)
#   if (!defined RTE_CONST_I_C02_BRLMPSTYLE_SNA) || (RTE_CONST_I_C02_BRLMPSTYLE_SNA != 3u)
#    error "Enumeration constant <I_C02_BRLMPSTYLE_SNA> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_BRLMPSTYLE_SNA (3u)
#   define I_C02_BRLMPSTYLE_SNA ((c02_BrLmpStyle)3u)
#  endif

#  define Rte_TypeDef_c02_CLkS_Rq_SNA_3h
typedef uint8 c02_CLkS_Rq_SNA_3h;
#  define c02_CLkS_Rq_SNA_3h_LowerLimit ((c02_CLkS_Rq_SNA_3h)0u)
#  define c02_CLkS_Rq_SNA_3h_UpperLimit ((c02_CLkS_Rq_SNA_3h)3u)
#  define Rte_InvalidValue_c02_CLkS_Rq_SNA_3h ((c02_CLkS_Rq_SNA_3h)3u)
#  if (defined RTE_CONST_I_C02_CLKS_RQ_SNA_3H_IDLE) || (defined I_C02_CLKS_RQ_SNA_3H_IDLE)
#   if (!defined RTE_CONST_I_C02_CLKS_RQ_SNA_3H_IDLE) || (RTE_CONST_I_C02_CLKS_RQ_SNA_3H_IDLE != 0u)
#    error "Enumeration constant <I_C02_CLKS_RQ_SNA_3H_IDLE> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_CLKS_RQ_SNA_3H_IDLE (0u)
#   define I_C02_CLKS_RQ_SNA_3H_IDLE ((c02_CLkS_Rq_SNA_3h)0u)
#  endif
#  if (defined RTE_CONST_I_C02_CLKS_RQ_SNA_3H_LK) || (defined I_C02_CLKS_RQ_SNA_3H_LK)
#   if (!defined RTE_CONST_I_C02_CLKS_RQ_SNA_3H_LK) || (RTE_CONST_I_C02_CLKS_RQ_SNA_3H_LK != 1u)
#    error "Enumeration constant <I_C02_CLKS_RQ_SNA_3H_LK> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_CLKS_RQ_SNA_3H_LK (1u)
#   define I_C02_CLKS_RQ_SNA_3H_LK ((c02_CLkS_Rq_SNA_3h)1u)
#  endif
#  if (defined RTE_CONST_I_C02_CLKS_RQ_SNA_3H_UNLK) || (defined I_C02_CLKS_RQ_SNA_3H_UNLK)
#   if (!defined RTE_CONST_I_C02_CLKS_RQ_SNA_3H_UNLK) || (RTE_CONST_I_C02_CLKS_RQ_SNA_3H_UNLK != 2u)
#    error "Enumeration constant <I_C02_CLKS_RQ_SNA_3H_UNLK> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_CLKS_RQ_SNA_3H_UNLK (2u)
#   define I_C02_CLKS_RQ_SNA_3H_UNLK ((c02_CLkS_Rq_SNA_3h)2u)
#  endif
#  if (defined RTE_CONST_I_C02_CLKS_RQ_SNA_3H_SNA) || (defined I_C02_CLKS_RQ_SNA_3H_SNA)
#   if (!defined RTE_CONST_I_C02_CLKS_RQ_SNA_3H_SNA) || (RTE_CONST_I_C02_CLKS_RQ_SNA_3H_SNA != 3u)
#    error "Enumeration constant <I_C02_CLKS_RQ_SNA_3H_SNA> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_CLKS_RQ_SNA_3H_SNA (3u)
#   define I_C02_CLKS_RQ_SNA_3H_SNA ((c02_CLkS_Rq_SNA_3h)3u)
#  endif

#  define Rte_TypeDef_c02_DR_MM_Stat
typedef uint8 c02_DR_MM_Stat;
#  define c02_DR_MM_Stat_LowerLimit ((c02_DR_MM_Stat)0u)
#  define c02_DR_MM_Stat_UpperLimit ((c02_DR_MM_Stat)3u)
#  define Rte_InvalidValue_c02_DR_MM_Stat ((c02_DR_MM_Stat)3u)
#  if (defined RTE_CONST_I_C02_DR_MM_STAT_NO_DR) || (defined I_C02_DR_MM_STAT_NO_DR)
#   if (!defined RTE_CONST_I_C02_DR_MM_STAT_NO_DR) || (RTE_CONST_I_C02_DR_MM_STAT_NO_DR != 0u)
#    error "Enumeration constant <I_C02_DR_MM_STAT_NO_DR> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_DR_MM_STAT_NO_DR (0u)
#   define I_C02_DR_MM_STAT_NO_DR ((c02_DR_MM_Stat)0u)
#  endif
#  if (defined RTE_CONST_I_C02_DR_MM_STAT_DR) || (defined I_C02_DR_MM_STAT_DR)
#   if (!defined RTE_CONST_I_C02_DR_MM_STAT_DR) || (RTE_CONST_I_C02_DR_MM_STAT_DR != 1u)
#    error "Enumeration constant <I_C02_DR_MM_STAT_DR> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_DR_MM_STAT_DR (1u)
#   define I_C02_DR_MM_STAT_DR ((c02_DR_MM_Stat)1u)
#  endif
#  if (defined RTE_CONST_I_C02_DR_MM_STAT_MM) || (defined I_C02_DR_MM_STAT_MM)
#   if (!defined RTE_CONST_I_C02_DR_MM_STAT_MM) || (RTE_CONST_I_C02_DR_MM_STAT_MM != 2u)
#    error "Enumeration constant <I_C02_DR_MM_STAT_MM> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_DR_MM_STAT_MM (2u)
#   define I_C02_DR_MM_STAT_MM ((c02_DR_MM_Stat)2u)
#  endif
#  if (defined RTE_CONST_I_C02_DR_MM_STAT_SNA) || (defined I_C02_DR_MM_STAT_SNA)
#   if (!defined RTE_CONST_I_C02_DR_MM_STAT_SNA) || (RTE_CONST_I_C02_DR_MM_STAT_SNA != 3u)
#    error "Enumeration constant <I_C02_DR_MM_STAT_SNA> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_DR_MM_STAT_SNA (3u)
#   define I_C02_DR_MM_STAT_SNA ((c02_DR_MM_Stat)3u)
#  endif

#  define Rte_TypeDef_c02_Dr_Stat
typedef uint8 c02_Dr_Stat;
#  define c02_Dr_Stat_LowerLimit ((c02_Dr_Stat)0u)
#  define c02_Dr_Stat_UpperLimit ((c02_Dr_Stat)3u)
#  define Rte_InvalidValue_c02_Dr_Stat ((c02_Dr_Stat)3u)
#  if (defined RTE_CONST_I_C02_DR_STAT_NDEF0) || (defined I_C02_DR_STAT_NDEF0)
#   if (!defined RTE_CONST_I_C02_DR_STAT_NDEF0) || (RTE_CONST_I_C02_DR_STAT_NDEF0 != 0u)
#    error "Enumeration constant <I_C02_DR_STAT_NDEF0> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_DR_STAT_NDEF0 (0u)
#   define I_C02_DR_STAT_NDEF0 ((c02_Dr_Stat)0u)
#  endif
#  if (defined RTE_CONST_I_C02_DR_STAT_CLS) || (defined I_C02_DR_STAT_CLS)
#   if (!defined RTE_CONST_I_C02_DR_STAT_CLS) || (RTE_CONST_I_C02_DR_STAT_CLS != 1u)
#    error "Enumeration constant <I_C02_DR_STAT_CLS> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_DR_STAT_CLS (1u)
#   define I_C02_DR_STAT_CLS ((c02_Dr_Stat)1u)
#  endif
#  if (defined RTE_CONST_I_C02_DR_STAT_OPN) || (defined I_C02_DR_STAT_OPN)
#   if (!defined RTE_CONST_I_C02_DR_STAT_OPN) || (RTE_CONST_I_C02_DR_STAT_OPN != 2u)
#    error "Enumeration constant <I_C02_DR_STAT_OPN> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_DR_STAT_OPN (2u)
#   define I_C02_DR_STAT_OPN ((c02_Dr_Stat)2u)
#  endif
#  if (defined RTE_CONST_I_C02_DR_STAT_SNA) || (defined I_C02_DR_STAT_SNA)
#   if (!defined RTE_CONST_I_C02_DR_STAT_SNA) || (RTE_CONST_I_C02_DR_STAT_SNA != 3u)
#    error "Enumeration constant <I_C02_DR_STAT_SNA> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_DR_STAT_SNA (3u)
#   define I_C02_DR_STAT_SNA ((c02_Dr_Stat)3u)
#  endif

#  define Rte_TypeDef_c02_ElecPwr_Inc_Rq
typedef uint8 c02_ElecPwr_Inc_Rq;
#  define c02_ElecPwr_Inc_Rq_LowerLimit ((c02_ElecPwr_Inc_Rq)0u)
#  define c02_ElecPwr_Inc_Rq_UpperLimit ((c02_ElecPwr_Inc_Rq)3u)
#  define Rte_InvalidValue_c02_ElecPwr_Inc_Rq ((c02_ElecPwr_Inc_Rq)3u)
#  if (defined RTE_CONST_I_C02_ELECPWR_INC_RQ_NO_RQ) || (defined I_C02_ELECPWR_INC_RQ_NO_RQ)
#   if (!defined RTE_CONST_I_C02_ELECPWR_INC_RQ_NO_RQ) || (RTE_CONST_I_C02_ELECPWR_INC_RQ_NO_RQ != 0u)
#    error "Enumeration constant <I_C02_ELECPWR_INC_RQ_NO_RQ> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_ELECPWR_INC_RQ_NO_RQ (0u)
#   define I_C02_ELECPWR_INC_RQ_NO_RQ ((c02_ElecPwr_Inc_Rq)0u)
#  endif
#  if (defined RTE_CONST_I_C02_ELECPWR_INC_RQ_INC) || (defined I_C02_ELECPWR_INC_RQ_INC)
#   if (!defined RTE_CONST_I_C02_ELECPWR_INC_RQ_INC) || (RTE_CONST_I_C02_ELECPWR_INC_RQ_INC != 1u)
#    error "Enumeration constant <I_C02_ELECPWR_INC_RQ_INC> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_ELECPWR_INC_RQ_INC (1u)
#   define I_C02_ELECPWR_INC_RQ_INC ((c02_ElecPwr_Inc_Rq)1u)
#  endif
#  if (defined RTE_CONST_I_C02_ELECPWR_INC_RQ_NDEF) || (defined I_C02_ELECPWR_INC_RQ_NDEF)
#   if (!defined RTE_CONST_I_C02_ELECPWR_INC_RQ_NDEF) || (RTE_CONST_I_C02_ELECPWR_INC_RQ_NDEF != 2u)
#    error "Enumeration constant <I_C02_ELECPWR_INC_RQ_NDEF> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_ELECPWR_INC_RQ_NDEF (2u)
#   define I_C02_ELECPWR_INC_RQ_NDEF ((c02_ElecPwr_Inc_Rq)2u)
#  endif
#  if (defined RTE_CONST_I_C02_ELECPWR_INC_RQ_SNA) || (defined I_C02_ELECPWR_INC_RQ_SNA)
#   if (!defined RTE_CONST_I_C02_ELECPWR_INC_RQ_SNA) || (RTE_CONST_I_C02_ELECPWR_INC_RQ_SNA != 3u)
#    error "Enumeration constant <I_C02_ELECPWR_INC_RQ_SNA> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_ELECPWR_INC_RQ_SNA (3u)
#   define I_C02_ELECPWR_INC_RQ_SNA ((c02_ElecPwr_Inc_Rq)3u)
#  endif

#  define Rte_TypeDef_c02_FTW_On_Rq
typedef uint8 c02_FTW_On_Rq;
#  define c02_FTW_On_Rq_LowerLimit ((c02_FTW_On_Rq)0u)
#  define c02_FTW_On_Rq_UpperLimit ((c02_FTW_On_Rq)3u)
#  define Rte_InvalidValue_c02_FTW_On_Rq ((c02_FTW_On_Rq)3u)
#  if (defined RTE_CONST_I_C02_FTW_ON_RQ_IDLE) || (defined I_C02_FTW_ON_RQ_IDLE)
#   if (!defined RTE_CONST_I_C02_FTW_ON_RQ_IDLE) || (RTE_CONST_I_C02_FTW_ON_RQ_IDLE != 0u)
#    error "Enumeration constant <I_C02_FTW_ON_RQ_IDLE> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_FTW_ON_RQ_IDLE (0u)
#   define I_C02_FTW_ON_RQ_IDLE ((c02_FTW_On_Rq)0u)
#  endif
#  if (defined RTE_CONST_I_C02_FTW_ON_RQ_OFF) || (defined I_C02_FTW_ON_RQ_OFF)
#   if (!defined RTE_CONST_I_C02_FTW_ON_RQ_OFF) || (RTE_CONST_I_C02_FTW_ON_RQ_OFF != 1u)
#    error "Enumeration constant <I_C02_FTW_ON_RQ_OFF> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_FTW_ON_RQ_OFF (1u)
#   define I_C02_FTW_ON_RQ_OFF ((c02_FTW_On_Rq)1u)
#  endif
#  if (defined RTE_CONST_I_C02_FTW_ON_RQ_ON) || (defined I_C02_FTW_ON_RQ_ON)
#   if (!defined RTE_CONST_I_C02_FTW_ON_RQ_ON) || (RTE_CONST_I_C02_FTW_ON_RQ_ON != 2u)
#    error "Enumeration constant <I_C02_FTW_ON_RQ_ON> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_FTW_ON_RQ_ON (2u)
#   define I_C02_FTW_ON_RQ_ON ((c02_FTW_On_Rq)2u)
#  endif
#  if (defined RTE_CONST_I_C02_FTW_ON_RQ_SNA) || (defined I_C02_FTW_ON_RQ_SNA)
#   if (!defined RTE_CONST_I_C02_FTW_ON_RQ_SNA) || (RTE_CONST_I_C02_FTW_ON_RQ_SNA != 3u)
#    error "Enumeration constant <I_C02_FTW_ON_RQ_SNA> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_FTW_ON_RQ_SNA (3u)
#   define I_C02_FTW_ON_RQ_SNA ((c02_FTW_On_Rq)3u)
#  endif

#  define Rte_TypeDef_c02_FogLmp_Stat
typedef uint8 c02_FogLmp_Stat;
#  define c02_FogLmp_Stat_LowerLimit ((c02_FogLmp_Stat)0u)
#  define c02_FogLmp_Stat_UpperLimit ((c02_FogLmp_Stat)3u)
#  define Rte_InvalidValue_c02_FogLmp_Stat ((c02_FogLmp_Stat)3u)
#  if (defined RTE_CONST_I_C02_FOGLMP_STAT_OK) || (defined I_C02_FOGLMP_STAT_OK)
#   if (!defined RTE_CONST_I_C02_FOGLMP_STAT_OK) || (RTE_CONST_I_C02_FOGLMP_STAT_OK != 0u)
#    error "Enumeration constant <I_C02_FOGLMP_STAT_OK> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_FOGLMP_STAT_OK (0u)
#   define I_C02_FOGLMP_STAT_OK ((c02_FogLmp_Stat)0u)
#  endif
#  if (defined RTE_CONST_I_C02_FOGLMP_STAT_FAULT) || (defined I_C02_FOGLMP_STAT_FAULT)
#   if (!defined RTE_CONST_I_C02_FOGLMP_STAT_FAULT) || (RTE_CONST_I_C02_FOGLMP_STAT_FAULT != 1u)
#    error "Enumeration constant <I_C02_FOGLMP_STAT_FAULT> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_FOGLMP_STAT_FAULT (1u)
#   define I_C02_FOGLMP_STAT_FAULT ((c02_FogLmp_Stat)1u)
#  endif
#  if (defined RTE_CONST_I_C02_FOGLMP_STAT_NOT_TESTED) || (defined I_C02_FOGLMP_STAT_NOT_TESTED)
#   if (!defined RTE_CONST_I_C02_FOGLMP_STAT_NOT_TESTED) || (RTE_CONST_I_C02_FOGLMP_STAT_NOT_TESTED != 2u)
#    error "Enumeration constant <I_C02_FOGLMP_STAT_NOT_TESTED> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_FOGLMP_STAT_NOT_TESTED (2u)
#   define I_C02_FOGLMP_STAT_NOT_TESTED ((c02_FogLmp_Stat)2u)
#  endif
#  if (defined RTE_CONST_I_C02_FOGLMP_STAT_SNA) || (defined I_C02_FOGLMP_STAT_SNA)
#   if (!defined RTE_CONST_I_C02_FOGLMP_STAT_SNA) || (RTE_CONST_I_C02_FOGLMP_STAT_SNA != 3u)
#    error "Enumeration constant <I_C02_FOGLMP_STAT_SNA> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_FOGLMP_STAT_SNA (3u)
#   define I_C02_FOGLMP_STAT_SNA ((c02_FogLmp_Stat)3u)
#  endif

#  define Rte_TypeDef_c02_HVAC_Auto_Stat
typedef uint8 c02_HVAC_Auto_Stat;
#  define c02_HVAC_Auto_Stat_LowerLimit ((c02_HVAC_Auto_Stat)0u)
#  define c02_HVAC_Auto_Stat_UpperLimit ((c02_HVAC_Auto_Stat)3u)
#  if (defined RTE_CONST_I_C02_HVAC_AUTO_STAT_INACTV) || (defined I_C02_HVAC_AUTO_STAT_INACTV)
#   if (!defined RTE_CONST_I_C02_HVAC_AUTO_STAT_INACTV) || (RTE_CONST_I_C02_HVAC_AUTO_STAT_INACTV != 0u)
#    error "Enumeration constant <I_C02_HVAC_AUTO_STAT_INACTV> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_HVAC_AUTO_STAT_INACTV (0u)
#   define I_C02_HVAC_AUTO_STAT_INACTV ((c02_HVAC_Auto_Stat)0u)
#  endif
#  if (defined RTE_CONST_I_C02_HVAC_AUTO_STAT_FAN_ACTV) || (defined I_C02_HVAC_AUTO_STAT_FAN_ACTV)
#   if (!defined RTE_CONST_I_C02_HVAC_AUTO_STAT_FAN_ACTV) || (RTE_CONST_I_C02_HVAC_AUTO_STAT_FAN_ACTV != 1u)
#    error "Enumeration constant <I_C02_HVAC_AUTO_STAT_FAN_ACTV> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_HVAC_AUTO_STAT_FAN_ACTV (1u)
#   define I_C02_HVAC_AUTO_STAT_FAN_ACTV ((c02_HVAC_Auto_Stat)1u)
#  endif
#  if (defined RTE_CONST_I_C02_HVAC_AUTO_STAT_AIR_DIST_ACTV) || (defined I_C02_HVAC_AUTO_STAT_AIR_DIST_ACTV)
#   if (!defined RTE_CONST_I_C02_HVAC_AUTO_STAT_AIR_DIST_ACTV) || (RTE_CONST_I_C02_HVAC_AUTO_STAT_AIR_DIST_ACTV != 2u)
#    error "Enumeration constant <I_C02_HVAC_AUTO_STAT_AIR_DIST_ACTV> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_HVAC_AUTO_STAT_AIR_DIST_ACTV (2u)
#   define I_C02_HVAC_AUTO_STAT_AIR_DIST_ACTV ((c02_HVAC_Auto_Stat)2u)
#  endif
#  if (defined RTE_CONST_I_C02_HVAC_AUTO_STAT_ACTV) || (defined I_C02_HVAC_AUTO_STAT_ACTV)
#   if (!defined RTE_CONST_I_C02_HVAC_AUTO_STAT_ACTV) || (RTE_CONST_I_C02_HVAC_AUTO_STAT_ACTV != 3u)
#    error "Enumeration constant <I_C02_HVAC_AUTO_STAT_ACTV> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_HVAC_AUTO_STAT_ACTV (3u)
#   define I_C02_HVAC_AUTO_STAT_ACTV ((c02_HVAC_Auto_Stat)3u)
#  endif

#  define Rte_TypeDef_c02_Hdrst_R
typedef uint8 c02_Hdrst_R;
#  define c02_Hdrst_R_LowerLimit ((c02_Hdrst_R)0u)
#  define c02_Hdrst_R_UpperLimit ((c02_Hdrst_R)3u)
#  define Rte_InvalidValue_c02_Hdrst_R ((c02_Hdrst_R)3u)
#  if (defined RTE_CONST_I_C02_HDRST_R_NO_ACT) || (defined I_C02_HDRST_R_NO_ACT)
#   if (!defined RTE_CONST_I_C02_HDRST_R_NO_ACT) || (RTE_CONST_I_C02_HDRST_R_NO_ACT != 0u)
#    error "Enumeration constant <I_C02_HDRST_R_NO_ACT> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_HDRST_R_NO_ACT (0u)
#   define I_C02_HDRST_R_NO_ACT ((c02_Hdrst_R)0u)
#  endif
#  if (defined RTE_CONST_I_C02_HDRST_R_HDRST_DROP) || (defined I_C02_HDRST_R_HDRST_DROP)
#   if (!defined RTE_CONST_I_C02_HDRST_R_HDRST_DROP) || (RTE_CONST_I_C02_HDRST_R_HDRST_DROP != 1u)
#    error "Enumeration constant <I_C02_HDRST_R_HDRST_DROP> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_HDRST_R_HDRST_DROP (1u)
#   define I_C02_HDRST_R_HDRST_DROP ((c02_Hdrst_R)1u)
#  endif
#  if (defined RTE_CONST_I_C02_HDRST_R_HDRST_RAISE) || (defined I_C02_HDRST_R_HDRST_RAISE)
#   if (!defined RTE_CONST_I_C02_HDRST_R_HDRST_RAISE) || (RTE_CONST_I_C02_HDRST_R_HDRST_RAISE != 2u)
#    error "Enumeration constant <I_C02_HDRST_R_HDRST_RAISE> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_HDRST_R_HDRST_RAISE (2u)
#   define I_C02_HDRST_R_HDRST_RAISE ((c02_Hdrst_R)2u)
#  endif
#  if (defined RTE_CONST_I_C02_HDRST_R_SNA) || (defined I_C02_HDRST_R_SNA)
#   if (!defined RTE_CONST_I_C02_HDRST_R_SNA) || (RTE_CONST_I_C02_HDRST_R_SNA != 3u)
#    error "Enumeration constant <I_C02_HDRST_R_SNA> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_HDRST_R_SNA (3u)
#   define I_C02_HDRST_R_SNA ((c02_Hdrst_R)3u)
#  endif

#  define Rte_TypeDef_c02_HiBmLvr_Stat
typedef uint8 c02_HiBmLvr_Stat;
#  define c02_HiBmLvr_Stat_LowerLimit ((c02_HiBmLvr_Stat)0u)
#  define c02_HiBmLvr_Stat_UpperLimit ((c02_HiBmLvr_Stat)3u)
#  define Rte_InvalidValue_c02_HiBmLvr_Stat ((c02_HiBmLvr_Stat)3u)
#  if (defined RTE_CONST_I_C02_HIBMLVR_STAT_IDLE) || (defined I_C02_HIBMLVR_STAT_IDLE)
#   if (!defined RTE_CONST_I_C02_HIBMLVR_STAT_IDLE) || (RTE_CONST_I_C02_HIBMLVR_STAT_IDLE != 0u)
#    error "Enumeration constant <I_C02_HIBMLVR_STAT_IDLE> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_HIBMLVR_STAT_IDLE (0u)
#   define I_C02_HIBMLVR_STAT_IDLE ((c02_HiBmLvr_Stat)0u)
#  endif
#  if (defined RTE_CONST_I_C02_HIBMLVR_STAT_HIBM_ON_PSD) || (defined I_C02_HIBMLVR_STAT_HIBM_ON_PSD)
#   if (!defined RTE_CONST_I_C02_HIBMLVR_STAT_HIBM_ON_PSD) || (RTE_CONST_I_C02_HIBMLVR_STAT_HIBM_ON_PSD != 1u)
#    error "Enumeration constant <I_C02_HIBMLVR_STAT_HIBM_ON_PSD> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_HIBMLVR_STAT_HIBM_ON_PSD (1u)
#   define I_C02_HIBMLVR_STAT_HIBM_ON_PSD ((c02_HiBmLvr_Stat)1u)
#  endif
#  if (defined RTE_CONST_I_C02_HIBMLVR_STAT_HIBM_FLSH_ON_PSD) || (defined I_C02_HIBMLVR_STAT_HIBM_FLSH_ON_PSD)
#   if (!defined RTE_CONST_I_C02_HIBMLVR_STAT_HIBM_FLSH_ON_PSD) || (RTE_CONST_I_C02_HIBMLVR_STAT_HIBM_FLSH_ON_PSD != 2u)
#    error "Enumeration constant <I_C02_HIBMLVR_STAT_HIBM_FLSH_ON_PSD> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_HIBMLVR_STAT_HIBM_FLSH_ON_PSD (2u)
#   define I_C02_HIBMLVR_STAT_HIBM_FLSH_ON_PSD ((c02_HiBmLvr_Stat)2u)
#  endif
#  if (defined RTE_CONST_I_C02_HIBMLVR_STAT_SNA) || (defined I_C02_HIBMLVR_STAT_SNA)
#   if (!defined RTE_CONST_I_C02_HIBMLVR_STAT_SNA) || (RTE_CONST_I_C02_HIBMLVR_STAT_SNA != 3u)
#    error "Enumeration constant <I_C02_HIBMLVR_STAT_SNA> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_HIBMLVR_STAT_SNA (3u)
#   define I_C02_HIBMLVR_STAT_SNA ((c02_HiBmLvr_Stat)3u)
#  endif

#  define Rte_TypeDef_c02_ICH_Rq
typedef uint8 c02_ICH_Rq;
#  define c02_ICH_Rq_LowerLimit ((c02_ICH_Rq)0u)
#  define c02_ICH_Rq_UpperLimit ((c02_ICH_Rq)3u)
#  if (defined RTE_CONST_I_C02_ICH_RQ_PASSIVE) || (defined I_C02_ICH_RQ_PASSIVE)
#   if (!defined RTE_CONST_I_C02_ICH_RQ_PASSIVE) || (RTE_CONST_I_C02_ICH_RQ_PASSIVE != 0u)
#    error "Enumeration constant <I_C02_ICH_RQ_PASSIVE> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_ICH_RQ_PASSIVE (0u)
#   define I_C02_ICH_RQ_PASSIVE ((c02_ICH_Rq)0u)
#  endif
#  if (defined RTE_CONST_I_C02_ICH_RQ_HEAT) || (defined I_C02_ICH_RQ_HEAT)
#   if (!defined RTE_CONST_I_C02_ICH_RQ_HEAT) || (RTE_CONST_I_C02_ICH_RQ_HEAT != 1u)
#    error "Enumeration constant <I_C02_ICH_RQ_HEAT> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_ICH_RQ_HEAT (1u)
#   define I_C02_ICH_RQ_HEAT ((c02_ICH_Rq)1u)
#  endif
#  if (defined RTE_CONST_I_C02_ICH_RQ_VENTILATE) || (defined I_C02_ICH_RQ_VENTILATE)
#   if (!defined RTE_CONST_I_C02_ICH_RQ_VENTILATE) || (RTE_CONST_I_C02_ICH_RQ_VENTILATE != 2u)
#    error "Enumeration constant <I_C02_ICH_RQ_VENTILATE> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_ICH_RQ_VENTILATE (2u)
#   define I_C02_ICH_RQ_VENTILATE ((c02_ICH_Rq)2u)
#  endif
#  if (defined RTE_CONST_I_C02_ICH_RQ_NDEF3) || (defined I_C02_ICH_RQ_NDEF3)
#   if (!defined RTE_CONST_I_C02_ICH_RQ_NDEF3) || (RTE_CONST_I_C02_ICH_RQ_NDEF3 != 3u)
#    error "Enumeration constant <I_C02_ICH_RQ_NDEF3> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_ICH_RQ_NDEF3 (3u)
#   define I_C02_ICH_RQ_NDEF3 ((c02_ICH_Rq)3u)
#  endif

#  define Rte_TypeDef_c02_Idle_Beep
typedef uint8 c02_Idle_Beep;
#  define c02_Idle_Beep_LowerLimit ((c02_Idle_Beep)0u)
#  define c02_Idle_Beep_UpperLimit ((c02_Idle_Beep)3u)
#  define Rte_InvalidValue_c02_Idle_Beep ((c02_Idle_Beep)3u)
#  if (defined RTE_CONST_I_C02_IDLE_BEEP_IDLE) || (defined I_C02_IDLE_BEEP_IDLE)
#   if (!defined RTE_CONST_I_C02_IDLE_BEEP_IDLE) || (RTE_CONST_I_C02_IDLE_BEEP_IDLE != 0u)
#    error "Enumeration constant <I_C02_IDLE_BEEP_IDLE> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_IDLE_BEEP_IDLE (0u)
#   define I_C02_IDLE_BEEP_IDLE ((c02_Idle_Beep)0u)
#  endif
#  if (defined RTE_CONST_I_C02_IDLE_BEEP_CONT) || (defined I_C02_IDLE_BEEP_CONT)
#   if (!defined RTE_CONST_I_C02_IDLE_BEEP_CONT) || (RTE_CONST_I_C02_IDLE_BEEP_CONT != 1u)
#    error "Enumeration constant <I_C02_IDLE_BEEP_CONT> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_IDLE_BEEP_CONT (1u)
#   define I_C02_IDLE_BEEP_CONT ((c02_Idle_Beep)1u)
#  endif
#  if (defined RTE_CONST_I_C02_IDLE_BEEP_NDEF2) || (defined I_C02_IDLE_BEEP_NDEF2)
#   if (!defined RTE_CONST_I_C02_IDLE_BEEP_NDEF2) || (RTE_CONST_I_C02_IDLE_BEEP_NDEF2 != 2u)
#    error "Enumeration constant <I_C02_IDLE_BEEP_NDEF2> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_IDLE_BEEP_NDEF2 (2u)
#   define I_C02_IDLE_BEEP_NDEF2 ((c02_Idle_Beep)2u)
#  endif
#  if (defined RTE_CONST_I_C02_IDLE_BEEP_SNA) || (defined I_C02_IDLE_BEEP_SNA)
#   if (!defined RTE_CONST_I_C02_IDLE_BEEP_SNA) || (RTE_CONST_I_C02_IDLE_BEEP_SNA != 3u)
#    error "Enumeration constant <I_C02_IDLE_BEEP_SNA> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_IDLE_BEEP_SNA (3u)
#   define I_C02_IDLE_BEEP_SNA ((c02_Idle_Beep)3u)
#  endif

#  define Rte_TypeDef_c02_Idle_ManCls_AutoCls
typedef uint8 c02_Idle_ManCls_AutoCls;
#  define c02_Idle_ManCls_AutoCls_LowerLimit ((c02_Idle_ManCls_AutoCls)0u)
#  define c02_Idle_ManCls_AutoCls_UpperLimit ((c02_Idle_ManCls_AutoCls)3u)
#  define Rte_InvalidValue_c02_Idle_ManCls_AutoCls ((c02_Idle_ManCls_AutoCls)3u)
#  if (defined RTE_CONST_I_C02_IDLE_MANCLS_AUTOCLS_NPSD) || (defined I_C02_IDLE_MANCLS_AUTOCLS_NPSD)
#   if (!defined RTE_CONST_I_C02_IDLE_MANCLS_AUTOCLS_NPSD) || (RTE_CONST_I_C02_IDLE_MANCLS_AUTOCLS_NPSD != 0u)
#    error "Enumeration constant <I_C02_IDLE_MANCLS_AUTOCLS_NPSD> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_IDLE_MANCLS_AUTOCLS_NPSD (0u)
#   define I_C02_IDLE_MANCLS_AUTOCLS_NPSD ((c02_Idle_ManCls_AutoCls)0u)
#  endif
#  if (defined RTE_CONST_I_C02_IDLE_MANCLS_AUTOCLS_MANCLS) || (defined I_C02_IDLE_MANCLS_AUTOCLS_MANCLS)
#   if (!defined RTE_CONST_I_C02_IDLE_MANCLS_AUTOCLS_MANCLS) || (RTE_CONST_I_C02_IDLE_MANCLS_AUTOCLS_MANCLS != 1u)
#    error "Enumeration constant <I_C02_IDLE_MANCLS_AUTOCLS_MANCLS> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_IDLE_MANCLS_AUTOCLS_MANCLS (1u)
#   define I_C02_IDLE_MANCLS_AUTOCLS_MANCLS ((c02_Idle_ManCls_AutoCls)1u)
#  endif
#  if (defined RTE_CONST_I_C02_IDLE_MANCLS_AUTOCLS_AUTOCLS) || (defined I_C02_IDLE_MANCLS_AUTOCLS_AUTOCLS)
#   if (!defined RTE_CONST_I_C02_IDLE_MANCLS_AUTOCLS_AUTOCLS) || (RTE_CONST_I_C02_IDLE_MANCLS_AUTOCLS_AUTOCLS != 2u)
#    error "Enumeration constant <I_C02_IDLE_MANCLS_AUTOCLS_AUTOCLS> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_IDLE_MANCLS_AUTOCLS_AUTOCLS (2u)
#   define I_C02_IDLE_MANCLS_AUTOCLS_AUTOCLS ((c02_Idle_ManCls_AutoCls)2u)
#  endif
#  if (defined RTE_CONST_I_C02_IDLE_MANCLS_AUTOCLS_SNA) || (defined I_C02_IDLE_MANCLS_AUTOCLS_SNA)
#   if (!defined RTE_CONST_I_C02_IDLE_MANCLS_AUTOCLS_SNA) || (RTE_CONST_I_C02_IDLE_MANCLS_AUTOCLS_SNA != 3u)
#    error "Enumeration constant <I_C02_IDLE_MANCLS_AUTOCLS_SNA> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_IDLE_MANCLS_AUTOCLS_SNA (3u)
#   define I_C02_IDLE_MANCLS_AUTOCLS_SNA ((c02_Idle_ManCls_AutoCls)3u)
#  endif

#  define Rte_TypeDef_c02_Idle_ManOpn_AutoOpn
typedef uint8 c02_Idle_ManOpn_AutoOpn;
#  define c02_Idle_ManOpn_AutoOpn_LowerLimit ((c02_Idle_ManOpn_AutoOpn)0u)
#  define c02_Idle_ManOpn_AutoOpn_UpperLimit ((c02_Idle_ManOpn_AutoOpn)3u)
#  define Rte_InvalidValue_c02_Idle_ManOpn_AutoOpn ((c02_Idle_ManOpn_AutoOpn)3u)
#  if (defined RTE_CONST_I_C02_IDLE_MANOPN_AUTOOPN_NPSD) || (defined I_C02_IDLE_MANOPN_AUTOOPN_NPSD)
#   if (!defined RTE_CONST_I_C02_IDLE_MANOPN_AUTOOPN_NPSD) || (RTE_CONST_I_C02_IDLE_MANOPN_AUTOOPN_NPSD != 0u)
#    error "Enumeration constant <I_C02_IDLE_MANOPN_AUTOOPN_NPSD> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_IDLE_MANOPN_AUTOOPN_NPSD (0u)
#   define I_C02_IDLE_MANOPN_AUTOOPN_NPSD ((c02_Idle_ManOpn_AutoOpn)0u)
#  endif
#  if (defined RTE_CONST_I_C02_IDLE_MANOPN_AUTOOPN_MANOPN) || (defined I_C02_IDLE_MANOPN_AUTOOPN_MANOPN)
#   if (!defined RTE_CONST_I_C02_IDLE_MANOPN_AUTOOPN_MANOPN) || (RTE_CONST_I_C02_IDLE_MANOPN_AUTOOPN_MANOPN != 1u)
#    error "Enumeration constant <I_C02_IDLE_MANOPN_AUTOOPN_MANOPN> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_IDLE_MANOPN_AUTOOPN_MANOPN (1u)
#   define I_C02_IDLE_MANOPN_AUTOOPN_MANOPN ((c02_Idle_ManOpn_AutoOpn)1u)
#  endif
#  if (defined RTE_CONST_I_C02_IDLE_MANOPN_AUTOOPN_AUTOOPN) || (defined I_C02_IDLE_MANOPN_AUTOOPN_AUTOOPN)
#   if (!defined RTE_CONST_I_C02_IDLE_MANOPN_AUTOOPN_AUTOOPN) || (RTE_CONST_I_C02_IDLE_MANOPN_AUTOOPN_AUTOOPN != 2u)
#    error "Enumeration constant <I_C02_IDLE_MANOPN_AUTOOPN_AUTOOPN> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_IDLE_MANOPN_AUTOOPN_AUTOOPN (2u)
#   define I_C02_IDLE_MANOPN_AUTOOPN_AUTOOPN ((c02_Idle_ManOpn_AutoOpn)2u)
#  endif
#  if (defined RTE_CONST_I_C02_IDLE_MANOPN_AUTOOPN_SNA) || (defined I_C02_IDLE_MANOPN_AUTOOPN_SNA)
#   if (!defined RTE_CONST_I_C02_IDLE_MANOPN_AUTOOPN_SNA) || (RTE_CONST_I_C02_IDLE_MANOPN_AUTOOPN_SNA != 3u)
#    error "Enumeration constant <I_C02_IDLE_MANOPN_AUTOOPN_SNA> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_IDLE_MANOPN_AUTOOPN_SNA (3u)
#   define I_C02_IDLE_MANOPN_AUTOOPN_SNA ((c02_Idle_ManOpn_AutoOpn)3u)
#  endif

#  define Rte_TypeDef_c02_Idle_Off_Ndef
typedef uint8 c02_Idle_Off_Ndef;
#  define c02_Idle_Off_Ndef_LowerLimit ((c02_Idle_Off_Ndef)0u)
#  define c02_Idle_Off_Ndef_UpperLimit ((c02_Idle_Off_Ndef)3u)
#  define Rte_InvalidValue_c02_Idle_Off_Ndef ((c02_Idle_Off_Ndef)3u)
#  if (defined RTE_CONST_I_C02_IDLE_OFF_NDEF_IDLE) || (defined I_C02_IDLE_OFF_NDEF_IDLE)
#   if (!defined RTE_CONST_I_C02_IDLE_OFF_NDEF_IDLE) || (RTE_CONST_I_C02_IDLE_OFF_NDEF_IDLE != 0u)
#    error "Enumeration constant <I_C02_IDLE_OFF_NDEF_IDLE> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_IDLE_OFF_NDEF_IDLE (0u)
#   define I_C02_IDLE_OFF_NDEF_IDLE ((c02_Idle_Off_Ndef)0u)
#  endif
#  if (defined RTE_CONST_I_C02_IDLE_OFF_NDEF_OFF) || (defined I_C02_IDLE_OFF_NDEF_OFF)
#   if (!defined RTE_CONST_I_C02_IDLE_OFF_NDEF_OFF) || (RTE_CONST_I_C02_IDLE_OFF_NDEF_OFF != 1u)
#    error "Enumeration constant <I_C02_IDLE_OFF_NDEF_OFF> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_IDLE_OFF_NDEF_OFF (1u)
#   define I_C02_IDLE_OFF_NDEF_OFF ((c02_Idle_Off_Ndef)1u)
#  endif
#  if (defined RTE_CONST_I_C02_IDLE_OFF_NDEF_NDEF2) || (defined I_C02_IDLE_OFF_NDEF_NDEF2)
#   if (!defined RTE_CONST_I_C02_IDLE_OFF_NDEF_NDEF2) || (RTE_CONST_I_C02_IDLE_OFF_NDEF_NDEF2 != 2u)
#    error "Enumeration constant <I_C02_IDLE_OFF_NDEF_NDEF2> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_IDLE_OFF_NDEF_NDEF2 (2u)
#   define I_C02_IDLE_OFF_NDEF_NDEF2 ((c02_Idle_Off_Ndef)2u)
#  endif
#  if (defined RTE_CONST_I_C02_IDLE_OFF_NDEF_SNA) || (defined I_C02_IDLE_OFF_NDEF_SNA)
#   if (!defined RTE_CONST_I_C02_IDLE_OFF_NDEF_SNA) || (RTE_CONST_I_C02_IDLE_OFF_NDEF_SNA != 3u)
#    error "Enumeration constant <I_C02_IDLE_OFF_NDEF_SNA> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_IDLE_OFF_NDEF_SNA (3u)
#   define I_C02_IDLE_OFF_NDEF_SNA ((c02_Idle_Off_Ndef)3u)
#  endif

#  define Rte_TypeDef_c02_Idle_TmpNA_Actv
typedef uint8 c02_Idle_TmpNA_Actv;
#  define c02_Idle_TmpNA_Actv_LowerLimit ((c02_Idle_TmpNA_Actv)0u)
#  define c02_Idle_TmpNA_Actv_UpperLimit ((c02_Idle_TmpNA_Actv)3u)
#  define Rte_InvalidValue_c02_Idle_TmpNA_Actv ((c02_Idle_TmpNA_Actv)3u)
#  if (defined RTE_CONST_I_C02_IDLE_TMPNA_ACTV_IDLE) || (defined I_C02_IDLE_TMPNA_ACTV_IDLE)
#   if (!defined RTE_CONST_I_C02_IDLE_TMPNA_ACTV_IDLE) || (RTE_CONST_I_C02_IDLE_TMPNA_ACTV_IDLE != 0u)
#    error "Enumeration constant <I_C02_IDLE_TMPNA_ACTV_IDLE> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_IDLE_TMPNA_ACTV_IDLE (0u)
#   define I_C02_IDLE_TMPNA_ACTV_IDLE ((c02_Idle_TmpNA_Actv)0u)
#  endif
#  if (defined RTE_CONST_I_C02_IDLE_TMPNA_ACTV_TMP_NA) || (defined I_C02_IDLE_TMPNA_ACTV_TMP_NA)
#   if (!defined RTE_CONST_I_C02_IDLE_TMPNA_ACTV_TMP_NA) || (RTE_CONST_I_C02_IDLE_TMPNA_ACTV_TMP_NA != 1u)
#    error "Enumeration constant <I_C02_IDLE_TMPNA_ACTV_TMP_NA> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_IDLE_TMPNA_ACTV_TMP_NA (1u)
#   define I_C02_IDLE_TMPNA_ACTV_TMP_NA ((c02_Idle_TmpNA_Actv)1u)
#  endif
#  if (defined RTE_CONST_I_C02_IDLE_TMPNA_ACTV_ACTV) || (defined I_C02_IDLE_TMPNA_ACTV_ACTV)
#   if (!defined RTE_CONST_I_C02_IDLE_TMPNA_ACTV_ACTV) || (RTE_CONST_I_C02_IDLE_TMPNA_ACTV_ACTV != 2u)
#    error "Enumeration constant <I_C02_IDLE_TMPNA_ACTV_ACTV> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_IDLE_TMPNA_ACTV_ACTV (2u)
#   define I_C02_IDLE_TMPNA_ACTV_ACTV ((c02_Idle_TmpNA_Actv)2u)
#  endif
#  if (defined RTE_CONST_I_C02_IDLE_TMPNA_ACTV_SNA) || (defined I_C02_IDLE_TMPNA_ACTV_SNA)
#   if (!defined RTE_CONST_I_C02_IDLE_TMPNA_ACTV_SNA) || (RTE_CONST_I_C02_IDLE_TMPNA_ACTV_SNA != 3u)
#    error "Enumeration constant <I_C02_IDLE_TMPNA_ACTV_SNA> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_IDLE_TMPNA_ACTV_SNA (3u)
#   define I_C02_IDLE_TMPNA_ACTV_SNA ((c02_Idle_TmpNA_Actv)3u)
#  endif

#  define Rte_TypeDef_c02_LDC_CMS_MsgDisp_Rq
typedef uint8 c02_LDC_CMS_MsgDisp_Rq;
#  define c02_LDC_CMS_MsgDisp_Rq_LowerLimit ((c02_LDC_CMS_MsgDisp_Rq)0u)
#  define c02_LDC_CMS_MsgDisp_Rq_UpperLimit ((c02_LDC_CMS_MsgDisp_Rq)3u)
#  define Rte_InvalidValue_c02_LDC_CMS_MsgDisp_Rq ((c02_LDC_CMS_MsgDisp_Rq)3u)
#  if (defined RTE_CONST_I_C02_LDC_CMS_MSGDISP_RQ_IDLE) || (defined I_C02_LDC_CMS_MSGDISP_RQ_IDLE)
#   if (!defined RTE_CONST_I_C02_LDC_CMS_MSGDISP_RQ_IDLE) || (RTE_CONST_I_C02_LDC_CMS_MSGDISP_RQ_IDLE != 0u)
#    error "Enumeration constant <I_C02_LDC_CMS_MSGDISP_RQ_IDLE> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_LDC_CMS_MSGDISP_RQ_IDLE (0u)
#   define I_C02_LDC_CMS_MSGDISP_RQ_IDLE ((c02_LDC_CMS_MsgDisp_Rq)0u)
#  endif
#  if (defined RTE_CONST_I_C02_LDC_CMS_MSGDISP_RQ_MSG1_3F3) || (defined I_C02_LDC_CMS_MSGDISP_RQ_MSG1_3F3)
#   if (!defined RTE_CONST_I_C02_LDC_CMS_MSGDISP_RQ_MSG1_3F3) || (RTE_CONST_I_C02_LDC_CMS_MSGDISP_RQ_MSG1_3F3 != 1u)
#    error "Enumeration constant <I_C02_LDC_CMS_MSGDISP_RQ_MSG1_3F3> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_LDC_CMS_MSGDISP_RQ_MSG1_3F3 (1u)
#   define I_C02_LDC_CMS_MSGDISP_RQ_MSG1_3F3 ((c02_LDC_CMS_MsgDisp_Rq)1u)
#  endif
#  if (defined RTE_CONST_I_C02_LDC_CMS_MSGDISP_RQ_MSG2_3F2) || (defined I_C02_LDC_CMS_MSGDISP_RQ_MSG2_3F2)
#   if (!defined RTE_CONST_I_C02_LDC_CMS_MSGDISP_RQ_MSG2_3F2) || (RTE_CONST_I_C02_LDC_CMS_MSGDISP_RQ_MSG2_3F2 != 2u)
#    error "Enumeration constant <I_C02_LDC_CMS_MSGDISP_RQ_MSG2_3F2> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_LDC_CMS_MSGDISP_RQ_MSG2_3F2 (2u)
#   define I_C02_LDC_CMS_MSGDISP_RQ_MSG2_3F2 ((c02_LDC_CMS_MsgDisp_Rq)2u)
#  endif
#  if (defined RTE_CONST_I_C02_LDC_CMS_MSGDISP_RQ_SNA) || (defined I_C02_LDC_CMS_MSGDISP_RQ_SNA)
#   if (!defined RTE_CONST_I_C02_LDC_CMS_MSGDISP_RQ_SNA) || (RTE_CONST_I_C02_LDC_CMS_MSGDISP_RQ_SNA != 3u)
#    error "Enumeration constant <I_C02_LDC_CMS_MSGDISP_RQ_SNA> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_LDC_CMS_MSGDISP_RQ_SNA (3u)
#   define I_C02_LDC_CMS_MSGDISP_RQ_SNA ((c02_LDC_CMS_MsgDisp_Rq)3u)
#  endif

#  define Rte_TypeDef_c02_LS_Stat
typedef uint8 c02_LS_Stat;
#  define c02_LS_Stat_LowerLimit ((c02_LS_Stat)0u)
#  define c02_LS_Stat_UpperLimit ((c02_LS_Stat)3u)
#  define Rte_InvalidValue_c02_LS_Stat ((c02_LS_Stat)3u)
#  if (defined RTE_CONST_I_C02_LS_STAT_NDEF0) || (defined I_C02_LS_STAT_NDEF0)
#   if (!defined RTE_CONST_I_C02_LS_STAT_NDEF0) || (RTE_CONST_I_C02_LS_STAT_NDEF0 != 0u)
#    error "Enumeration constant <I_C02_LS_STAT_NDEF0> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_LS_STAT_NDEF0 (0u)
#   define I_C02_LS_STAT_NDEF0 ((c02_LS_Stat)0u)
#  endif
#  if (defined RTE_CONST_I_C02_LS_STAT_LS_OR_ABOVE) || (defined I_C02_LS_STAT_LS_OR_ABOVE)
#   if (!defined RTE_CONST_I_C02_LS_STAT_LS_OR_ABOVE) || (RTE_CONST_I_C02_LS_STAT_LS_OR_ABOVE != 1u)
#    error "Enumeration constant <I_C02_LS_STAT_LS_OR_ABOVE> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_LS_STAT_LS_OR_ABOVE (1u)
#   define I_C02_LS_STAT_LS_OR_ABOVE ((c02_LS_Stat)1u)
#  endif
#  if (defined RTE_CONST_I_C02_LS_STAT_BELOW_LS) || (defined I_C02_LS_STAT_BELOW_LS)
#   if (!defined RTE_CONST_I_C02_LS_STAT_BELOW_LS) || (RTE_CONST_I_C02_LS_STAT_BELOW_LS != 2u)
#    error "Enumeration constant <I_C02_LS_STAT_BELOW_LS> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_LS_STAT_BELOW_LS (2u)
#   define I_C02_LS_STAT_BELOW_LS ((c02_LS_Stat)2u)
#  endif
#  if (defined RTE_CONST_I_C02_LS_STAT_SNA) || (defined I_C02_LS_STAT_SNA)
#   if (!defined RTE_CONST_I_C02_LS_STAT_SNA) || (RTE_CONST_I_C02_LS_STAT_SNA != 3u)
#    error "Enumeration constant <I_C02_LS_STAT_SNA> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_LS_STAT_SNA (3u)
#   define I_C02_LS_STAT_SNA ((c02_LS_Stat)3u)
#  endif

#  define Rte_TypeDef_c02_Lgt_Off_Cont_Blink
typedef uint8 c02_Lgt_Off_Cont_Blink;
#  define c02_Lgt_Off_Cont_Blink_LowerLimit ((c02_Lgt_Off_Cont_Blink)0u)
#  define c02_Lgt_Off_Cont_Blink_UpperLimit ((c02_Lgt_Off_Cont_Blink)3u)
#  define Rte_InvalidValue_c02_Lgt_Off_Cont_Blink ((c02_Lgt_Off_Cont_Blink)3u)
#  if (defined RTE_CONST_I_C02_LGT_OFF_CONT_BLINK_OFF) || (defined I_C02_LGT_OFF_CONT_BLINK_OFF)
#   if (!defined RTE_CONST_I_C02_LGT_OFF_CONT_BLINK_OFF) || (RTE_CONST_I_C02_LGT_OFF_CONT_BLINK_OFF != 0u)
#    error "Enumeration constant <I_C02_LGT_OFF_CONT_BLINK_OFF> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_LGT_OFF_CONT_BLINK_OFF (0u)
#   define I_C02_LGT_OFF_CONT_BLINK_OFF ((c02_Lgt_Off_Cont_Blink)0u)
#  endif
#  if (defined RTE_CONST_I_C02_LGT_OFF_CONT_BLINK_CONT) || (defined I_C02_LGT_OFF_CONT_BLINK_CONT)
#   if (!defined RTE_CONST_I_C02_LGT_OFF_CONT_BLINK_CONT) || (RTE_CONST_I_C02_LGT_OFF_CONT_BLINK_CONT != 1u)
#    error "Enumeration constant <I_C02_LGT_OFF_CONT_BLINK_CONT> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_LGT_OFF_CONT_BLINK_CONT (1u)
#   define I_C02_LGT_OFF_CONT_BLINK_CONT ((c02_Lgt_Off_Cont_Blink)1u)
#  endif
#  if (defined RTE_CONST_I_C02_LGT_OFF_CONT_BLINK_BLINK) || (defined I_C02_LGT_OFF_CONT_BLINK_BLINK)
#   if (!defined RTE_CONST_I_C02_LGT_OFF_CONT_BLINK_BLINK) || (RTE_CONST_I_C02_LGT_OFF_CONT_BLINK_BLINK != 2u)
#    error "Enumeration constant <I_C02_LGT_OFF_CONT_BLINK_BLINK> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_LGT_OFF_CONT_BLINK_BLINK (2u)
#   define I_C02_LGT_OFF_CONT_BLINK_BLINK ((c02_Lgt_Off_Cont_Blink)2u)
#  endif
#  if (defined RTE_CONST_I_C02_LGT_OFF_CONT_BLINK_SNA) || (defined I_C02_LGT_OFF_CONT_BLINK_SNA)
#   if (!defined RTE_CONST_I_C02_LGT_OFF_CONT_BLINK_SNA) || (RTE_CONST_I_C02_LGT_OFF_CONT_BLINK_SNA != 3u)
#    error "Enumeration constant <I_C02_LGT_OFF_CONT_BLINK_SNA> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_LGT_OFF_CONT_BLINK_SNA (3u)
#   define I_C02_LGT_OFF_CONT_BLINK_SNA ((c02_Lgt_Off_Cont_Blink)3u)
#  endif

#  define Rte_TypeDef_c02_LoBm_Rq
typedef uint8 c02_LoBm_Rq;
#  define c02_LoBm_Rq_LowerLimit ((c02_LoBm_Rq)0u)
#  define c02_LoBm_Rq_UpperLimit ((c02_LoBm_Rq)3u)
#  define Rte_InvalidValue_c02_LoBm_Rq ((c02_LoBm_Rq)3u)
#  if (defined RTE_CONST_I_C02_LOBM_RQ_IDLE) || (defined I_C02_LOBM_RQ_IDLE)
#   if (!defined RTE_CONST_I_C02_LOBM_RQ_IDLE) || (RTE_CONST_I_C02_LOBM_RQ_IDLE != 0u)
#    error "Enumeration constant <I_C02_LOBM_RQ_IDLE> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_LOBM_RQ_IDLE (0u)
#   define I_C02_LOBM_RQ_IDLE ((c02_LoBm_Rq)0u)
#  endif
#  if (defined RTE_CONST_I_C02_LOBM_RQ_LOBM_ON) || (defined I_C02_LOBM_RQ_LOBM_ON)
#   if (!defined RTE_CONST_I_C02_LOBM_RQ_LOBM_ON) || (RTE_CONST_I_C02_LOBM_RQ_LOBM_ON != 1u)
#    error "Enumeration constant <I_C02_LOBM_RQ_LOBM_ON> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_LOBM_RQ_LOBM_ON (1u)
#   define I_C02_LOBM_RQ_LOBM_ON ((c02_LoBm_Rq)1u)
#  endif
#  if (defined RTE_CONST_I_C02_LOBM_RQ_LOBM_OFF) || (defined I_C02_LOBM_RQ_LOBM_OFF)
#   if (!defined RTE_CONST_I_C02_LOBM_RQ_LOBM_OFF) || (RTE_CONST_I_C02_LOBM_RQ_LOBM_OFF != 2u)
#    error "Enumeration constant <I_C02_LOBM_RQ_LOBM_OFF> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_LOBM_RQ_LOBM_OFF (2u)
#   define I_C02_LOBM_RQ_LOBM_OFF ((c02_LoBm_Rq)2u)
#  endif
#  if (defined RTE_CONST_I_C02_LOBM_RQ_SNA) || (defined I_C02_LOBM_RQ_SNA)
#   if (!defined RTE_CONST_I_C02_LOBM_RQ_SNA) || (RTE_CONST_I_C02_LOBM_RQ_SNA != 3u)
#    error "Enumeration constant <I_C02_LOBM_RQ_SNA> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_LOBM_RQ_SNA (3u)
#   define I_C02_LOBM_RQ_SNA ((c02_LoBm_Rq)3u)
#  endif

#  define Rte_TypeDef_c02_Locked_Unlocked_Err
typedef uint8 c02_Locked_Unlocked_Err;
#  define c02_Locked_Unlocked_Err_LowerLimit ((c02_Locked_Unlocked_Err)0u)
#  define c02_Locked_Unlocked_Err_UpperLimit ((c02_Locked_Unlocked_Err)3u)
#  define Rte_InvalidValue_c02_Locked_Unlocked_Err ((c02_Locked_Unlocked_Err)3u)
#  if (defined RTE_CONST_I_C02_LOCKED_UNLOCKED_ERR_LOCKED) || (defined I_C02_LOCKED_UNLOCKED_ERR_LOCKED)
#   if (!defined RTE_CONST_I_C02_LOCKED_UNLOCKED_ERR_LOCKED) || (RTE_CONST_I_C02_LOCKED_UNLOCKED_ERR_LOCKED != 0u)
#    error "Enumeration constant <I_C02_LOCKED_UNLOCKED_ERR_LOCKED> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_LOCKED_UNLOCKED_ERR_LOCKED (0u)
#   define I_C02_LOCKED_UNLOCKED_ERR_LOCKED ((c02_Locked_Unlocked_Err)0u)
#  endif
#  if (defined RTE_CONST_I_C02_LOCKED_UNLOCKED_ERR_UNLOCKED) || (defined I_C02_LOCKED_UNLOCKED_ERR_UNLOCKED)
#   if (!defined RTE_CONST_I_C02_LOCKED_UNLOCKED_ERR_UNLOCKED) || (RTE_CONST_I_C02_LOCKED_UNLOCKED_ERR_UNLOCKED != 1u)
#    error "Enumeration constant <I_C02_LOCKED_UNLOCKED_ERR_UNLOCKED> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_LOCKED_UNLOCKED_ERR_UNLOCKED (1u)
#   define I_C02_LOCKED_UNLOCKED_ERR_UNLOCKED ((c02_Locked_Unlocked_Err)1u)
#  endif
#  if (defined RTE_CONST_I_C02_LOCKED_UNLOCKED_ERR_ERR) || (defined I_C02_LOCKED_UNLOCKED_ERR_ERR)
#   if (!defined RTE_CONST_I_C02_LOCKED_UNLOCKED_ERR_ERR) || (RTE_CONST_I_C02_LOCKED_UNLOCKED_ERR_ERR != 2u)
#    error "Enumeration constant <I_C02_LOCKED_UNLOCKED_ERR_ERR> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_LOCKED_UNLOCKED_ERR_ERR (2u)
#   define I_C02_LOCKED_UNLOCKED_ERR_ERR ((c02_Locked_Unlocked_Err)2u)
#  endif
#  if (defined RTE_CONST_I_C02_LOCKED_UNLOCKED_ERR_SNA) || (defined I_C02_LOCKED_UNLOCKED_ERR_SNA)
#   if (!defined RTE_CONST_I_C02_LOCKED_UNLOCKED_ERR_SNA) || (RTE_CONST_I_C02_LOCKED_UNLOCKED_ERR_SNA != 3u)
#    error "Enumeration constant <I_C02_LOCKED_UNLOCKED_ERR_SNA> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_LOCKED_UNLOCKED_ERR_SNA (3u)
#   define I_C02_LOCKED_UNLOCKED_ERR_SNA ((c02_Locked_Unlocked_Err)3u)
#  endif

#  define Rte_TypeDef_c02_MM_Map_Stat
typedef uint8 c02_MM_Map_Stat;
#  define c02_MM_Map_Stat_LowerLimit ((c02_MM_Map_Stat)0u)
#  define c02_MM_Map_Stat_UpperLimit ((c02_MM_Map_Stat)3u)
#  define Rte_InvalidValue_c02_MM_Map_Stat ((c02_MM_Map_Stat)3u)
#  if (defined RTE_CONST_I_C02_MM_MAP_STAT_ON_MAP) || (defined I_C02_MM_MAP_STAT_ON_MAP)
#   if (!defined RTE_CONST_I_C02_MM_MAP_STAT_ON_MAP) || (RTE_CONST_I_C02_MM_MAP_STAT_ON_MAP != 0u)
#    error "Enumeration constant <I_C02_MM_MAP_STAT_ON_MAP> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_MM_MAP_STAT_ON_MAP (0u)
#   define I_C02_MM_MAP_STAT_ON_MAP ((c02_MM_Map_Stat)0u)
#  endif
#  if (defined RTE_CONST_I_C02_MM_MAP_STAT_OFF_MAP) || (defined I_C02_MM_MAP_STAT_OFF_MAP)
#   if (!defined RTE_CONST_I_C02_MM_MAP_STAT_OFF_MAP) || (RTE_CONST_I_C02_MM_MAP_STAT_OFF_MAP != 1u)
#    error "Enumeration constant <I_C02_MM_MAP_STAT_OFF_MAP> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_MM_MAP_STAT_OFF_MAP (1u)
#   define I_C02_MM_MAP_STAT_OFF_MAP ((c02_MM_Map_Stat)1u)
#  endif
#  if (defined RTE_CONST_I_C02_MM_MAP_STAT_NDEF2) || (defined I_C02_MM_MAP_STAT_NDEF2)
#   if (!defined RTE_CONST_I_C02_MM_MAP_STAT_NDEF2) || (RTE_CONST_I_C02_MM_MAP_STAT_NDEF2 != 2u)
#    error "Enumeration constant <I_C02_MM_MAP_STAT_NDEF2> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_MM_MAP_STAT_NDEF2 (2u)
#   define I_C02_MM_MAP_STAT_NDEF2 ((c02_MM_Map_Stat)2u)
#  endif
#  if (defined RTE_CONST_I_C02_MM_MAP_STAT_SNA) || (defined I_C02_MM_MAP_STAT_SNA)
#   if (!defined RTE_CONST_I_C02_MM_MAP_STAT_SNA) || (RTE_CONST_I_C02_MM_MAP_STAT_SNA != 3u)
#    error "Enumeration constant <I_C02_MM_MAP_STAT_SNA> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_MM_MAP_STAT_SNA (3u)
#   define I_C02_MM_MAP_STAT_SNA ((c02_MM_Map_Stat)3u)
#  endif

#  define Rte_TypeDef_c02_MM_Road_Stat
typedef uint8 c02_MM_Road_Stat;
#  define c02_MM_Road_Stat_LowerLimit ((c02_MM_Road_Stat)0u)
#  define c02_MM_Road_Stat_UpperLimit ((c02_MM_Road_Stat)3u)
#  define Rte_InvalidValue_c02_MM_Road_Stat ((c02_MM_Road_Stat)3u)
#  if (defined RTE_CONST_I_C02_MM_ROAD_STAT_ON_RD) || (defined I_C02_MM_ROAD_STAT_ON_RD)
#   if (!defined RTE_CONST_I_C02_MM_ROAD_STAT_ON_RD) || (RTE_CONST_I_C02_MM_ROAD_STAT_ON_RD != 0u)
#    error "Enumeration constant <I_C02_MM_ROAD_STAT_ON_RD> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_MM_ROAD_STAT_ON_RD (0u)
#   define I_C02_MM_ROAD_STAT_ON_RD ((c02_MM_Road_Stat)0u)
#  endif
#  if (defined RTE_CONST_I_C02_MM_ROAD_STAT_OFF_RD) || (defined I_C02_MM_ROAD_STAT_OFF_RD)
#   if (!defined RTE_CONST_I_C02_MM_ROAD_STAT_OFF_RD) || (RTE_CONST_I_C02_MM_ROAD_STAT_OFF_RD != 1u)
#    error "Enumeration constant <I_C02_MM_ROAD_STAT_OFF_RD> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_MM_ROAD_STAT_OFF_RD (1u)
#   define I_C02_MM_ROAD_STAT_OFF_RD ((c02_MM_Road_Stat)1u)
#  endif
#  if (defined RTE_CONST_I_C02_MM_ROAD_STAT_NDEF2) || (defined I_C02_MM_ROAD_STAT_NDEF2)
#   if (!defined RTE_CONST_I_C02_MM_ROAD_STAT_NDEF2) || (RTE_CONST_I_C02_MM_ROAD_STAT_NDEF2 != 2u)
#    error "Enumeration constant <I_C02_MM_ROAD_STAT_NDEF2> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_MM_ROAD_STAT_NDEF2 (2u)
#   define I_C02_MM_ROAD_STAT_NDEF2 ((c02_MM_Road_Stat)2u)
#  endif
#  if (defined RTE_CONST_I_C02_MM_ROAD_STAT_SNA) || (defined I_C02_MM_ROAD_STAT_SNA)
#   if (!defined RTE_CONST_I_C02_MM_ROAD_STAT_SNA) || (RTE_CONST_I_C02_MM_ROAD_STAT_SNA != 3u)
#    error "Enumeration constant <I_C02_MM_ROAD_STAT_SNA> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_MM_ROAD_STAT_SNA (3u)
#   define I_C02_MM_ROAD_STAT_SNA ((c02_MM_Road_Stat)3u)
#  endif

#  define Rte_TypeDef_c02_MM_Route_Stat
typedef uint8 c02_MM_Route_Stat;
#  define c02_MM_Route_Stat_LowerLimit ((c02_MM_Route_Stat)0u)
#  define c02_MM_Route_Stat_UpperLimit ((c02_MM_Route_Stat)3u)
#  define Rte_InvalidValue_c02_MM_Route_Stat ((c02_MM_Route_Stat)3u)
#  if (defined RTE_CONST_I_C02_MM_ROUTE_STAT_ROUTE_OK) || (defined I_C02_MM_ROUTE_STAT_ROUTE_OK)
#   if (!defined RTE_CONST_I_C02_MM_ROUTE_STAT_ROUTE_OK) || (RTE_CONST_I_C02_MM_ROUTE_STAT_ROUTE_OK != 0u)
#    error "Enumeration constant <I_C02_MM_ROUTE_STAT_ROUTE_OK> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_MM_ROUTE_STAT_ROUTE_OK (0u)
#   define I_C02_MM_ROUTE_STAT_ROUTE_OK ((c02_MM_Route_Stat)0u)
#  endif
#  if (defined RTE_CONST_I_C02_MM_ROUTE_STAT_NO_ROUTE) || (defined I_C02_MM_ROUTE_STAT_NO_ROUTE)
#   if (!defined RTE_CONST_I_C02_MM_ROUTE_STAT_NO_ROUTE) || (RTE_CONST_I_C02_MM_ROUTE_STAT_NO_ROUTE != 1u)
#    error "Enumeration constant <I_C02_MM_ROUTE_STAT_NO_ROUTE> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_MM_ROUTE_STAT_NO_ROUTE (1u)
#   define I_C02_MM_ROUTE_STAT_NO_ROUTE ((c02_MM_Route_Stat)1u)
#  endif
#  if (defined RTE_CONST_I_C02_MM_ROUTE_STAT_NDEF2) || (defined I_C02_MM_ROUTE_STAT_NDEF2)
#   if (!defined RTE_CONST_I_C02_MM_ROUTE_STAT_NDEF2) || (RTE_CONST_I_C02_MM_ROUTE_STAT_NDEF2 != 2u)
#    error "Enumeration constant <I_C02_MM_ROUTE_STAT_NDEF2> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_MM_ROUTE_STAT_NDEF2 (2u)
#   define I_C02_MM_ROUTE_STAT_NDEF2 ((c02_MM_Route_Stat)2u)
#  endif
#  if (defined RTE_CONST_I_C02_MM_ROUTE_STAT_SNA) || (defined I_C02_MM_ROUTE_STAT_SNA)
#   if (!defined RTE_CONST_I_C02_MM_ROUTE_STAT_SNA) || (RTE_CONST_I_C02_MM_ROUTE_STAT_SNA != 3u)
#    error "Enumeration constant <I_C02_MM_ROUTE_STAT_SNA> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_MM_ROUTE_STAT_SNA (3u)
#   define I_C02_MM_ROUTE_STAT_SNA ((c02_MM_Route_Stat)3u)
#  endif

#  define Rte_TypeDef_c02_MemPosn
typedef uint8 c02_MemPosn;
#  define c02_MemPosn_LowerLimit ((c02_MemPosn)0u)
#  define c02_MemPosn_UpperLimit ((c02_MemPosn)3u)
#  if (defined RTE_CONST_I_C02_MEMPOSN_NPSD) || (defined I_C02_MEMPOSN_NPSD)
#   if (!defined RTE_CONST_I_C02_MEMPOSN_NPSD) || (RTE_CONST_I_C02_MEMPOSN_NPSD != 0u)
#    error "Enumeration constant <I_C02_MEMPOSN_NPSD> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_MEMPOSN_NPSD (0u)
#   define I_C02_MEMPOSN_NPSD ((c02_MemPosn)0u)
#  endif
#  if (defined RTE_CONST_I_C02_MEMPOSN_P1_PSD) || (defined I_C02_MEMPOSN_P1_PSD)
#   if (!defined RTE_CONST_I_C02_MEMPOSN_P1_PSD) || (RTE_CONST_I_C02_MEMPOSN_P1_PSD != 1u)
#    error "Enumeration constant <I_C02_MEMPOSN_P1_PSD> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_MEMPOSN_P1_PSD (1u)
#   define I_C02_MEMPOSN_P1_PSD ((c02_MemPosn)1u)
#  endif
#  if (defined RTE_CONST_I_C02_MEMPOSN_P2_PSD) || (defined I_C02_MEMPOSN_P2_PSD)
#   if (!defined RTE_CONST_I_C02_MEMPOSN_P2_PSD) || (RTE_CONST_I_C02_MEMPOSN_P2_PSD != 2u)
#    error "Enumeration constant <I_C02_MEMPOSN_P2_PSD> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_MEMPOSN_P2_PSD (2u)
#   define I_C02_MEMPOSN_P2_PSD ((c02_MemPosn)2u)
#  endif
#  if (defined RTE_CONST_I_C02_MEMPOSN_P3_PSD) || (defined I_C02_MEMPOSN_P3_PSD)
#   if (!defined RTE_CONST_I_C02_MEMPOSN_P3_PSD) || (RTE_CONST_I_C02_MEMPOSN_P3_PSD != 3u)
#    error "Enumeration constant <I_C02_MEMPOSN_P3_PSD> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_MEMPOSN_P3_PSD (3u)
#   define I_C02_MEMPOSN_P3_PSD ((c02_MemPosn)3u)
#  endif

#  define Rte_TypeDef_c02_MirrFld_Stat
typedef uint8 c02_MirrFld_Stat;
#  define c02_MirrFld_Stat_LowerLimit ((c02_MirrFld_Stat)0u)
#  define c02_MirrFld_Stat_UpperLimit ((c02_MirrFld_Stat)3u)
#  if (defined RTE_CONST_I_C02_MIRRFLD_STAT_IDLE) || (defined I_C02_MIRRFLD_STAT_IDLE)
#   if (!defined RTE_CONST_I_C02_MIRRFLD_STAT_IDLE) || (RTE_CONST_I_C02_MIRRFLD_STAT_IDLE != 0u)
#    error "Enumeration constant <I_C02_MIRRFLD_STAT_IDLE> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_MIRRFLD_STAT_IDLE (0u)
#   define I_C02_MIRRFLD_STAT_IDLE ((c02_MirrFld_Stat)0u)
#  endif
#  if (defined RTE_CONST_I_C02_MIRRFLD_STAT_PARK_POS) || (defined I_C02_MIRRFLD_STAT_PARK_POS)
#   if (!defined RTE_CONST_I_C02_MIRRFLD_STAT_PARK_POS) || (RTE_CONST_I_C02_MIRRFLD_STAT_PARK_POS != 1u)
#    error "Enumeration constant <I_C02_MIRRFLD_STAT_PARK_POS> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_MIRRFLD_STAT_PARK_POS (1u)
#   define I_C02_MIRRFLD_STAT_PARK_POS ((c02_MirrFld_Stat)1u)
#  endif
#  if (defined RTE_CONST_I_C02_MIRRFLD_STAT_DRIVE_POS) || (defined I_C02_MIRRFLD_STAT_DRIVE_POS)
#   if (!defined RTE_CONST_I_C02_MIRRFLD_STAT_DRIVE_POS) || (RTE_CONST_I_C02_MIRRFLD_STAT_DRIVE_POS != 2u)
#    error "Enumeration constant <I_C02_MIRRFLD_STAT_DRIVE_POS> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_MIRRFLD_STAT_DRIVE_POS (2u)
#   define I_C02_MIRRFLD_STAT_DRIVE_POS ((c02_MirrFld_Stat)2u)
#  endif
#  if (defined RTE_CONST_I_C02_MIRRFLD_STAT_FOLD) || (defined I_C02_MIRRFLD_STAT_FOLD)
#   if (!defined RTE_CONST_I_C02_MIRRFLD_STAT_FOLD) || (RTE_CONST_I_C02_MIRRFLD_STAT_FOLD != 3u)
#    error "Enumeration constant <I_C02_MIRRFLD_STAT_FOLD> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_MIRRFLD_STAT_FOLD (3u)
#   define I_C02_MIRRFLD_STAT_FOLD ((c02_MirrFld_Stat)3u)
#  endif

#  define Rte_TypeDef_c02_NPsd_Opn_Cls
typedef uint8 c02_NPsd_Opn_Cls;
#  define c02_NPsd_Opn_Cls_LowerLimit ((c02_NPsd_Opn_Cls)0u)
#  define c02_NPsd_Opn_Cls_UpperLimit ((c02_NPsd_Opn_Cls)3u)
#  define Rte_InvalidValue_c02_NPsd_Opn_Cls ((c02_NPsd_Opn_Cls)3u)
#  if (defined RTE_CONST_I_C02_NPSD_OPN_CLS_NPSD) || (defined I_C02_NPSD_OPN_CLS_NPSD)
#   if (!defined RTE_CONST_I_C02_NPSD_OPN_CLS_NPSD) || (RTE_CONST_I_C02_NPSD_OPN_CLS_NPSD != 0u)
#    error "Enumeration constant <I_C02_NPSD_OPN_CLS_NPSD> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_NPSD_OPN_CLS_NPSD (0u)
#   define I_C02_NPSD_OPN_CLS_NPSD ((c02_NPsd_Opn_Cls)0u)
#  endif
#  if (defined RTE_CONST_I_C02_NPSD_OPN_CLS_OPNPSD) || (defined I_C02_NPSD_OPN_CLS_OPNPSD)
#   if (!defined RTE_CONST_I_C02_NPSD_OPN_CLS_OPNPSD) || (RTE_CONST_I_C02_NPSD_OPN_CLS_OPNPSD != 1u)
#    error "Enumeration constant <I_C02_NPSD_OPN_CLS_OPNPSD> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_NPSD_OPN_CLS_OPNPSD (1u)
#   define I_C02_NPSD_OPN_CLS_OPNPSD ((c02_NPsd_Opn_Cls)1u)
#  endif
#  if (defined RTE_CONST_I_C02_NPSD_OPN_CLS_CLSPSD) || (defined I_C02_NPSD_OPN_CLS_CLSPSD)
#   if (!defined RTE_CONST_I_C02_NPSD_OPN_CLS_CLSPSD) || (RTE_CONST_I_C02_NPSD_OPN_CLS_CLSPSD != 2u)
#    error "Enumeration constant <I_C02_NPSD_OPN_CLS_CLSPSD> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_NPSD_OPN_CLS_CLSPSD (2u)
#   define I_C02_NPSD_OPN_CLS_CLSPSD ((c02_NPsd_Opn_Cls)2u)
#  endif
#  if (defined RTE_CONST_I_C02_NPSD_OPN_CLS_SNA) || (defined I_C02_NPSD_OPN_CLS_SNA)
#   if (!defined RTE_CONST_I_C02_NPSD_OPN_CLS_SNA) || (RTE_CONST_I_C02_NPSD_OPN_CLS_SNA != 3u)
#    error "Enumeration constant <I_C02_NPSD_OPN_CLS_SNA> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_NPSD_OPN_CLS_SNA (3u)
#   define I_C02_NPSD_OPN_CLS_SNA ((c02_NPsd_Opn_Cls)3u)
#  endif

#  define Rte_TypeDef_c02_NPsd_Psd
typedef uint8 c02_NPsd_Psd;
#  define c02_NPsd_Psd_LowerLimit ((c02_NPsd_Psd)0u)
#  define c02_NPsd_Psd_UpperLimit ((c02_NPsd_Psd)3u)
#  define Rte_InvalidValue_c02_NPsd_Psd ((c02_NPsd_Psd)3u)
#  if (defined RTE_CONST_I_C02_NPSD_PSD_NPSD) || (defined I_C02_NPSD_PSD_NPSD)
#   if (!defined RTE_CONST_I_C02_NPSD_PSD_NPSD) || (RTE_CONST_I_C02_NPSD_PSD_NPSD != 0u)
#    error "Enumeration constant <I_C02_NPSD_PSD_NPSD> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_NPSD_PSD_NPSD (0u)
#   define I_C02_NPSD_PSD_NPSD ((c02_NPsd_Psd)0u)
#  endif
#  if (defined RTE_CONST_I_C02_NPSD_PSD_NDEF1) || (defined I_C02_NPSD_PSD_NDEF1)
#   if (!defined RTE_CONST_I_C02_NPSD_PSD_NDEF1) || (RTE_CONST_I_C02_NPSD_PSD_NDEF1 != 1u)
#    error "Enumeration constant <I_C02_NPSD_PSD_NDEF1> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_NPSD_PSD_NDEF1 (1u)
#   define I_C02_NPSD_PSD_NDEF1 ((c02_NPsd_Psd)1u)
#  endif
#  if (defined RTE_CONST_I_C02_NPSD_PSD_PSD) || (defined I_C02_NPSD_PSD_PSD)
#   if (!defined RTE_CONST_I_C02_NPSD_PSD_PSD) || (RTE_CONST_I_C02_NPSD_PSD_PSD != 2u)
#    error "Enumeration constant <I_C02_NPSD_PSD_PSD> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_NPSD_PSD_PSD (2u)
#   define I_C02_NPSD_PSD_PSD ((c02_NPsd_Psd)2u)
#  endif
#  if (defined RTE_CONST_I_C02_NPSD_PSD_SNA) || (defined I_C02_NPSD_PSD_SNA)
#   if (!defined RTE_CONST_I_C02_NPSD_PSD_SNA) || (RTE_CONST_I_C02_NPSD_PSD_SNA != 3u)
#    error "Enumeration constant <I_C02_NPSD_PSD_SNA> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_NPSD_PSD_SNA (3u)
#   define I_C02_NPSD_PSD_SNA ((c02_NPsd_Psd)3u)
#  endif

#  define Rte_TypeDef_c02_Ndef_NoExt_Ext
typedef uint8 c02_Ndef_NoExt_Ext;
#  define c02_Ndef_NoExt_Ext_LowerLimit ((c02_Ndef_NoExt_Ext)0u)
#  define c02_Ndef_NoExt_Ext_UpperLimit ((c02_Ndef_NoExt_Ext)3u)
#  define Rte_InvalidValue_c02_Ndef_NoExt_Ext ((c02_Ndef_NoExt_Ext)3u)
#  if (defined RTE_CONST_I_C02_NDEF_NOEXT_EXT_NDEF0) || (defined I_C02_NDEF_NOEXT_EXT_NDEF0)
#   if (!defined RTE_CONST_I_C02_NDEF_NOEXT_EXT_NDEF0) || (RTE_CONST_I_C02_NDEF_NOEXT_EXT_NDEF0 != 0u)
#    error "Enumeration constant <I_C02_NDEF_NOEXT_EXT_NDEF0> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_NDEF_NOEXT_EXT_NDEF0 (0u)
#   define I_C02_NDEF_NOEXT_EXT_NDEF0 ((c02_Ndef_NoExt_Ext)0u)
#  endif
#  if (defined RTE_CONST_I_C02_NDEF_NOEXT_EXT_NO_EXT) || (defined I_C02_NDEF_NOEXT_EXT_NO_EXT)
#   if (!defined RTE_CONST_I_C02_NDEF_NOEXT_EXT_NO_EXT) || (RTE_CONST_I_C02_NDEF_NOEXT_EXT_NO_EXT != 1u)
#    error "Enumeration constant <I_C02_NDEF_NOEXT_EXT_NO_EXT> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_NDEF_NOEXT_EXT_NO_EXT (1u)
#   define I_C02_NDEF_NOEXT_EXT_NO_EXT ((c02_Ndef_NoExt_Ext)1u)
#  endif
#  if (defined RTE_CONST_I_C02_NDEF_NOEXT_EXT_EXT) || (defined I_C02_NDEF_NOEXT_EXT_EXT)
#   if (!defined RTE_CONST_I_C02_NDEF_NOEXT_EXT_EXT) || (RTE_CONST_I_C02_NDEF_NOEXT_EXT_EXT != 2u)
#    error "Enumeration constant <I_C02_NDEF_NOEXT_EXT_EXT> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_NDEF_NOEXT_EXT_EXT (2u)
#   define I_C02_NDEF_NOEXT_EXT_EXT ((c02_Ndef_NoExt_Ext)2u)
#  endif
#  if (defined RTE_CONST_I_C02_NDEF_NOEXT_EXT_SNA) || (defined I_C02_NDEF_NOEXT_EXT_SNA)
#   if (!defined RTE_CONST_I_C02_NDEF_NOEXT_EXT_SNA) || (RTE_CONST_I_C02_NDEF_NOEXT_EXT_SNA != 3u)
#    error "Enumeration constant <I_C02_NDEF_NOEXT_EXT_SNA> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_NDEF_NOEXT_EXT_SNA (3u)
#   define I_C02_NDEF_NOEXT_EXT_SNA ((c02_Ndef_NoExt_Ext)3u)
#  endif

#  define Rte_TypeDef_c02_Off_On_Blink
typedef uint8 c02_Off_On_Blink;
#  define c02_Off_On_Blink_LowerLimit ((c02_Off_On_Blink)0u)
#  define c02_Off_On_Blink_UpperLimit ((c02_Off_On_Blink)3u)
#  define Rte_InvalidValue_c02_Off_On_Blink ((c02_Off_On_Blink)3u)
#  if (defined RTE_CONST_I_C02_OFF_ON_BLINK_OFF) || (defined I_C02_OFF_ON_BLINK_OFF)
#   if (!defined RTE_CONST_I_C02_OFF_ON_BLINK_OFF) || (RTE_CONST_I_C02_OFF_ON_BLINK_OFF != 0u)
#    error "Enumeration constant <I_C02_OFF_ON_BLINK_OFF> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_OFF_ON_BLINK_OFF (0u)
#   define I_C02_OFF_ON_BLINK_OFF ((c02_Off_On_Blink)0u)
#  endif
#  if (defined RTE_CONST_I_C02_OFF_ON_BLINK_ON) || (defined I_C02_OFF_ON_BLINK_ON)
#   if (!defined RTE_CONST_I_C02_OFF_ON_BLINK_ON) || (RTE_CONST_I_C02_OFF_ON_BLINK_ON != 1u)
#    error "Enumeration constant <I_C02_OFF_ON_BLINK_ON> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_OFF_ON_BLINK_ON (1u)
#   define I_C02_OFF_ON_BLINK_ON ((c02_Off_On_Blink)1u)
#  endif
#  if (defined RTE_CONST_I_C02_OFF_ON_BLINK_BLINK) || (defined I_C02_OFF_ON_BLINK_BLINK)
#   if (!defined RTE_CONST_I_C02_OFF_ON_BLINK_BLINK) || (RTE_CONST_I_C02_OFF_ON_BLINK_BLINK != 2u)
#    error "Enumeration constant <I_C02_OFF_ON_BLINK_BLINK> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_OFF_ON_BLINK_BLINK (2u)
#   define I_C02_OFF_ON_BLINK_BLINK ((c02_Off_On_Blink)2u)
#  endif
#  if (defined RTE_CONST_I_C02_OFF_ON_BLINK_SNA) || (defined I_C02_OFF_ON_BLINK_SNA)
#   if (!defined RTE_CONST_I_C02_OFF_ON_BLINK_SNA) || (RTE_CONST_I_C02_OFF_ON_BLINK_SNA != 3u)
#    error "Enumeration constant <I_C02_OFF_ON_BLINK_SNA> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_OFF_ON_BLINK_SNA (3u)
#   define I_C02_OFF_ON_BLINK_SNA ((c02_Off_On_Blink)3u)
#  endif

#  define Rte_TypeDef_c02_Off_On_Volt
typedef uint8 c02_Off_On_Volt;
#  define c02_Off_On_Volt_LowerLimit ((c02_Off_On_Volt)0u)
#  define c02_Off_On_Volt_UpperLimit ((c02_Off_On_Volt)3u)
#  define Rte_InvalidValue_c02_Off_On_Volt ((c02_Off_On_Volt)3u)
#  if (defined RTE_CONST_I_C02_OFF_ON_VOLT_OFF_ERR) || (defined I_C02_OFF_ON_VOLT_OFF_ERR)
#   if (!defined RTE_CONST_I_C02_OFF_ON_VOLT_OFF_ERR) || (RTE_CONST_I_C02_OFF_ON_VOLT_OFF_ERR != 0u)
#    error "Enumeration constant <I_C02_OFF_ON_VOLT_OFF_ERR> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_OFF_ON_VOLT_OFF_ERR (0u)
#   define I_C02_OFF_ON_VOLT_OFF_ERR ((c02_Off_On_Volt)0u)
#  endif
#  if (defined RTE_CONST_I_C02_OFF_ON_VOLT_ON) || (defined I_C02_OFF_ON_VOLT_ON)
#   if (!defined RTE_CONST_I_C02_OFF_ON_VOLT_ON) || (RTE_CONST_I_C02_OFF_ON_VOLT_ON != 1u)
#    error "Enumeration constant <I_C02_OFF_ON_VOLT_ON> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_OFF_ON_VOLT_ON (1u)
#   define I_C02_OFF_ON_VOLT_ON ((c02_Off_On_Volt)1u)
#  endif
#  if (defined RTE_CONST_I_C02_OFF_ON_VOLT_OFF_VOLT) || (defined I_C02_OFF_ON_VOLT_OFF_VOLT)
#   if (!defined RTE_CONST_I_C02_OFF_ON_VOLT_OFF_VOLT) || (RTE_CONST_I_C02_OFF_ON_VOLT_OFF_VOLT != 2u)
#    error "Enumeration constant <I_C02_OFF_ON_VOLT_OFF_VOLT> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_OFF_ON_VOLT_OFF_VOLT (2u)
#   define I_C02_OFF_ON_VOLT_OFF_VOLT ((c02_Off_On_Volt)2u)
#  endif
#  if (defined RTE_CONST_I_C02_OFF_ON_VOLT_SNA) || (defined I_C02_OFF_ON_VOLT_SNA)
#   if (!defined RTE_CONST_I_C02_OFF_ON_VOLT_SNA) || (RTE_CONST_I_C02_OFF_ON_VOLT_SNA != 3u)
#    error "Enumeration constant <I_C02_OFF_ON_VOLT_SNA> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_OFF_ON_VOLT_SNA (3u)
#   define I_C02_OFF_ON_VOLT_SNA ((c02_Off_On_Volt)3u)
#  endif

#  define Rte_TypeDef_c02_PW_Posn_Stat
typedef uint8 c02_PW_Posn_Stat;
#  define c02_PW_Posn_Stat_LowerLimit ((c02_PW_Posn_Stat)0u)
#  define c02_PW_Posn_Stat_UpperLimit ((c02_PW_Posn_Stat)3u)
#  define Rte_InvalidValue_c02_PW_Posn_Stat ((c02_PW_Posn_Stat)3u)
#  if (defined RTE_CONST_I_C02_PW_POSN_STAT_INTERMEDIATE) || (defined I_C02_PW_POSN_STAT_INTERMEDIATE)
#   if (!defined RTE_CONST_I_C02_PW_POSN_STAT_INTERMEDIATE) || (RTE_CONST_I_C02_PW_POSN_STAT_INTERMEDIATE != 0u)
#    error "Enumeration constant <I_C02_PW_POSN_STAT_INTERMEDIATE> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_PW_POSN_STAT_INTERMEDIATE (0u)
#   define I_C02_PW_POSN_STAT_INTERMEDIATE ((c02_PW_Posn_Stat)0u)
#  endif
#  if (defined RTE_CONST_I_C02_PW_POSN_STAT_WNDW_OPN) || (defined I_C02_PW_POSN_STAT_WNDW_OPN)
#   if (!defined RTE_CONST_I_C02_PW_POSN_STAT_WNDW_OPN) || (RTE_CONST_I_C02_PW_POSN_STAT_WNDW_OPN != 1u)
#    error "Enumeration constant <I_C02_PW_POSN_STAT_WNDW_OPN> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_PW_POSN_STAT_WNDW_OPN (1u)
#   define I_C02_PW_POSN_STAT_WNDW_OPN ((c02_PW_Posn_Stat)1u)
#  endif
#  if (defined RTE_CONST_I_C02_PW_POSN_STAT_WNDW_CLS) || (defined I_C02_PW_POSN_STAT_WNDW_CLS)
#   if (!defined RTE_CONST_I_C02_PW_POSN_STAT_WNDW_CLS) || (RTE_CONST_I_C02_PW_POSN_STAT_WNDW_CLS != 2u)
#    error "Enumeration constant <I_C02_PW_POSN_STAT_WNDW_CLS> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_PW_POSN_STAT_WNDW_CLS (2u)
#   define I_C02_PW_POSN_STAT_WNDW_CLS ((c02_PW_Posn_Stat)2u)
#  endif
#  if (defined RTE_CONST_I_C02_PW_POSN_STAT_SNA) || (defined I_C02_PW_POSN_STAT_SNA)
#   if (!defined RTE_CONST_I_C02_PW_POSN_STAT_SNA) || (RTE_CONST_I_C02_PW_POSN_STAT_SNA != 3u)
#    error "Enumeration constant <I_C02_PW_POSN_STAT_SNA> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_PW_POSN_STAT_SNA (3u)
#   define I_C02_PW_POSN_STAT_SNA ((c02_PW_Posn_Stat)3u)
#  endif

#  define Rte_TypeDef_c02_Preview_Md_Rq
typedef uint8 c02_Preview_Md_Rq;
#  define c02_Preview_Md_Rq_LowerLimit ((c02_Preview_Md_Rq)0u)
#  define c02_Preview_Md_Rq_UpperLimit ((c02_Preview_Md_Rq)3u)
#  define Rte_InvalidValue_c02_Preview_Md_Rq ((c02_Preview_Md_Rq)3u)
#  if (defined RTE_CONST_I_C02_PREVIEW_MD_RQ_PREVIEW_ON) || (defined I_C02_PREVIEW_MD_RQ_PREVIEW_ON)
#   if (!defined RTE_CONST_I_C02_PREVIEW_MD_RQ_PREVIEW_ON) || (RTE_CONST_I_C02_PREVIEW_MD_RQ_PREVIEW_ON != 0u)
#    error "Enumeration constant <I_C02_PREVIEW_MD_RQ_PREVIEW_ON> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_PREVIEW_MD_RQ_PREVIEW_ON (0u)
#   define I_C02_PREVIEW_MD_RQ_PREVIEW_ON ((c02_Preview_Md_Rq)0u)
#  endif
#  if (defined RTE_CONST_I_C02_PREVIEW_MD_RQ_PREVIEW_OFF) || (defined I_C02_PREVIEW_MD_RQ_PREVIEW_OFF)
#   if (!defined RTE_CONST_I_C02_PREVIEW_MD_RQ_PREVIEW_OFF) || (RTE_CONST_I_C02_PREVIEW_MD_RQ_PREVIEW_OFF != 1u)
#    error "Enumeration constant <I_C02_PREVIEW_MD_RQ_PREVIEW_OFF> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_PREVIEW_MD_RQ_PREVIEW_OFF (1u)
#   define I_C02_PREVIEW_MD_RQ_PREVIEW_OFF ((c02_Preview_Md_Rq)1u)
#  endif
#  if (defined RTE_CONST_I_C02_PREVIEW_MD_RQ_NDEF2) || (defined I_C02_PREVIEW_MD_RQ_NDEF2)
#   if (!defined RTE_CONST_I_C02_PREVIEW_MD_RQ_NDEF2) || (RTE_CONST_I_C02_PREVIEW_MD_RQ_NDEF2 != 2u)
#    error "Enumeration constant <I_C02_PREVIEW_MD_RQ_NDEF2> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_PREVIEW_MD_RQ_NDEF2 (2u)
#   define I_C02_PREVIEW_MD_RQ_NDEF2 ((c02_Preview_Md_Rq)2u)
#  endif
#  if (defined RTE_CONST_I_C02_PREVIEW_MD_RQ_SNA) || (defined I_C02_PREVIEW_MD_RQ_SNA)
#   if (!defined RTE_CONST_I_C02_PREVIEW_MD_RQ_SNA) || (RTE_CONST_I_C02_PREVIEW_MD_RQ_SNA != 3u)
#    error "Enumeration constant <I_C02_PREVIEW_MD_RQ_SNA> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_PREVIEW_MD_RQ_SNA (3u)
#   define I_C02_PREVIEW_MD_RQ_SNA ((c02_Preview_Md_Rq)3u)
#  endif

#  define Rte_TypeDef_c02_RLtch_Stat
typedef uint8 c02_RLtch_Stat;
#  define c02_RLtch_Stat_LowerLimit ((c02_RLtch_Stat)0u)
#  define c02_RLtch_Stat_UpperLimit ((c02_RLtch_Stat)3u)
#  define Rte_InvalidValue_c02_RLtch_Stat ((c02_RLtch_Stat)3u)
#  if (defined RTE_CONST_I_C02_RLTCH_STAT_NDEF0) || (defined I_C02_RLTCH_STAT_NDEF0)
#   if (!defined RTE_CONST_I_C02_RLTCH_STAT_NDEF0) || (RTE_CONST_I_C02_RLTCH_STAT_NDEF0 != 0u)
#    error "Enumeration constant <I_C02_RLTCH_STAT_NDEF0> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_RLTCH_STAT_NDEF0 (0u)
#   define I_C02_RLTCH_STAT_NDEF0 ((c02_RLtch_Stat)0u)
#  endif
#  if (defined RTE_CONST_I_C02_RLTCH_STAT_CLS) || (defined I_C02_RLTCH_STAT_CLS)
#   if (!defined RTE_CONST_I_C02_RLTCH_STAT_CLS) || (RTE_CONST_I_C02_RLTCH_STAT_CLS != 1u)
#    error "Enumeration constant <I_C02_RLTCH_STAT_CLS> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_RLTCH_STAT_CLS (1u)
#   define I_C02_RLTCH_STAT_CLS ((c02_RLtch_Stat)1u)
#  endif
#  if (defined RTE_CONST_I_C02_RLTCH_STAT_OPN) || (defined I_C02_RLTCH_STAT_OPN)
#   if (!defined RTE_CONST_I_C02_RLTCH_STAT_OPN) || (RTE_CONST_I_C02_RLTCH_STAT_OPN != 2u)
#    error "Enumeration constant <I_C02_RLTCH_STAT_OPN> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_RLTCH_STAT_OPN (2u)
#   define I_C02_RLTCH_STAT_OPN ((c02_RLtch_Stat)2u)
#  endif
#  if (defined RTE_CONST_I_C02_RLTCH_STAT_SNA) || (defined I_C02_RLTCH_STAT_SNA)
#   if (!defined RTE_CONST_I_C02_RLTCH_STAT_SNA) || (RTE_CONST_I_C02_RLTCH_STAT_SNA != 3u)
#    error "Enumeration constant <I_C02_RLTCH_STAT_SNA> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_RLTCH_STAT_SNA (3u)
#   define I_C02_RLTCH_STAT_SNA ((c02_RLtch_Stat)3u)
#  endif

#  define Rte_TypeDef_c02_SeatBkRst_Stat
typedef uint8 c02_SeatBkRst_Stat;
#  define c02_SeatBkRst_Stat_LowerLimit ((c02_SeatBkRst_Stat)0u)
#  define c02_SeatBkRst_Stat_UpperLimit ((c02_SeatBkRst_Stat)3u)
#  define Rte_InvalidValue_c02_SeatBkRst_Stat ((c02_SeatBkRst_Stat)3u)
#  if (defined RTE_CONST_I_C02_SEATBKRST_STAT_UNLOCK) || (defined I_C02_SEATBKRST_STAT_UNLOCK)
#   if (!defined RTE_CONST_I_C02_SEATBKRST_STAT_UNLOCK) || (RTE_CONST_I_C02_SEATBKRST_STAT_UNLOCK != 0u)
#    error "Enumeration constant <I_C02_SEATBKRST_STAT_UNLOCK> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_SEATBKRST_STAT_UNLOCK (0u)
#   define I_C02_SEATBKRST_STAT_UNLOCK ((c02_SeatBkRst_Stat)0u)
#  endif
#  if (defined RTE_CONST_I_C02_SEATBKRST_STAT_FLD_UNLOCK) || (defined I_C02_SEATBKRST_STAT_FLD_UNLOCK)
#   if (!defined RTE_CONST_I_C02_SEATBKRST_STAT_FLD_UNLOCK) || (RTE_CONST_I_C02_SEATBKRST_STAT_FLD_UNLOCK != 1u)
#    error "Enumeration constant <I_C02_SEATBKRST_STAT_FLD_UNLOCK> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_SEATBKRST_STAT_FLD_UNLOCK (1u)
#   define I_C02_SEATBKRST_STAT_FLD_UNLOCK ((c02_SeatBkRst_Stat)1u)
#  endif
#  if (defined RTE_CONST_I_C02_SEATBKRST_STAT_LOCK) || (defined I_C02_SEATBKRST_STAT_LOCK)
#   if (!defined RTE_CONST_I_C02_SEATBKRST_STAT_LOCK) || (RTE_CONST_I_C02_SEATBKRST_STAT_LOCK != 2u)
#    error "Enumeration constant <I_C02_SEATBKRST_STAT_LOCK> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_SEATBKRST_STAT_LOCK (2u)
#   define I_C02_SEATBKRST_STAT_LOCK ((c02_SeatBkRst_Stat)2u)
#  endif
#  if (defined RTE_CONST_I_C02_SEATBKRST_STAT_SNA) || (defined I_C02_SEATBKRST_STAT_SNA)
#   if (!defined RTE_CONST_I_C02_SEATBKRST_STAT_SNA) || (RTE_CONST_I_C02_SEATBKRST_STAT_SNA != 3u)
#    error "Enumeration constant <I_C02_SEATBKRST_STAT_SNA> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_SEATBKRST_STAT_SNA (3u)
#   define I_C02_SEATBKRST_STAT_SNA ((c02_SeatBkRst_Stat)3u)
#  endif

#  define Rte_TypeDef_c02_Sleep_Local_Ext
typedef uint8 c02_Sleep_Local_Ext;
#  define c02_Sleep_Local_Ext_LowerLimit ((c02_Sleep_Local_Ext)0u)
#  define c02_Sleep_Local_Ext_UpperLimit ((c02_Sleep_Local_Ext)3u)
#  define Rte_InvalidValue_c02_Sleep_Local_Ext ((c02_Sleep_Local_Ext)3u)
#  if (defined RTE_CONST_I_C02_SLEEP_LOCAL_EXT_SLEEP) || (defined I_C02_SLEEP_LOCAL_EXT_SLEEP)
#   if (!defined RTE_CONST_I_C02_SLEEP_LOCAL_EXT_SLEEP) || (RTE_CONST_I_C02_SLEEP_LOCAL_EXT_SLEEP != 0u)
#    error "Enumeration constant <I_C02_SLEEP_LOCAL_EXT_SLEEP> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_SLEEP_LOCAL_EXT_SLEEP (0u)
#   define I_C02_SLEEP_LOCAL_EXT_SLEEP ((c02_Sleep_Local_Ext)0u)
#  endif
#  if (defined RTE_CONST_I_C02_SLEEP_LOCAL_EXT_LOCAL) || (defined I_C02_SLEEP_LOCAL_EXT_LOCAL)
#   if (!defined RTE_CONST_I_C02_SLEEP_LOCAL_EXT_LOCAL) || (RTE_CONST_I_C02_SLEEP_LOCAL_EXT_LOCAL != 1u)
#    error "Enumeration constant <I_C02_SLEEP_LOCAL_EXT_LOCAL> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_SLEEP_LOCAL_EXT_LOCAL (1u)
#   define I_C02_SLEEP_LOCAL_EXT_LOCAL ((c02_Sleep_Local_Ext)1u)
#  endif
#  if (defined RTE_CONST_I_C02_SLEEP_LOCAL_EXT_EXT) || (defined I_C02_SLEEP_LOCAL_EXT_EXT)
#   if (!defined RTE_CONST_I_C02_SLEEP_LOCAL_EXT_EXT) || (RTE_CONST_I_C02_SLEEP_LOCAL_EXT_EXT != 2u)
#    error "Enumeration constant <I_C02_SLEEP_LOCAL_EXT_EXT> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_SLEEP_LOCAL_EXT_EXT (2u)
#   define I_C02_SLEEP_LOCAL_EXT_EXT ((c02_Sleep_Local_Ext)2u)
#  endif
#  if (defined RTE_CONST_I_C02_SLEEP_LOCAL_EXT_SNA) || (defined I_C02_SLEEP_LOCAL_EXT_SNA)
#   if (!defined RTE_CONST_I_C02_SLEEP_LOCAL_EXT_SNA) || (RTE_CONST_I_C02_SLEEP_LOCAL_EXT_SNA != 3u)
#    error "Enumeration constant <I_C02_SLEEP_LOCAL_EXT_SNA> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_SLEEP_LOCAL_EXT_SNA (3u)
#   define I_C02_SLEEP_LOCAL_EXT_SNA ((c02_Sleep_Local_Ext)3u)
#  endif

#  define Rte_TypeDef_c02_TPM_Actv_Rq_V2
typedef uint8 c02_TPM_Actv_Rq_V2;
#  define c02_TPM_Actv_Rq_V2_LowerLimit ((c02_TPM_Actv_Rq_V2)0u)
#  define c02_TPM_Actv_Rq_V2_UpperLimit ((c02_TPM_Actv_Rq_V2)3u)
#  define Rte_InvalidValue_c02_TPM_Actv_Rq_V2 ((c02_TPM_Actv_Rq_V2)3u)
#  if (defined RTE_CONST_I_C02_TPM_ACTV_RQ_V2_IDLE) || (defined I_C02_TPM_ACTV_RQ_V2_IDLE)
#   if (!defined RTE_CONST_I_C02_TPM_ACTV_RQ_V2_IDLE) || (RTE_CONST_I_C02_TPM_ACTV_RQ_V2_IDLE != 0u)
#    error "Enumeration constant <I_C02_TPM_ACTV_RQ_V2_IDLE> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_TPM_ACTV_RQ_V2_IDLE (0u)
#   define I_C02_TPM_ACTV_RQ_V2_IDLE ((c02_TPM_Actv_Rq_V2)0u)
#  endif
#  if (defined RTE_CONST_I_C02_TPM_ACTV_RQ_V2_ACTIVATE) || (defined I_C02_TPM_ACTV_RQ_V2_ACTIVATE)
#   if (!defined RTE_CONST_I_C02_TPM_ACTV_RQ_V2_ACTIVATE) || (RTE_CONST_I_C02_TPM_ACTV_RQ_V2_ACTIVATE != 1u)
#    error "Enumeration constant <I_C02_TPM_ACTV_RQ_V2_ACTIVATE> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_TPM_ACTV_RQ_V2_ACTIVATE (1u)
#   define I_C02_TPM_ACTV_RQ_V2_ACTIVATE ((c02_TPM_Actv_Rq_V2)1u)
#  endif
#  if (defined RTE_CONST_I_C02_TPM_ACTV_RQ_V2_SNA) || (defined I_C02_TPM_ACTV_RQ_V2_SNA)
#   if (!defined RTE_CONST_I_C02_TPM_ACTV_RQ_V2_SNA) || (RTE_CONST_I_C02_TPM_ACTV_RQ_V2_SNA != 3u)
#    error "Enumeration constant <I_C02_TPM_ACTV_RQ_V2_SNA> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_TPM_ACTV_RQ_V2_SNA (3u)
#   define I_C02_TPM_ACTV_RQ_V2_SNA ((c02_TPM_Actv_Rq_V2)3u)
#  endif

#  define Rte_TypeDef_c02_TSL_P_Psd_StW
typedef uint8 c02_TSL_P_Psd_StW;
#  define c02_TSL_P_Psd_StW_LowerLimit ((c02_TSL_P_Psd_StW)0u)
#  define c02_TSL_P_Psd_StW_UpperLimit ((c02_TSL_P_Psd_StW)3u)
#  define Rte_InvalidValue_c02_TSL_P_Psd_StW ((c02_TSL_P_Psd_StW)3u)
#  if (defined RTE_CONST_I_C02_TSL_P_PSD_STW_IDLE) || (defined I_C02_TSL_P_PSD_STW_IDLE)
#   if (!defined RTE_CONST_I_C02_TSL_P_PSD_STW_IDLE) || (RTE_CONST_I_C02_TSL_P_PSD_STW_IDLE != 0u)
#    error "Enumeration constant <I_C02_TSL_P_PSD_STW_IDLE> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_TSL_P_PSD_STW_IDLE (0u)
#   define I_C02_TSL_P_PSD_STW_IDLE ((c02_TSL_P_Psd_StW)0u)
#  endif
#  if (defined RTE_CONST_I_C02_TSL_P_PSD_STW_PSD) || (defined I_C02_TSL_P_PSD_STW_PSD)
#   if (!defined RTE_CONST_I_C02_TSL_P_PSD_STW_PSD) || (RTE_CONST_I_C02_TSL_P_PSD_STW_PSD != 1u)
#    error "Enumeration constant <I_C02_TSL_P_PSD_STW_PSD> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_TSL_P_PSD_STW_PSD (1u)
#   define I_C02_TSL_P_PSD_STW_PSD ((c02_TSL_P_Psd_StW)1u)
#  endif
#  if (defined RTE_CONST_I_C02_TSL_P_PSD_STW_INI) || (defined I_C02_TSL_P_PSD_STW_INI)
#   if (!defined RTE_CONST_I_C02_TSL_P_PSD_STW_INI) || (RTE_CONST_I_C02_TSL_P_PSD_STW_INI != 2u)
#    error "Enumeration constant <I_C02_TSL_P_PSD_STW_INI> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_TSL_P_PSD_STW_INI (2u)
#   define I_C02_TSL_P_PSD_STW_INI ((c02_TSL_P_Psd_StW)2u)
#  endif
#  if (defined RTE_CONST_I_C02_TSL_P_PSD_STW_SNA) || (defined I_C02_TSL_P_PSD_STW_SNA)
#   if (!defined RTE_CONST_I_C02_TSL_P_PSD_STW_SNA) || (RTE_CONST_I_C02_TSL_P_PSD_STW_SNA != 3u)
#    error "Enumeration constant <I_C02_TSL_P_PSD_STW_SNA> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_TSL_P_PSD_STW_SNA (3u)
#   define I_C02_TSL_P_PSD_STW_SNA ((c02_TSL_P_Psd_StW)3u)
#  endif

#  define Rte_TypeDef_c02_TaxiMd_Rq
typedef uint8 c02_TaxiMd_Rq;
#  define c02_TaxiMd_Rq_LowerLimit ((c02_TaxiMd_Rq)0u)
#  define c02_TaxiMd_Rq_UpperLimit ((c02_TaxiMd_Rq)3u)
#  define Rte_InvalidValue_c02_TaxiMd_Rq ((c02_TaxiMd_Rq)3u)
#  if (defined RTE_CONST_I_C02_TAXIMD_RQ_PRIVATE) || (defined I_C02_TAXIMD_RQ_PRIVATE)
#   if (!defined RTE_CONST_I_C02_TAXIMD_RQ_PRIVATE) || (RTE_CONST_I_C02_TAXIMD_RQ_PRIVATE != 0u)
#    error "Enumeration constant <I_C02_TAXIMD_RQ_PRIVATE> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_TAXIMD_RQ_PRIVATE (0u)
#   define I_C02_TAXIMD_RQ_PRIVATE ((c02_TaxiMd_Rq)0u)
#  endif
#  if (defined RTE_CONST_I_C02_TAXIMD_RQ_BUSINESS) || (defined I_C02_TAXIMD_RQ_BUSINESS)
#   if (!defined RTE_CONST_I_C02_TAXIMD_RQ_BUSINESS) || (RTE_CONST_I_C02_TAXIMD_RQ_BUSINESS != 1u)
#    error "Enumeration constant <I_C02_TAXIMD_RQ_BUSINESS> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_TAXIMD_RQ_BUSINESS (1u)
#   define I_C02_TAXIMD_RQ_BUSINESS ((c02_TaxiMd_Rq)1u)
#  endif
#  if (defined RTE_CONST_I_C02_TAXIMD_RQ_NDEF2) || (defined I_C02_TAXIMD_RQ_NDEF2)
#   if (!defined RTE_CONST_I_C02_TAXIMD_RQ_NDEF2) || (RTE_CONST_I_C02_TAXIMD_RQ_NDEF2 != 2u)
#    error "Enumeration constant <I_C02_TAXIMD_RQ_NDEF2> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_TAXIMD_RQ_NDEF2 (2u)
#   define I_C02_TAXIMD_RQ_NDEF2 ((c02_TaxiMd_Rq)2u)
#  endif
#  if (defined RTE_CONST_I_C02_TAXIMD_RQ_SNA) || (defined I_C02_TAXIMD_RQ_SNA)
#   if (!defined RTE_CONST_I_C02_TAXIMD_RQ_SNA) || (RTE_CONST_I_C02_TAXIMD_RQ_SNA != 3u)
#    error "Enumeration constant <I_C02_TAXIMD_RQ_SNA> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_TAXIMD_RQ_SNA (3u)
#   define I_C02_TAXIMD_RQ_SNA ((c02_TaxiMd_Rq)3u)
#  endif

#  define Rte_TypeDef_c02_TmFormat
typedef uint8 c02_TmFormat;
#  define c02_TmFormat_LowerLimit ((c02_TmFormat)0u)
#  define c02_TmFormat_UpperLimit ((c02_TmFormat)3u)
#  define Rte_InvalidValue_c02_TmFormat ((c02_TmFormat)3u)
#  if (defined RTE_CONST_I_C02_TMFORMAT_NDEF0) || (defined I_C02_TMFORMAT_NDEF0)
#   if (!defined RTE_CONST_I_C02_TMFORMAT_NDEF0) || (RTE_CONST_I_C02_TMFORMAT_NDEF0 != 0u)
#    error "Enumeration constant <I_C02_TMFORMAT_NDEF0> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_TMFORMAT_NDEF0 (0u)
#   define I_C02_TMFORMAT_NDEF0 ((c02_TmFormat)0u)
#  endif
#  if (defined RTE_CONST_I_C02_TMFORMAT_FORMAT_12H) || (defined I_C02_TMFORMAT_FORMAT_12H)
#   if (!defined RTE_CONST_I_C02_TMFORMAT_FORMAT_12H) || (RTE_CONST_I_C02_TMFORMAT_FORMAT_12H != 1u)
#    error "Enumeration constant <I_C02_TMFORMAT_FORMAT_12H> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_TMFORMAT_FORMAT_12H (1u)
#   define I_C02_TMFORMAT_FORMAT_12H ((c02_TmFormat)1u)
#  endif
#  if (defined RTE_CONST_I_C02_TMFORMAT_FORMAT_24H) || (defined I_C02_TMFORMAT_FORMAT_24H)
#   if (!defined RTE_CONST_I_C02_TMFORMAT_FORMAT_24H) || (RTE_CONST_I_C02_TMFORMAT_FORMAT_24H != 2u)
#    error "Enumeration constant <I_C02_TMFORMAT_FORMAT_24H> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_TMFORMAT_FORMAT_24H (2u)
#   define I_C02_TMFORMAT_FORMAT_24H ((c02_TmFormat)2u)
#  endif
#  if (defined RTE_CONST_I_C02_TMFORMAT_SNA) || (defined I_C02_TMFORMAT_SNA)
#   if (!defined RTE_CONST_I_C02_TMFORMAT_SNA) || (RTE_CONST_I_C02_TMFORMAT_SNA != 3u)
#    error "Enumeration constant <I_C02_TMFORMAT_SNA> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_TMFORMAT_SNA (3u)
#   define I_C02_TMFORMAT_SNA ((c02_TmFormat)3u)
#  endif

#  define Rte_TypeDef_c02_TxmtId_SBW_Rq_SCCM
typedef uint8 c02_TxmtId_SBW_Rq_SCCM;
#  define c02_TxmtId_SBW_Rq_SCCM_LowerLimit ((c02_TxmtId_SBW_Rq_SCCM)0u)
#  define c02_TxmtId_SBW_Rq_SCCM_UpperLimit ((c02_TxmtId_SBW_Rq_SCCM)3u)
#  if (defined RTE_CONST_I_C02_TXMTID_SBW_RQ_SCCM_EWM) || (defined I_C02_TXMTID_SBW_RQ_SCCM_EWM)
#   if (!defined RTE_CONST_I_C02_TXMTID_SBW_RQ_SCCM_EWM) || (RTE_CONST_I_C02_TXMTID_SBW_RQ_SCCM_EWM != 0u)
#    error "Enumeration constant <I_C02_TXMTID_SBW_RQ_SCCM_EWM> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_TXMTID_SBW_RQ_SCCM_EWM (0u)
#   define I_C02_TXMTID_SBW_RQ_SCCM_EWM ((c02_TxmtId_SBW_Rq_SCCM)0u)
#  endif
#  if (defined RTE_CONST_I_C02_TXMTID_SBW_RQ_SCCM_SCCM) || (defined I_C02_TXMTID_SBW_RQ_SCCM_SCCM)
#   if (!defined RTE_CONST_I_C02_TXMTID_SBW_RQ_SCCM_SCCM) || (RTE_CONST_I_C02_TXMTID_SBW_RQ_SCCM_SCCM != 1u)
#    error "Enumeration constant <I_C02_TXMTID_SBW_RQ_SCCM_SCCM> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_TXMTID_SBW_RQ_SCCM_SCCM (1u)
#   define I_C02_TXMTID_SBW_RQ_SCCM_SCCM ((c02_TxmtId_SBW_Rq_SCCM)1u)
#  endif
#  if (defined RTE_CONST_I_C02_TXMTID_SBW_RQ_SCCM_NDEF2) || (defined I_C02_TXMTID_SBW_RQ_SCCM_NDEF2)
#   if (!defined RTE_CONST_I_C02_TXMTID_SBW_RQ_SCCM_NDEF2) || (RTE_CONST_I_C02_TXMTID_SBW_RQ_SCCM_NDEF2 != 2u)
#    error "Enumeration constant <I_C02_TXMTID_SBW_RQ_SCCM_NDEF2> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_TXMTID_SBW_RQ_SCCM_NDEF2 (2u)
#   define I_C02_TXMTID_SBW_RQ_SCCM_NDEF2 ((c02_TxmtId_SBW_Rq_SCCM)2u)
#  endif
#  if (defined RTE_CONST_I_C02_TXMTID_SBW_RQ_SCCM_NDEF3) || (defined I_C02_TXMTID_SBW_RQ_SCCM_NDEF3)
#   if (!defined RTE_CONST_I_C02_TXMTID_SBW_RQ_SCCM_NDEF3) || (RTE_CONST_I_C02_TXMTID_SBW_RQ_SCCM_NDEF3 != 3u)
#    error "Enumeration constant <I_C02_TXMTID_SBW_RQ_SCCM_NDEF3> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_TXMTID_SBW_RQ_SCCM_NDEF3 (3u)
#   define I_C02_TXMTID_SBW_RQ_SCCM_NDEF3 ((c02_TxmtId_SBW_Rq_SCCM)3u)
#  endif

#  define Rte_TypeDef_c02_UnitPress_Rq
typedef uint8 c02_UnitPress_Rq;
#  define c02_UnitPress_Rq_LowerLimit ((c02_UnitPress_Rq)0u)
#  define c02_UnitPress_Rq_UpperLimit ((c02_UnitPress_Rq)3u)
#  define Rte_InvalidValue_c02_UnitPress_Rq ((c02_UnitPress_Rq)3u)
#  if (defined RTE_CONST_I_C02_UNITPRESS_RQ_BAR) || (defined I_C02_UNITPRESS_RQ_BAR)
#   if (!defined RTE_CONST_I_C02_UNITPRESS_RQ_BAR) || (RTE_CONST_I_C02_UNITPRESS_RQ_BAR != 0u)
#    error "Enumeration constant <I_C02_UNITPRESS_RQ_BAR> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_UNITPRESS_RQ_BAR (0u)
#   define I_C02_UNITPRESS_RQ_BAR ((c02_UnitPress_Rq)0u)
#  endif
#  if (defined RTE_CONST_I_C02_UNITPRESS_RQ_PSI) || (defined I_C02_UNITPRESS_RQ_PSI)
#   if (!defined RTE_CONST_I_C02_UNITPRESS_RQ_PSI) || (RTE_CONST_I_C02_UNITPRESS_RQ_PSI != 1u)
#    error "Enumeration constant <I_C02_UNITPRESS_RQ_PSI> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_UNITPRESS_RQ_PSI (1u)
#   define I_C02_UNITPRESS_RQ_PSI ((c02_UnitPress_Rq)1u)
#  endif
#  if (defined RTE_CONST_I_C02_UNITPRESS_RQ_NDEF2) || (defined I_C02_UNITPRESS_RQ_NDEF2)
#   if (!defined RTE_CONST_I_C02_UNITPRESS_RQ_NDEF2) || (RTE_CONST_I_C02_UNITPRESS_RQ_NDEF2 != 2u)
#    error "Enumeration constant <I_C02_UNITPRESS_RQ_NDEF2> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_UNITPRESS_RQ_NDEF2 (2u)
#   define I_C02_UNITPRESS_RQ_NDEF2 ((c02_UnitPress_Rq)2u)
#  endif
#  if (defined RTE_CONST_I_C02_UNITPRESS_RQ_SNA) || (defined I_C02_UNITPRESS_RQ_SNA)
#   if (!defined RTE_CONST_I_C02_UNITPRESS_RQ_SNA) || (RTE_CONST_I_C02_UNITPRESS_RQ_SNA != 3u)
#    error "Enumeration constant <I_C02_UNITPRESS_RQ_SNA> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_UNITPRESS_RQ_SNA (3u)
#   define I_C02_UNITPRESS_RQ_SNA ((c02_UnitPress_Rq)3u)
#  endif

#  define Rte_TypeDef_c02_UnitTemp_Rq
typedef uint8 c02_UnitTemp_Rq;
#  define c02_UnitTemp_Rq_LowerLimit ((c02_UnitTemp_Rq)0u)
#  define c02_UnitTemp_Rq_UpperLimit ((c02_UnitTemp_Rq)3u)
#  define Rte_InvalidValue_c02_UnitTemp_Rq ((c02_UnitTemp_Rq)3u)
#  if (defined RTE_CONST_I_C02_UNITTEMP_RQ_CELSIUS) || (defined I_C02_UNITTEMP_RQ_CELSIUS)
#   if (!defined RTE_CONST_I_C02_UNITTEMP_RQ_CELSIUS) || (RTE_CONST_I_C02_UNITTEMP_RQ_CELSIUS != 0u)
#    error "Enumeration constant <I_C02_UNITTEMP_RQ_CELSIUS> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_UNITTEMP_RQ_CELSIUS (0u)
#   define I_C02_UNITTEMP_RQ_CELSIUS ((c02_UnitTemp_Rq)0u)
#  endif
#  if (defined RTE_CONST_I_C02_UNITTEMP_RQ_FAHRENHEIT) || (defined I_C02_UNITTEMP_RQ_FAHRENHEIT)
#   if (!defined RTE_CONST_I_C02_UNITTEMP_RQ_FAHRENHEIT) || (RTE_CONST_I_C02_UNITTEMP_RQ_FAHRENHEIT != 1u)
#    error "Enumeration constant <I_C02_UNITTEMP_RQ_FAHRENHEIT> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_UNITTEMP_RQ_FAHRENHEIT (1u)
#   define I_C02_UNITTEMP_RQ_FAHRENHEIT ((c02_UnitTemp_Rq)1u)
#  endif
#  if (defined RTE_CONST_I_C02_UNITTEMP_RQ_NDEF2) || (defined I_C02_UNITTEMP_RQ_NDEF2)
#   if (!defined RTE_CONST_I_C02_UNITTEMP_RQ_NDEF2) || (RTE_CONST_I_C02_UNITTEMP_RQ_NDEF2 != 2u)
#    error "Enumeration constant <I_C02_UNITTEMP_RQ_NDEF2> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_UNITTEMP_RQ_NDEF2 (2u)
#   define I_C02_UNITTEMP_RQ_NDEF2 ((c02_UnitTemp_Rq)2u)
#  endif
#  if (defined RTE_CONST_I_C02_UNITTEMP_RQ_SNA) || (defined I_C02_UNITTEMP_RQ_SNA)
#   if (!defined RTE_CONST_I_C02_UNITTEMP_RQ_SNA) || (RTE_CONST_I_C02_UNITTEMP_RQ_SNA != 3u)
#    error "Enumeration constant <I_C02_UNITTEMP_RQ_SNA> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_UNITTEMP_RQ_SNA (3u)
#   define I_C02_UNITTEMP_RQ_SNA ((c02_UnitTemp_Rq)3u)
#  endif

#  define Rte_TypeDef_c02_VehLoad_Stat
typedef uint8 c02_VehLoad_Stat;
#  define c02_VehLoad_Stat_LowerLimit ((c02_VehLoad_Stat)0u)
#  define c02_VehLoad_Stat_UpperLimit ((c02_VehLoad_Stat)3u)
#  define Rte_InvalidValue_c02_VehLoad_Stat ((c02_VehLoad_Stat)3u)
#  if (defined RTE_CONST_I_C02_VEHLOAD_STAT_LOAD_STAT0) || (defined I_C02_VEHLOAD_STAT_LOAD_STAT0)
#   if (!defined RTE_CONST_I_C02_VEHLOAD_STAT_LOAD_STAT0) || (RTE_CONST_I_C02_VEHLOAD_STAT_LOAD_STAT0 != 0u)
#    error "Enumeration constant <I_C02_VEHLOAD_STAT_LOAD_STAT0> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_VEHLOAD_STAT_LOAD_STAT0 (0u)
#   define I_C02_VEHLOAD_STAT_LOAD_STAT0 ((c02_VehLoad_Stat)0u)
#  endif
#  if (defined RTE_CONST_I_C02_VEHLOAD_STAT_LOAD_STAT1) || (defined I_C02_VEHLOAD_STAT_LOAD_STAT1)
#   if (!defined RTE_CONST_I_C02_VEHLOAD_STAT_LOAD_STAT1) || (RTE_CONST_I_C02_VEHLOAD_STAT_LOAD_STAT1 != 1u)
#    error "Enumeration constant <I_C02_VEHLOAD_STAT_LOAD_STAT1> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_VEHLOAD_STAT_LOAD_STAT1 (1u)
#   define I_C02_VEHLOAD_STAT_LOAD_STAT1 ((c02_VehLoad_Stat)1u)
#  endif
#  if (defined RTE_CONST_I_C02_VEHLOAD_STAT_LOAD_STAT2) || (defined I_C02_VEHLOAD_STAT_LOAD_STAT2)
#   if (!defined RTE_CONST_I_C02_VEHLOAD_STAT_LOAD_STAT2) || (RTE_CONST_I_C02_VEHLOAD_STAT_LOAD_STAT2 != 2u)
#    error "Enumeration constant <I_C02_VEHLOAD_STAT_LOAD_STAT2> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_VEHLOAD_STAT_LOAD_STAT2 (2u)
#   define I_C02_VEHLOAD_STAT_LOAD_STAT2 ((c02_VehLoad_Stat)2u)
#  endif
#  if (defined RTE_CONST_I_C02_VEHLOAD_STAT_SNA) || (defined I_C02_VEHLOAD_STAT_SNA)
#   if (!defined RTE_CONST_I_C02_VEHLOAD_STAT_SNA) || (RTE_CONST_I_C02_VEHLOAD_STAT_SNA != 3u)
#    error "Enumeration constant <I_C02_VEHLOAD_STAT_SNA> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_VEHLOAD_STAT_SNA (3u)
#   define I_C02_VEHLOAD_STAT_SNA ((c02_VehLoad_Stat)3u)
#  endif

#  define Rte_TypeDef_c02_VnTmr
typedef uint8 c02_VnTmr;
#  define c02_VnTmr_LowerLimit ((c02_VnTmr)0u)
#  define c02_VnTmr_UpperLimit ((c02_VnTmr)3u)
#  define Rte_InvalidValue_c02_VnTmr ((c02_VnTmr)3u)
#  if (defined RTE_CONST_I_C02_VNTMR_NO_RQ) || (defined I_C02_VNTMR_NO_RQ)
#   if (!defined RTE_CONST_I_C02_VNTMR_NO_RQ) || (RTE_CONST_I_C02_VNTMR_NO_RQ != 0u)
#    error "Enumeration constant <I_C02_VNTMR_NO_RQ> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_VNTMR_NO_RQ (0u)
#   define I_C02_VNTMR_NO_RQ ((c02_VnTmr)0u)
#  endif
#  if (defined RTE_CONST_I_C02_VNTMR_CANCEL_TMR) || (defined I_C02_VNTMR_CANCEL_TMR)
#   if (!defined RTE_CONST_I_C02_VNTMR_CANCEL_TMR) || (RTE_CONST_I_C02_VNTMR_CANCEL_TMR != 1u)
#    error "Enumeration constant <I_C02_VNTMR_CANCEL_TMR> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_VNTMR_CANCEL_TMR (1u)
#   define I_C02_VNTMR_CANCEL_TMR ((c02_VnTmr)1u)
#  endif
#  if (defined RTE_CONST_I_C02_VNTMR_TMR_RQ) || (defined I_C02_VNTMR_TMR_RQ)
#   if (!defined RTE_CONST_I_C02_VNTMR_TMR_RQ) || (RTE_CONST_I_C02_VNTMR_TMR_RQ != 2u)
#    error "Enumeration constant <I_C02_VNTMR_TMR_RQ> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_VNTMR_TMR_RQ (2u)
#   define I_C02_VNTMR_TMR_RQ ((c02_VnTmr)2u)
#  endif
#  if (defined RTE_CONST_I_C02_VNTMR_SNA) || (defined I_C02_VNTMR_SNA)
#   if (!defined RTE_CONST_I_C02_VNTMR_SNA) || (RTE_CONST_I_C02_VNTMR_SNA != 3u)
#    error "Enumeration constant <I_C02_VNTMR_SNA> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_VNTMR_SNA (3u)
#   define I_C02_VNTMR_SNA ((c02_VnTmr)3u)
#  endif

#  define Rte_TypeDef_c02_Vprzr_DryVnTmr_Stat
typedef uint8 c02_Vprzr_DryVnTmr_Stat;
#  define c02_Vprzr_DryVnTmr_Stat_LowerLimit ((c02_Vprzr_DryVnTmr_Stat)0u)
#  define c02_Vprzr_DryVnTmr_Stat_UpperLimit ((c02_Vprzr_DryVnTmr_Stat)3u)
#  define Rte_InvalidValue_c02_Vprzr_DryVnTmr_Stat ((c02_Vprzr_DryVnTmr_Stat)3u)
#  if (defined RTE_CONST_I_C02_VPRZR_DRYVNTMR_STAT_INACTV) || (defined I_C02_VPRZR_DRYVNTMR_STAT_INACTV)
#   if (!defined RTE_CONST_I_C02_VPRZR_DRYVNTMR_STAT_INACTV) || (RTE_CONST_I_C02_VPRZR_DRYVNTMR_STAT_INACTV != 0u)
#    error "Enumeration constant <I_C02_VPRZR_DRYVNTMR_STAT_INACTV> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_VPRZR_DRYVNTMR_STAT_INACTV (0u)
#   define I_C02_VPRZR_DRYVNTMR_STAT_INACTV ((c02_Vprzr_DryVnTmr_Stat)0u)
#  endif
#  if (defined RTE_CONST_I_C02_VPRZR_DRYVNTMR_STAT_ACTV) || (defined I_C02_VPRZR_DRYVNTMR_STAT_ACTV)
#   if (!defined RTE_CONST_I_C02_VPRZR_DRYVNTMR_STAT_ACTV) || (RTE_CONST_I_C02_VPRZR_DRYVNTMR_STAT_ACTV != 1u)
#    error "Enumeration constant <I_C02_VPRZR_DRYVNTMR_STAT_ACTV> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_VPRZR_DRYVNTMR_STAT_ACTV (1u)
#   define I_C02_VPRZR_DRYVNTMR_STAT_ACTV ((c02_Vprzr_DryVnTmr_Stat)1u)
#  endif
#  if (defined RTE_CONST_I_C02_VPRZR_DRYVNTMR_STAT_EXPIRED) || (defined I_C02_VPRZR_DRYVNTMR_STAT_EXPIRED)
#   if (!defined RTE_CONST_I_C02_VPRZR_DRYVNTMR_STAT_EXPIRED) || (RTE_CONST_I_C02_VPRZR_DRYVNTMR_STAT_EXPIRED != 2u)
#    error "Enumeration constant <I_C02_VPRZR_DRYVNTMR_STAT_EXPIRED> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_VPRZR_DRYVNTMR_STAT_EXPIRED (2u)
#   define I_C02_VPRZR_DRYVNTMR_STAT_EXPIRED ((c02_Vprzr_DryVnTmr_Stat)2u)
#  endif
#  if (defined RTE_CONST_I_C02_VPRZR_DRYVNTMR_STAT_SNA) || (defined I_C02_VPRZR_DRYVNTMR_STAT_SNA)
#   if (!defined RTE_CONST_I_C02_VPRZR_DRYVNTMR_STAT_SNA) || (RTE_CONST_I_C02_VPRZR_DRYVNTMR_STAT_SNA != 3u)
#    error "Enumeration constant <I_C02_VPRZR_DRYVNTMR_STAT_SNA> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_VPRZR_DRYVNTMR_STAT_SNA (3u)
#   define I_C02_VPRZR_DRYVNTMR_STAT_SNA ((c02_Vprzr_DryVnTmr_Stat)3u)
#  endif

#  define Rte_TypeDef_c02_WprWash_R_Sw_Posn_V2
typedef uint8 c02_WprWash_R_Sw_Posn_V2;
#  define c02_WprWash_R_Sw_Posn_V2_LowerLimit ((c02_WprWash_R_Sw_Posn_V2)0u)
#  define c02_WprWash_R_Sw_Posn_V2_UpperLimit ((c02_WprWash_R_Sw_Posn_V2)3u)
#  define Rte_InvalidValue_c02_WprWash_R_Sw_Posn_V2 ((c02_WprWash_R_Sw_Posn_V2)3u)
#  if (defined RTE_CONST_I_C02_WPRWASH_R_SW_POSN_V2_OFF) || (defined I_C02_WPRWASH_R_SW_POSN_V2_OFF)
#   if (!defined RTE_CONST_I_C02_WPRWASH_R_SW_POSN_V2_OFF) || (RTE_CONST_I_C02_WPRWASH_R_SW_POSN_V2_OFF != 0u)
#    error "Enumeration constant <I_C02_WPRWASH_R_SW_POSN_V2_OFF> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_WPRWASH_R_SW_POSN_V2_OFF (0u)
#   define I_C02_WPRWASH_R_SW_POSN_V2_OFF ((c02_WprWash_R_Sw_Posn_V2)0u)
#  endif
#  if (defined RTE_CONST_I_C02_WPRWASH_R_SW_POSN_V2_INTERVAL) || (defined I_C02_WPRWASH_R_SW_POSN_V2_INTERVAL)
#   if (!defined RTE_CONST_I_C02_WPRWASH_R_SW_POSN_V2_INTERVAL) || (RTE_CONST_I_C02_WPRWASH_R_SW_POSN_V2_INTERVAL != 1u)
#    error "Enumeration constant <I_C02_WPRWASH_R_SW_POSN_V2_INTERVAL> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_WPRWASH_R_SW_POSN_V2_INTERVAL (1u)
#   define I_C02_WPRWASH_R_SW_POSN_V2_INTERVAL ((c02_WprWash_R_Sw_Posn_V2)1u)
#  endif
#  if (defined RTE_CONST_I_C02_WPRWASH_R_SW_POSN_V2_WASH) || (defined I_C02_WPRWASH_R_SW_POSN_V2_WASH)
#   if (!defined RTE_CONST_I_C02_WPRWASH_R_SW_POSN_V2_WASH) || (RTE_CONST_I_C02_WPRWASH_R_SW_POSN_V2_WASH != 2u)
#    error "Enumeration constant <I_C02_WPRWASH_R_SW_POSN_V2_WASH> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_WPRWASH_R_SW_POSN_V2_WASH (2u)
#   define I_C02_WPRWASH_R_SW_POSN_V2_WASH ((c02_WprWash_R_Sw_Posn_V2)2u)
#  endif
#  if (defined RTE_CONST_I_C02_WPRWASH_R_SW_POSN_V2_SNA) || (defined I_C02_WPRWASH_R_SW_POSN_V2_SNA)
#   if (!defined RTE_CONST_I_C02_WPRWASH_R_SW_POSN_V2_SNA) || (RTE_CONST_I_C02_WPRWASH_R_SW_POSN_V2_SNA != 3u)
#    error "Enumeration constant <I_C02_WPRWASH_R_SW_POSN_V2_SNA> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C02_WPRWASH_R_SW_POSN_V2_SNA (3u)
#   define I_C02_WPRWASH_R_SW_POSN_V2_SNA ((c02_WprWash_R_Sw_Posn_V2)3u)
#  endif

#  define Rte_TypeDef_c03_AmbLgtZone
typedef uint8 c03_AmbLgtZone;
#  define c03_AmbLgtZone_LowerLimit ((c03_AmbLgtZone)0u)
#  define c03_AmbLgtZone_UpperLimit ((c03_AmbLgtZone)7u)
#  define Rte_InvalidValue_c03_AmbLgtZone ((c03_AmbLgtZone)7u)
#  if (defined RTE_CONST_I_C03_AMBLGTZONE_ALL) || (defined I_C03_AMBLGTZONE_ALL)
#   if (!defined RTE_CONST_I_C03_AMBLGTZONE_ALL) || (RTE_CONST_I_C03_AMBLGTZONE_ALL != 0u)
#    error "Enumeration constant <I_C03_AMBLGTZONE_ALL> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C03_AMBLGTZONE_ALL (0u)
#   define I_C03_AMBLGTZONE_ALL ((c03_AmbLgtZone)0u)
#  endif
#  if (defined RTE_CONST_I_C03_AMBLGTZONE_FRONT) || (defined I_C03_AMBLGTZONE_FRONT)
#   if (!defined RTE_CONST_I_C03_AMBLGTZONE_FRONT) || (RTE_CONST_I_C03_AMBLGTZONE_FRONT != 1u)
#    error "Enumeration constant <I_C03_AMBLGTZONE_FRONT> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C03_AMBLGTZONE_FRONT (1u)
#   define I_C03_AMBLGTZONE_FRONT ((c03_AmbLgtZone)1u)
#  endif
#  if (defined RTE_CONST_I_C03_AMBLGTZONE_REAR) || (defined I_C03_AMBLGTZONE_REAR)
#   if (!defined RTE_CONST_I_C03_AMBLGTZONE_REAR) || (RTE_CONST_I_C03_AMBLGTZONE_REAR != 2u)
#    error "Enumeration constant <I_C03_AMBLGTZONE_REAR> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C03_AMBLGTZONE_REAR (2u)
#   define I_C03_AMBLGTZONE_REAR ((c03_AmbLgtZone)2u)
#  endif
#  if (defined RTE_CONST_I_C03_AMBLGTZONE_DISPLAY) || (defined I_C03_AMBLGTZONE_DISPLAY)
#   if (!defined RTE_CONST_I_C03_AMBLGTZONE_DISPLAY) || (RTE_CONST_I_C03_AMBLGTZONE_DISPLAY != 3u)
#    error "Enumeration constant <I_C03_AMBLGTZONE_DISPLAY> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C03_AMBLGTZONE_DISPLAY (3u)
#   define I_C03_AMBLGTZONE_DISPLAY ((c03_AmbLgtZone)3u)
#  endif
#  if (defined RTE_CONST_I_C03_AMBLGTZONE_SNA) || (defined I_C03_AMBLGTZONE_SNA)
#   if (!defined RTE_CONST_I_C03_AMBLGTZONE_SNA) || (RTE_CONST_I_C03_AMBLGTZONE_SNA != 7u)
#    error "Enumeration constant <I_C03_AMBLGTZONE_SNA> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C03_AMBLGTZONE_SNA (7u)
#   define I_C03_AMBLGTZONE_SNA ((c03_AmbLgtZone)7u)
#  endif

#  define Rte_TypeDef_c03_DTQ_FltMsgDisp_Rq
typedef uint8 c03_DTQ_FltMsgDisp_Rq;
#  define c03_DTQ_FltMsgDisp_Rq_LowerLimit ((c03_DTQ_FltMsgDisp_Rq)0u)
#  define c03_DTQ_FltMsgDisp_Rq_UpperLimit ((c03_DTQ_FltMsgDisp_Rq)7u)
#  define Rte_InvalidValue_c03_DTQ_FltMsgDisp_Rq ((c03_DTQ_FltMsgDisp_Rq)7u)
#  if (defined RTE_CONST_I_C03_DTQ_FLTMSGDISP_RQ_IDLE) || (defined I_C03_DTQ_FLTMSGDISP_RQ_IDLE)
#   if (!defined RTE_CONST_I_C03_DTQ_FLTMSGDISP_RQ_IDLE) || (RTE_CONST_I_C03_DTQ_FLTMSGDISP_RQ_IDLE != 0u)
#    error "Enumeration constant <I_C03_DTQ_FLTMSGDISP_RQ_IDLE> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C03_DTQ_FLTMSGDISP_RQ_IDLE (0u)
#   define I_C03_DTQ_FLTMSGDISP_RQ_IDLE ((c03_DTQ_FltMsgDisp_Rq)0u)
#  endif
#  if (defined RTE_CONST_I_C03_DTQ_FLTMSGDISP_RQ_DTQ_TMP_OFF) || (defined I_C03_DTQ_FLTMSGDISP_RQ_DTQ_TMP_OFF)
#   if (!defined RTE_CONST_I_C03_DTQ_FLTMSGDISP_RQ_DTQ_TMP_OFF) || (RTE_CONST_I_C03_DTQ_FLTMSGDISP_RQ_DTQ_TMP_OFF != 1u)
#    error "Enumeration constant <I_C03_DTQ_FLTMSGDISP_RQ_DTQ_TMP_OFF> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C03_DTQ_FLTMSGDISP_RQ_DTQ_TMP_OFF (1u)
#   define I_C03_DTQ_FLTMSGDISP_RQ_DTQ_TMP_OFF ((c03_DTQ_FltMsgDisp_Rq)1u)
#  endif
#  if (defined RTE_CONST_I_C03_DTQ_FLTMSGDISP_RQ_DTQ_DFCTV) || (defined I_C03_DTQ_FLTMSGDISP_RQ_DTQ_DFCTV)
#   if (!defined RTE_CONST_I_C03_DTQ_FLTMSGDISP_RQ_DTQ_DFCTV) || (RTE_CONST_I_C03_DTQ_FLTMSGDISP_RQ_DTQ_DFCTV != 2u)
#    error "Enumeration constant <I_C03_DTQ_FLTMSGDISP_RQ_DTQ_DFCTV> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C03_DTQ_FLTMSGDISP_RQ_DTQ_DFCTV (2u)
#   define I_C03_DTQ_FLTMSGDISP_RQ_DTQ_DFCTV ((c03_DTQ_FltMsgDisp_Rq)2u)
#  endif
#  if (defined RTE_CONST_I_C03_DTQ_FLTMSGDISP_RQ_SNA) || (defined I_C03_DTQ_FLTMSGDISP_RQ_SNA)
#   if (!defined RTE_CONST_I_C03_DTQ_FLTMSGDISP_RQ_SNA) || (RTE_CONST_I_C03_DTQ_FLTMSGDISP_RQ_SNA != 7u)
#    error "Enumeration constant <I_C03_DTQ_FLTMSGDISP_RQ_SNA> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C03_DTQ_FLTMSGDISP_RQ_SNA (7u)
#   define I_C03_DTQ_FLTMSGDISP_RQ_SNA ((c03_DTQ_FltMsgDisp_Rq)7u)
#  endif

#  define Rte_TypeDef_c03_DTQ_MsgDisp_Rq_V2
typedef uint8 c03_DTQ_MsgDisp_Rq_V2;
#  define c03_DTQ_MsgDisp_Rq_V2_LowerLimit ((c03_DTQ_MsgDisp_Rq_V2)0u)
#  define c03_DTQ_MsgDisp_Rq_V2_UpperLimit ((c03_DTQ_MsgDisp_Rq_V2)7u)
#  define Rte_InvalidValue_c03_DTQ_MsgDisp_Rq_V2 ((c03_DTQ_MsgDisp_Rq_V2)7u)
#  if (defined RTE_CONST_I_C03_DTQ_MSGDISP_RQ_V2_IDLE) || (defined I_C03_DTQ_MSGDISP_RQ_V2_IDLE)
#   if (!defined RTE_CONST_I_C03_DTQ_MSGDISP_RQ_V2_IDLE) || (RTE_CONST_I_C03_DTQ_MSGDISP_RQ_V2_IDLE != 0u)
#    error "Enumeration constant <I_C03_DTQ_MSGDISP_RQ_V2_IDLE> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C03_DTQ_MSGDISP_RQ_V2_IDLE (0u)
#   define I_C03_DTQ_MSGDISP_RQ_V2_IDLE ((c03_DTQ_MsgDisp_Rq_V2)0u)
#  endif
#  if (defined RTE_CONST_I_C03_DTQ_MSGDISP_RQ_V2_HANDS_OFF) || (defined I_C03_DTQ_MSGDISP_RQ_V2_HANDS_OFF)
#   if (!defined RTE_CONST_I_C03_DTQ_MSGDISP_RQ_V2_HANDS_OFF) || (RTE_CONST_I_C03_DTQ_MSGDISP_RQ_V2_HANDS_OFF != 1u)
#    error "Enumeration constant <I_C03_DTQ_MSGDISP_RQ_V2_HANDS_OFF> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C03_DTQ_MSGDISP_RQ_V2_HANDS_OFF (1u)
#   define I_C03_DTQ_MSGDISP_RQ_V2_HANDS_OFF ((c03_DTQ_MsgDisp_Rq_V2)1u)
#  endif
#  if (defined RTE_CONST_I_C03_DTQ_MSGDISP_RQ_V2_DTQ_PSV) || (defined I_C03_DTQ_MSGDISP_RQ_V2_DTQ_PSV)
#   if (!defined RTE_CONST_I_C03_DTQ_MSGDISP_RQ_V2_DTQ_PSV) || (RTE_CONST_I_C03_DTQ_MSGDISP_RQ_V2_DTQ_PSV != 2u)
#    error "Enumeration constant <I_C03_DTQ_MSGDISP_RQ_V2_DTQ_PSV> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C03_DTQ_MSGDISP_RQ_V2_DTQ_PSV (2u)
#   define I_C03_DTQ_MSGDISP_RQ_V2_DTQ_PSV ((c03_DTQ_MsgDisp_Rq_V2)2u)
#  endif
#  if (defined RTE_CONST_I_C03_DTQ_MSGDISP_RQ_V2_DRV_CTRL) || (defined I_C03_DTQ_MSGDISP_RQ_V2_DRV_CTRL)
#   if (!defined RTE_CONST_I_C03_DTQ_MSGDISP_RQ_V2_DRV_CTRL) || (RTE_CONST_I_C03_DTQ_MSGDISP_RQ_V2_DRV_CTRL != 3u)
#    error "Enumeration constant <I_C03_DTQ_MSGDISP_RQ_V2_DRV_CTRL> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C03_DTQ_MSGDISP_RQ_V2_DRV_CTRL (3u)
#   define I_C03_DTQ_MSGDISP_RQ_V2_DRV_CTRL ((c03_DTQ_MsgDisp_Rq_V2)3u)
#  endif
#  if (defined RTE_CONST_I_C03_DTQ_MSGDISP_RQ_V2_SNA) || (defined I_C03_DTQ_MSGDISP_RQ_V2_SNA)
#   if (!defined RTE_CONST_I_C03_DTQ_MSGDISP_RQ_V2_SNA) || (RTE_CONST_I_C03_DTQ_MSGDISP_RQ_V2_SNA != 7u)
#    error "Enumeration constant <I_C03_DTQ_MSGDISP_RQ_V2_SNA> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C03_DTQ_MSGDISP_RQ_V2_SNA (7u)
#   define I_C03_DTQ_MSGDISP_RQ_V2_SNA ((c03_DTQ_MsgDisp_Rq_V2)7u)
#  endif

#  define Rte_TypeDef_c03_IrLmp_Stat
typedef uint8 c03_IrLmp_Stat;
#  define c03_IrLmp_Stat_LowerLimit ((c03_IrLmp_Stat)0u)
#  define c03_IrLmp_Stat_UpperLimit ((c03_IrLmp_Stat)7u)
#  define Rte_InvalidValue_c03_IrLmp_Stat ((c03_IrLmp_Stat)7u)
#  if (defined RTE_CONST_I_C03_IRLMP_STAT_IR_OFF) || (defined I_C03_IRLMP_STAT_IR_OFF)
#   if (!defined RTE_CONST_I_C03_IRLMP_STAT_IR_OFF) || (RTE_CONST_I_C03_IRLMP_STAT_IR_OFF != 0u)
#    error "Enumeration constant <I_C03_IRLMP_STAT_IR_OFF> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C03_IRLMP_STAT_IR_OFF (0u)
#   define I_C03_IRLMP_STAT_IR_OFF ((c03_IrLmp_Stat)0u)
#  endif
#  if (defined RTE_CONST_I_C03_IRLMP_STAT_IR_RDY) || (defined I_C03_IRLMP_STAT_IR_RDY)
#   if (!defined RTE_CONST_I_C03_IRLMP_STAT_IR_RDY) || (RTE_CONST_I_C03_IRLMP_STAT_IR_RDY != 1u)
#    error "Enumeration constant <I_C03_IRLMP_STAT_IR_RDY> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C03_IRLMP_STAT_IR_RDY (1u)
#   define I_C03_IRLMP_STAT_IR_RDY ((c03_IrLmp_Stat)1u)
#  endif
#  if (defined RTE_CONST_I_C03_IRLMP_STAT_IR_ON) || (defined I_C03_IRLMP_STAT_IR_ON)
#   if (!defined RTE_CONST_I_C03_IRLMP_STAT_IR_ON) || (RTE_CONST_I_C03_IRLMP_STAT_IR_ON != 2u)
#    error "Enumeration constant <I_C03_IRLMP_STAT_IR_ON> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C03_IRLMP_STAT_IR_ON (2u)
#   define I_C03_IRLMP_STAT_IR_ON ((c03_IrLmp_Stat)2u)
#  endif
#  if (defined RTE_CONST_I_C03_IRLMP_STAT_IR_FLT) || (defined I_C03_IRLMP_STAT_IR_FLT)
#   if (!defined RTE_CONST_I_C03_IRLMP_STAT_IR_FLT) || (RTE_CONST_I_C03_IRLMP_STAT_IR_FLT != 3u)
#    error "Enumeration constant <I_C03_IRLMP_STAT_IR_FLT> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C03_IRLMP_STAT_IR_FLT (3u)
#   define I_C03_IRLMP_STAT_IR_FLT ((c03_IrLmp_Stat)3u)
#  endif
#  if (defined RTE_CONST_I_C03_IRLMP_STAT_LOBM_FLT) || (defined I_C03_IRLMP_STAT_LOBM_FLT)
#   if (!defined RTE_CONST_I_C03_IRLMP_STAT_LOBM_FLT) || (RTE_CONST_I_C03_IRLMP_STAT_LOBM_FLT != 4u)
#    error "Enumeration constant <I_C03_IRLMP_STAT_LOBM_FLT> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C03_IRLMP_STAT_LOBM_FLT (4u)
#   define I_C03_IRLMP_STAT_LOBM_FLT ((c03_IrLmp_Stat)4u)
#  endif
#  if (defined RTE_CONST_I_C03_IRLMP_STAT_IR_LOBM_FLT) || (defined I_C03_IRLMP_STAT_IR_LOBM_FLT)
#   if (!defined RTE_CONST_I_C03_IRLMP_STAT_IR_LOBM_FLT) || (RTE_CONST_I_C03_IRLMP_STAT_IR_LOBM_FLT != 5u)
#    error "Enumeration constant <I_C03_IRLMP_STAT_IR_LOBM_FLT> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C03_IRLMP_STAT_IR_LOBM_FLT (5u)
#   define I_C03_IRLMP_STAT_IR_LOBM_FLT ((c03_IrLmp_Stat)5u)
#  endif
#  if (defined RTE_CONST_I_C03_IRLMP_STAT_NDEF6) || (defined I_C03_IRLMP_STAT_NDEF6)
#   if (!defined RTE_CONST_I_C03_IRLMP_STAT_NDEF6) || (RTE_CONST_I_C03_IRLMP_STAT_NDEF6 != 6u)
#    error "Enumeration constant <I_C03_IRLMP_STAT_NDEF6> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C03_IRLMP_STAT_NDEF6 (6u)
#   define I_C03_IRLMP_STAT_NDEF6 ((c03_IrLmp_Stat)6u)
#  endif
#  if (defined RTE_CONST_I_C03_IRLMP_STAT_SNA) || (defined I_C03_IRLMP_STAT_SNA)
#   if (!defined RTE_CONST_I_C03_IRLMP_STAT_SNA) || (RTE_CONST_I_C03_IRLMP_STAT_SNA != 7u)
#    error "Enumeration constant <I_C03_IRLMP_STAT_SNA> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C03_IRLMP_STAT_SNA (7u)
#   define I_C03_IRLMP_STAT_SNA ((c03_IrLmp_Stat)7u)
#  endif

#  define Rte_TypeDef_c03_LAM_Stat
typedef uint8 c03_LAM_Stat;
#  define c03_LAM_Stat_LowerLimit ((c03_LAM_Stat)0u)
#  define c03_LAM_Stat_UpperLimit ((c03_LAM_Stat)7u)
#  define Rte_InvalidValue_c03_LAM_Stat ((c03_LAM_Stat)7u)
#  if (defined RTE_CONST_I_C03_LAM_STAT_OFF) || (defined I_C03_LAM_STAT_OFF)
#   if (!defined RTE_CONST_I_C03_LAM_STAT_OFF) || (RTE_CONST_I_C03_LAM_STAT_OFF != 0u)
#    error "Enumeration constant <I_C03_LAM_STAT_OFF> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C03_LAM_STAT_OFF (0u)
#   define I_C03_LAM_STAT_OFF ((c03_LAM_Stat)0u)
#  endif
#  if (defined RTE_CONST_I_C03_LAM_STAT_ON) || (defined I_C03_LAM_STAT_ON)
#   if (!defined RTE_CONST_I_C03_LAM_STAT_ON) || (RTE_CONST_I_C03_LAM_STAT_ON != 1u)
#    error "Enumeration constant <I_C03_LAM_STAT_ON> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C03_LAM_STAT_ON (1u)
#   define I_C03_LAM_STAT_ON ((c03_LAM_Stat)1u)
#  endif
#  if (defined RTE_CONST_I_C03_LAM_STAT_OFF_FLT) || (defined I_C03_LAM_STAT_OFF_FLT)
#   if (!defined RTE_CONST_I_C03_LAM_STAT_OFF_FLT) || (RTE_CONST_I_C03_LAM_STAT_OFF_FLT != 2u)
#    error "Enumeration constant <I_C03_LAM_STAT_OFF_FLT> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C03_LAM_STAT_OFF_FLT (2u)
#   define I_C03_LAM_STAT_OFF_FLT ((c03_LAM_Stat)2u)
#  endif
#  if (defined RTE_CONST_I_C03_LAM_STAT_OFF_LIN) || (defined I_C03_LAM_STAT_OFF_LIN)
#   if (!defined RTE_CONST_I_C03_LAM_STAT_OFF_LIN) || (RTE_CONST_I_C03_LAM_STAT_OFF_LIN != 3u)
#    error "Enumeration constant <I_C03_LAM_STAT_OFF_LIN> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C03_LAM_STAT_OFF_LIN (3u)
#   define I_C03_LAM_STAT_OFF_LIN ((c03_LAM_Stat)3u)
#  endif
#  if (defined RTE_CONST_I_C03_LAM_STAT_NDEF4) || (defined I_C03_LAM_STAT_NDEF4)
#   if (!defined RTE_CONST_I_C03_LAM_STAT_NDEF4) || (RTE_CONST_I_C03_LAM_STAT_NDEF4 != 4u)
#    error "Enumeration constant <I_C03_LAM_STAT_NDEF4> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C03_LAM_STAT_NDEF4 (4u)
#   define I_C03_LAM_STAT_NDEF4 ((c03_LAM_Stat)4u)
#  endif
#  if (defined RTE_CONST_I_C03_LAM_STAT_NDEF5) || (defined I_C03_LAM_STAT_NDEF5)
#   if (!defined RTE_CONST_I_C03_LAM_STAT_NDEF5) || (RTE_CONST_I_C03_LAM_STAT_NDEF5 != 5u)
#    error "Enumeration constant <I_C03_LAM_STAT_NDEF5> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C03_LAM_STAT_NDEF5 (5u)
#   define I_C03_LAM_STAT_NDEF5 ((c03_LAM_Stat)5u)
#  endif
#  if (defined RTE_CONST_I_C03_LAM_STAT_ON_DIAG_RUN) || (defined I_C03_LAM_STAT_ON_DIAG_RUN)
#   if (!defined RTE_CONST_I_C03_LAM_STAT_ON_DIAG_RUN) || (RTE_CONST_I_C03_LAM_STAT_ON_DIAG_RUN != 6u)
#    error "Enumeration constant <I_C03_LAM_STAT_ON_DIAG_RUN> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C03_LAM_STAT_ON_DIAG_RUN (6u)
#   define I_C03_LAM_STAT_ON_DIAG_RUN ((c03_LAM_Stat)6u)
#  endif
#  if (defined RTE_CONST_I_C03_LAM_STAT_SNA) || (defined I_C03_LAM_STAT_SNA)
#   if (!defined RTE_CONST_I_C03_LAM_STAT_SNA) || (RTE_CONST_I_C03_LAM_STAT_SNA != 7u)
#    error "Enumeration constant <I_C03_LAM_STAT_SNA> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C03_LAM_STAT_SNA (7u)
#   define I_C03_LAM_STAT_SNA ((c03_LAM_Stat)7u)
#  endif

#  define Rte_TypeDef_c03_LDC_CMS_Stat
typedef uint8 c03_LDC_CMS_Stat;
#  define c03_LDC_CMS_Stat_LowerLimit ((c03_LDC_CMS_Stat)0u)
#  define c03_LDC_CMS_Stat_UpperLimit ((c03_LDC_CMS_Stat)7u)
#  define Rte_InvalidValue_c03_LDC_CMS_Stat ((c03_LDC_CMS_Stat)7u)
#  if (defined RTE_CONST_I_C03_LDC_CMS_STAT_CMS_OFF) || (defined I_C03_LDC_CMS_STAT_CMS_OFF)
#   if (!defined RTE_CONST_I_C03_LDC_CMS_STAT_CMS_OFF) || (RTE_CONST_I_C03_LDC_CMS_STAT_CMS_OFF != 0u)
#    error "Enumeration constant <I_C03_LDC_CMS_STAT_CMS_OFF> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C03_LDC_CMS_STAT_CMS_OFF (0u)
#   define I_C03_LDC_CMS_STAT_CMS_OFF ((c03_LDC_CMS_Stat)0u)
#  endif
#  if (defined RTE_CONST_I_C03_LDC_CMS_STAT_CMS_ON) || (defined I_C03_LDC_CMS_STAT_CMS_ON)
#   if (!defined RTE_CONST_I_C03_LDC_CMS_STAT_CMS_ON) || (RTE_CONST_I_C03_LDC_CMS_STAT_CMS_ON != 1u)
#    error "Enumeration constant <I_C03_LDC_CMS_STAT_CMS_ON> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C03_LDC_CMS_STAT_CMS_ON (1u)
#   define I_C03_LDC_CMS_STAT_CMS_ON ((c03_LDC_CMS_Stat)1u)
#  endif
#  if (defined RTE_CONST_I_C03_LDC_CMS_STAT_CMS_DEF) || (defined I_C03_LDC_CMS_STAT_CMS_DEF)
#   if (!defined RTE_CONST_I_C03_LDC_CMS_STAT_CMS_DEF) || (RTE_CONST_I_C03_LDC_CMS_STAT_CMS_DEF != 2u)
#    error "Enumeration constant <I_C03_LDC_CMS_STAT_CMS_DEF> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C03_LDC_CMS_STAT_CMS_DEF (2u)
#   define I_C03_LDC_CMS_STAT_CMS_DEF ((c03_LDC_CMS_Stat)2u)
#  endif
#  if (defined RTE_CONST_I_C03_LDC_CMS_STAT_CMS_OFF_GPS) || (defined I_C03_LDC_CMS_STAT_CMS_OFF_GPS)
#   if (!defined RTE_CONST_I_C03_LDC_CMS_STAT_CMS_OFF_GPS) || (RTE_CONST_I_C03_LDC_CMS_STAT_CMS_OFF_GPS != 3u)
#    error "Enumeration constant <I_C03_LDC_CMS_STAT_CMS_OFF_GPS> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C03_LDC_CMS_STAT_CMS_OFF_GPS (3u)
#   define I_C03_LDC_CMS_STAT_CMS_OFF_GPS ((c03_LDC_CMS_Stat)3u)
#  endif
#  if (defined RTE_CONST_I_C03_LDC_CMS_STAT_CMS_OFF_RADAR) || (defined I_C03_LDC_CMS_STAT_CMS_OFF_RADAR)
#   if (!defined RTE_CONST_I_C03_LDC_CMS_STAT_CMS_OFF_RADAR) || (RTE_CONST_I_C03_LDC_CMS_STAT_CMS_OFF_RADAR != 4u)
#    error "Enumeration constant <I_C03_LDC_CMS_STAT_CMS_OFF_RADAR> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C03_LDC_CMS_STAT_CMS_OFF_RADAR (4u)
#   define I_C03_LDC_CMS_STAT_CMS_OFF_RADAR ((c03_LDC_CMS_Stat)4u)
#  endif
#  if (defined RTE_CONST_I_C03_LDC_CMS_STAT_SNA) || (defined I_C03_LDC_CMS_STAT_SNA)
#   if (!defined RTE_CONST_I_C03_LDC_CMS_STAT_SNA) || (RTE_CONST_I_C03_LDC_CMS_STAT_SNA != 7u)
#    error "Enumeration constant <I_C03_LDC_CMS_STAT_SNA> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C03_LDC_CMS_STAT_SNA (7u)
#   define I_C03_LDC_CMS_STAT_SNA ((c03_LDC_CMS_Stat)7u)
#  endif

#  define Rte_TypeDef_c03_LDC_DTR_MsgDisp_Rq
typedef uint8 c03_LDC_DTR_MsgDisp_Rq;
#  define c03_LDC_DTR_MsgDisp_Rq_LowerLimit ((c03_LDC_DTR_MsgDisp_Rq)0u)
#  define c03_LDC_DTR_MsgDisp_Rq_UpperLimit ((c03_LDC_DTR_MsgDisp_Rq)7u)
#  define Rte_InvalidValue_c03_LDC_DTR_MsgDisp_Rq ((c03_LDC_DTR_MsgDisp_Rq)7u)
#  if (defined RTE_CONST_I_C03_LDC_DTR_MSGDISP_RQ_IDLE) || (defined I_C03_LDC_DTR_MSGDISP_RQ_IDLE)
#   if (!defined RTE_CONST_I_C03_LDC_DTR_MSGDISP_RQ_IDLE) || (RTE_CONST_I_C03_LDC_DTR_MSGDISP_RQ_IDLE != 0u)
#    error "Enumeration constant <I_C03_LDC_DTR_MSGDISP_RQ_IDLE> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C03_LDC_DTR_MSGDISP_RQ_IDLE (0u)
#   define I_C03_LDC_DTR_MSGDISP_RQ_IDLE ((c03_LDC_DTR_MsgDisp_Rq)0u)
#  endif
#  if (defined RTE_CONST_I_C03_LDC_DTR_MSGDISP_RQ_MSG1_03F) || (defined I_C03_LDC_DTR_MSGDISP_RQ_MSG1_03F)
#   if (!defined RTE_CONST_I_C03_LDC_DTR_MSGDISP_RQ_MSG1_03F) || (RTE_CONST_I_C03_LDC_DTR_MSGDISP_RQ_MSG1_03F != 1u)
#    error "Enumeration constant <I_C03_LDC_DTR_MSGDISP_RQ_MSG1_03F> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C03_LDC_DTR_MSGDISP_RQ_MSG1_03F (1u)
#   define I_C03_LDC_DTR_MSGDISP_RQ_MSG1_03F ((c03_LDC_DTR_MsgDisp_Rq)1u)
#  endif
#  if (defined RTE_CONST_I_C03_LDC_DTR_MSGDISP_RQ_MSG2_0E5) || (defined I_C03_LDC_DTR_MSGDISP_RQ_MSG2_0E5)
#   if (!defined RTE_CONST_I_C03_LDC_DTR_MSGDISP_RQ_MSG2_0E5) || (RTE_CONST_I_C03_LDC_DTR_MSGDISP_RQ_MSG2_0E5 != 2u)
#    error "Enumeration constant <I_C03_LDC_DTR_MSGDISP_RQ_MSG2_0E5> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C03_LDC_DTR_MSGDISP_RQ_MSG2_0E5 (2u)
#   define I_C03_LDC_DTR_MSGDISP_RQ_MSG2_0E5 ((c03_LDC_DTR_MsgDisp_Rq)2u)
#  endif
#  if (defined RTE_CONST_I_C03_LDC_DTR_MSGDISP_RQ_MSG3_17B) || (defined I_C03_LDC_DTR_MSGDISP_RQ_MSG3_17B)
#   if (!defined RTE_CONST_I_C03_LDC_DTR_MSGDISP_RQ_MSG3_17B) || (RTE_CONST_I_C03_LDC_DTR_MSGDISP_RQ_MSG3_17B != 3u)
#    error "Enumeration constant <I_C03_LDC_DTR_MSGDISP_RQ_MSG3_17B> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C03_LDC_DTR_MSGDISP_RQ_MSG3_17B (3u)
#   define I_C03_LDC_DTR_MSGDISP_RQ_MSG3_17B ((c03_LDC_DTR_MsgDisp_Rq)3u)
#  endif
#  if (defined RTE_CONST_I_C03_LDC_DTR_MSGDISP_RQ_MSG4_3AD) || (defined I_C03_LDC_DTR_MSGDISP_RQ_MSG4_3AD)
#   if (!defined RTE_CONST_I_C03_LDC_DTR_MSGDISP_RQ_MSG4_3AD) || (RTE_CONST_I_C03_LDC_DTR_MSGDISP_RQ_MSG4_3AD != 4u)
#    error "Enumeration constant <I_C03_LDC_DTR_MSGDISP_RQ_MSG4_3AD> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C03_LDC_DTR_MSGDISP_RQ_MSG4_3AD (4u)
#   define I_C03_LDC_DTR_MSGDISP_RQ_MSG4_3AD ((c03_LDC_DTR_MsgDisp_Rq)4u)
#  endif
#  if (defined RTE_CONST_I_C03_LDC_DTR_MSGDISP_RQ_MSG5_0E5_248) || (defined I_C03_LDC_DTR_MSGDISP_RQ_MSG5_0E5_248)
#   if (!defined RTE_CONST_I_C03_LDC_DTR_MSGDISP_RQ_MSG5_0E5_248) || (RTE_CONST_I_C03_LDC_DTR_MSGDISP_RQ_MSG5_0E5_248 != 5u)
#    error "Enumeration constant <I_C03_LDC_DTR_MSGDISP_RQ_MSG5_0E5_248> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C03_LDC_DTR_MSGDISP_RQ_MSG5_0E5_248 (5u)
#   define I_C03_LDC_DTR_MSGDISP_RQ_MSG5_0E5_248 ((c03_LDC_DTR_MsgDisp_Rq)5u)
#  endif
#  if (defined RTE_CONST_I_C03_LDC_DTR_MSGDISP_RQ_MSG6_24D_364) || (defined I_C03_LDC_DTR_MSGDISP_RQ_MSG6_24D_364)
#   if (!defined RTE_CONST_I_C03_LDC_DTR_MSGDISP_RQ_MSG6_24D_364) || (RTE_CONST_I_C03_LDC_DTR_MSGDISP_RQ_MSG6_24D_364 != 6u)
#    error "Enumeration constant <I_C03_LDC_DTR_MSGDISP_RQ_MSG6_24D_364> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C03_LDC_DTR_MSGDISP_RQ_MSG6_24D_364 (6u)
#   define I_C03_LDC_DTR_MSGDISP_RQ_MSG6_24D_364 ((c03_LDC_DTR_MsgDisp_Rq)6u)
#  endif
#  if (defined RTE_CONST_I_C03_LDC_DTR_MSGDISP_RQ_SNA) || (defined I_C03_LDC_DTR_MSGDISP_RQ_SNA)
#   if (!defined RTE_CONST_I_C03_LDC_DTR_MSGDISP_RQ_SNA) || (RTE_CONST_I_C03_LDC_DTR_MSGDISP_RQ_SNA != 7u)
#    error "Enumeration constant <I_C03_LDC_DTR_MSGDISP_RQ_SNA> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C03_LDC_DTR_MSGDISP_RQ_SNA (7u)
#   define I_C03_LDC_DTR_MSGDISP_RQ_SNA ((c03_LDC_DTR_MsgDisp_Rq)7u)
#  endif

#  define Rte_TypeDef_c03_NPsd_Man_AutOpnCls_Imp
typedef uint8 c03_NPsd_Man_AutOpnCls_Imp;
#  define c03_NPsd_Man_AutOpnCls_Imp_LowerLimit ((c03_NPsd_Man_AutOpnCls_Imp)0u)
#  define c03_NPsd_Man_AutOpnCls_Imp_UpperLimit ((c03_NPsd_Man_AutOpnCls_Imp)7u)
#  if (defined RTE_CONST_I_C03_NPSD_MAN_AUTOPNCLS_IMP_NPSD) || (defined I_C03_NPSD_MAN_AUTOPNCLS_IMP_NPSD)
#   if (!defined RTE_CONST_I_C03_NPSD_MAN_AUTOPNCLS_IMP_NPSD) || (RTE_CONST_I_C03_NPSD_MAN_AUTOPNCLS_IMP_NPSD != 0u)
#    error "Enumeration constant <I_C03_NPSD_MAN_AUTOPNCLS_IMP_NPSD> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C03_NPSD_MAN_AUTOPNCLS_IMP_NPSD (0u)
#   define I_C03_NPSD_MAN_AUTOPNCLS_IMP_NPSD ((c03_NPsd_Man_AutOpnCls_Imp)0u)
#  endif
#  if (defined RTE_CONST_I_C03_NPSD_MAN_AUTOPNCLS_IMP_MANOPN) || (defined I_C03_NPSD_MAN_AUTOPNCLS_IMP_MANOPN)
#   if (!defined RTE_CONST_I_C03_NPSD_MAN_AUTOPNCLS_IMP_MANOPN) || (RTE_CONST_I_C03_NPSD_MAN_AUTOPNCLS_IMP_MANOPN != 1u)
#    error "Enumeration constant <I_C03_NPSD_MAN_AUTOPNCLS_IMP_MANOPN> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C03_NPSD_MAN_AUTOPNCLS_IMP_MANOPN (1u)
#   define I_C03_NPSD_MAN_AUTOPNCLS_IMP_MANOPN ((c03_NPsd_Man_AutOpnCls_Imp)1u)
#  endif
#  if (defined RTE_CONST_I_C03_NPSD_MAN_AUTOPNCLS_IMP_MANCLS) || (defined I_C03_NPSD_MAN_AUTOPNCLS_IMP_MANCLS)
#   if (!defined RTE_CONST_I_C03_NPSD_MAN_AUTOPNCLS_IMP_MANCLS) || (RTE_CONST_I_C03_NPSD_MAN_AUTOPNCLS_IMP_MANCLS != 2u)
#    error "Enumeration constant <I_C03_NPSD_MAN_AUTOPNCLS_IMP_MANCLS> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C03_NPSD_MAN_AUTOPNCLS_IMP_MANCLS (2u)
#   define I_C03_NPSD_MAN_AUTOPNCLS_IMP_MANCLS ((c03_NPsd_Man_AutOpnCls_Imp)2u)
#  endif
#  if (defined RTE_CONST_I_C03_NPSD_MAN_AUTOPNCLS_IMP_AUTOOPN) || (defined I_C03_NPSD_MAN_AUTOPNCLS_IMP_AUTOOPN)
#   if (!defined RTE_CONST_I_C03_NPSD_MAN_AUTOPNCLS_IMP_AUTOOPN) || (RTE_CONST_I_C03_NPSD_MAN_AUTOPNCLS_IMP_AUTOOPN != 5u)
#    error "Enumeration constant <I_C03_NPSD_MAN_AUTOPNCLS_IMP_AUTOOPN> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C03_NPSD_MAN_AUTOPNCLS_IMP_AUTOOPN (5u)
#   define I_C03_NPSD_MAN_AUTOPNCLS_IMP_AUTOOPN ((c03_NPsd_Man_AutOpnCls_Imp)5u)
#  endif
#  if (defined RTE_CONST_I_C03_NPSD_MAN_AUTOPNCLS_IMP_AUTOCLS) || (defined I_C03_NPSD_MAN_AUTOPNCLS_IMP_AUTOCLS)
#   if (!defined RTE_CONST_I_C03_NPSD_MAN_AUTOPNCLS_IMP_AUTOCLS) || (RTE_CONST_I_C03_NPSD_MAN_AUTOPNCLS_IMP_AUTOCLS != 6u)
#    error "Enumeration constant <I_C03_NPSD_MAN_AUTOPNCLS_IMP_AUTOCLS> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C03_NPSD_MAN_AUTOPNCLS_IMP_AUTOCLS (6u)
#   define I_C03_NPSD_MAN_AUTOPNCLS_IMP_AUTOCLS ((c03_NPsd_Man_AutOpnCls_Imp)6u)
#  endif
#  if (defined RTE_CONST_I_C03_NPSD_MAN_AUTOPNCLS_IMP_IMPL) || (defined I_C03_NPSD_MAN_AUTOPNCLS_IMP_IMPL)
#   if (!defined RTE_CONST_I_C03_NPSD_MAN_AUTOPNCLS_IMP_IMPL) || (RTE_CONST_I_C03_NPSD_MAN_AUTOPNCLS_IMP_IMPL != 7u)
#    error "Enumeration constant <I_C03_NPSD_MAN_AUTOPNCLS_IMP_IMPL> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C03_NPSD_MAN_AUTOPNCLS_IMP_IMPL (7u)
#   define I_C03_NPSD_MAN_AUTOPNCLS_IMP_IMPL ((c03_NPsd_Man_AutOpnCls_Imp)7u)
#  endif

#  define Rte_TypeDef_c03_NVP_Disp_Rq
typedef uint8 c03_NVP_Disp_Rq;
#  define c03_NVP_Disp_Rq_LowerLimit ((c03_NVP_Disp_Rq)0u)
#  define c03_NVP_Disp_Rq_UpperLimit ((c03_NVP_Disp_Rq)7u)
#  define Rte_InvalidValue_c03_NVP_Disp_Rq ((c03_NVP_Disp_Rq)7u)
#  if (defined RTE_CONST_I_C03_NVP_DISP_RQ_NDEF0) || (defined I_C03_NVP_DISP_RQ_NDEF0)
#   if (!defined RTE_CONST_I_C03_NVP_DISP_RQ_NDEF0) || (RTE_CONST_I_C03_NVP_DISP_RQ_NDEF0 != 0u)
#    error "Enumeration constant <I_C03_NVP_DISP_RQ_NDEF0> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C03_NVP_DISP_RQ_NDEF0 (0u)
#   define I_C03_NVP_DISP_RQ_NDEF0 ((c03_NVP_Disp_Rq)0u)
#  endif
#  if (defined RTE_CONST_I_C03_NVP_DISP_RQ_OFF) || (defined I_C03_NVP_DISP_RQ_OFF)
#   if (!defined RTE_CONST_I_C03_NVP_DISP_RQ_OFF) || (RTE_CONST_I_C03_NVP_DISP_RQ_OFF != 1u)
#    error "Enumeration constant <I_C03_NVP_DISP_RQ_OFF> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C03_NVP_DISP_RQ_OFF (1u)
#   define I_C03_NVP_DISP_RQ_OFF ((c03_NVP_Disp_Rq)1u)
#  endif
#  if (defined RTE_CONST_I_C03_NVP_DISP_RQ_ON) || (defined I_C03_NVP_DISP_RQ_ON)
#   if (!defined RTE_CONST_I_C03_NVP_DISP_RQ_ON) || (RTE_CONST_I_C03_NVP_DISP_RQ_ON != 2u)
#    error "Enumeration constant <I_C03_NVP_DISP_RQ_ON> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C03_NVP_DISP_RQ_ON (2u)
#   define I_C03_NVP_DISP_RQ_ON ((c03_NVP_Disp_Rq)2u)
#  endif
#  if (defined RTE_CONST_I_C03_NVP_DISP_RQ_SLOW_OFF) || (defined I_C03_NVP_DISP_RQ_SLOW_OFF)
#   if (!defined RTE_CONST_I_C03_NVP_DISP_RQ_SLOW_OFF) || (RTE_CONST_I_C03_NVP_DISP_RQ_SLOW_OFF != 3u)
#    error "Enumeration constant <I_C03_NVP_DISP_RQ_SLOW_OFF> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C03_NVP_DISP_RQ_SLOW_OFF (3u)
#   define I_C03_NVP_DISP_RQ_SLOW_OFF ((c03_NVP_Disp_Rq)3u)
#  endif
#  if (defined RTE_CONST_I_C03_NVP_DISP_RQ_SLOW_ON) || (defined I_C03_NVP_DISP_RQ_SLOW_ON)
#   if (!defined RTE_CONST_I_C03_NVP_DISP_RQ_SLOW_ON) || (RTE_CONST_I_C03_NVP_DISP_RQ_SLOW_ON != 4u)
#    error "Enumeration constant <I_C03_NVP_DISP_RQ_SLOW_ON> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C03_NVP_DISP_RQ_SLOW_ON (4u)
#   define I_C03_NVP_DISP_RQ_SLOW_ON ((c03_NVP_Disp_Rq)4u)
#  endif
#  if (defined RTE_CONST_I_C03_NVP_DISP_RQ_NDEF5) || (defined I_C03_NVP_DISP_RQ_NDEF5)
#   if (!defined RTE_CONST_I_C03_NVP_DISP_RQ_NDEF5) || (RTE_CONST_I_C03_NVP_DISP_RQ_NDEF5 != 5u)
#    error "Enumeration constant <I_C03_NVP_DISP_RQ_NDEF5> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C03_NVP_DISP_RQ_NDEF5 (5u)
#   define I_C03_NVP_DISP_RQ_NDEF5 ((c03_NVP_Disp_Rq)5u)
#  endif
#  if (defined RTE_CONST_I_C03_NVP_DISP_RQ_NDEF6) || (defined I_C03_NVP_DISP_RQ_NDEF6)
#   if (!defined RTE_CONST_I_C03_NVP_DISP_RQ_NDEF6) || (RTE_CONST_I_C03_NVP_DISP_RQ_NDEF6 != 6u)
#    error "Enumeration constant <I_C03_NVP_DISP_RQ_NDEF6> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C03_NVP_DISP_RQ_NDEF6 (6u)
#   define I_C03_NVP_DISP_RQ_NDEF6 ((c03_NVP_Disp_Rq)6u)
#  endif
#  if (defined RTE_CONST_I_C03_NVP_DISP_RQ_SNA) || (defined I_C03_NVP_DISP_RQ_SNA)
#   if (!defined RTE_CONST_I_C03_NVP_DISP_RQ_SNA) || (RTE_CONST_I_C03_NVP_DISP_RQ_SNA != 7u)
#    error "Enumeration constant <I_C03_NVP_DISP_RQ_SNA> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C03_NVP_DISP_RQ_SNA (7u)
#   define I_C03_NVP_DISP_RQ_SNA ((c03_NVP_Disp_Rq)7u)
#  endif

#  define Rte_TypeDef_c03_NVP_Icon_Stat
typedef uint8 c03_NVP_Icon_Stat;
#  define c03_NVP_Icon_Stat_LowerLimit ((c03_NVP_Icon_Stat)0u)
#  define c03_NVP_Icon_Stat_UpperLimit ((c03_NVP_Icon_Stat)7u)
#  define Rte_InvalidValue_c03_NVP_Icon_Stat ((c03_NVP_Icon_Stat)7u)
#  if (defined RTE_CONST_I_C03_NVP_ICON_STAT_OFF) || (defined I_C03_NVP_ICON_STAT_OFF)
#   if (!defined RTE_CONST_I_C03_NVP_ICON_STAT_OFF) || (RTE_CONST_I_C03_NVP_ICON_STAT_OFF != 0u)
#    error "Enumeration constant <I_C03_NVP_ICON_STAT_OFF> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C03_NVP_ICON_STAT_OFF (0u)
#   define I_C03_NVP_ICON_STAT_OFF ((c03_NVP_Icon_Stat)0u)
#  endif
#  if (defined RTE_CONST_I_C03_NVP_ICON_STAT_POPUP_SEL) || (defined I_C03_NVP_ICON_STAT_POPUP_SEL)
#   if (!defined RTE_CONST_I_C03_NVP_ICON_STAT_POPUP_SEL) || (RTE_CONST_I_C03_NVP_ICON_STAT_POPUP_SEL != 1u)
#    error "Enumeration constant <I_C03_NVP_ICON_STAT_POPUP_SEL> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C03_NVP_ICON_STAT_POPUP_SEL (1u)
#   define I_C03_NVP_ICON_STAT_POPUP_SEL ((c03_NVP_Icon_Stat)1u)
#  endif
#  if (defined RTE_CONST_I_C03_NVP_ICON_STAT_POPUP_ACTV) || (defined I_C03_NVP_ICON_STAT_POPUP_ACTV)
#   if (!defined RTE_CONST_I_C03_NVP_ICON_STAT_POPUP_ACTV) || (RTE_CONST_I_C03_NVP_ICON_STAT_POPUP_ACTV != 2u)
#    error "Enumeration constant <I_C03_NVP_ICON_STAT_POPUP_ACTV> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C03_NVP_ICON_STAT_POPUP_ACTV (2u)
#   define I_C03_NVP_ICON_STAT_POPUP_ACTV ((c03_NVP_Icon_Stat)2u)
#  endif
#  if (defined RTE_CONST_I_C03_NVP_ICON_STAT_PDET_ACTV) || (defined I_C03_NVP_ICON_STAT_PDET_ACTV)
#   if (!defined RTE_CONST_I_C03_NVP_ICON_STAT_PDET_ACTV) || (RTE_CONST_I_C03_NVP_ICON_STAT_PDET_ACTV != 3u)
#    error "Enumeration constant <I_C03_NVP_ICON_STAT_PDET_ACTV> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C03_NVP_ICON_STAT_PDET_ACTV (3u)
#   define I_C03_NVP_ICON_STAT_PDET_ACTV ((c03_NVP_Icon_Stat)3u)
#  endif
#  if (defined RTE_CONST_I_C03_NVP_ICON_STAT_NDEF4) || (defined I_C03_NVP_ICON_STAT_NDEF4)
#   if (!defined RTE_CONST_I_C03_NVP_ICON_STAT_NDEF4) || (RTE_CONST_I_C03_NVP_ICON_STAT_NDEF4 != 4u)
#    error "Enumeration constant <I_C03_NVP_ICON_STAT_NDEF4> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C03_NVP_ICON_STAT_NDEF4 (4u)
#   define I_C03_NVP_ICON_STAT_NDEF4 ((c03_NVP_Icon_Stat)4u)
#  endif
#  if (defined RTE_CONST_I_C03_NVP_ICON_STAT_NDEF5) || (defined I_C03_NVP_ICON_STAT_NDEF5)
#   if (!defined RTE_CONST_I_C03_NVP_ICON_STAT_NDEF5) || (RTE_CONST_I_C03_NVP_ICON_STAT_NDEF5 != 5u)
#    error "Enumeration constant <I_C03_NVP_ICON_STAT_NDEF5> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C03_NVP_ICON_STAT_NDEF5 (5u)
#   define I_C03_NVP_ICON_STAT_NDEF5 ((c03_NVP_Icon_Stat)5u)
#  endif
#  if (defined RTE_CONST_I_C03_NVP_ICON_STAT_NDEF6) || (defined I_C03_NVP_ICON_STAT_NDEF6)
#   if (!defined RTE_CONST_I_C03_NVP_ICON_STAT_NDEF6) || (RTE_CONST_I_C03_NVP_ICON_STAT_NDEF6 != 6u)
#    error "Enumeration constant <I_C03_NVP_ICON_STAT_NDEF6> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C03_NVP_ICON_STAT_NDEF6 (6u)
#   define I_C03_NVP_ICON_STAT_NDEF6 ((c03_NVP_Icon_Stat)6u)
#  endif
#  if (defined RTE_CONST_I_C03_NVP_ICON_STAT_SNA) || (defined I_C03_NVP_ICON_STAT_SNA)
#   if (!defined RTE_CONST_I_C03_NVP_ICON_STAT_SNA) || (RTE_CONST_I_C03_NVP_ICON_STAT_SNA != 7u)
#    error "Enumeration constant <I_C03_NVP_ICON_STAT_SNA> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C03_NVP_ICON_STAT_SNA (7u)
#   define I_C03_NVP_ICON_STAT_SNA ((c03_NVP_Icon_Stat)7u)
#  endif

#  define Rte_TypeDef_c03_Npsd_Plus_Minus
typedef uint8 c03_Npsd_Plus_Minus;
#  define c03_Npsd_Plus_Minus_LowerLimit ((c03_Npsd_Plus_Minus)0u)
#  define c03_Npsd_Plus_Minus_UpperLimit ((c03_Npsd_Plus_Minus)7u)
#  define Rte_InvalidValue_c03_Npsd_Plus_Minus ((c03_Npsd_Plus_Minus)7u)
#  if (defined RTE_CONST_I_C03_NPSD_PLUS_MINUS_NPSD) || (defined I_C03_NPSD_PLUS_MINUS_NPSD)
#   if (!defined RTE_CONST_I_C03_NPSD_PLUS_MINUS_NPSD) || (RTE_CONST_I_C03_NPSD_PLUS_MINUS_NPSD != 0u)
#    error "Enumeration constant <I_C03_NPSD_PLUS_MINUS_NPSD> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C03_NPSD_PLUS_MINUS_NPSD (0u)
#   define I_C03_NPSD_PLUS_MINUS_NPSD ((c03_Npsd_Plus_Minus)0u)
#  endif
#  if (defined RTE_CONST_I_C03_NPSD_PLUS_MINUS_PLUS) || (defined I_C03_NPSD_PLUS_MINUS_PLUS)
#   if (!defined RTE_CONST_I_C03_NPSD_PLUS_MINUS_PLUS) || (RTE_CONST_I_C03_NPSD_PLUS_MINUS_PLUS != 1u)
#    error "Enumeration constant <I_C03_NPSD_PLUS_MINUS_PLUS> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C03_NPSD_PLUS_MINUS_PLUS (1u)
#   define I_C03_NPSD_PLUS_MINUS_PLUS ((c03_Npsd_Plus_Minus)1u)
#  endif
#  if (defined RTE_CONST_I_C03_NPSD_PLUS_MINUS_MINUS) || (defined I_C03_NPSD_PLUS_MINUS_MINUS)
#   if (!defined RTE_CONST_I_C03_NPSD_PLUS_MINUS_MINUS) || (RTE_CONST_I_C03_NPSD_PLUS_MINUS_MINUS != 2u)
#    error "Enumeration constant <I_C03_NPSD_PLUS_MINUS_MINUS> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C03_NPSD_PLUS_MINUS_MINUS (2u)
#   define I_C03_NPSD_PLUS_MINUS_MINUS ((c03_Npsd_Plus_Minus)2u)
#  endif
#  if (defined RTE_CONST_I_C03_NPSD_PLUS_MINUS_PLUS_MINUS) || (defined I_C03_NPSD_PLUS_MINUS_PLUS_MINUS)
#   if (!defined RTE_CONST_I_C03_NPSD_PLUS_MINUS_PLUS_MINUS) || (RTE_CONST_I_C03_NPSD_PLUS_MINUS_PLUS_MINUS != 3u)
#    error "Enumeration constant <I_C03_NPSD_PLUS_MINUS_PLUS_MINUS> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C03_NPSD_PLUS_MINUS_PLUS_MINUS (3u)
#   define I_C03_NPSD_PLUS_MINUS_PLUS_MINUS ((c03_Npsd_Plus_Minus)3u)
#  endif
#  if (defined RTE_CONST_I_C03_NPSD_PLUS_MINUS_NDEF4) || (defined I_C03_NPSD_PLUS_MINUS_NDEF4)
#   if (!defined RTE_CONST_I_C03_NPSD_PLUS_MINUS_NDEF4) || (RTE_CONST_I_C03_NPSD_PLUS_MINUS_NDEF4 != 4u)
#    error "Enumeration constant <I_C03_NPSD_PLUS_MINUS_NDEF4> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C03_NPSD_PLUS_MINUS_NDEF4 (4u)
#   define I_C03_NPSD_PLUS_MINUS_NDEF4 ((c03_Npsd_Plus_Minus)4u)
#  endif
#  if (defined RTE_CONST_I_C03_NPSD_PLUS_MINUS_NDEF5) || (defined I_C03_NPSD_PLUS_MINUS_NDEF5)
#   if (!defined RTE_CONST_I_C03_NPSD_PLUS_MINUS_NDEF5) || (RTE_CONST_I_C03_NPSD_PLUS_MINUS_NDEF5 != 5u)
#    error "Enumeration constant <I_C03_NPSD_PLUS_MINUS_NDEF5> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C03_NPSD_PLUS_MINUS_NDEF5 (5u)
#   define I_C03_NPSD_PLUS_MINUS_NDEF5 ((c03_Npsd_Plus_Minus)5u)
#  endif
#  if (defined RTE_CONST_I_C03_NPSD_PLUS_MINUS_NDEF6) || (defined I_C03_NPSD_PLUS_MINUS_NDEF6)
#   if (!defined RTE_CONST_I_C03_NPSD_PLUS_MINUS_NDEF6) || (RTE_CONST_I_C03_NPSD_PLUS_MINUS_NDEF6 != 6u)
#    error "Enumeration constant <I_C03_NPSD_PLUS_MINUS_NDEF6> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C03_NPSD_PLUS_MINUS_NDEF6 (6u)
#   define I_C03_NPSD_PLUS_MINUS_NDEF6 ((c03_Npsd_Plus_Minus)6u)
#  endif
#  if (defined RTE_CONST_I_C03_NPSD_PLUS_MINUS_SNA) || (defined I_C03_NPSD_PLUS_MINUS_SNA)
#   if (!defined RTE_CONST_I_C03_NPSD_PLUS_MINUS_SNA) || (RTE_CONST_I_C03_NPSD_PLUS_MINUS_SNA != 7u)
#    error "Enumeration constant <I_C03_NPSD_PLUS_MINUS_SNA> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C03_NPSD_PLUS_MINUS_SNA (7u)
#   define I_C03_NPSD_PLUS_MINUS_SNA ((c03_Npsd_Plus_Minus)7u)
#  endif

#  define Rte_TypeDef_c03_Preview_Stat_Disp_Rq
typedef uint8 c03_Preview_Stat_Disp_Rq;
#  define c03_Preview_Stat_Disp_Rq_LowerLimit ((c03_Preview_Stat_Disp_Rq)0u)
#  define c03_Preview_Stat_Disp_Rq_UpperLimit ((c03_Preview_Stat_Disp_Rq)7u)
#  define Rte_InvalidValue_c03_Preview_Stat_Disp_Rq ((c03_Preview_Stat_Disp_Rq)7u)
#  if (defined RTE_CONST_I_C03_PREVIEW_STAT_DISP_RQ_PREVIEW_ON) || (defined I_C03_PREVIEW_STAT_DISP_RQ_PREVIEW_ON)
#   if (!defined RTE_CONST_I_C03_PREVIEW_STAT_DISP_RQ_PREVIEW_ON) || (RTE_CONST_I_C03_PREVIEW_STAT_DISP_RQ_PREVIEW_ON != 0u)
#    error "Enumeration constant <I_C03_PREVIEW_STAT_DISP_RQ_PREVIEW_ON> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C03_PREVIEW_STAT_DISP_RQ_PREVIEW_ON (0u)
#   define I_C03_PREVIEW_STAT_DISP_RQ_PREVIEW_ON ((c03_Preview_Stat_Disp_Rq)0u)
#  endif
#  if (defined RTE_CONST_I_C03_PREVIEW_STAT_DISP_RQ_PREVIEW_NA) || (defined I_C03_PREVIEW_STAT_DISP_RQ_PREVIEW_NA)
#   if (!defined RTE_CONST_I_C03_PREVIEW_STAT_DISP_RQ_PREVIEW_NA) || (RTE_CONST_I_C03_PREVIEW_STAT_DISP_RQ_PREVIEW_NA != 1u)
#    error "Enumeration constant <I_C03_PREVIEW_STAT_DISP_RQ_PREVIEW_NA> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C03_PREVIEW_STAT_DISP_RQ_PREVIEW_NA (1u)
#   define I_C03_PREVIEW_STAT_DISP_RQ_PREVIEW_NA ((c03_Preview_Stat_Disp_Rq)1u)
#  endif
#  if (defined RTE_CONST_I_C03_PREVIEW_STAT_DISP_RQ_PREVIEW_TMP_NA) || (defined I_C03_PREVIEW_STAT_DISP_RQ_PREVIEW_TMP_NA)
#   if (!defined RTE_CONST_I_C03_PREVIEW_STAT_DISP_RQ_PREVIEW_TMP_NA) || (RTE_CONST_I_C03_PREVIEW_STAT_DISP_RQ_PREVIEW_TMP_NA != 2u)
#    error "Enumeration constant <I_C03_PREVIEW_STAT_DISP_RQ_PREVIEW_TMP_NA> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C03_PREVIEW_STAT_DISP_RQ_PREVIEW_TMP_NA (2u)
#   define I_C03_PREVIEW_STAT_DISP_RQ_PREVIEW_TMP_NA ((c03_Preview_Stat_Disp_Rq)2u)
#  endif
#  if (defined RTE_CONST_I_C03_PREVIEW_STAT_DISP_RQ_SNA) || (defined I_C03_PREVIEW_STAT_DISP_RQ_SNA)
#   if (!defined RTE_CONST_I_C03_PREVIEW_STAT_DISP_RQ_SNA) || (RTE_CONST_I_C03_PREVIEW_STAT_DISP_RQ_SNA != 7u)
#    error "Enumeration constant <I_C03_PREVIEW_STAT_DISP_RQ_SNA> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C03_PREVIEW_STAT_DISP_RQ_SNA (7u)
#   define I_C03_PREVIEW_STAT_DISP_RQ_SNA ((c03_Preview_Stat_Disp_Rq)7u)
#  endif

#  define Rte_TypeDef_c03_RB_R_Stat_V2
typedef uint8 c03_RB_R_Stat_V2;
#  define c03_RB_R_Stat_V2_LowerLimit ((c03_RB_R_Stat_V2)0u)
#  define c03_RB_R_Stat_V2_UpperLimit ((c03_RB_R_Stat_V2)7u)
#  define Rte_InvalidValue_c03_RB_R_Stat_V2 ((c03_RB_R_Stat_V2)7u)
#  if (defined RTE_CONST_I_C03_RB_R_STAT_V2_RB_RET) || (defined I_C03_RB_R_STAT_V2_RB_RET)
#   if (!defined RTE_CONST_I_C03_RB_R_STAT_V2_RB_RET) || (RTE_CONST_I_C03_RB_R_STAT_V2_RB_RET != 0u)
#    error "Enumeration constant <I_C03_RB_R_STAT_V2_RB_RET> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C03_RB_R_STAT_V2_RB_RET (0u)
#   define I_C03_RB_R_STAT_V2_RB_RET ((c03_RB_R_Stat_V2)0u)
#  endif
#  if (defined RTE_CONST_I_C03_RB_R_STAT_V2_RB_EXT) || (defined I_C03_RB_R_STAT_V2_RB_EXT)
#   if (!defined RTE_CONST_I_C03_RB_R_STAT_V2_RB_EXT) || (RTE_CONST_I_C03_RB_R_STAT_V2_RB_EXT != 1u)
#    error "Enumeration constant <I_C03_RB_R_STAT_V2_RB_EXT> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C03_RB_R_STAT_V2_RB_EXT (1u)
#   define I_C03_RB_R_STAT_V2_RB_EXT ((c03_RB_R_Stat_V2)1u)
#  endif
#  if (defined RTE_CONST_I_C03_RB_R_STAT_V2_RB_IS_RET) || (defined I_C03_RB_R_STAT_V2_RB_IS_RET)
#   if (!defined RTE_CONST_I_C03_RB_R_STAT_V2_RB_IS_RET) || (RTE_CONST_I_C03_RB_R_STAT_V2_RB_IS_RET != 2u)
#    error "Enumeration constant <I_C03_RB_R_STAT_V2_RB_IS_RET> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C03_RB_R_STAT_V2_RB_IS_RET (2u)
#   define I_C03_RB_R_STAT_V2_RB_IS_RET ((c03_RB_R_Stat_V2)2u)
#  endif
#  if (defined RTE_CONST_I_C03_RB_R_STAT_V2_RB_IS_EXT) || (defined I_C03_RB_R_STAT_V2_RB_IS_EXT)
#   if (!defined RTE_CONST_I_C03_RB_R_STAT_V2_RB_IS_EXT) || (RTE_CONST_I_C03_RB_R_STAT_V2_RB_IS_EXT != 3u)
#    error "Enumeration constant <I_C03_RB_R_STAT_V2_RB_IS_EXT> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C03_RB_R_STAT_V2_RB_IS_EXT (3u)
#   define I_C03_RB_R_STAT_V2_RB_IS_EXT ((c03_RB_R_Stat_V2)3u)
#  endif
#  if (defined RTE_CONST_I_C03_RB_R_STAT_V2_INTERMEDIATE) || (defined I_C03_RB_R_STAT_V2_INTERMEDIATE)
#   if (!defined RTE_CONST_I_C03_RB_R_STAT_V2_INTERMEDIATE) || (RTE_CONST_I_C03_RB_R_STAT_V2_INTERMEDIATE != 4u)
#    error "Enumeration constant <I_C03_RB_R_STAT_V2_INTERMEDIATE> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C03_RB_R_STAT_V2_INTERMEDIATE (4u)
#   define I_C03_RB_R_STAT_V2_INTERMEDIATE ((c03_RB_R_Stat_V2)4u)
#  endif
#  if (defined RTE_CONST_I_C03_RB_R_STAT_V2_RB_BL) || (defined I_C03_RB_R_STAT_V2_RB_BL)
#   if (!defined RTE_CONST_I_C03_RB_R_STAT_V2_RB_BL) || (RTE_CONST_I_C03_RB_R_STAT_V2_RB_BL != 5u)
#    error "Enumeration constant <I_C03_RB_R_STAT_V2_RB_BL> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C03_RB_R_STAT_V2_RB_BL (5u)
#   define I_C03_RB_R_STAT_V2_RB_BL ((c03_RB_R_Stat_V2)5u)
#  endif
#  if (defined RTE_CONST_I_C03_RB_R_STAT_V2_RB_DEF) || (defined I_C03_RB_R_STAT_V2_RB_DEF)
#   if (!defined RTE_CONST_I_C03_RB_R_STAT_V2_RB_DEF) || (RTE_CONST_I_C03_RB_R_STAT_V2_RB_DEF != 6u)
#    error "Enumeration constant <I_C03_RB_R_STAT_V2_RB_DEF> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C03_RB_R_STAT_V2_RB_DEF (6u)
#   define I_C03_RB_R_STAT_V2_RB_DEF ((c03_RB_R_Stat_V2)6u)
#  endif
#  if (defined RTE_CONST_I_C03_RB_R_STAT_V2_SNA) || (defined I_C03_RB_R_STAT_V2_SNA)
#   if (!defined RTE_CONST_I_C03_RB_R_STAT_V2_SNA) || (RTE_CONST_I_C03_RB_R_STAT_V2_SNA != 7u)
#    error "Enumeration constant <I_C03_RB_R_STAT_V2_SNA> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C03_RB_R_STAT_V2_SNA (7u)
#   define I_C03_RB_R_STAT_V2_SNA ((c03_RB_R_Stat_V2)7u)
#  endif

#  define Rte_TypeDef_c03_SPL_Icon_Stat
typedef uint8 c03_SPL_Icon_Stat;
#  define c03_SPL_Icon_Stat_LowerLimit ((c03_SPL_Icon_Stat)0u)
#  define c03_SPL_Icon_Stat_UpperLimit ((c03_SPL_Icon_Stat)7u)
#  define Rte_InvalidValue_c03_SPL_Icon_Stat ((c03_SPL_Icon_Stat)7u)
#  if (defined RTE_CONST_I_C03_SPL_ICON_STAT_OFF) || (defined I_C03_SPL_ICON_STAT_OFF)
#   if (!defined RTE_CONST_I_C03_SPL_ICON_STAT_OFF) || (RTE_CONST_I_C03_SPL_ICON_STAT_OFF != 0u)
#    error "Enumeration constant <I_C03_SPL_ICON_STAT_OFF> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C03_SPL_ICON_STAT_OFF (0u)
#   define I_C03_SPL_ICON_STAT_OFF ((c03_SPL_Icon_Stat)0u)
#  endif
#  if (defined RTE_CONST_I_C03_SPL_ICON_STAT_SPL_SEL) || (defined I_C03_SPL_ICON_STAT_SPL_SEL)
#   if (!defined RTE_CONST_I_C03_SPL_ICON_STAT_SPL_SEL) || (RTE_CONST_I_C03_SPL_ICON_STAT_SPL_SEL != 1u)
#    error "Enumeration constant <I_C03_SPL_ICON_STAT_SPL_SEL> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C03_SPL_ICON_STAT_SPL_SEL (1u)
#   define I_C03_SPL_ICON_STAT_SPL_SEL ((c03_SPL_Icon_Stat)1u)
#  endif
#  if (defined RTE_CONST_I_C03_SPL_ICON_STAT_SPL_ACTV) || (defined I_C03_SPL_ICON_STAT_SPL_ACTV)
#   if (!defined RTE_CONST_I_C03_SPL_ICON_STAT_SPL_ACTV) || (RTE_CONST_I_C03_SPL_ICON_STAT_SPL_ACTV != 2u)
#    error "Enumeration constant <I_C03_SPL_ICON_STAT_SPL_ACTV> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C03_SPL_ICON_STAT_SPL_ACTV (2u)
#   define I_C03_SPL_ICON_STAT_SPL_ACTV ((c03_SPL_Icon_Stat)2u)
#  endif
#  if (defined RTE_CONST_I_C03_SPL_ICON_STAT_NDEF3) || (defined I_C03_SPL_ICON_STAT_NDEF3)
#   if (!defined RTE_CONST_I_C03_SPL_ICON_STAT_NDEF3) || (RTE_CONST_I_C03_SPL_ICON_STAT_NDEF3 != 3u)
#    error "Enumeration constant <I_C03_SPL_ICON_STAT_NDEF3> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C03_SPL_ICON_STAT_NDEF3 (3u)
#   define I_C03_SPL_ICON_STAT_NDEF3 ((c03_SPL_Icon_Stat)3u)
#  endif
#  if (defined RTE_CONST_I_C03_SPL_ICON_STAT_NDEF4) || (defined I_C03_SPL_ICON_STAT_NDEF4)
#   if (!defined RTE_CONST_I_C03_SPL_ICON_STAT_NDEF4) || (RTE_CONST_I_C03_SPL_ICON_STAT_NDEF4 != 4u)
#    error "Enumeration constant <I_C03_SPL_ICON_STAT_NDEF4> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C03_SPL_ICON_STAT_NDEF4 (4u)
#   define I_C03_SPL_ICON_STAT_NDEF4 ((c03_SPL_Icon_Stat)4u)
#  endif
#  if (defined RTE_CONST_I_C03_SPL_ICON_STAT_NDEF5) || (defined I_C03_SPL_ICON_STAT_NDEF5)
#   if (!defined RTE_CONST_I_C03_SPL_ICON_STAT_NDEF5) || (RTE_CONST_I_C03_SPL_ICON_STAT_NDEF5 != 5u)
#    error "Enumeration constant <I_C03_SPL_ICON_STAT_NDEF5> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C03_SPL_ICON_STAT_NDEF5 (5u)
#   define I_C03_SPL_ICON_STAT_NDEF5 ((c03_SPL_Icon_Stat)5u)
#  endif
#  if (defined RTE_CONST_I_C03_SPL_ICON_STAT_NDEF6) || (defined I_C03_SPL_ICON_STAT_NDEF6)
#   if (!defined RTE_CONST_I_C03_SPL_ICON_STAT_NDEF6) || (RTE_CONST_I_C03_SPL_ICON_STAT_NDEF6 != 6u)
#    error "Enumeration constant <I_C03_SPL_ICON_STAT_NDEF6> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C03_SPL_ICON_STAT_NDEF6 (6u)
#   define I_C03_SPL_ICON_STAT_NDEF6 ((c03_SPL_Icon_Stat)6u)
#  endif
#  if (defined RTE_CONST_I_C03_SPL_ICON_STAT_SNA) || (defined I_C03_SPL_ICON_STAT_SNA)
#   if (!defined RTE_CONST_I_C03_SPL_ICON_STAT_SNA) || (RTE_CONST_I_C03_SPL_ICON_STAT_SNA != 7u)
#    error "Enumeration constant <I_C03_SPL_ICON_STAT_SNA> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C03_SPL_ICON_STAT_SNA (7u)
#   define I_C03_SPL_ICON_STAT_SNA ((c03_SPL_Icon_Stat)7u)
#  endif

#  define Rte_TypeDef_c03_SPL_Warn_Stat
typedef uint8 c03_SPL_Warn_Stat;
#  define c03_SPL_Warn_Stat_LowerLimit ((c03_SPL_Warn_Stat)0u)
#  define c03_SPL_Warn_Stat_UpperLimit ((c03_SPL_Warn_Stat)7u)
#  define Rte_InvalidValue_c03_SPL_Warn_Stat ((c03_SPL_Warn_Stat)7u)
#  if (defined RTE_CONST_I_C03_SPL_WARN_STAT_OK) || (defined I_C03_SPL_WARN_STAT_OK)
#   if (!defined RTE_CONST_I_C03_SPL_WARN_STAT_OK) || (RTE_CONST_I_C03_SPL_WARN_STAT_OK != 0u)
#    error "Enumeration constant <I_C03_SPL_WARN_STAT_OK> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C03_SPL_WARN_STAT_OK (0u)
#   define I_C03_SPL_WARN_STAT_OK ((c03_SPL_Warn_Stat)0u)
#  endif
#  if (defined RTE_CONST_I_C03_SPL_WARN_STAT_SPL_NA) || (defined I_C03_SPL_WARN_STAT_SPL_NA)
#   if (!defined RTE_CONST_I_C03_SPL_WARN_STAT_SPL_NA) || (RTE_CONST_I_C03_SPL_WARN_STAT_SPL_NA != 1u)
#    error "Enumeration constant <I_C03_SPL_WARN_STAT_SPL_NA> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C03_SPL_WARN_STAT_SPL_NA (1u)
#   define I_C03_SPL_WARN_STAT_SPL_NA ((c03_SPL_Warn_Stat)1u)
#  endif
#  if (defined RTE_CONST_I_C03_SPL_WARN_STAT_SPL_TEMP_NA) || (defined I_C03_SPL_WARN_STAT_SPL_TEMP_NA)
#   if (!defined RTE_CONST_I_C03_SPL_WARN_STAT_SPL_TEMP_NA) || (RTE_CONST_I_C03_SPL_WARN_STAT_SPL_TEMP_NA != 2u)
#    error "Enumeration constant <I_C03_SPL_WARN_STAT_SPL_TEMP_NA> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C03_SPL_WARN_STAT_SPL_TEMP_NA (2u)
#   define I_C03_SPL_WARN_STAT_SPL_TEMP_NA ((c03_SPL_Warn_Stat)2u)
#  endif
#  if (defined RTE_CONST_I_C03_SPL_WARN_STAT_NDEF3) || (defined I_C03_SPL_WARN_STAT_NDEF3)
#   if (!defined RTE_CONST_I_C03_SPL_WARN_STAT_NDEF3) || (RTE_CONST_I_C03_SPL_WARN_STAT_NDEF3 != 3u)
#    error "Enumeration constant <I_C03_SPL_WARN_STAT_NDEF3> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C03_SPL_WARN_STAT_NDEF3 (3u)
#   define I_C03_SPL_WARN_STAT_NDEF3 ((c03_SPL_Warn_Stat)3u)
#  endif
#  if (defined RTE_CONST_I_C03_SPL_WARN_STAT_NDEF4) || (defined I_C03_SPL_WARN_STAT_NDEF4)
#   if (!defined RTE_CONST_I_C03_SPL_WARN_STAT_NDEF4) || (RTE_CONST_I_C03_SPL_WARN_STAT_NDEF4 != 4u)
#    error "Enumeration constant <I_C03_SPL_WARN_STAT_NDEF4> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C03_SPL_WARN_STAT_NDEF4 (4u)
#   define I_C03_SPL_WARN_STAT_NDEF4 ((c03_SPL_Warn_Stat)4u)
#  endif
#  if (defined RTE_CONST_I_C03_SPL_WARN_STAT_NDEF5) || (defined I_C03_SPL_WARN_STAT_NDEF5)
#   if (!defined RTE_CONST_I_C03_SPL_WARN_STAT_NDEF5) || (RTE_CONST_I_C03_SPL_WARN_STAT_NDEF5 != 5u)
#    error "Enumeration constant <I_C03_SPL_WARN_STAT_NDEF5> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C03_SPL_WARN_STAT_NDEF5 (5u)
#   define I_C03_SPL_WARN_STAT_NDEF5 ((c03_SPL_Warn_Stat)5u)
#  endif
#  if (defined RTE_CONST_I_C03_SPL_WARN_STAT_NDEF6) || (defined I_C03_SPL_WARN_STAT_NDEF6)
#   if (!defined RTE_CONST_I_C03_SPL_WARN_STAT_NDEF6) || (RTE_CONST_I_C03_SPL_WARN_STAT_NDEF6 != 6u)
#    error "Enumeration constant <I_C03_SPL_WARN_STAT_NDEF6> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C03_SPL_WARN_STAT_NDEF6 (6u)
#   define I_C03_SPL_WARN_STAT_NDEF6 ((c03_SPL_Warn_Stat)6u)
#  endif
#  if (defined RTE_CONST_I_C03_SPL_WARN_STAT_SNA) || (defined I_C03_SPL_WARN_STAT_SNA)
#   if (!defined RTE_CONST_I_C03_SPL_WARN_STAT_SNA) || (RTE_CONST_I_C03_SPL_WARN_STAT_SNA != 7u)
#    error "Enumeration constant <I_C03_SPL_WARN_STAT_SNA> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C03_SPL_WARN_STAT_SNA (7u)
#   define I_C03_SPL_WARN_STAT_SNA ((c03_SPL_Warn_Stat)7u)
#  endif

#  define Rte_TypeDef_c03_m3_3_1
typedef uint8 c03_m3_3_1;
#  define c03_m3_3_1_LowerLimit ((c03_m3_3_1)0u)
#  define c03_m3_3_1_UpperLimit ((c03_m3_3_1)7u)
#  define Rte_InvalidValue_c03_m3_3_1 ((c03_m3_3_1)7u)
#  if (defined RTE_CONST_I_C03_M3_3_1_SNA) || (defined I_C03_M3_3_1_SNA)
#   if (!defined RTE_CONST_I_C03_M3_3_1_SNA) || (RTE_CONST_I_C03_M3_3_1_SNA != 7u)
#    error "Enumeration constant <I_C03_M3_3_1_SNA> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C03_M3_3_1_SNA (7u)
#   define I_C03_M3_3_1_SNA ((c03_m3_3_1)7u)
#  endif

#  define Rte_TypeDef_c04_AmbLgtColor
typedef uint8 c04_AmbLgtColor;
#  define c04_AmbLgtColor_LowerLimit ((c04_AmbLgtColor)0u)
#  define c04_AmbLgtColor_UpperLimit ((c04_AmbLgtColor)15u)
#  define Rte_InvalidValue_c04_AmbLgtColor ((c04_AmbLgtColor)15u)
#  if (defined RTE_CONST_I_C04_AMBLGTCOLOR_SOLAR) || (defined I_C04_AMBLGTCOLOR_SOLAR)
#   if (!defined RTE_CONST_I_C04_AMBLGTCOLOR_SOLAR) || (RTE_CONST_I_C04_AMBLGTCOLOR_SOLAR != 0u)
#    error "Enumeration constant <I_C04_AMBLGTCOLOR_SOLAR> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C04_AMBLGTCOLOR_SOLAR (0u)
#   define I_C04_AMBLGTCOLOR_SOLAR ((c04_AmbLgtColor)0u)
#  endif
#  if (defined RTE_CONST_I_C04_AMBLGTCOLOR_NEUTRAL) || (defined I_C04_AMBLGTCOLOR_NEUTRAL)
#   if (!defined RTE_CONST_I_C04_AMBLGTCOLOR_NEUTRAL) || (RTE_CONST_I_C04_AMBLGTCOLOR_NEUTRAL != 1u)
#    error "Enumeration constant <I_C04_AMBLGTCOLOR_NEUTRAL> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C04_AMBLGTCOLOR_NEUTRAL (1u)
#   define I_C04_AMBLGTCOLOR_NEUTRAL ((c04_AmbLgtColor)1u)
#  endif
#  if (defined RTE_CONST_I_C04_AMBLGTCOLOR_POLAR) || (defined I_C04_AMBLGTCOLOR_POLAR)
#   if (!defined RTE_CONST_I_C04_AMBLGTCOLOR_POLAR) || (RTE_CONST_I_C04_AMBLGTCOLOR_POLAR != 2u)
#    error "Enumeration constant <I_C04_AMBLGTCOLOR_POLAR> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C04_AMBLGTCOLOR_POLAR (2u)
#   define I_C04_AMBLGTCOLOR_POLAR ((c04_AmbLgtColor)2u)
#  endif
#  if (defined RTE_CONST_I_C04_AMBLGTCOLOR_RED) || (defined I_C04_AMBLGTCOLOR_RED)
#   if (!defined RTE_CONST_I_C04_AMBLGTCOLOR_RED) || (RTE_CONST_I_C04_AMBLGTCOLOR_RED != 3u)
#    error "Enumeration constant <I_C04_AMBLGTCOLOR_RED> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C04_AMBLGTCOLOR_RED (3u)
#   define I_C04_AMBLGTCOLOR_RED ((c04_AmbLgtColor)3u)
#  endif
#  if (defined RTE_CONST_I_C04_AMBLGTCOLOR_ORANGE) || (defined I_C04_AMBLGTCOLOR_ORANGE)
#   if (!defined RTE_CONST_I_C04_AMBLGTCOLOR_ORANGE) || (RTE_CONST_I_C04_AMBLGTCOLOR_ORANGE != 4u)
#    error "Enumeration constant <I_C04_AMBLGTCOLOR_ORANGE> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C04_AMBLGTCOLOR_ORANGE (4u)
#   define I_C04_AMBLGTCOLOR_ORANGE ((c04_AmbLgtColor)4u)
#  endif
#  if (defined RTE_CONST_I_C04_AMBLGTCOLOR_PINK) || (defined I_C04_AMBLGTCOLOR_PINK)
#   if (!defined RTE_CONST_I_C04_AMBLGTCOLOR_PINK) || (RTE_CONST_I_C04_AMBLGTCOLOR_PINK != 5u)
#    error "Enumeration constant <I_C04_AMBLGTCOLOR_PINK> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C04_AMBLGTCOLOR_PINK (5u)
#   define I_C04_AMBLGTCOLOR_PINK ((c04_AmbLgtColor)5u)
#  endif
#  if (defined RTE_CONST_I_C04_AMBLGTCOLOR_WARMWHITE) || (defined I_C04_AMBLGTCOLOR_WARMWHITE)
#   if (!defined RTE_CONST_I_C04_AMBLGTCOLOR_WARMWHITE) || (RTE_CONST_I_C04_AMBLGTCOLOR_WARMWHITE != 6u)
#    error "Enumeration constant <I_C04_AMBLGTCOLOR_WARMWHITE> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C04_AMBLGTCOLOR_WARMWHITE (6u)
#   define I_C04_AMBLGTCOLOR_WARMWHITE ((c04_AmbLgtColor)6u)
#  endif
#  if (defined RTE_CONST_I_C04_AMBLGTCOLOR_SNA) || (defined I_C04_AMBLGTCOLOR_SNA)
#   if (!defined RTE_CONST_I_C04_AMBLGTCOLOR_SNA) || (RTE_CONST_I_C04_AMBLGTCOLOR_SNA != 15u)
#    error "Enumeration constant <I_C04_AMBLGTCOLOR_SNA> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C04_AMBLGTCOLOR_SNA (15u)
#   define I_C04_AMBLGTCOLOR_SNA ((c04_AmbLgtColor)15u)
#  endif

#  define Rte_TypeDef_c04_HUD_variant
typedef uint8 c04_HUD_variant;
#  define c04_HUD_variant_LowerLimit ((c04_HUD_variant)0u)
#  define c04_HUD_variant_UpperLimit ((c04_HUD_variant)15u)
#  define Rte_InvalidValue_c04_HUD_variant ((c04_HUD_variant)15u)
#  if (defined RTE_CONST_I_C04_HUD_VARIANT_NDEF0) || (defined I_C04_HUD_VARIANT_NDEF0)
#   if (!defined RTE_CONST_I_C04_HUD_VARIANT_NDEF0) || (RTE_CONST_I_C04_HUD_VARIANT_NDEF0 != 0u)
#    error "Enumeration constant <I_C04_HUD_VARIANT_NDEF0> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C04_HUD_VARIANT_NDEF0 (0u)
#   define I_C04_HUD_VARIANT_NDEF0 ((c04_HUD_variant)0u)
#  endif
#  if (defined RTE_CONST_I_C04_HUD_VARIANT_VAR01) || (defined I_C04_HUD_VARIANT_VAR01)
#   if (!defined RTE_CONST_I_C04_HUD_VARIANT_VAR01) || (RTE_CONST_I_C04_HUD_VARIANT_VAR01 != 1u)
#    error "Enumeration constant <I_C04_HUD_VARIANT_VAR01> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C04_HUD_VARIANT_VAR01 (1u)
#   define I_C04_HUD_VARIANT_VAR01 ((c04_HUD_variant)1u)
#  endif
#  if (defined RTE_CONST_I_C04_HUD_VARIANT_VAR02) || (defined I_C04_HUD_VARIANT_VAR02)
#   if (!defined RTE_CONST_I_C04_HUD_VARIANT_VAR02) || (RTE_CONST_I_C04_HUD_VARIANT_VAR02 != 2u)
#    error "Enumeration constant <I_C04_HUD_VARIANT_VAR02> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C04_HUD_VARIANT_VAR02 (2u)
#   define I_C04_HUD_VARIANT_VAR02 ((c04_HUD_variant)2u)
#  endif
#  if (defined RTE_CONST_I_C04_HUD_VARIANT_VAR03) || (defined I_C04_HUD_VARIANT_VAR03)
#   if (!defined RTE_CONST_I_C04_HUD_VARIANT_VAR03) || (RTE_CONST_I_C04_HUD_VARIANT_VAR03 != 3u)
#    error "Enumeration constant <I_C04_HUD_VARIANT_VAR03> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C04_HUD_VARIANT_VAR03 (3u)
#   define I_C04_HUD_VARIANT_VAR03 ((c04_HUD_variant)3u)
#  endif
#  if (defined RTE_CONST_I_C04_HUD_VARIANT_VAR04) || (defined I_C04_HUD_VARIANT_VAR04)
#   if (!defined RTE_CONST_I_C04_HUD_VARIANT_VAR04) || (RTE_CONST_I_C04_HUD_VARIANT_VAR04 != 4u)
#    error "Enumeration constant <I_C04_HUD_VARIANT_VAR04> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C04_HUD_VARIANT_VAR04 (4u)
#   define I_C04_HUD_VARIANT_VAR04 ((c04_HUD_variant)4u)
#  endif
#  if (defined RTE_CONST_I_C04_HUD_VARIANT_VAR05) || (defined I_C04_HUD_VARIANT_VAR05)
#   if (!defined RTE_CONST_I_C04_HUD_VARIANT_VAR05) || (RTE_CONST_I_C04_HUD_VARIANT_VAR05 != 5u)
#    error "Enumeration constant <I_C04_HUD_VARIANT_VAR05> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C04_HUD_VARIANT_VAR05 (5u)
#   define I_C04_HUD_VARIANT_VAR05 ((c04_HUD_variant)5u)
#  endif
#  if (defined RTE_CONST_I_C04_HUD_VARIANT_VAR06) || (defined I_C04_HUD_VARIANT_VAR06)
#   if (!defined RTE_CONST_I_C04_HUD_VARIANT_VAR06) || (RTE_CONST_I_C04_HUD_VARIANT_VAR06 != 6u)
#    error "Enumeration constant <I_C04_HUD_VARIANT_VAR06> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C04_HUD_VARIANT_VAR06 (6u)
#   define I_C04_HUD_VARIANT_VAR06 ((c04_HUD_variant)6u)
#  endif
#  if (defined RTE_CONST_I_C04_HUD_VARIANT_VAR07) || (defined I_C04_HUD_VARIANT_VAR07)
#   if (!defined RTE_CONST_I_C04_HUD_VARIANT_VAR07) || (RTE_CONST_I_C04_HUD_VARIANT_VAR07 != 7u)
#    error "Enumeration constant <I_C04_HUD_VARIANT_VAR07> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C04_HUD_VARIANT_VAR07 (7u)
#   define I_C04_HUD_VARIANT_VAR07 ((c04_HUD_variant)7u)
#  endif
#  if (defined RTE_CONST_I_C04_HUD_VARIANT_VAR08) || (defined I_C04_HUD_VARIANT_VAR08)
#   if (!defined RTE_CONST_I_C04_HUD_VARIANT_VAR08) || (RTE_CONST_I_C04_HUD_VARIANT_VAR08 != 8u)
#    error "Enumeration constant <I_C04_HUD_VARIANT_VAR08> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C04_HUD_VARIANT_VAR08 (8u)
#   define I_C04_HUD_VARIANT_VAR08 ((c04_HUD_variant)8u)
#  endif
#  if (defined RTE_CONST_I_C04_HUD_VARIANT_VAR09) || (defined I_C04_HUD_VARIANT_VAR09)
#   if (!defined RTE_CONST_I_C04_HUD_VARIANT_VAR09) || (RTE_CONST_I_C04_HUD_VARIANT_VAR09 != 9u)
#    error "Enumeration constant <I_C04_HUD_VARIANT_VAR09> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C04_HUD_VARIANT_VAR09 (9u)
#   define I_C04_HUD_VARIANT_VAR09 ((c04_HUD_variant)9u)
#  endif
#  if (defined RTE_CONST_I_C04_HUD_VARIANT_VAR10) || (defined I_C04_HUD_VARIANT_VAR10)
#   if (!defined RTE_CONST_I_C04_HUD_VARIANT_VAR10) || (RTE_CONST_I_C04_HUD_VARIANT_VAR10 != 10u)
#    error "Enumeration constant <I_C04_HUD_VARIANT_VAR10> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C04_HUD_VARIANT_VAR10 (10u)
#   define I_C04_HUD_VARIANT_VAR10 ((c04_HUD_variant)10u)
#  endif
#  if (defined RTE_CONST_I_C04_HUD_VARIANT_VAR11) || (defined I_C04_HUD_VARIANT_VAR11)
#   if (!defined RTE_CONST_I_C04_HUD_VARIANT_VAR11) || (RTE_CONST_I_C04_HUD_VARIANT_VAR11 != 11u)
#    error "Enumeration constant <I_C04_HUD_VARIANT_VAR11> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C04_HUD_VARIANT_VAR11 (11u)
#   define I_C04_HUD_VARIANT_VAR11 ((c04_HUD_variant)11u)
#  endif
#  if (defined RTE_CONST_I_C04_HUD_VARIANT_VAR12) || (defined I_C04_HUD_VARIANT_VAR12)
#   if (!defined RTE_CONST_I_C04_HUD_VARIANT_VAR12) || (RTE_CONST_I_C04_HUD_VARIANT_VAR12 != 12u)
#    error "Enumeration constant <I_C04_HUD_VARIANT_VAR12> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C04_HUD_VARIANT_VAR12 (12u)
#   define I_C04_HUD_VARIANT_VAR12 ((c04_HUD_variant)12u)
#  endif
#  if (defined RTE_CONST_I_C04_HUD_VARIANT_VAR13) || (defined I_C04_HUD_VARIANT_VAR13)
#   if (!defined RTE_CONST_I_C04_HUD_VARIANT_VAR13) || (RTE_CONST_I_C04_HUD_VARIANT_VAR13 != 13u)
#    error "Enumeration constant <I_C04_HUD_VARIANT_VAR13> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C04_HUD_VARIANT_VAR13 (13u)
#   define I_C04_HUD_VARIANT_VAR13 ((c04_HUD_variant)13u)
#  endif
#  if (defined RTE_CONST_I_C04_HUD_VARIANT_VAR14) || (defined I_C04_HUD_VARIANT_VAR14)
#   if (!defined RTE_CONST_I_C04_HUD_VARIANT_VAR14) || (RTE_CONST_I_C04_HUD_VARIANT_VAR14 != 14u)
#    error "Enumeration constant <I_C04_HUD_VARIANT_VAR14> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C04_HUD_VARIANT_VAR14 (14u)
#   define I_C04_HUD_VARIANT_VAR14 ((c04_HUD_variant)14u)
#  endif
#  if (defined RTE_CONST_I_C04_HUD_VARIANT_SNA) || (defined I_C04_HUD_VARIANT_SNA)
#   if (!defined RTE_CONST_I_C04_HUD_VARIANT_SNA) || (RTE_CONST_I_C04_HUD_VARIANT_SNA != 15u)
#    error "Enumeration constant <I_C04_HUD_VARIANT_SNA> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C04_HUD_VARIANT_SNA (15u)
#   define I_C04_HUD_VARIANT_SNA ((c04_HUD_variant)15u)
#  endif

#  define Rte_TypeDef_c04_NVP_Sys_Stat
typedef uint8 c04_NVP_Sys_Stat;
#  define c04_NVP_Sys_Stat_LowerLimit ((c04_NVP_Sys_Stat)0u)
#  define c04_NVP_Sys_Stat_UpperLimit ((c04_NVP_Sys_Stat)15u)
#  define Rte_InvalidValue_c04_NVP_Sys_Stat ((c04_NVP_Sys_Stat)15u)
#  if (defined RTE_CONST_I_C04_NVP_SYS_STAT_NDEF0) || (defined I_C04_NVP_SYS_STAT_NDEF0)
#   if (!defined RTE_CONST_I_C04_NVP_SYS_STAT_NDEF0) || (RTE_CONST_I_C04_NVP_SYS_STAT_NDEF0 != 0u)
#    error "Enumeration constant <I_C04_NVP_SYS_STAT_NDEF0> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C04_NVP_SYS_STAT_NDEF0 (0u)
#   define I_C04_NVP_SYS_STAT_NDEF0 ((c04_NVP_Sys_Stat)0u)
#  endif
#  if (defined RTE_CONST_I_C04_NVP_SYS_STAT_INIT) || (defined I_C04_NVP_SYS_STAT_INIT)
#   if (!defined RTE_CONST_I_C04_NVP_SYS_STAT_INIT) || (RTE_CONST_I_C04_NVP_SYS_STAT_INIT != 1u)
#    error "Enumeration constant <I_C04_NVP_SYS_STAT_INIT> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C04_NVP_SYS_STAT_INIT (1u)
#   define I_C04_NVP_SYS_STAT_INIT ((c04_NVP_Sys_Stat)1u)
#  endif
#  if (defined RTE_CONST_I_C04_NVP_SYS_STAT_FLT) || (defined I_C04_NVP_SYS_STAT_FLT)
#   if (!defined RTE_CONST_I_C04_NVP_SYS_STAT_FLT) || (RTE_CONST_I_C04_NVP_SYS_STAT_FLT != 2u)
#    error "Enumeration constant <I_C04_NVP_SYS_STAT_FLT> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C04_NVP_SYS_STAT_FLT (2u)
#   define I_C04_NVP_SYS_STAT_FLT ((c04_NVP_Sys_Stat)2u)
#  endif
#  if (defined RTE_CONST_I_C04_NVP_SYS_STAT_ACTIVE) || (defined I_C04_NVP_SYS_STAT_ACTIVE)
#   if (!defined RTE_CONST_I_C04_NVP_SYS_STAT_ACTIVE) || (RTE_CONST_I_C04_NVP_SYS_STAT_ACTIVE != 3u)
#    error "Enumeration constant <I_C04_NVP_SYS_STAT_ACTIVE> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C04_NVP_SYS_STAT_ACTIVE (3u)
#   define I_C04_NVP_SYS_STAT_ACTIVE ((c04_NVP_Sys_Stat)3u)
#  endif
#  if (defined RTE_CONST_I_C04_NVP_SYS_STAT_NV_TMP_NA) || (defined I_C04_NVP_SYS_STAT_NV_TMP_NA)
#   if (!defined RTE_CONST_I_C04_NVP_SYS_STAT_NV_TMP_NA) || (RTE_CONST_I_C04_NVP_SYS_STAT_NV_TMP_NA != 4u)
#    error "Enumeration constant <I_C04_NVP_SYS_STAT_NV_TMP_NA> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C04_NVP_SYS_STAT_NV_TMP_NA (4u)
#   define I_C04_NVP_SYS_STAT_NV_TMP_NA ((c04_NVP_Sys_Stat)4u)
#  endif
#  if (defined RTE_CONST_I_C04_NVP_SYS_STAT_TEST_PIC) || (defined I_C04_NVP_SYS_STAT_TEST_PIC)
#   if (!defined RTE_CONST_I_C04_NVP_SYS_STAT_TEST_PIC) || (RTE_CONST_I_C04_NVP_SYS_STAT_TEST_PIC != 5u)
#    error "Enumeration constant <I_C04_NVP_SYS_STAT_TEST_PIC> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C04_NVP_SYS_STAT_TEST_PIC (5u)
#   define I_C04_NVP_SYS_STAT_TEST_PIC ((c04_NVP_Sys_Stat)5u)
#  endif
#  if (defined RTE_CONST_I_C04_NVP_SYS_STAT_CAL) || (defined I_C04_NVP_SYS_STAT_CAL)
#   if (!defined RTE_CONST_I_C04_NVP_SYS_STAT_CAL) || (RTE_CONST_I_C04_NVP_SYS_STAT_CAL != 6u)
#    error "Enumeration constant <I_C04_NVP_SYS_STAT_CAL> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C04_NVP_SYS_STAT_CAL (6u)
#   define I_C04_NVP_SYS_STAT_CAL ((c04_NVP_Sys_Stat)6u)
#  endif
#  if (defined RTE_CONST_I_C04_NVP_SYS_STAT_NV_OBJ_DECT) || (defined I_C04_NVP_SYS_STAT_NV_OBJ_DECT)
#   if (!defined RTE_CONST_I_C04_NVP_SYS_STAT_NV_OBJ_DECT) || (RTE_CONST_I_C04_NVP_SYS_STAT_NV_OBJ_DECT != 7u)
#    error "Enumeration constant <I_C04_NVP_SYS_STAT_NV_OBJ_DECT> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C04_NVP_SYS_STAT_NV_OBJ_DECT (7u)
#   define I_C04_NVP_SYS_STAT_NV_OBJ_DECT ((c04_NVP_Sys_Stat)7u)
#  endif
#  if (defined RTE_CONST_I_C04_NVP_SYS_STAT_SNA) || (defined I_C04_NVP_SYS_STAT_SNA)
#   if (!defined RTE_CONST_I_C04_NVP_SYS_STAT_SNA) || (RTE_CONST_I_C04_NVP_SYS_STAT_SNA != 15u)
#    error "Enumeration constant <I_C04_NVP_SYS_STAT_SNA> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C04_NVP_SYS_STAT_SNA (15u)
#   define I_C04_NVP_SYS_STAT_SNA ((c04_NVP_Sys_Stat)15u)
#  endif

#  define Rte_TypeDef_c04_NVP_Warn_Stat
typedef uint8 c04_NVP_Warn_Stat;
#  define c04_NVP_Warn_Stat_LowerLimit ((c04_NVP_Warn_Stat)0u)
#  define c04_NVP_Warn_Stat_UpperLimit ((c04_NVP_Warn_Stat)15u)
#  define Rte_InvalidValue_c04_NVP_Warn_Stat ((c04_NVP_Warn_Stat)15u)
#  if (defined RTE_CONST_I_C04_NVP_WARN_STAT_OK) || (defined I_C04_NVP_WARN_STAT_OK)
#   if (!defined RTE_CONST_I_C04_NVP_WARN_STAT_OK) || (RTE_CONST_I_C04_NVP_WARN_STAT_OK != 0u)
#    error "Enumeration constant <I_C04_NVP_WARN_STAT_OK> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C04_NVP_WARN_STAT_OK (0u)
#   define I_C04_NVP_WARN_STAT_OK ((c04_NVP_Warn_Stat)0u)
#  endif
#  if (defined RTE_CONST_I_C04_NVP_WARN_STAT_REV_GR) || (defined I_C04_NVP_WARN_STAT_REV_GR)
#   if (!defined RTE_CONST_I_C04_NVP_WARN_STAT_REV_GR) || (RTE_CONST_I_C04_NVP_WARN_STAT_REV_GR != 1u)
#    error "Enumeration constant <I_C04_NVP_WARN_STAT_REV_GR> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C04_NVP_WARN_STAT_REV_GR (1u)
#   define I_C04_NVP_WARN_STAT_REV_GR ((c04_NVP_Warn_Stat)1u)
#  endif
#  if (defined RTE_CONST_I_C04_NVP_WARN_STAT_MAX_SPD) || (defined I_C04_NVP_WARN_STAT_MAX_SPD)
#   if (!defined RTE_CONST_I_C04_NVP_WARN_STAT_MAX_SPD) || (RTE_CONST_I_C04_NVP_WARN_STAT_MAX_SPD != 2u)
#    error "Enumeration constant <I_C04_NVP_WARN_STAT_MAX_SPD> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C04_NVP_WARN_STAT_MAX_SPD (2u)
#   define I_C04_NVP_WARN_STAT_MAX_SPD ((c04_NVP_Warn_Stat)2u)
#  endif
#  if (defined RTE_CONST_I_C04_NVP_WARN_STAT_RLS_ON_AUTO) || (defined I_C04_NVP_WARN_STAT_RLS_ON_AUTO)
#   if (!defined RTE_CONST_I_C04_NVP_WARN_STAT_RLS_ON_AUTO) || (RTE_CONST_I_C04_NVP_WARN_STAT_RLS_ON_AUTO != 3u)
#    error "Enumeration constant <I_C04_NVP_WARN_STAT_RLS_ON_AUTO> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C04_NVP_WARN_STAT_RLS_ON_AUTO (3u)
#   define I_C04_NVP_WARN_STAT_RLS_ON_AUTO ((c04_NVP_Warn_Stat)3u)
#  endif
#  if (defined RTE_CONST_I_C04_NVP_WARN_STAT_NVP_INIT) || (defined I_C04_NVP_WARN_STAT_NVP_INIT)
#   if (!defined RTE_CONST_I_C04_NVP_WARN_STAT_NVP_INIT) || (RTE_CONST_I_C04_NVP_WARN_STAT_NVP_INIT != 4u)
#    error "Enumeration constant <I_C04_NVP_WARN_STAT_NVP_INIT> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C04_NVP_WARN_STAT_NVP_INIT (4u)
#   define I_C04_NVP_WARN_STAT_NVP_INIT ((c04_NVP_Warn_Stat)4u)
#  endif
#  if (defined RTE_CONST_I_C04_NVP_WARN_STAT_DAY) || (defined I_C04_NVP_WARN_STAT_DAY)
#   if (!defined RTE_CONST_I_C04_NVP_WARN_STAT_DAY) || (RTE_CONST_I_C04_NVP_WARN_STAT_DAY != 5u)
#    error "Enumeration constant <I_C04_NVP_WARN_STAT_DAY> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C04_NVP_WARN_STAT_DAY (5u)
#   define I_C04_NVP_WARN_STAT_DAY ((c04_NVP_Warn_Stat)5u)
#  endif
#  if (defined RTE_CONST_I_C04_NVP_WARN_STAT_FLT) || (defined I_C04_NVP_WARN_STAT_FLT)
#   if (!defined RTE_CONST_I_C04_NVP_WARN_STAT_FLT) || (RTE_CONST_I_C04_NVP_WARN_STAT_FLT != 6u)
#    error "Enumeration constant <I_C04_NVP_WARN_STAT_FLT> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C04_NVP_WARN_STAT_FLT (6u)
#   define I_C04_NVP_WARN_STAT_FLT ((c04_NVP_Warn_Stat)6u)
#  endif
#  if (defined RTE_CONST_I_C04_NVP_WARN_STAT_NV_TEMP_NA) || (defined I_C04_NVP_WARN_STAT_NV_TEMP_NA)
#   if (!defined RTE_CONST_I_C04_NVP_WARN_STAT_NV_TEMP_NA) || (RTE_CONST_I_C04_NVP_WARN_STAT_NV_TEMP_NA != 7u)
#    error "Enumeration constant <I_C04_NVP_WARN_STAT_NV_TEMP_NA> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C04_NVP_WARN_STAT_NV_TEMP_NA (7u)
#   define I_C04_NVP_WARN_STAT_NV_TEMP_NA ((c04_NVP_Warn_Stat)7u)
#  endif
#  if (defined RTE_CONST_I_C04_NVP_WARN_STAT_NV_AVL_AGN) || (defined I_C04_NVP_WARN_STAT_NV_AVL_AGN)
#   if (!defined RTE_CONST_I_C04_NVP_WARN_STAT_NV_AVL_AGN) || (RTE_CONST_I_C04_NVP_WARN_STAT_NV_AVL_AGN != 8u)
#    error "Enumeration constant <I_C04_NVP_WARN_STAT_NV_AVL_AGN> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C04_NVP_WARN_STAT_NV_AVL_AGN (8u)
#   define I_C04_NVP_WARN_STAT_NV_AVL_AGN ((c04_NVP_Warn_Stat)8u)
#  endif
#  if (defined RTE_CONST_I_C04_NVP_WARN_STAT_DGL_NA) || (defined I_C04_NVP_WARN_STAT_DGL_NA)
#   if (!defined RTE_CONST_I_C04_NVP_WARN_STAT_DGL_NA) || (RTE_CONST_I_C04_NVP_WARN_STAT_DGL_NA != 9u)
#    error "Enumeration constant <I_C04_NVP_WARN_STAT_DGL_NA> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C04_NVP_WARN_STAT_DGL_NA (9u)
#   define I_C04_NVP_WARN_STAT_DGL_NA ((c04_NVP_Warn_Stat)9u)
#  endif
#  if (defined RTE_CONST_I_C04_NVP_WARN_STAT_DGL_TEMP_NA) || (defined I_C04_NVP_WARN_STAT_DGL_TEMP_NA)
#   if (!defined RTE_CONST_I_C04_NVP_WARN_STAT_DGL_TEMP_NA) || (RTE_CONST_I_C04_NVP_WARN_STAT_DGL_TEMP_NA != 10u)
#    error "Enumeration constant <I_C04_NVP_WARN_STAT_DGL_TEMP_NA> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C04_NVP_WARN_STAT_DGL_TEMP_NA (10u)
#   define I_C04_NVP_WARN_STAT_DGL_TEMP_NA ((c04_NVP_Warn_Stat)10u)
#  endif
#  if (defined RTE_CONST_I_C04_NVP_WARN_STAT_SNA) || (defined I_C04_NVP_WARN_STAT_SNA)
#   if (!defined RTE_CONST_I_C04_NVP_WARN_STAT_SNA) || (RTE_CONST_I_C04_NVP_WARN_STAT_SNA != 15u)
#    error "Enumeration constant <I_C04_NVP_WARN_STAT_SNA> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C04_NVP_WARN_STAT_SNA (15u)
#   define I_C04_NVP_WARN_STAT_SNA ((c04_NVP_Warn_Stat)15u)
#  endif

#  define Rte_TypeDef_c04_Steps_0_14_1
typedef uint8 c04_Steps_0_14_1;
#  define c04_Steps_0_14_1_LowerLimit ((c04_Steps_0_14_1)0u)
#  define c04_Steps_0_14_1_UpperLimit ((c04_Steps_0_14_1)15u)
#  define Rte_InvalidValue_c04_Steps_0_14_1 ((c04_Steps_0_14_1)15u)
#  if (defined RTE_CONST_I_C04_STEPS_0_14_1_SNA) || (defined I_C04_STEPS_0_14_1_SNA)
#   if (!defined RTE_CONST_I_C04_STEPS_0_14_1_SNA) || (RTE_CONST_I_C04_STEPS_0_14_1_SNA != 15u)
#    error "Enumeration constant <I_C04_STEPS_0_14_1_SNA> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C04_STEPS_0_14_1_SNA (15u)
#   define I_C04_STEPS_0_14_1_SNA ((c04_Steps_0_14_1)15u)
#  endif

#  define Rte_TypeDef_c04_TSL_RND_Posn_StW
typedef uint8 c04_TSL_RND_Posn_StW;
#  define c04_TSL_RND_Posn_StW_LowerLimit ((c04_TSL_RND_Posn_StW)0u)
#  define c04_TSL_RND_Posn_StW_UpperLimit ((c04_TSL_RND_Posn_StW)15u)
#  define Rte_InvalidValue_c04_TSL_RND_Posn_StW ((c04_TSL_RND_Posn_StW)15u)
#  if (defined RTE_CONST_I_C04_TSL_RND_POSN_STW_IDLE) || (defined I_C04_TSL_RND_POSN_STW_IDLE)
#   if (!defined RTE_CONST_I_C04_TSL_RND_POSN_STW_IDLE) || (RTE_CONST_I_C04_TSL_RND_POSN_STW_IDLE != 0u)
#    error "Enumeration constant <I_C04_TSL_RND_POSN_STW_IDLE> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C04_TSL_RND_POSN_STW_IDLE (0u)
#   define I_C04_TSL_RND_POSN_STW_IDLE ((c04_TSL_RND_Posn_StW)0u)
#  endif
#  if (defined RTE_CONST_I_C04_TSL_RND_POSN_STW_R) || (defined I_C04_TSL_RND_POSN_STW_R)
#   if (!defined RTE_CONST_I_C04_TSL_RND_POSN_STW_R) || (RTE_CONST_I_C04_TSL_RND_POSN_STW_R != 1u)
#    error "Enumeration constant <I_C04_TSL_RND_POSN_STW_R> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C04_TSL_RND_POSN_STW_R (1u)
#   define I_C04_TSL_RND_POSN_STW_R ((c04_TSL_RND_Posn_StW)1u)
#  endif
#  if (defined RTE_CONST_I_C04_TSL_RND_POSN_STW_N_UP) || (defined I_C04_TSL_RND_POSN_STW_N_UP)
#   if (!defined RTE_CONST_I_C04_TSL_RND_POSN_STW_N_UP) || (RTE_CONST_I_C04_TSL_RND_POSN_STW_N_UP != 2u)
#    error "Enumeration constant <I_C04_TSL_RND_POSN_STW_N_UP> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C04_TSL_RND_POSN_STW_N_UP (2u)
#   define I_C04_TSL_RND_POSN_STW_N_UP ((c04_TSL_RND_Posn_StW)2u)
#  endif
#  if (defined RTE_CONST_I_C04_TSL_RND_POSN_STW_N_DOWN) || (defined I_C04_TSL_RND_POSN_STW_N_DOWN)
#   if (!defined RTE_CONST_I_C04_TSL_RND_POSN_STW_N_DOWN) || (RTE_CONST_I_C04_TSL_RND_POSN_STW_N_DOWN != 4u)
#    error "Enumeration constant <I_C04_TSL_RND_POSN_STW_N_DOWN> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C04_TSL_RND_POSN_STW_N_DOWN (4u)
#   define I_C04_TSL_RND_POSN_STW_N_DOWN ((c04_TSL_RND_Posn_StW)4u)
#  endif
#  if (defined RTE_CONST_I_C04_TSL_RND_POSN_STW_INI) || (defined I_C04_TSL_RND_POSN_STW_INI)
#   if (!defined RTE_CONST_I_C04_TSL_RND_POSN_STW_INI) || (RTE_CONST_I_C04_TSL_RND_POSN_STW_INI != 6u)
#    error "Enumeration constant <I_C04_TSL_RND_POSN_STW_INI> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C04_TSL_RND_POSN_STW_INI (6u)
#   define I_C04_TSL_RND_POSN_STW_INI ((c04_TSL_RND_Posn_StW)6u)
#  endif
#  if (defined RTE_CONST_I_C04_TSL_RND_POSN_STW_D) || (defined I_C04_TSL_RND_POSN_STW_D)
#   if (!defined RTE_CONST_I_C04_TSL_RND_POSN_STW_D) || (RTE_CONST_I_C04_TSL_RND_POSN_STW_D != 8u)
#    error "Enumeration constant <I_C04_TSL_RND_POSN_STW_D> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C04_TSL_RND_POSN_STW_D (8u)
#   define I_C04_TSL_RND_POSN_STW_D ((c04_TSL_RND_Posn_StW)8u)
#  endif
#  if (defined RTE_CONST_I_C04_TSL_RND_POSN_STW_SNA) || (defined I_C04_TSL_RND_POSN_STW_SNA)
#   if (!defined RTE_CONST_I_C04_TSL_RND_POSN_STW_SNA) || (RTE_CONST_I_C04_TSL_RND_POSN_STW_SNA != 15u)
#    error "Enumeration constant <I_C04_TSL_RND_POSN_STW_SNA> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C04_TSL_RND_POSN_STW_SNA (15u)
#   define I_C04_TSL_RND_POSN_STW_SNA ((c04_TSL_RND_Posn_StW)15u)
#  endif

#  define Rte_TypeDef_c05_LDC_MsgDisp_Rq
typedef uint8 c05_LDC_MsgDisp_Rq;
#  define c05_LDC_MsgDisp_Rq_LowerLimit ((c05_LDC_MsgDisp_Rq)0u)
#  define c05_LDC_MsgDisp_Rq_UpperLimit ((c05_LDC_MsgDisp_Rq)31u)
#  define Rte_InvalidValue_c05_LDC_MsgDisp_Rq ((c05_LDC_MsgDisp_Rq)31u)
#  if (defined RTE_CONST_I_C05_LDC_MSGDISP_RQ_IDLE) || (defined I_C05_LDC_MSGDISP_RQ_IDLE)
#   if (!defined RTE_CONST_I_C05_LDC_MSGDISP_RQ_IDLE) || (RTE_CONST_I_C05_LDC_MSGDISP_RQ_IDLE != 0u)
#    error "Enumeration constant <I_C05_LDC_MSGDISP_RQ_IDLE> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C05_LDC_MSGDISP_RQ_IDLE (0u)
#   define I_C05_LDC_MSGDISP_RQ_IDLE ((c05_LDC_MsgDisp_Rq)0u)
#  endif
#  if (defined RTE_CONST_I_C05_LDC_MSGDISP_RQ_MSG1_24B_250) || (defined I_C05_LDC_MSGDISP_RQ_MSG1_24B_250)
#   if (!defined RTE_CONST_I_C05_LDC_MSGDISP_RQ_MSG1_24B_250) || (RTE_CONST_I_C05_LDC_MSGDISP_RQ_MSG1_24B_250 != 1u)
#    error "Enumeration constant <I_C05_LDC_MSGDISP_RQ_MSG1_24B_250> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C05_LDC_MSGDISP_RQ_MSG1_24B_250 (1u)
#   define I_C05_LDC_MSGDISP_RQ_MSG1_24B_250 ((c05_LDC_MsgDisp_Rq)1u)
#  endif
#  if (defined RTE_CONST_I_C05_LDC_MSGDISP_RQ_MSG2_24E_24F) || (defined I_C05_LDC_MSGDISP_RQ_MSG2_24E_24F)
#   if (!defined RTE_CONST_I_C05_LDC_MSGDISP_RQ_MSG2_24E_24F) || (RTE_CONST_I_C05_LDC_MSGDISP_RQ_MSG2_24E_24F != 2u)
#    error "Enumeration constant <I_C05_LDC_MSGDISP_RQ_MSG2_24E_24F> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C05_LDC_MSGDISP_RQ_MSG2_24E_24F (2u)
#   define I_C05_LDC_MSGDISP_RQ_MSG2_24E_24F ((c05_LDC_MsgDisp_Rq)2u)
#  endif
#  if (defined RTE_CONST_I_C05_LDC_MSGDISP_RQ_MSG3_1ED) || (defined I_C05_LDC_MSGDISP_RQ_MSG3_1ED)
#   if (!defined RTE_CONST_I_C05_LDC_MSGDISP_RQ_MSG3_1ED) || (RTE_CONST_I_C05_LDC_MSGDISP_RQ_MSG3_1ED != 3u)
#    error "Enumeration constant <I_C05_LDC_MSGDISP_RQ_MSG3_1ED> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C05_LDC_MSGDISP_RQ_MSG3_1ED (3u)
#   define I_C05_LDC_MSGDISP_RQ_MSG3_1ED ((c05_LDC_MsgDisp_Rq)3u)
#  endif
#  if (defined RTE_CONST_I_C05_LDC_MSGDISP_RQ_MSG4_24E_252) || (defined I_C05_LDC_MSGDISP_RQ_MSG4_24E_252)
#   if (!defined RTE_CONST_I_C05_LDC_MSGDISP_RQ_MSG4_24E_252) || (RTE_CONST_I_C05_LDC_MSGDISP_RQ_MSG4_24E_252 != 4u)
#    error "Enumeration constant <I_C05_LDC_MSGDISP_RQ_MSG4_24E_252> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C05_LDC_MSGDISP_RQ_MSG4_24E_252 (4u)
#   define I_C05_LDC_MSGDISP_RQ_MSG4_24E_252 ((c05_LDC_MsgDisp_Rq)4u)
#  endif
#  if (defined RTE_CONST_I_C05_LDC_MSGDISP_RQ_MSG5_24C_251) || (defined I_C05_LDC_MSGDISP_RQ_MSG5_24C_251)
#   if (!defined RTE_CONST_I_C05_LDC_MSGDISP_RQ_MSG5_24C_251) || (RTE_CONST_I_C05_LDC_MSGDISP_RQ_MSG5_24C_251 != 5u)
#    error "Enumeration constant <I_C05_LDC_MSGDISP_RQ_MSG5_24C_251> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C05_LDC_MSGDISP_RQ_MSG5_24C_251 (5u)
#   define I_C05_LDC_MSGDISP_RQ_MSG5_24C_251 ((c05_LDC_MsgDisp_Rq)5u)
#  endif
#  if (defined RTE_CONST_I_C05_LDC_MSGDISP_RQ_MSG6_365_386) || (defined I_C05_LDC_MSGDISP_RQ_MSG6_365_386)
#   if (!defined RTE_CONST_I_C05_LDC_MSGDISP_RQ_MSG6_365_386) || (RTE_CONST_I_C05_LDC_MSGDISP_RQ_MSG6_365_386 != 6u)
#    error "Enumeration constant <I_C05_LDC_MSGDISP_RQ_MSG6_365_386> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C05_LDC_MSGDISP_RQ_MSG6_365_386 (6u)
#   define I_C05_LDC_MSGDISP_RQ_MSG6_365_386 ((c05_LDC_MsgDisp_Rq)6u)
#  endif
#  if (defined RTE_CONST_I_C05_LDC_MSGDISP_RQ_MSG7_381_37F) || (defined I_C05_LDC_MSGDISP_RQ_MSG7_381_37F)
#   if (!defined RTE_CONST_I_C05_LDC_MSGDISP_RQ_MSG7_381_37F) || (RTE_CONST_I_C05_LDC_MSGDISP_RQ_MSG7_381_37F != 7u)
#    error "Enumeration constant <I_C05_LDC_MSGDISP_RQ_MSG7_381_37F> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C05_LDC_MSGDISP_RQ_MSG7_381_37F (7u)
#   define I_C05_LDC_MSGDISP_RQ_MSG7_381_37F ((c05_LDC_MsgDisp_Rq)7u)
#  endif
#  if (defined RTE_CONST_I_C05_LDC_MSGDISP_RQ_MSG8_369_367) || (defined I_C05_LDC_MSGDISP_RQ_MSG8_369_367)
#   if (!defined RTE_CONST_I_C05_LDC_MSGDISP_RQ_MSG8_369_367) || (RTE_CONST_I_C05_LDC_MSGDISP_RQ_MSG8_369_367 != 8u)
#    error "Enumeration constant <I_C05_LDC_MSGDISP_RQ_MSG8_369_367> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C05_LDC_MSGDISP_RQ_MSG8_369_367 (8u)
#   define I_C05_LDC_MSGDISP_RQ_MSG8_369_367 ((c05_LDC_MsgDisp_Rq)8u)
#  endif
#  if (defined RTE_CONST_I_C05_LDC_MSGDISP_RQ_MSG9_3AD) || (defined I_C05_LDC_MSGDISP_RQ_MSG9_3AD)
#   if (!defined RTE_CONST_I_C05_LDC_MSGDISP_RQ_MSG9_3AD) || (RTE_CONST_I_C05_LDC_MSGDISP_RQ_MSG9_3AD != 9u)
#    error "Enumeration constant <I_C05_LDC_MSGDISP_RQ_MSG9_3AD> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C05_LDC_MSGDISP_RQ_MSG9_3AD (9u)
#   define I_C05_LDC_MSGDISP_RQ_MSG9_3AD ((c05_LDC_MsgDisp_Rq)9u)
#  endif
#  if (defined RTE_CONST_I_C05_LDC_MSGDISP_RQ_MSG10_38A) || (defined I_C05_LDC_MSGDISP_RQ_MSG10_38A)
#   if (!defined RTE_CONST_I_C05_LDC_MSGDISP_RQ_MSG10_38A) || (RTE_CONST_I_C05_LDC_MSGDISP_RQ_MSG10_38A != 10u)
#    error "Enumeration constant <I_C05_LDC_MSGDISP_RQ_MSG10_38A> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C05_LDC_MSGDISP_RQ_MSG10_38A (10u)
#   define I_C05_LDC_MSGDISP_RQ_MSG10_38A ((c05_LDC_MsgDisp_Rq)10u)
#  endif
#  if (defined RTE_CONST_I_C05_LDC_MSGDISP_RQ_MSG11_1F8) || (defined I_C05_LDC_MSGDISP_RQ_MSG11_1F8)
#   if (!defined RTE_CONST_I_C05_LDC_MSGDISP_RQ_MSG11_1F8) || (RTE_CONST_I_C05_LDC_MSGDISP_RQ_MSG11_1F8 != 11u)
#    error "Enumeration constant <I_C05_LDC_MSGDISP_RQ_MSG11_1F8> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C05_LDC_MSGDISP_RQ_MSG11_1F8 (11u)
#   define I_C05_LDC_MSGDISP_RQ_MSG11_1F8 ((c05_LDC_MsgDisp_Rq)11u)
#  endif
#  if (defined RTE_CONST_I_C05_LDC_MSGDISP_RQ_MSG12) || (defined I_C05_LDC_MSGDISP_RQ_MSG12)
#   if (!defined RTE_CONST_I_C05_LDC_MSGDISP_RQ_MSG12) || (RTE_CONST_I_C05_LDC_MSGDISP_RQ_MSG12 != 12u)
#    error "Enumeration constant <I_C05_LDC_MSGDISP_RQ_MSG12> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C05_LDC_MSGDISP_RQ_MSG12 (12u)
#   define I_C05_LDC_MSGDISP_RQ_MSG12 ((c05_LDC_MsgDisp_Rq)12u)
#  endif
#  if (defined RTE_CONST_I_C05_LDC_MSGDISP_RQ_MSG13_246) || (defined I_C05_LDC_MSGDISP_RQ_MSG13_246)
#   if (!defined RTE_CONST_I_C05_LDC_MSGDISP_RQ_MSG13_246) || (RTE_CONST_I_C05_LDC_MSGDISP_RQ_MSG13_246 != 13u)
#    error "Enumeration constant <I_C05_LDC_MSGDISP_RQ_MSG13_246> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C05_LDC_MSGDISP_RQ_MSG13_246 (13u)
#   define I_C05_LDC_MSGDISP_RQ_MSG13_246 ((c05_LDC_MsgDisp_Rq)13u)
#  endif
#  if (defined RTE_CONST_I_C05_LDC_MSGDISP_RQ_MSG14_247) || (defined I_C05_LDC_MSGDISP_RQ_MSG14_247)
#   if (!defined RTE_CONST_I_C05_LDC_MSGDISP_RQ_MSG14_247) || (RTE_CONST_I_C05_LDC_MSGDISP_RQ_MSG14_247 != 14u)
#    error "Enumeration constant <I_C05_LDC_MSGDISP_RQ_MSG14_247> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C05_LDC_MSGDISP_RQ_MSG14_247 (14u)
#   define I_C05_LDC_MSGDISP_RQ_MSG14_247 ((c05_LDC_MsgDisp_Rq)14u)
#  endif
#  if (defined RTE_CONST_I_C05_LDC_MSGDISP_RQ_MSG15) || (defined I_C05_LDC_MSGDISP_RQ_MSG15)
#   if (!defined RTE_CONST_I_C05_LDC_MSGDISP_RQ_MSG15) || (RTE_CONST_I_C05_LDC_MSGDISP_RQ_MSG15 != 15u)
#    error "Enumeration constant <I_C05_LDC_MSGDISP_RQ_MSG15> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C05_LDC_MSGDISP_RQ_MSG15 (15u)
#   define I_C05_LDC_MSGDISP_RQ_MSG15 ((c05_LDC_MsgDisp_Rq)15u)
#  endif
#  if (defined RTE_CONST_I_C05_LDC_MSGDISP_RQ_MSG16_249) || (defined I_C05_LDC_MSGDISP_RQ_MSG16_249)
#   if (!defined RTE_CONST_I_C05_LDC_MSGDISP_RQ_MSG16_249) || (RTE_CONST_I_C05_LDC_MSGDISP_RQ_MSG16_249 != 16u)
#    error "Enumeration constant <I_C05_LDC_MSGDISP_RQ_MSG16_249> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C05_LDC_MSGDISP_RQ_MSG16_249 (16u)
#   define I_C05_LDC_MSGDISP_RQ_MSG16_249 ((c05_LDC_MsgDisp_Rq)16u)
#  endif
#  if (defined RTE_CONST_I_C05_LDC_MSGDISP_RQ_MSG17_1F7) || (defined I_C05_LDC_MSGDISP_RQ_MSG17_1F7)
#   if (!defined RTE_CONST_I_C05_LDC_MSGDISP_RQ_MSG17_1F7) || (RTE_CONST_I_C05_LDC_MSGDISP_RQ_MSG17_1F7 != 17u)
#    error "Enumeration constant <I_C05_LDC_MSGDISP_RQ_MSG17_1F7> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C05_LDC_MSGDISP_RQ_MSG17_1F7 (17u)
#   define I_C05_LDC_MSGDISP_RQ_MSG17_1F7 ((c05_LDC_MsgDisp_Rq)17u)
#  endif
#  if (defined RTE_CONST_I_C05_LDC_MSGDISP_RQ_MSG18_445) || (defined I_C05_LDC_MSGDISP_RQ_MSG18_445)
#   if (!defined RTE_CONST_I_C05_LDC_MSGDISP_RQ_MSG18_445) || (RTE_CONST_I_C05_LDC_MSGDISP_RQ_MSG18_445 != 18u)
#    error "Enumeration constant <I_C05_LDC_MSGDISP_RQ_MSG18_445> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C05_LDC_MSGDISP_RQ_MSG18_445 (18u)
#   define I_C05_LDC_MSGDISP_RQ_MSG18_445 ((c05_LDC_MsgDisp_Rq)18u)
#  endif
#  if (defined RTE_CONST_I_C05_LDC_MSGDISP_RQ_MSG19_24A) || (defined I_C05_LDC_MSGDISP_RQ_MSG19_24A)
#   if (!defined RTE_CONST_I_C05_LDC_MSGDISP_RQ_MSG19_24A) || (RTE_CONST_I_C05_LDC_MSGDISP_RQ_MSG19_24A != 19u)
#    error "Enumeration constant <I_C05_LDC_MSGDISP_RQ_MSG19_24A> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C05_LDC_MSGDISP_RQ_MSG19_24A (19u)
#   define I_C05_LDC_MSGDISP_RQ_MSG19_24A ((c05_LDC_MsgDisp_Rq)19u)
#  endif
#  if (defined RTE_CONST_I_C05_LDC_MSGDISP_RQ_MSG20_366_36A) || (defined I_C05_LDC_MSGDISP_RQ_MSG20_366_36A)
#   if (!defined RTE_CONST_I_C05_LDC_MSGDISP_RQ_MSG20_366_36A) || (RTE_CONST_I_C05_LDC_MSGDISP_RQ_MSG20_366_36A != 20u)
#    error "Enumeration constant <I_C05_LDC_MSGDISP_RQ_MSG20_366_36A> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C05_LDC_MSGDISP_RQ_MSG20_366_36A (20u)
#   define I_C05_LDC_MSGDISP_RQ_MSG20_366_36A ((c05_LDC_MsgDisp_Rq)20u)
#  endif
#  if (defined RTE_CONST_I_C05_LDC_MSGDISP_RQ_MSG21) || (defined I_C05_LDC_MSGDISP_RQ_MSG21)
#   if (!defined RTE_CONST_I_C05_LDC_MSGDISP_RQ_MSG21) || (RTE_CONST_I_C05_LDC_MSGDISP_RQ_MSG21 != 21u)
#    error "Enumeration constant <I_C05_LDC_MSGDISP_RQ_MSG21> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C05_LDC_MSGDISP_RQ_MSG21 (21u)
#   define I_C05_LDC_MSGDISP_RQ_MSG21 ((c05_LDC_MsgDisp_Rq)21u)
#  endif
#  if (defined RTE_CONST_I_C05_LDC_MSGDISP_RQ_SNA) || (defined I_C05_LDC_MSGDISP_RQ_SNA)
#   if (!defined RTE_CONST_I_C05_LDC_MSGDISP_RQ_SNA) || (RTE_CONST_I_C05_LDC_MSGDISP_RQ_SNA != 31u)
#    error "Enumeration constant <I_C05_LDC_MSGDISP_RQ_SNA> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C05_LDC_MSGDISP_RQ_SNA (31u)
#   define I_C05_LDC_MSGDISP_RQ_SNA ((c05_LDC_MsgDisp_Rq)31u)
#  endif

#  define Rte_TypeDef_c05_degC_15_29_0k5
typedef uint8 c05_degC_15_29_0k5;
#  define c05_degC_15_29_0k5_LowerLimit ((c05_degC_15_29_0k5)0u)
#  define c05_degC_15_29_0k5_UpperLimit ((c05_degC_15_29_0k5)31u)
#  define Rte_InvalidValue_c05_degC_15_29_0k5 ((c05_degC_15_29_0k5)31u)
#  if (defined RTE_CONST_I_C05_DEGC_15_29_0K5_LOW) || (defined I_C05_DEGC_15_29_0K5_LOW)
#   if (!defined RTE_CONST_I_C05_DEGC_15_29_0K5_LOW) || (RTE_CONST_I_C05_DEGC_15_29_0K5_LOW != 0u)
#    error "Enumeration constant <I_C05_DEGC_15_29_0K5_LOW> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C05_DEGC_15_29_0K5_LOW (0u)
#   define I_C05_DEGC_15_29_0K5_LOW ((c05_degC_15_29_0k5)0u)
#  endif
#  if (defined RTE_CONST_I_C05_DEGC_15_29_0K5_HIGH) || (defined I_C05_DEGC_15_29_0K5_HIGH)
#   if (!defined RTE_CONST_I_C05_DEGC_15_29_0K5_HIGH) || (RTE_CONST_I_C05_DEGC_15_29_0K5_HIGH != 30u)
#    error "Enumeration constant <I_C05_DEGC_15_29_0K5_HIGH> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C05_DEGC_15_29_0K5_HIGH (30u)
#   define I_C05_DEGC_15_29_0K5_HIGH ((c05_degC_15_29_0k5)30u)
#  endif
#  if (defined RTE_CONST_I_C05_DEGC_15_29_0K5_SNA) || (defined I_C05_DEGC_15_29_0K5_SNA)
#   if (!defined RTE_CONST_I_C05_DEGC_15_29_0K5_SNA) || (RTE_CONST_I_C05_DEGC_15_29_0K5_SNA != 31u)
#    error "Enumeration constant <I_C05_DEGC_15_29_0K5_SNA> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C05_DEGC_15_29_0K5_SNA (31u)
#   define I_C05_DEGC_15_29_0K5_SNA ((c05_degC_15_29_0k5)31u)
#  endif

#  define Rte_TypeDef_c08_1_6_0k01969
typedef uint8 c08_1_6_0k01969;
#  define c08_1_6_0k01969_LowerLimit ((c08_1_6_0k01969)0u)
#  define c08_1_6_0k01969_UpperLimit ((c08_1_6_0k01969)255u)
#  define Rte_InvalidValue_c08_1_6_0k01969 ((c08_1_6_0k01969)255u)
#  if (defined RTE_CONST_I_C08_1_6_0K01969_SNA) || (defined I_C08_1_6_0K01969_SNA)
#   if (!defined RTE_CONST_I_C08_1_6_0K01969_SNA) || (RTE_CONST_I_C08_1_6_0K01969_SNA != 255u)
#    error "Enumeration constant <I_C08_1_6_0K01969_SNA> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C08_1_6_0K01969_SNA (255u)
#   define I_C08_1_6_0K01969_SNA ((c08_1_6_0k01969)255u)
#  endif

#  define Rte_TypeDef_c08_LDC_Dist
typedef uint8 c08_LDC_Dist;
#  define c08_LDC_Dist_LowerLimit ((c08_LDC_Dist)0u)
#  define c08_LDC_Dist_UpperLimit ((c08_LDC_Dist)255u)
#  define Rte_InvalidValue_c08_LDC_Dist ((c08_LDC_Dist)255u)
#  if (defined RTE_CONST_I_C08_LDC_DIST_IDLE_STAR1_172_231) || (defined I_C08_LDC_DIST_IDLE_STAR1_172_231)
#   if (!defined RTE_CONST_I_C08_LDC_DIST_IDLE_STAR1_172_231) || (RTE_CONST_I_C08_LDC_DIST_IDLE_STAR1_172_231 != 151u)
#    error "Enumeration constant <I_C08_LDC_DIST_IDLE_STAR1_172_231> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C08_LDC_DIST_IDLE_STAR1_172_231 (151u)
#   define I_C08_LDC_DIST_IDLE_STAR1_172_231 ((c08_LDC_Dist)151u)
#  endif
#  if (defined RTE_CONST_I_C08_LDC_DIST_IDLE) || (defined I_C08_LDC_DIST_IDLE)
#   if (!defined RTE_CONST_I_C08_LDC_DIST_IDLE) || (RTE_CONST_I_C08_LDC_DIST_IDLE != 254u)
#    error "Enumeration constant <I_C08_LDC_DIST_IDLE> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C08_LDC_DIST_IDLE (254u)
#   define I_C08_LDC_DIST_IDLE ((c08_LDC_Dist)254u)
#  endif
#  if (defined RTE_CONST_I_C08_LDC_DIST_SNA) || (defined I_C08_LDC_DIST_SNA)
#   if (!defined RTE_CONST_I_C08_LDC_DIST_SNA) || (RTE_CONST_I_C08_LDC_DIST_SNA != 255u)
#    error "Enumeration constant <I_C08_LDC_DIST_SNA> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C08_LDC_DIST_SNA (255u)
#   define I_C08_LDC_DIST_SNA ((c08_LDC_Dist)255u)
#  endif

#  define Rte_TypeDef_c08_LDC_Spd
typedef uint8 c08_LDC_Spd;
#  define c08_LDC_Spd_LowerLimit ((c08_LDC_Spd)0u)
#  define c08_LDC_Spd_UpperLimit ((c08_LDC_Spd)255u)
#  define Rte_InvalidValue_c08_LDC_Spd ((c08_LDC_Spd)255u)
#  if (defined RTE_CONST_I_C08_LDC_SPD_END) || (defined I_C08_LDC_SPD_END)
#   if (!defined RTE_CONST_I_C08_LDC_SPD_END) || (RTE_CONST_I_C08_LDC_SPD_END != 251u)
#    error "Enumeration constant <I_C08_LDC_SPD_END> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C08_LDC_SPD_END (251u)
#   define I_C08_LDC_SPD_END ((c08_LDC_Spd)251u)
#  endif
#  if (defined RTE_CONST_I_C08_LDC_SPD_WTSL) || (defined I_C08_LDC_SPD_WTSL)
#   if (!defined RTE_CONST_I_C08_LDC_SPD_WTSL) || (RTE_CONST_I_C08_LDC_SPD_WTSL != 252u)
#    error "Enumeration constant <I_C08_LDC_SPD_WTSL> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C08_LDC_SPD_WTSL (252u)
#   define I_C08_LDC_SPD_WTSL ((c08_LDC_Spd)252u)
#  endif
#  if (defined RTE_CONST_I_C08_LDC_SPD_SEG_RING_NOT_VSBL) || (defined I_C08_LDC_SPD_SEG_RING_NOT_VSBL)
#   if (!defined RTE_CONST_I_C08_LDC_SPD_SEG_RING_NOT_VSBL) || (RTE_CONST_I_C08_LDC_SPD_SEG_RING_NOT_VSBL != 253u)
#    error "Enumeration constant <I_C08_LDC_SPD_SEG_RING_NOT_VSBL> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C08_LDC_SPD_SEG_RING_NOT_VSBL (253u)
#   define I_C08_LDC_SPD_SEG_RING_NOT_VSBL ((c08_LDC_Spd)253u)
#  endif
#  if (defined RTE_CONST_I_C08_LDC_SPD_NDEF254) || (defined I_C08_LDC_SPD_NDEF254)
#   if (!defined RTE_CONST_I_C08_LDC_SPD_NDEF254) || (RTE_CONST_I_C08_LDC_SPD_NDEF254 != 254u)
#    error "Enumeration constant <I_C08_LDC_SPD_NDEF254> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C08_LDC_SPD_NDEF254 (254u)
#   define I_C08_LDC_SPD_NDEF254 ((c08_LDC_Spd)254u)
#  endif
#  if (defined RTE_CONST_I_C08_LDC_SPD_SNA) || (defined I_C08_LDC_SPD_SNA)
#   if (!defined RTE_CONST_I_C08_LDC_SPD_SNA) || (RTE_CONST_I_C08_LDC_SPD_SNA != 255u)
#    error "Enumeration constant <I_C08_LDC_SPD_SNA> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C08_LDC_SPD_SNA (255u)
#   define I_C08_LDC_SPD_SNA ((c08_LDC_Spd)255u)
#  endif

#  define Rte_TypeDef_c08_Nm_m3200_3150_25
typedef uint8 c08_Nm_m3200_3150_25;
#  define c08_Nm_m3200_3150_25_LowerLimit ((c08_Nm_m3200_3150_25)0u)
#  define c08_Nm_m3200_3150_25_UpperLimit ((c08_Nm_m3200_3150_25)255u)
#  define Rte_InvalidValue_c08_Nm_m3200_3150_25 ((c08_Nm_m3200_3150_25)255u)
#  if (defined RTE_CONST_I_C08_NM_M3200_3150_25_SNA) || (defined I_C08_NM_M3200_3150_25_SNA)
#   if (!defined RTE_CONST_I_C08_NM_M3200_3150_25_SNA) || (RTE_CONST_I_C08_NM_M3200_3150_25_SNA != 255u)
#    error "Enumeration constant <I_C08_NM_M3200_3150_25_SNA> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C08_NM_M3200_3150_25_SNA (255u)
#   define I_C08_NM_M3200_3150_25_SNA ((c08_Nm_m3200_3150_25)255u)
#  endif

#  define Rte_TypeDef_c08_bar_0_10_0k05
typedef uint8 c08_bar_0_10_0k05;
#  define c08_bar_0_10_0k05_LowerLimit ((c08_bar_0_10_0k05)0u)
#  define c08_bar_0_10_0k05_UpperLimit ((c08_bar_0_10_0k05)255u)
#  define Rte_InvalidValue_c08_bar_0_10_0k05 ((c08_bar_0_10_0k05)255u)
#  if (defined RTE_CONST_I_C08_BAR_0_10_0K05_SNA) || (defined I_C08_BAR_0_10_0K05_SNA)
#   if (!defined RTE_CONST_I_C08_BAR_0_10_0K05_SNA) || (RTE_CONST_I_C08_BAR_0_10_0K05_SNA != 255u)
#    error "Enumeration constant <I_C08_BAR_0_10_0K05_SNA> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C08_BAR_0_10_0K05_SNA (255u)
#   define I_C08_BAR_0_10_0K05_SNA ((c08_bar_0_10_0k05)255u)
#  endif

#  define Rte_TypeDef_c08_hPa_0_1980_7k8
typedef uint8 c08_hPa_0_1980_7k8;
#  define c08_hPa_0_1980_7k8_LowerLimit ((c08_hPa_0_1980_7k8)0u)
#  define c08_hPa_0_1980_7k8_UpperLimit ((c08_hPa_0_1980_7k8)255u)
#  define Rte_InvalidValue_c08_hPa_0_1980_7k8 ((c08_hPa_0_1980_7k8)255u)
#  if (defined RTE_CONST_I_C08_HPA_0_1980_7K8_SNA) || (defined I_C08_HPA_0_1980_7K8_SNA)
#   if (!defined RTE_CONST_I_C08_HPA_0_1980_7K8_SNA) || (RTE_CONST_I_C08_HPA_0_1980_7K8_SNA != 255u)
#    error "Enumeration constant <I_C08_HPA_0_1980_7K8_SNA> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C08_HPA_0_1980_7K8_SNA (255u)
#   define I_C08_HPA_0_1980_7K8_SNA ((c08_hPa_0_1980_7k8)255u)
#  endif

#  define Rte_TypeDef_c08_m_0_150_1
typedef uint8 c08_m_0_150_1;
#  define c08_m_0_150_1_LowerLimit ((c08_m_0_150_1)0u)
#  define c08_m_0_150_1_UpperLimit ((c08_m_0_150_1)255u)
#  define Rte_InvalidValue_c08_m_0_150_1 ((c08_m_0_150_1)255u)
#  if (defined RTE_CONST_I_C08_M_0_150_1_SNA) || (defined I_C08_M_0_150_1_SNA)
#   if (!defined RTE_CONST_I_C08_M_0_150_1_SNA) || (RTE_CONST_I_C08_M_0_150_1_SNA != 255u)
#    error "Enumeration constant <I_C08_M_0_150_1_SNA> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C08_M_0_150_1_SNA (255u)
#   define I_C08_M_0_150_1_SNA ((c08_m_0_150_1)255u)
#  endif

#  define Rte_TypeDef_c08_min_0_60_1
typedef uint8 c08_min_0_60_1;
#  define c08_min_0_60_1_LowerLimit ((c08_min_0_60_1)0u)
#  define c08_min_0_60_1_UpperLimit ((c08_min_0_60_1)255u)
#  define Rte_InvalidValue_c08_min_0_60_1 ((c08_min_0_60_1)255u)
#  if (defined RTE_CONST_I_C08_MIN_0_60_1_SNA) || (defined I_C08_MIN_0_60_1_SNA)
#   if (!defined RTE_CONST_I_C08_MIN_0_60_1_SNA) || (RTE_CONST_I_C08_MIN_0_60_1_SNA != 255u)
#    error "Enumeration constant <I_C08_MIN_0_60_1_SNA> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C08_MIN_0_60_1_SNA (255u)
#   define I_C08_MIN_0_60_1_SNA ((c08_min_0_60_1)255u)
#  endif

#  define Rte_TypeDef_c08_ms_0_2500_10
typedef uint8 c08_ms_0_2500_10;
#  define c08_ms_0_2500_10_LowerLimit ((c08_ms_0_2500_10)0u)
#  define c08_ms_0_2500_10_UpperLimit ((c08_ms_0_2500_10)255u)
#  define Rte_InvalidValue_c08_ms_0_2500_10 ((c08_ms_0_2500_10)255u)
#  if (defined RTE_CONST_I_C08_MS_0_2500_10_SNA) || (defined I_C08_MS_0_2500_10_SNA)
#   if (!defined RTE_CONST_I_C08_MS_0_2500_10_SNA) || (RTE_CONST_I_C08_MS_0_2500_10_SNA != 255u)
#    error "Enumeration constant <I_C08_MS_0_2500_10_SNA> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C08_MS_0_2500_10_SNA (255u)
#   define I_C08_MS_0_2500_10_SNA ((c08_ms_0_2500_10)255u)
#  endif

#  define Rte_TypeDef_c08_perc_0_100_0k5
typedef uint8 c08_perc_0_100_0k5;
#  define c08_perc_0_100_0k5_LowerLimit ((c08_perc_0_100_0k5)0u)
#  define c08_perc_0_100_0k5_UpperLimit ((c08_perc_0_100_0k5)255u)
#  define Rte_InvalidValue_c08_perc_0_100_0k5 ((c08_perc_0_100_0k5)255u)
#  if (defined RTE_CONST_I_C08_PERC_0_100_0K5_SNA) || (defined I_C08_PERC_0_100_0K5_SNA)
#   if (!defined RTE_CONST_I_C08_PERC_0_100_0K5_SNA) || (RTE_CONST_I_C08_PERC_0_100_0K5_SNA != 255u)
#    error "Enumeration constant <I_C08_PERC_0_100_0K5_SNA> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C08_PERC_0_100_0K5_SNA (255u)
#   define I_C08_PERC_0_100_0K5_SNA ((c08_perc_0_100_0k5)255u)
#  endif

#  define Rte_TypeDef_c08_perc_0_100_1
typedef uint8 c08_perc_0_100_1;
#  define c08_perc_0_100_1_LowerLimit ((c08_perc_0_100_1)0u)
#  define c08_perc_0_100_1_UpperLimit ((c08_perc_0_100_1)255u)
#  define Rte_InvalidValue_c08_perc_0_100_1 ((c08_perc_0_100_1)255u)
#  if (defined RTE_CONST_I_C08_PERC_0_100_1_SNA) || (defined I_C08_PERC_0_100_1_SNA)
#   if (!defined RTE_CONST_I_C08_PERC_0_100_1_SNA) || (RTE_CONST_I_C08_PERC_0_100_1_SNA != 255u)
#    error "Enumeration constant <I_C08_PERC_0_100_1_SNA> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C08_PERC_0_100_1_SNA (255u)
#   define I_C08_PERC_0_100_1_SNA ((c08_perc_0_100_1)255u)
#  endif

#  define Rte_TypeDef_c08_perc_0_125_0k5
typedef uint8 c08_perc_0_125_0k5;
#  define c08_perc_0_125_0k5_LowerLimit ((c08_perc_0_125_0k5)0u)
#  define c08_perc_0_125_0k5_UpperLimit ((c08_perc_0_125_0k5)255u)
#  define Rte_InvalidValue_c08_perc_0_125_0k5 ((c08_perc_0_125_0k5)255u)
#  if (defined RTE_CONST_I_C08_PERC_0_125_0K5_SNA) || (defined I_C08_PERC_0_125_0K5_SNA)
#   if (!defined RTE_CONST_I_C08_PERC_0_125_0K5_SNA) || (RTE_CONST_I_C08_PERC_0_125_0K5_SNA != 255u)
#    error "Enumeration constant <I_C08_PERC_0_125_0K5_SNA> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C08_PERC_0_125_0K5_SNA (255u)
#   define I_C08_PERC_0_125_0K5_SNA ((c08_perc_0_125_0k5)255u)
#  endif

#  define Rte_TypeDef_c08_s_0_254_1
typedef uint8 c08_s_0_254_1;
#  define c08_s_0_254_1_LowerLimit ((c08_s_0_254_1)0u)
#  define c08_s_0_254_1_UpperLimit ((c08_s_0_254_1)255u)
#  define Rte_InvalidValue_c08_s_0_254_1 ((c08_s_0_254_1)255u)
#  if (defined RTE_CONST_I_C08_S_0_254_1_SNA) || (defined I_C08_S_0_254_1_SNA)
#   if (!defined RTE_CONST_I_C08_S_0_254_1_SNA) || (RTE_CONST_I_C08_S_0_254_1_SNA != 255u)
#    error "Enumeration constant <I_C08_S_0_254_1_SNA> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C08_S_0_254_1_SNA (255u)
#   define I_C08_S_0_254_1_SNA ((c08_s_0_254_1)255u)
#  endif

#  define Rte_TypeDef_c11_A_m102k4_102k2_0k1
typedef uint16 c11_A_m102k4_102k2_0k1;
#  define c11_A_m102k4_102k2_0k1_LowerLimit ((c11_A_m102k4_102k2_0k1)0u)
#  define c11_A_m102k4_102k2_0k1_UpperLimit ((c11_A_m102k4_102k2_0k1)2047u)
#  define Rte_InvalidValue_c11_A_m102k4_102k2_0k1 ((c11_A_m102k4_102k2_0k1)2047u)
#  if (defined RTE_CONST_I_C11_A_M102K4_102K2_0K1_SNA) || (defined I_C11_A_M102K4_102K2_0K1_SNA)
#   if (!defined RTE_CONST_I_C11_A_M102K4_102K2_0K1_SNA) || (RTE_CONST_I_C11_A_M102K4_102K2_0K1_SNA != 2047u)
#    error "Enumeration constant <I_C11_A_M102K4_102K2_0K1_SNA> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C11_A_M102K4_102K2_0K1_SNA (2047u)
#   define I_C11_A_M102K4_102K2_0K1_SNA ((c11_A_m102k4_102k2_0k1)2047u)
#  endif

#  define Rte_TypeDef_c11_degC_m40_85_0k1_err
typedef uint16 c11_degC_m40_85_0k1_err;
#  define c11_degC_m40_85_0k1_err_LowerLimit ((c11_degC_m40_85_0k1_err)0u)
#  define c11_degC_m40_85_0k1_err_UpperLimit ((c11_degC_m40_85_0k1_err)2047u)
#  define Rte_InvalidValue_c11_degC_m40_85_0k1_err ((c11_degC_m40_85_0k1_err)2047u)
#  if (defined RTE_CONST_I_C11_DEGC_M40_85_0K1_ERR_EEP_CRC_ERR) || (defined I_C11_DEGC_M40_85_0K1_ERR_EEP_CRC_ERR)
#   if (!defined RTE_CONST_I_C11_DEGC_M40_85_0K1_ERR_EEP_CRC_ERR) || (RTE_CONST_I_C11_DEGC_M40_85_0K1_ERR_EEP_CRC_ERR != 2045u)
#    error "Enumeration constant <I_C11_DEGC_M40_85_0K1_ERR_EEP_CRC_ERR> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C11_DEGC_M40_85_0K1_ERR_EEP_CRC_ERR (2045u)
#   define I_C11_DEGC_M40_85_0K1_ERR_EEP_CRC_ERR ((c11_degC_m40_85_0k1_err)2045u)
#  endif
#  if (defined RTE_CONST_I_C11_DEGC_M40_85_0K1_ERR_COMMON_ERR) || (defined I_C11_DEGC_M40_85_0K1_ERR_COMMON_ERR)
#   if (!defined RTE_CONST_I_C11_DEGC_M40_85_0K1_ERR_COMMON_ERR) || (RTE_CONST_I_C11_DEGC_M40_85_0K1_ERR_COMMON_ERR != 2046u)
#    error "Enumeration constant <I_C11_DEGC_M40_85_0K1_ERR_COMMON_ERR> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C11_DEGC_M40_85_0K1_ERR_COMMON_ERR (2046u)
#   define I_C11_DEGC_M40_85_0K1_ERR_COMMON_ERR ((c11_degC_m40_85_0k1_err)2046u)
#  endif
#  if (defined RTE_CONST_I_C11_DEGC_M40_85_0K1_ERR_SNA) || (defined I_C11_DEGC_M40_85_0K1_ERR_SNA)
#   if (!defined RTE_CONST_I_C11_DEGC_M40_85_0K1_ERR_SNA) || (RTE_CONST_I_C11_DEGC_M40_85_0K1_ERR_SNA != 2047u)
#    error "Enumeration constant <I_C11_DEGC_M40_85_0K1_ERR_SNA> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C11_DEGC_M40_85_0K1_ERR_SNA (2047u)
#   define I_C11_DEGC_M40_85_0K1_ERR_SNA ((c11_degC_m40_85_0k1_err)2047u)
#  endif

#  define Rte_TypeDef_c12_1_p_RotRev_m512_511k5_0k25
typedef uint16 c12_1_p_RotRev_m512_511k5_0k25;
#  define c12_1_p_RotRev_m512_511k5_0k25_LowerLimit ((c12_1_p_RotRev_m512_511k5_0k25)0u)
#  define c12_1_p_RotRev_m512_511k5_0k25_UpperLimit ((c12_1_p_RotRev_m512_511k5_0k25)4095u)
#  define Rte_InvalidValue_c12_1_p_RotRev_m512_511k5_0k25 ((c12_1_p_RotRev_m512_511k5_0k25)4095u)
#  if (defined RTE_CONST_I_C12_1_P_ROTREV_M512_511K5_0K25_SNA) || (defined I_C12_1_P_ROTREV_M512_511K5_0K25_SNA)
#   if (!defined RTE_CONST_I_C12_1_P_ROTREV_M512_511K5_0K25_SNA) || (RTE_CONST_I_C12_1_P_ROTREV_M512_511K5_0K25_SNA != 4095u)
#    error "Enumeration constant <I_C12_1_P_ROTREV_M512_511K5_0K25_SNA> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C12_1_P_ROTREV_M512_511K5_0K25_SNA (4095u)
#   define I_C12_1_P_ROTREV_M512_511K5_0K25_SNA ((c12_1_p_RotRev_m512_511k5_0k25)4095u)
#  endif

#  define Rte_TypeDef_c12_min_0_4094_1
typedef uint16 c12_min_0_4094_1;
#  define c12_min_0_4094_1_LowerLimit ((c12_min_0_4094_1)0u)
#  define c12_min_0_4094_1_UpperLimit ((c12_min_0_4094_1)4095u)
#  define Rte_InvalidValue_c12_min_0_4094_1 ((c12_min_0_4094_1)4095u)
#  if (defined RTE_CONST_I_C12_MIN_0_4094_1_SNA) || (defined I_C12_MIN_0_4094_1_SNA)
#   if (!defined RTE_CONST_I_C12_MIN_0_4094_1_SNA) || (RTE_CONST_I_C12_MIN_0_4094_1_SNA != 4095u)
#    error "Enumeration constant <I_C12_MIN_0_4094_1_SNA> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C12_MIN_0_4094_1_SNA (4095u)
#   define I_C12_MIN_0_4094_1_SNA ((c12_min_0_4094_1)4095u)
#  endif

#  define Rte_TypeDef_c16_ul_p_250ms_0_14200_0k21668
typedef uint16 c16_ul_p_250ms_0_14200_0k21668;
#  define c16_ul_p_250ms_0_14200_0k21668_LowerLimit ((c16_ul_p_250ms_0_14200_0k21668)0u)
#  define c16_ul_p_250ms_0_14200_0k21668_UpperLimit ((c16_ul_p_250ms_0_14200_0k21668)65535u)
#  define Rte_InvalidValue_c16_ul_p_250ms_0_14200_0k21668 ((c16_ul_p_250ms_0_14200_0k21668)65535u)
#  if (defined RTE_CONST_I_C16_UL_P_250MS_0_14200_0K21668_SNA) || (defined I_C16_UL_P_250MS_0_14200_0K21668_SNA)
#   if (!defined RTE_CONST_I_C16_UL_P_250MS_0_14200_0K21668_SNA) || (RTE_CONST_I_C16_UL_P_250MS_0_14200_0K21668_SNA != 65535u)
#    error "Enumeration constant <I_C16_UL_P_250MS_0_14200_0K21668_SNA> conflicts with another constant."
#   endif
#  else
#   define RTE_CONST_I_C16_UL_P_250MS_0_14200_0K21668_SNA (65535u)
#   define I_C16_UL_P_250MS_0_14200_0K21668_SNA ((c16_ul_p_250ms_0_14200_0k21668)65535u)
#  endif

#  define Rte_TypeDef_Dcm_54Byte_Type
typedef UInt8 Dcm_54Byte_Type[54];

#  define Rte_TypeDef_Dem_MaxDataValueType
typedef UInt8 Dem_MaxDataValueType[1];

#  define Rte_TypeDef_Dem_MaxExtendedDataRecordType
typedef UInt8 Dem_MaxExtendedDataRecordType[7];

#  define Rte_TypeDef_REC_ALDW_Disp_Warn_Rq
typedef struct
{
  Rsrv03 Rsrv1_ALDW_Disp_Warn_Rq;
  c07_m_0_1k26_0k01 ALDW_LaneMarkWidth_Lt;
  c07_m_0_1k26_0k01 ALDW_LaneMarkWidth_Rt;
  c05_m_0_90_3 ALDW_LaneMark_DtctDist_Lt;
  c05_m_0_90_3 ALDW_LaneMark_DtctDist_Rt;
  Rsrv01 Rsrv2_ALDW_Disp_Warn_Rq;
  c02_ALDW_PulseTm_Rq ALDW_PulseTm_Rq;
  c05_ms_16_132_4 ALDW_VibTm_Rq;
  c01_ALDW_WarnMd_Rq ALDW_WarnMd_Rq;
  c03_ALDW_Warn_Rq ALDW_Warn_Rq;
  c08_CRC_woSNA CRC_ALDW_Disp_Warn_Rq;
  c04_0_15_1_SNA_na SQC_ALDW_Disp_Warn_Rq;
  c03_ALDW_BrkMsgDisp_Rq ALDW_BrkMsgDisp_Rq;
  DC_BOOL ALDW_Menu_Sw_Enbl_Rq;
  c02_ALDW_IndLmp_On_Rq ALDW_IndLmp_SwLED_On_Rq;
  c03_ALDW_MsgDisp_Rq ALDW_MsgDisp_Rq;
  c04_0_14_1 ALDW_ImgSyncNum;
} REC_ALDW_Disp_Warn_Rq;

#  define Rte_TypeDef_REC_ALDW_LaneAttr1
typedef struct
{
  c02_ALDW_LaneChg_Stat ALDW_LaneChg_Stat;
  c08_CRC_woSNA CRC_ALDW_LaneAttr1;
  c04_0_1_0k1 ALDW_LaneDataQual_Rt;
  c10_m_m2d56_p7d66_0d01 ALDW_LaneLtrlDist_Lt;
  c10_m_m2d56_p7d66_0d01 ALDW_LaneLtrlDist_Rt;
  Rsrv01 Rsrv1_ALDW_LaneAttr1;
  c03_ALDW_RoadType ALDW_RoadType;
  c04_0_15_1_SNA_na SQC_ALDW_LaneAttr1;
  c02_ALDW_RoadExit_Stat ALDW_RoadExit_Stat;
  c03_1_6_1 ALDW_LaneNum;
  c04_0_1_0k1 ALDW_LaneDataQual_Lt;
  c03_1_6_1 ALDW_NumLane;
  c02_ALDW_LaneDscrb_Side ALDW_LaneDscrbSide;
  Rsrv01 Rsrv2_ALDW_LaneAttr1;
  c07_0_1_0k01 VLN_ConfdcLaneGeom;
} REC_ALDW_LaneAttr1;

#  define Rte_TypeDef_REC_ALDW_LaneAttr4
typedef struct
{
  c05_m_0_60_2 ALDW_LaneEventPosX_Lt;
  c05_m_0_60_2 ALDW_LaneEventPosX_Rt;
  c06_0_50_0d02_SNA_3Fh ALDW_LaneEventQual_Lt;
  c06_0_50_0d02_SNA_3Fh ALDW_LaneEventQual_Rt;
  c04_ALDW_LaneEvent ALDW_LaneEvent_Lt;
  c04_ALDW_LaneEvent ALDW_LaneEvent_Rt;
  c08_CRC_woSNA CRC_ALDW_LaneAttr4;
  Rsrv04 Rsrv1_ALDW_LaneAttr4;
  c02_ALDW_NumParallelLine ALDW_NumParallelStruct;
  c04_0_15_1_SNA_na SQC_ALDW_LaneAttr4;
  c03_ALDW_LaneMarkCol ALDW_LaneMarkCol_Lt;
  c03_ALDW_LaneMarkCol ALDW_LaneMarkCol_Rt;
  c10_deg_m5k12_5k1_0k01 ALDW_VehPitchAngl;
} REC_ALDW_LaneAttr4;

#  define Rte_TypeDef_REC_ALDW_Polyg
typedef struct
{
  c03_ALDW_PolygGroup ALDW_PolygGroup;
  c02_Lt_Rt_NDef_SNA ALDW_PolygOrient;
  c10_m_m5k12_5k1_0k01 ALDW_PolygY_A;
  c10_m_m5k12_5k1_0k01 ALDW_PolygY_B;
  c10_m_m5k12_5k1_0k01 ALDW_PolygY_C;
  c10_m_m5k12_5k1_0k01 ALDW_PolygY_D;
  c10_m_m5k12_5k1_0k01 ALDW_PolygY_E;
  c09_m_m2d56_p2d54_0d01 ALDW_PolygZ_A;
  c09_m_m2d56_p2d54_0d01 ALDW_PolygZ_B;
  c09_m_m2d56_p2d54_0d01 ALDW_PolygZ_C;
  c09_m_m2d56_p2d54_0d01 ALDW_PolygZ_D;
  c09_m_m2d56_p2d54_0d01 ALDW_PolygZ_E;
  c08_CRC_woSNA CRC_ALDW_Polyg;
  Rsrv01 Rsrv1_ALDW_Polyg_FR;
  Rsrv06 Rsrv2_ALDW_Polyg_FR;
  Rsrv05 Rsrv3_ALDW_Polyg_FR;
  Rsrv05 Rsrv4_ALDW_Polyg_FR;
  Rsrv05 Rsrv5_ALDW_Polyg_FR;
  Rsrv05 Rsrv6_ALDW_Polyg_FR;
  Rsrv05 Rsrv7_ALDW_Polyg_FR;
  c04_0_15_1_SNA_na SQC_ALDW_Polyg;
} REC_ALDW_Polyg;

#  define Rte_TypeDef_REC_ALDW_VLN
typedef struct
{
  c02_ALDW_LaneChg_Stat ALDW_LaneChg_Stat_LDP;
  c08_0_254_1 ALDW_TmStmp;
  c07_m_m0d64_p0d62_0d01 ALDW_WarnDelay_Lt;
  c07_m_m0d64_p0d62_0d01 ALDW_WarnDelay_Rt;
  c04_ALDW_WarnSupp_Stat ALDW_WarnSupp_Stat;
  c08_CRC_woSNA CRC_ALDW_VLN;
  Rsrv01 Rsrv1_ALDW_VLN;
  Rsrv01 Rsrv2_ALDW_VLN;
  c04_0_15_1_SNA_na SQC_ALDW_VLN;
  Rsrv06 Rsrv3_ALDW_VLN;
  Rsrv08 Rsrv4_ALDW_VLN;
  c03_ALDW_StructElevat ALDW_StructElevat_Lt;
  c03_ALDW_StructElevat ALDW_StructElevat_Rt;
  c02_VLN_YawAngl_Vld VLN_YawAngl_Vld;
} REC_ALDW_VLN;

#  define Rte_TypeDef_REC_BrkSys_Stat
typedef struct
{
  c02_Brk_Stat Brk_Stat;
  c02_Pdl_Stat BrkPdl_Stat;
  c08_CRC_woSNA CRC_BrkSys_Stat;
  c04_0_15_1_SNA_na SQC_BrkSys_Stat;
  c12_Nm_0_12282_3 BrkTrq;
  c12_Nm_0_12282_3 BrkTrq_D;
  DC_BOOL FullBrk_Actv;
  DC_BOOL EmgBrk_Actv;
  DC_BOOL BrkIntrvntn_Actv_ESP;
  DC_BOOL BrkIntrvntn_Actv_EPKB;
  DC_BOOL BrkIntrvntn_Actv_AS;
  c04_ESP_Oprtn_Stat_AS ESP_Oprtn_Stat_AS;
  c03_ESP_Sys_Stat ESP_Sys_Stat_V2;
  Rsrv01 Rsrv2_BrkSys_Stat;
  c02_BrkRq_PT_Enbl BrkRq_PT_Enbl;
  c03_FTW_PressDrop_Stat FTW_PressDrop_Stat;
  Rsrv02 Rsrv4_BrkSys_Stat;
  Rsrv02 Rsrv5_BrkSys_Stat;
  DC_BOOL DSR_Actv;
  DC_BOOL DSR_Sys_Flt;
} REC_BrkSys_Stat;

#  define Rte_TypeDef_REC_BrkSys_Stat_wcyc4oh3vv82se49oenjus1n
typedef struct
{
  c02_Brk_Stat Brk_Stat;
  c02_Pdl_Stat BrkPdl_Stat;
  c08_CRC_woSNA CRC_BrkSys_Stat;
  c04_0_15_1_SNA_na SQC_BrkSys_Stat;
  c12_Nm_0_12282_3 BrkTrq;
  c12_Nm_0_12282_3 BrkTrq_D;
  DC_BOOL FullBrk_Actv;
  DC_BOOL EmgBrk_Actv;
  DC_BOOL BrkIntrvntn_Actv_ESP;
  DC_BOOL BrkIntrvntn_Actv_EPKB;
  DC_BOOL BrkIntrvntn_Actv_AS;
  c04_ESP_Oprtn_Stat_AS ESP_Oprtn_Stat_AS;
  c03_ESP_Sys_Stat ESP_Sys_Stat_V2;
  Rsrv02 Rsrv3_BrkSys_Stat;
  Rsrv01 Rsrv2_BrkSys_Stat;
  c02_BrkRq_PT_Enbl BrkRq_PT_Enbl;
  c03_FTW_PressDrop_Stat FTW_PressDrop_Stat;
  Rsrv02 Rsrv4_BrkSys_Stat;
  Rsrv02 Rsrv5_BrkSys_Stat;
} REC_BrkSys_Stat_wcyc4oh3vv82se49oenjus1n;

#  define Rte_TypeDef_REC_CamObj_1_DTQ
typedef struct
{
  c08_CRC_woSNA CRC_CamObj_1_DTQ;
  c08_0_254_1 CamObj_1_DTQ_BPQ_ID;
  c04_DTQ_ObjDataQual CamObj_1_DTQ_DataQual;
  c14_m_0_81k91_0k005 CamObj_1_DTQ_Dist_X;
  c14_m_m40k96_40k95_0k005 CamObj_1_DTQ_Offset_Y;
  c12_m_p_s_m10_10_0k005 CamObj_1_DTQ_VY;
  c08_0_254_1 CamObj_1_DTQ_ID;
  c08_0_254_1 CamObj_1_DTQ_PrimLoc_ID;
  c03_DTQ_ObjStat CamObj_1_DTQ_Stat;
  c08_Cycles_0_254 CamObj_1_DTQ_TrckTm;
  c02_DTQ_ObjType CamObj_1_DTQ_Type;
  DC_BOOL CamObj_1_DTQ_Vld;
  c09_m_0to511_0d01 CamObj_1_DTQ_Width;
  Rsrv04 Rsrv1_CamObj_1_DTQ;
  Rsrv05 Rsrv2_CamObj_1_DTQ;
  Rsrv06 Rsrv3_CamObj_1_DTQ;
  Rsrv02 Rsrv4_CamObj_1_DTQ;
  c08_0_254_1 CamObj_1_DTQ_TmStmp;
  Rsrv16 Rsrv6_CamObj_1_DTQ;
  c04_0_15_1_SNA_na SQC_CamObj_1_DTQ;
} REC_CamObj_1_DTQ;

#  define Rte_TypeDef_REC_CamObj_2_DTQ
typedef struct
{
  c08_0_254_1 CamObj_2_DTQ_BPQ_ID;
  Rsrv02 Rsrv4_CamObj_2_DTQ;
  c08_0_254_1 CamObj_2_DTQ_PrimLoc_ID;
  c02_DTQ_ObjType CamObj_2_DTQ_Type;
  c08_0_254_1 CamObj_2_DTQ_ID;
  c14_m_m40k96_40k95_0k005 CamObj_2_DTQ_Offset_Y;
  c08_0_254_1 CamObj_2_DTQ_TmStmp;
  c12_m_p_s_m10_10_0k005 CamObj_2_DTQ_VY;
  Rsrv16 Rsrv6_CamObj_2_DTQ;
  Rsrv04 Rsrv1_CamObj_2_DTQ;
  c09_m_0to511_0d01 CamObj_2_DTQ_Width;
  DC_BOOL CamObj_2_DTQ_Vld;
  c04_0_15_1_SNA_na SQC_CamObj_2_DTQ;
  c14_m_0_81k91_0k005 CamObj_2_DTQ_Dist_X;
  c03_DTQ_ObjStat CamObj_2_DTQ_Stat;
  c08_CRC_woSNA CRC_CamObj_2_DTQ;
  c08_Cycles_0_254 CamObj_2_DTQ_TrckTm;
  c04_DTQ_ObjDataQual CamObj_2_DTQ_DataQual;
  Rsrv06 Rsrv3_CamObj_2_DTQ;
  Rsrv05 Rsrv2_CamObj_2_DTQ;
} REC_CamObj_2_DTQ;

#  define Rte_TypeDef_REC_CamObj_3_DTQ
typedef struct
{
  Rsrv05 Rsrv2_CamObj_3_DTQ;
  c04_DTQ_ObjDataQual CamObj_3_DTQ_DataQual;
  c08_0_254_1 CamObj_3_DTQ_PrimLoc_ID;
  DC_BOOL CamObj_3_DTQ_Vld;
  Rsrv02 Rsrv4_CamObj_3_DTQ;
  c08_0_254_1 CamObj_3_DTQ_ID;
  c08_0_254_1 CamObj_3_DTQ_BPQ_ID;
  c08_Cycles_0_254 CamObj_3_DTQ_TrckTm;
  c09_m_0to511_0d01 CamObj_3_DTQ_Width;
  c08_CRC_woSNA CRC_CamObj_3_DTQ;
  Rsrv06 Rsrv3_CamObj_3_DTQ;
  c03_DTQ_ObjStat CamObj_3_DTQ_Stat;
  c14_m_0_81k91_0k005 CamObj_3_DTQ_Dist_X;
  c08_0_254_1 CamObj_3_DTQ_TmStmp;
  Rsrv16 Rsrv6_CamObj_3_DTQ;
  c04_0_15_1_SNA_na SQC_CamObj_3_DTQ;
  Rsrv04 Rsrv1_CamObj_3_DTQ;
  c14_m_m40k96_40k95_0k005 CamObj_3_DTQ_Offset_Y;
  c12_m_p_s_m10_10_0k005 CamObj_3_DTQ_VY;
  c02_DTQ_ObjType CamObj_3_DTQ_Type;
} REC_CamObj_3_DTQ;

#  define Rte_TypeDef_REC_CamObj_AB_BPQ
typedef struct
{
  c08_CRC_woSNA CRC_CamObj_AB_BPQ;
  DC_BOOL CamObj_A_BPQ_BorderFlg_Lt;
  DC_BOOL CamObj_A_BPQ_BorderFlg_Rt;
  DC_BOOL CamObj_A_BPQ_CyclObsrvFlg;
  c08_0_254_1 CamObj_A_BPQ_Id;
  DC_BOOL CamObj_A_BPQ_MgFlg;
  DC_BOOL CamObj_A_BPQ_OcclFlg_Lt;
  DC_BOOL CamObj_A_BPQ_OcclFlg_Rt;
  c04_0_14_1 CamObj_A_BPQ_QualObjAppr;
  c02_Lt_Rt_InBet CamObj_A_BPQ_RefPointIdx;
  DC_BOOL CamObj_A_BPQ_SplFlg;
  c10_ms_m25k55_0d05 CamObj_A_BPQ_Y_Rt_Spd;
  c08_deg_p_s_m63k5top63k5_0d5 CamObj_A_BPQ_YawRateY;
  c08_0_254_1 CamObj_B_BPQ_Id;
  DC_BOOL CamObj_B_BPQ_MgFlg;
  DC_BOOL CamObj_B_BPQ_BorderFlg_Lt;
  DC_BOOL CamObj_B_BPQ_BorderFlg_Rt;
  DC_BOOL CamObj_B_BPQ_CyclObsrvFlg;
  DC_BOOL CamObj_B_BPQ_OcclFlg_Lt;
  DC_BOOL CamObj_B_BPQ_OcclFlg_Rt;
  c04_0_14_1 CamObj_B_BPQ_QualObjAppr;
  c02_Lt_Rt_InBet CamObj_B_BPQ_RefPointIdx;
  DC_BOOL CamObj_B_BPQ_SplFlg;
  c10_ms_m25k55_0d05 CamObj_B_BPQ_Y_Rt_Spd;
  c08_deg_p_s_m63k5top63k5_0d5 CamObj_B_BPQ_YawRateY;
  c04_0_15_1_SNA_na SQC_CamObj_AB_BPQ;
  Rsrv01 Rsrv5_CamObj_AB_BPQ;
  c02_CamObj_BPQ_VY_Conf CamObj_B_BPQ_Y_Rt_Spd_Confdc;
  Rsrv08 Rsrv4_CamObj_AB_BPQ;
  DC_BOOL CamObj_A_BPQ_StreetFlg;
  c04_0_14_1 CamObj_A_BPQ_FloxelDensity;
  Rsrv04 Rsrv1_CamObj_AB_BPQ;
  c02_CamObj_BPQ_VY_Conf CamObj_A_BPQ_Y_Rt_Spd_Confdc;
  Rsrv01 Rsrv2_CamObj_AB_BPQ;
  c08_0_254_1 CamObj_BPQ_TmStmp;
  DC_BOOL CamObj_B_BPQ_StreetFlg;
  DC_BOOL CamObj_B_BPQ_TunnelFlg;
  c04_0_14_1 CamObj_B_BPQ_FloxelDensity;
  DC_BOOL CamObj_A_BPQ_TunnelFlg;
  c02_CamObj_BPQ_PedestArea CamObj_A_BPQ_PedestArea;
  c02_CamObj_BPQ_PedestClass CamObj_A_BPQ_PedestClass;
  c04_0_14_1 CamObj_A_BPQ_PedestGroupId;
  c02_CamObj_BPQ_PedestArea CamObj_B_BPQ_PedestArea;
  c02_CamObj_BPQ_PedestClass CamObj_B_BPQ_PedestClass;
  c04_0_14_1 CamObj_B_BPQ_PedestGroupId;
} REC_CamObj_AB_BPQ;

#  define Rte_TypeDef_REC_Cam_Polyg
typedef struct
{
  c08_0_254_1 CAM_TmStmp;
  c08_CRC_woSNA CRC_Cam_Polyg;
  c16_m_0_3276k7_0k05 Cam_PolygRngMax_X;
  c03_0_6_1 Cam_Polyg_0_Class_Y;
  c02_CAM_Polyg_Conf Cam_Polyg_0_Confdc_Y;
  c04_m_0_2k8_0k2 Cam_Polyg_0_Hgt_Y;
  c08_m_m12k7_12k7_0k1 Cam_Polyg_0_Y;
  c03_0_6_1 Cam_Polyg_1_Class_Y;
  c02_CAM_Polyg_Conf Cam_Polyg_1_Confdc_Y;
  c04_m_0_2k8_0k2 Cam_Polyg_1_Hgt_Y;
  c08_m_m12k7_12k7_0k1 Cam_Polyg_1_Y;
  c03_0_6_1 Cam_Polyg_2_Class_Y;
  c02_CAM_Polyg_Conf Cam_Polyg_2_Confdc_Y;
  c04_m_0_2k8_0k2 Cam_Polyg_2_Hgt_Y;
  c08_m_m12k7_12k7_0k1 Cam_Polyg_2_Y;
  c03_0_6_1 Cam_Polyg_3_Class_Y;
  c02_CAM_Polyg_Conf Cam_Polyg_3_Confdc_Y;
  c04_m_0_2k8_0k2 Cam_Polyg_3_Hgt_Y;
  c08_m_m12k7_12k7_0k1 Cam_Polyg_3_Y;
  c03_0_6_1 Cam_Polyg_4_Class_Y;
  c02_CAM_Polyg_Conf Cam_Polyg_4_Confdc_Y;
  c04_m_0_2k8_0k2 Cam_Polyg_4_Hgt_Y;
  c08_m_m12k7_12k7_0k1 Cam_Polyg_4_Y;
  Rsrv04 Rsrv1_Cam_Polyg;
  Rsrv03 Rsrv2_Cam_Polyg;
  Rsrv16 Rsrv3_Cam_Polyg;
  c04_0_15_1_SNA_na SQC_Cam_Polyg;
} REC_Cam_Polyg;

#  define Rte_TypeDef_REC_Cam_Stat
typedef struct
{
  c08_CRC_woSNA CRC_Cam_Stat;
  c16_deg_p_s_m327k68_327k66_0k01 SMPC_YawRate;
  c04_0_15_1_SNA_na SQC_Cam_Stat;
  c02_SMPC_Cam_Stat_FOD SMPC_Cam_Stat_FOD;
  c02_SMPC_Cam_Stat_POD SMPC_Cam_Stat_POD;
  Rsrv05 Rsrv2_Cam_Stat;
  Rsrv16 Rsrv3_Cam_Stat;
  Rsrv03 Rsrv4_Cam_Stat;
  Rsrv08 Rsrv5_Cam_Stat;
} REC_Cam_Stat;

#  define Rte_TypeDef_REC_DTQ_Disp_Rq_V2
typedef struct
{
  c03_DTQ_Stat_Disp_Rq DTQ_Stat_Disp_Rq;
  c03_DTQ_FltMsgDisp_Rq DTQ_FltMsgDisp_Rq;
  c03_DTQ_MsgDisp_Rq_V2 DTQ_MsgDisp_Rq_V2;
} REC_DTQ_Disp_Rq_V2;

#  define Rte_TypeDef_REC_DTQ_DrawbarAngl
typedef struct
{
  c08_CRC_woSNA CRC_DTQ_DrawbarAngl;
  c14_m_m40k96_40k95_0k005 Cam_LnMark_Lt_Offset_Y;
  c02_Cam_LnMark_Offset_Y_Qual Cam_LnMark_Lt_Offset_Y_Qual;
  c14_m_m40k96_40k95_0k005 Cam_LnMark_Rt_Offset_Y;
  c02_Cam_LnMark_Offset_Y_Qual Cam_LnMark_Rt_Offset_Y_Qual;
  c04_0_15_1_SNA_na SQC_DTQ_DrawbarAngl;
  Rsrv16 Rsrv2_DTQ_DrawbarAngl;
  Rsrv04 Rsrv1_DTQ_DrawbarAngl;
} REC_DTQ_DrawbarAngl;

#  define Rte_TypeDef_REC_DTQ_Obj_Pres
typedef struct
{
  c08_CRC_woSNA CRC_DTQ_Obj_Pres;
  c08_0_254_1 RDU_DTQ_PLObj_A_FFT_SID;
  c02_RDU_DTQ_PLObj_RelFlg RDU_DTQ_PLObj_A_RelFlg;
  DC_BOOL RDU_DTQ_PLObj_A_Vld;
  c08_m_p_s_m127_127_1 RDU_DTQ_PLObj_A_vx;
  c08_m_0_254_1 RDU_DTQ_PLObj_A_x;
  c06_m_m31_31_1 RDU_DTQ_PLObj_A_y;
  c08_0_254_1 RDU_DTQ_PLObj_B_FFT_SID;
  c02_RDU_DTQ_PLObj_RelFlg RDU_DTQ_PLObj_B_RelFlg;
  DC_BOOL RDU_DTQ_PLObj_B_Vld;
  c08_m_p_s_m127_127_1 RDU_DTQ_PLObj_B_vx;
  c08_m_0_254_1 RDU_DTQ_PLObj_B_x;
  c06_m_m31_31_1 RDU_DTQ_PLObj_B_y;
  c08_0_254_1 RDU_DTQ_PLObj_C_FFT_SID;
  c02_RDU_DTQ_PLObj_RelFlg RDU_DTQ_PLObj_C_RelFlg;
  DC_BOOL RDU_DTQ_PLObj_C_Vld;
  c08_m_p_s_m127_127_1 RDU_DTQ_PLObj_C_vx;
  c08_m_0_254_1 RDU_DTQ_PLObj_C_x;
  c06_m_m31_31_1 RDU_DTQ_PLObj_C_y;
  c08_0_254_1 RDU_DTQ_PLObj_TmStmp;
  c04_0_15_1_SNA_na SQC_DTQ_Obj_Pres;
  Rsrv08 Rsrv3_DTQ_Obj_Pres;
  Rsrv08 Rsrv4_DTQ_Obj_Pres;
  Rsrv01 Rsrv1_DTQ_Obj_Pres;
  Rsrv08 Rsrv2_DTQ_Obj_Pres;
} REC_DTQ_Obj_Pres;

#  define Rte_TypeDef_REC_EVC_CfgBit_01_32
typedef struct
{
  c08_CRC_woSNA CRC_EVC_CfgBit_01_32;
  c04_0_15_1_SNA_na SQC_EVC_CfgBit_01_32;
  DC_BOOL EVC_27_AddEquip_Avl;
  DC_BOOL EVC_28_AddEquip_Avl;
  DC_BOOL EVC_29_AddEquip_Avl;
  DC_BOOL EVC_2A_AddEquip_Avl;
  DC_BOOL EVC_2B_AddEquip_Avl;
  DC_BOOL EVC_2C_AddEquip_Avl;
  DC_BOOL EVC_2D_AddEquip_Avl;
  DC_BOOL EVC_2E_AddEquip_Avl;
  DC_BOOL EVC_2F_AddEquip_Avl;
  DC_BOOL EVC_30_AddEquip_Avl;
  DC_BOOL EVC_31_AddEquip_Avl;
  DC_BOOL EVC_32_AddEquip_Avl;
  DC_BOOL EVC_0D_4x2Drive_Avl;
  DC_BOOL EVC_0C_AllWheelDr_Avl;
  DC_BOOL EVC_18_AmbLgt_Avl;
  DC_BOOL EVC_12_AutRearDr_Avl;
  c02_EVC_Stat EVC_CfgBit_01_32_Stat;
  DC_BOOL EVC_15_DRLt_Avl;
  DC_BOOL EVC_19_ElDrPosnSel_Avl;
  DC_BOOL EVC_16_FogLmp_Avl;
  DC_BOOL EVC_09_FullHyb_Avl;
  DC_BOOL EVC_1E_GuardLvl_B4_Avl;
  DC_BOOL EVC_1F_GuardLvl_B6_Avl;
  DC_BOOL EVC_20_GuardLvl_B7_Avl;
  DC_BOOL EVC_25_HVAC_R_Avl;
  DC_BOOL EVC_1C_HghVTP_Avl;
  DC_BOOL EVC_24_ICH_Avl;
  DC_BOOL EVC_17_IL_Pk_Avl;
  DC_BOOL EVC_1A_IntSfProt_Avl;
  DC_BOOL EVC_10_KG_Avl;
  DC_BOOL EVC_23_PASS_Avl;
  DC_BOOL EVC_0A_MildHyb_Avl;
  DC_BOOL EVC_11_AutTrunkLid_Avl;
  DC_BOOL EVC_0B_PlugInHyb_Avl;
  DC_BOOL EVC_0E_Presf_Avl;
  DC_BOOL EVC_21_Pullman_Avl;
  DC_BOOL EVC_13_PwrCls_Avl;
  DC_BOOL EVC_14_RainSens_Avl;
  DC_BOOL EVC_26_SSA_Avl;
  DC_BOOL EVC_1D_SecurityVer_Avl;
  DC_BOOL EVC_22_SpecClos_Avl;
  DC_BOOL EVC_0F_TrlrHtch_Avl;
  DC_BOOL EVC_1B_VTA_Avl;
  DC_BOOL EVC_05_Ver_Australia_Avl;
  DC_BOOL EVC_08_Ver_Canada_Avl;
  DC_BOOL EVC_06_Ver_China_Avl;
  DC_BOOL EVC_04_Ver_GulfStates_Avl;
  DC_BOOL EVC_03_Ver_Japan_Avl;
  DC_BOOL EVC_02_Ver_Mexico_Avl;
  DC_BOOL EVC_07_Ver_S_Korea_Avl;
  DC_BOOL EVC_01_Ver_USA_Avl;
} REC_EVC_CfgBit_01_32;

#  define Rte_TypeDef_REC_EVC_CfgBit_65_96
typedef struct
{
  c08_CRC_woSNA CRC_EVC_CfgBit_65_96;
  DC_BOOL EVC_67_CMS_Avl;
  DC_BOOL EVC_68_CMS_R_Avl;
  DC_BOOL EVC_6A_BasExtd_Avl;
  c04_0_15_1_SNA_na SQC_EVC_CfgBit_65_96;
  DC_BOOL EVC_65_AddEquip_Avl;
  DC_BOOL EVC_66_AddEquip_Avl;
  DC_BOOL EVC_69_BrkEngg_PP_Avl;
  DC_BOOL EVC_81_ABC_Avl;
  DC_BOOL EVC_6F_ADTR_Avl;
  DC_BOOL EVC_71_ALS_Avl;
  DC_BOOL EVC_7A_APG_Avl;
  DC_BOOL EVC_7B_ActPKAS_Avl;
  DC_BOOL EVC_6D_ActvBSM_Avl;
  DC_BOOL EVC_72_ActvLDA_Avl;
  DC_BOOL EVC_83_AirSemiActv_Susp_Avl;
  DC_BOOL EVC_6C_BSM_Avl;
  DC_BOOL EVC_7E_BasPlusQ_Avl;
  c02_EVC_Stat EVC_CfgBit_65_96_Stat;
  DC_BOOL EVC_8B_DAB_Tun_Avl;
  DC_BOOL EVC_70_DTR_Pro_Avl;
  DC_BOOL EVC_8A_DigTV_Avl;
  DC_BOOL EVC_88_DualView_Avl;
  DC_BOOL EVC_7F_ECO_St_Avl;
  DC_BOOL EVC_89_Entertain_R_Avl;
  DC_BOOL EVC_7C_IHC_Avl;
  DC_BOOL EVC_7D_IHC_Plus_Avl;
  DC_BOOL EVC_73_FCW_Avl;
  DC_BOOL EVC_74_LaneRec_Avl;
  DC_BOOL EVC_8C_MTUS_Avl;
  DC_BOOL EVC_6B_MirrFld_Avl;
  DC_BOOL EVC_75_NV_Avl;
  DC_BOOL EVC_95_OptPack_Avan_Avl;
  DC_BOOL EVC_94_OptPack_Clas_Avl;
  DC_BOOL EVC_96_OptPack_Eleg_Avl;
  DC_BOOL EVC_80_PSTS_Avl;
  DC_BOOL EVC_79_PTS_Avl;
  DC_BOOL EVC_77_RVC_Avl;
  DC_BOOL EVC_76_RoadSignDtct_Avl;
  DC_BOOL EVC_8E_SndSys_Avl;
  DC_BOOL EVC_85_SportPk_AMG_Avl;
  DC_BOOL EVC_86_SportPk_Avl;
  DC_BOOL EVC_87_SportPk_Ext_Avl;
  DC_BOOL EVC_84_SportSusp_Avl;
  DC_BOOL EVC_82_SteelAirSusp_Avl;
  DC_BOOL EVC_78_SurrView_Avl;
  DC_BOOL EVC_6E_TurnAss_Avl;
  DC_BOOL EVC_8D_UCI_Avl;
  DC_BOOL EVC_92_WShBL_Prot_Avl;
  DC_BOOL EVC_8F_WShViewWin_Avl;
  DC_BOOL EVC_90_WSh_Clr_Avl;
  DC_BOOL EVC_91_WSh_Ht_Avl;
  DC_BOOL EVC_93_WSh_Ht_Lcut_Avl;
} REC_EVC_CfgBit_65_96;

#  define Rte_TypeDef_REC_EVC_CfgList_01_0C
typedef struct
{
  c08_CRC_woSNA CRC_EVC_CfgList_01_0C;
  c05_EVC_BodyStyle EVC_List02_BodyStyle;
  c02_EVC_Stat EVC_CfgList_01_0C_Stat;
  c08_EVC_Country EVC_List08_Country;
  c04_EVC_HL_Style EVC_List04_HL_Style;
  c03_EVC_HVAC_Style EVC_List07_HVAC_Style;
  c03_EVC_RoofStyle EVC_List03_RoofStyle;
  c02_StStyle EVC_List01_StStyle;
  c03_EVC_TPM_Style EVC_List0A_TPM_Style;
  c04_EVC_TxStyle EVC_List05_TxStyle;
  c06_EVC_VehLine EVC_List0C_VehLine;
  c05_EVC_VehLineYear EVC_List06_VehLineYear;
  c04_0_15_1_SNA_na SQC_EVC_CfgList_01_0C;
  c05_EVC_HU_Style EVC_List09_HU_Style;
  c02_EVC_AddEquip EVC_List0B_AddEquip;
} REC_EVC_CfgList_01_0C;

#  define Rte_TypeDef_REC_Eng_Rs3
typedef struct
{
  c08_perc_0_100_0k4 AccelPdlPosn;
  DC_BOOL AccelPdlPosnSens_Flt;
  c08_perc_0_100_0k4 AccelPdlPosn_Raw;
  c08_CRC_woSNA CRC_Eng_Rs3;
  c04_0_15_1_SNA_na SQC_Eng_Rs3;
  DC_BOOL KickDnSw_Psd;
  Rsrv08 Rsrv1_Eng_Rs3;
  Rsrv02 Rsrv2_Eng_Rs3;
} REC_Eng_Rs3;

#  define Rte_TypeDef_REC_Eng_Rs_EngCtrl
typedef struct
{
  c08_EngStyle EngStyle;
  c13_Nm_m500_1547k5_0k25 EngTrq;
  DC_BOOL AddPwrCnsmr_On_Rq;
  c08_CRC_woSNA CRC_Eng_Rs_EngCtrl;
  c14_rpm_0_16382_1 EngRPM;
  c03_EngRun_Stat EngRun_Stat;
  c08_0_1k98_0k0078 EngTrqMaxCorrFctr;
  DC_BOOL EngRPM_Sens_LHOM;
  c04_0_15_1_SNA_na SQC_Eng_Rs_EngCtrl;
  Rsrv03 Rsrv2_Eng_Rs_EngCtrl;
  Rsrv01 Rsrv1_Eng_Rs_EngCtrl;
} REC_Eng_Rs_EngCtrl;

#  define Rte_TypeDef_REC_GPS_Pos_Stat
typedef struct
{
  c08_perc_0_100_0k5 DR_MM_Rel;
  c02_DR_MM_Stat DR_MM_Stat;
  c04_GPS_Fix GPS_Fix;
  c08_1_8_0k1 GPS_Hdop;
  c08_1_8_0k1 GPS_Pdop;
  c04_0_12_1 GPS_Trck_Sat;
  c08_1_8_0k1 GPS_Vdop;
  c04_0_12_1 GPS_Vsbl_Sat;
  c02_MM_Map_Stat MM_Map_Stat;
  c02_MM_Road_Stat MM_Road_Stat;
  c02_MM_Route_Stat MM_Route_Stat;
} REC_GPS_Pos_Stat;

#  define Rte_TypeDef_REC_HiBm_Stat
typedef struct
{
  DC_BOOL HiBm_IndLmp_On_Rq;
  DC_BOOL HiBm_On;
} REC_HiBm_Stat;

#  define Rte_TypeDef_REC_IHC_Lgt_Stat_HLI
typedef struct
{
  Rsrv01 Rsrv2_IHC_Lgt_Stat_HLI;
  c02_Off_On IHC_HiBm_Stat_HLM_LT;
  c08_m_0_600_2k5 IHC_LgtDist;
  c08_deg_m20_20_0k2 IHC_Plus_CrvLgt_Lt_RotAngl;
  c08_deg_m20_20_0k2 IHC_Plus_CrvLgt_Rt_RotAngl;
  c03_IHC_Plus_LgtStyle IHC_Plus_LgtStyle_Lt;
  c03_IHC_Plus_LgtStyle IHC_Plus_LgtStyle_Rt;
  c08_deg_m20_20_0k2 IHC_Plus_Lt_RotAngl_Cutoff;
  c08_deg_m20_20_0k2 IHC_Plus_Rt_RotAngl_Cutoff;
  c02_IHC_Stat_HLM_LT IHC_Stat_HLM_LT;
  c04_0_15_1_SNA_na SQC_IHC_Lgt_Stat_HLI;
  c08_CRC_woSNA CRC_IHC_Lgt_Stat_HLI;
  Rsrv01 Rsrv1_IHC_Lgt_Stat_HLI;
} REC_IHC_Lgt_Stat_HLI;

#  define Rte_TypeDef_REC_IHC_Lgt_Stat_MPC
typedef struct
{
  c08_0_250_1 IHC_Brt_Outsd;
  c04_0_14_1 IHC_ChgovrLvl;
  c02_City_Dtct IHC_City_Dtct;
  c02_DrvDir IHC_DrvDir;
  c02_Off_On IHC_HiBm_Stat;
  c08_m_0_600_2k5 IHC_LgtDist_Rq;
  c08_deg_m20_20_0k2 IHC_ObjAngl;
  c02_Off_On IHC_OptHdLgtLvl_Stat;
  c02_IHC_Stat IHC_Stat_MPC;
  c02_TrffcStyle IHC_TrffcStyle;
  c02_IHC_Tunnel_Det IHC_Tunnel;
  c02_Off_On IHC_WShHt_Rq_Stat;
  c02_Wthr_Dtct IHC_Wthr_Dtct;
  c02_IHC_MotorWay_Dtct IHC_MotorWay_Dtct;
  c04_0_15_1_SNA_na SQC_IHC_Lgt_Stat_MPC;
  c08_CRC_woSNA CRC_IHC_Lgt_Stat_MPC;
  Rsrv04 Rsrv1_IHC_Lgt_Stat_MPC;
} REC_IHC_Lgt_Stat_MPC;

#  define Rte_TypeDef_REC_IHC_Plus_HL_Stat
typedef struct
{
  c03_0_to_7_1_no_SNA IHC_Plus_HL_Lt_ChgovrLvl;
  c03_0_to_7_1_no_SNA IHC_Plus_HL_Rt_ChgovrLvl;
  c02_IHC_Plus_HL_LgtOut IHC_Plus_HL_Lt_LgtOut;
  c02_IHC_Plus_HL_LgtOut IHC_Plus_HL_Rt_LgtOut;
  c12_deg_m20_20_0k01 IHC_Plus_HL_Lt_Angl_Min;
  c12_deg_m20_20_0k01 IHC_Plus_HL_Rt_Angl_Min;
  cIHC_Plus_HiBm_Stat_V2 IHC_Plus_HiBm_Lt_Stat_V2;
  cIHC_Plus_HiBm_Stat_V2 IHC_Plus_HiBm_Rt_Stat_V2;
  c04_0_15_1_SNA_na SQC_IHC_Plus_HL_Stat;
  Rsrv08 Rsrv4_IHC_Plus_HL_Stat;
  c08_CRC_woSNA CRC_IHC_Plus_HL_Stat;
  Rsrv04 Rsrv1_IHC_Plus_HL_Stat;
  Rsrv01 Rsrv3_IHC_Plus_HL_Stat;
  Rsrv01 Rsrv2_IHC_Plus_HL_Stat;
} REC_IHC_Plus_HL_Stat;

#  define Rte_TypeDef_REC_Ign_Stat
typedef struct
{
  c03_ISw_Stat ISw_Stat;
  DC_BOOL Ign_On_StartProc_Inact;
  DC_BOOL KG_IgnCtrl_Actv;
  c08_CRC_woSNA CRC_Ign_Stat;
  c04_0_15_1_SNA_na SQC_Ign_Stat;
  c02_SPCR_Conf SPCR_Conf_EIS;
  DC_BOOL SPCR_AcustWarn_Rq_EIS;
  DC_BOOL SPCR_Flt_EIS;
  DC_BOOL TxPkPosn_Rq_SPCR_Enbl;
  DC_BOOL TxPkPosn_Emg_Rq;
  c02_ESL_Lk_Rq ESL_Lk_Rq;
  DC_BOOL TxPkPosn_Rq;
  DC_BOOL TxPkPosnAuto_Enbl;
  Rsrv03 Rsrv1_Ign_Stat;
  DC_BOOL KG_StartSw_Psd;
  DC_BOOL EngSt_Enbl_Rq_KG;
} REC_Ign_Stat;

#  define Rte_TypeDef_REC_Impact
typedef struct
{
  DC_BOOL Impact_L;
  DC_BOOL Impact_M;
  DC_BOOL Impact_Tgl;
  DC_BOOL Impact_N;
  DC_BOOL Impact_H;
  DC_BOOL Impact_K;
  DC_BOOL Impact_I;
  DC_BOOL Impact_A;
  DC_BOOL Impact_X;
  DC_BOOL Impact_F;
  DC_BOOL Impact_G;
  DC_BOOL Impact_C;
  DC_BOOL Impact_O;
  DC_BOOL Impact_E;
  DC_BOOL Impact_B;
  DC_BOOL Impact_D;
  DC_BOOL Impact_P;
} REC_Impact;

#  define Rte_TypeDef_REC_LDC_Disp_Rq_ESP
typedef struct
{
  c02_Idle_Beep LDC_AcustWarn_Rq;
  c02_LDC_CMS_MsgDisp_Rq LDC_CMS_MsgDisp_Rq;
  c03_LDC_CMS_Stat LDC_CMS_Stat;
  c02_02_Idle_On_NDef LDC_DTR_IndLmp_On_Rq;
  c03_LDC_DTR_MsgDisp_Rq LDC_DTR_MsgDisp_Rq;
  c04_LDC_DTR_Stat LDC_DTR_Stat;
  c08_LDC_Dist LDC_Dist;
  c08_m_0_150_1 LDC_Dist_Dsr;
  c05_LDC_MsgDisp_Rq LDC_MsgDisp_Rq;
  DC_BOOL LDC_MsgDisp_TrgrRq;
  DC_BOOL LDC_RadarSens_Off;
  c01_UnitVehSpd LDC_SpdUnit_Rs;
  c08_LDC_Spd LDC_Spd_Add;
  c08_LDC_Spd LDC_Spd_Dsr;
  DC_BOOL LDC_VSL_On;
  DC_BOOL LDC_WTSL_Flt;
  DC_BOOL LDC_DTR_MLA_Ctrl_Actv;
  DC_BOOL LDC_DTR_MM_Ctrl_Actv;
} REC_LDC_Disp_Rq_ESP;

#  define Rte_TypeDef_REC_LDC_Disp_Rq_RDU
typedef struct
{
  c02_Idle_Beep LDC_AcustWarn_Rq_RDU;
  c02_LDC_CMS_MsgDisp_Rq LDC_CMS_MsgDisp_Rq_RDU;
  c03_LDC_CMS_Stat LDC_CMS_Stat_RDU;
  c02_02_Idle_On_NDef LDC_DTR_IndLmp_On_Rq_RDU;
  c03_LDC_DTR_MsgDisp_Rq LDC_DTR_MsgDisp_Rq_RDU;
  c04_LDC_DTR_Stat LDC_DTR_Stat_RDU;
  c08_m_0_150_1 LDC_Dist_Dsr_RDU;
  c08_LDC_Dist LDC_Dist_RDU;
  c05_LDC_MsgDisp_Rq LDC_MsgDisp_Rq_RDU;
  DC_BOOL LDC_MsgDisp_TrgrRq_RDU;
  DC_BOOL LDC_RadarSens_Off_RDU;
  c01_UnitVehSpd LDC_SpdUnit_Rs_RDU;
  c08_LDC_Spd LDC_Spd_Add_RDU;
  c08_LDC_Spd LDC_Spd_Dsr_RDU;
  DC_BOOL LDC_VSL_On_RDU;
  DC_BOOL LDC_WTSL_Flt_RDU;
  DC_BOOL LDC_DTR_MLA_Ctrl_Actv_RDU;
  DC_BOOL LDC_DTR_MM_Ctrl_Actv_RDU;
} REC_LDC_Disp_Rq_RDU;

#  define Rte_TypeDef_REC_LDC_Rq_SCCM
typedef struct
{
  c08_CRC_woSNA CRC_LDC_Rq_SCCM;
  c08_0_200_1 DTR_Dist_Rq;
  c04_0_15_1_SNA_na SQC_LDC_Rq_SCCM;
  DC_BOOL SpdCtrlLvrStat_Inv;
  c06_SpdCtrlLvr_Stat SpdCtrlLvr_Stat;
  Rsrv04 Rsrv1_LDC_Rq_SCCM;
  DC_BOOL VSL_Enbl_Rq;
} REC_LDC_Rq_SCCM;

#  define Rte_TypeDef_REC_LDP_Warn_Rq_euk2owpx15avykqntci714wbp
typedef struct
{
  c03_ALDW_BrkMsgDisp_Rq LDP_BrkMsgDisp_Rq;
  c02_ALDW_IndLmp_On_Rq LDP_IndLmp_On_Rq;
  DC_BOOL LDP_Menu_Enbl_Rq;
  c03_LDP_MsgDisp_Rq LDP_MsgDisp_Rq;
} REC_LDP_Warn_Rq_euk2owpx15avykqntci714wbp;

#  define Rte_TypeDef_REC_LgtSens_Stat
typedef struct
{
  DC_BOOL LgtSens_Flt;
  c02_LoBm_Rq LgtSens_LoBm_On_Rq;
  c01_LgtSens_Night LgtSens_Night;
  c01_LgtSens_Night LgtSens_Night2;
  DC_BOOL LgtSens_SNA;
  DC_BOOL LgtSens_Tunnel;
  c03_Steps_0_7_1_SNA_na LgtSens_Twlgt;
} REC_LgtSens_Stat;

#  define Rte_TypeDef_REC_MirrAdj_XX_Rq
typedef struct
{
  DC_BOOL MirrAdj_XX_Lt;
  DC_BOOL MirrAdj_XX_Rt;
  DC_BOOL MirrAdj_XX_Up;
  DC_BOOL MirrAdj_XX_Down;
  c02_MirrFld_Rq MirrFld_XX_Rq;
  DC_BOOL MirrPkPosn_XX_Sv_Rq;
} REC_MirrAdj_XX_Rq;

#  define Rte_TypeDef_REC_NVP_Stat1
typedef struct
{
  c08_CRC_woSNA CRC_NVP_Stat1;
  c02_Ndef_Off_On NVP_IrLmp_On_Rq;
  c04_0_15_1_SNA_na SQC_NVP_Stat1;
  c03_NVP_Disp_Rq NVP_Disp_Rq;
  c04_NVP_Sys_Stat NVP_Sys_Stat;
  c04_NVP_Warn_Stat NVP_Warn_Stat;
  c02_Ndef_Off_On NVP_Wpr_Rq;
  c02_Ndef_Off_On NVP_WshHt_Rq;
  c03_NVP_Icon_Stat NVP_Icon_Stat;
  DC_BOOL NVP_MenuSubs_Rq;
  c03_SPL_Icon_Stat NVP_SPL_Icon_Stat;
  c03_SPL_Warn_Stat NVP_SPL_Warn_Stat;
  DC_BOOL SPL_MenuSubs_Rq;
} REC_NVP_Stat1;

#  define Rte_TypeDef_REC_PN14_SupBat_Stat
typedef struct
{
  c02_BatCutSw_Stat PN14_SupBatCutSw_Stat;
  c11_A_m102k4_102k2_0k1 PN14_SupBat_Curr;
  c08_V_0_25k4_0k1 PN14_SupBat_Volt;
} REC_PN14_SupBat_Stat;

#  define Rte_TypeDef_REC_Preview_Header1
typedef struct
{
  c08_CRC_woSNA CRC_Preview_Header1;
  c08_0_255_1_SNA_na Preview_HeaderCnt_Header1;
  c16_m_0_65k534_0k001 Preview_LtTrk_P0_Dist;
  c16_m_m3d2768_3d2766_0d0001 Preview_LtTrk_P0_Hgt;
  c08_m_0_0kd0508_0d0002 Preview_LtTrk_P0_Qual;
  c08_0_254_1 Preview_Prof_TmStmp;
  c16_m_0_65k534_0k001 Preview_RtTrk_P0_Dist;
  c16_m_m3d2768_3d2766_0d0001 Preview_RtTrk_P0_Hgt;
  c08_m_0_0kd0508_0d0002 Preview_RtTrk_P0_Qual;
  c02_PreviewTrk_Stat Preview_Trk_Stat;
  c04_0_15_1_SNA_na SQC_Preview_Header1;
  Rsrv16 Rsrv3_Preview_Header1;
  Rsrv02 Rsrv1_Preview_Header1;
  Rsrv16 Rsrv2_Preview_Header1;
} REC_Preview_Header1;

#  define Rte_TypeDef_REC_Preview_Header2
typedef struct
{
  c08_CRC_woSNA CRC_Preview_Header2;
  c08_0_255_1_SNA_na Preview_HeaderCnt_Header2;
  c16_rad_m0d6553_p0d6553_0d00002 Preview_PitchAngleDelta;
  c16_rad_m0d6553_p0d6553_0d00002 Preview_RollAngleDelta;
  c16_m_m2d2768_4d2766_0d0001 Preview_ShiftDelta_X;
  c16_m_m3d2768_3d2766_0d0001 Preview_ShiftDelta_Y;
  c16_m_m3d2768_3d2766_0d0001 Preview_ShiftDelta_Z;
  c16_rad_m0d6553_p0d6553_0d00002 Preview_YawAngleDelta;
  c04_0_15_1_SNA_na SQC_Preview_Header2;
  Rsrv16 Rsrv3_Preview_Header2;
  Rsrv08 Rsrv2_Preview_Header2;
  Rsrv04 Rsrv1_Preview_Header2;
} REC_Preview_Header2;

#  define Rte_TypeDef_REC_RDU_GlobalAttr
typedef struct
{
  c08_CRC_woSNA CRC_RDU_GlobalAttr;
  c16_ms_0_20970880_320 RDU_GlobalTmStmp;
  Rsrv04 Rsrv1_RDU_GlobalAttr;
  Rsrv32 Rsrv2_RDU_GlobalAttr;
  c04_0_15_1_SNA_na SQC_RDU_GlobalAttr;
} REC_RDU_GlobalAttr;

#  define Rte_TypeDef_REC_RDU_Gnrl_Stat
typedef struct
{
  c08_CRC_woSNA CRC_RDU_Gnrl_Stat;
  c10_m_p_sq_s_m51k2_51_0k1 RDU_SysAccel_X;
  c12_m_p_s_m18k35_84_0k025 RDU_SysSpd_X;
  c12_deg_p_s_m63k5_64k437_0k03125 RDU_SysYawRate;
  c12_deg_m40k94_40k94_0k02 RDU_ToeAngl_Calc;
  Rsrv02 Rsrv1_RDU_Gnrl_Stat;
  c04_0_15_1_SNA_na SQC_RDU_Gnrl_Stat;
  Rsrv04 Rsrv2_RDU_Gnrl_Stat;
} REC_RDU_Gnrl_Stat;

#  define Rte_TypeDef_REC_ROE_XX
typedef struct
{
  c24_0_16777215_1_SNA_na ROE_DTC_XX;
  c08_0_255_1_SNA_na ROE_DTC_Stat_XX;
  c32_0_4294967295_1_SNA_na ROE_Header_XX;
} REC_ROE_XX;

#  define Rte_TypeDef_REC_SCCM_Lvr_Stat
typedef struct
{
  c08_CRC_woSNA CRC_SCCM_Lvr_Stat;
  c02_HiBmLvr_Stat HiBmLvr_Stat;
  Rsrv08 Rsrv1_SCCM_Lvr_Stat;
  c04_0_15_1_SNA_na SQC_SCCM_Lvr_Stat;
  c02_TurnIndLvr_Stat TurnIndLvr_Stat;
} REC_SCCM_Lvr_Stat;

#  define Rte_TypeDef_REC_SPL_Obj1_Obj2_MPC
typedef struct
{
  c08_CRC_woSNA CRC_SPL_Obj1_Obj2_MPC;
  Rsrv04 Rsrv1_SPL_Obj1_Obj2_MPC;
  Rsrv02 Rsrv2_SPL_Obj1_Obj2_MPC;
  Rsrv02 Rsrv3_SPL_Obj1_Obj2_MPC;
  c05_m_0_180_6 SPL_Obj1_Dist_MPC;
  c10_deg_m10d24_p10d2_0d02 SPL_Obj1_HrztAngl_MPC;
  c03_0_6_1 SPL_Obj1_Id_MPC;
  c02_SPL_Obj_Ill_Rq_MPC SPL_Obj1_Ill_Rq_MPC;
  c02_DGL_Obj_Type SPL_Obj1_Type_MPC;
  c05_m_0_180_6 SPL_Obj2_Dist_MPC;
  c10_deg_m10d24_p10d2_0d02 SPL_Obj2_HrztAngl_MPC;
  c03_0_6_1 SPL_Obj2_Id_MPC;
  c02_SPL_Obj_Ill_Rq_MPC SPL_Obj2_Ill_Rq_MPC;
  c02_DGL_Obj_Type SPL_Obj2_Type_MPC;
  c04_0_15_1_SNA_na SQC_SPL_Obj1_Obj2_MPC;
} REC_SPL_Obj1_Obj2_MPC;

#  define Rte_TypeDef_REC_SPL_Obj1_Obj2_NV
typedef struct
{
  c08_CRC_woSNA CRC_SPL_Obj1_Obj2_NV;
  Rsrv04 Rsrv1_SPL_Obj1_Obj2_NV;
  Rsrv02 Rsrv2_SPL_Obj1_Obj2_NV;
  Rsrv02 Rsrv3_SPL_Obj1_Obj2_NV;
  c05_m_0_180_6 SPL_Obj1_Dist_NV;
  c10_deg_m10d24_p10d2_0d02 SPL_Obj1_HrztAngl_NV;
  c03_0_6_1 SPL_Obj1_Id_NV;
  c02_SPL_Obj_Ill_Rq SPL_Obj1_Ill_Rq_NV;
  c02_DGL_Obj_Type SPL_Obj1_Type_NV;
  c05_m_0_180_6 SPL_Obj2_Dist_NV;
  c10_deg_m10d24_p10d2_0d02 SPL_Obj2_HrztAngl_NV;
  c03_0_6_1 SPL_Obj2_Id_NV;
  c02_SPL_Obj_Ill_Rq SPL_Obj2_Ill_Rq_NV;
  c02_DGL_Obj_Type SPL_Obj2_Type_NV;
  c04_0_15_1_SNA_na SQC_SPL_Obj1_Obj2_NV;
} REC_SPL_Obj1_Obj2_NV;

#  define Rte_TypeDef_REC_STA_Rs1
typedef struct
{
  c08_CRC_woSNA CRC_STA_Rs1;
  c15_deg_m81k92_p80k91_0k005 EPS_FtWhlAngl;
  c02_FtWhlAngl_Stat EPS_FtWhlAngl_Stat;
  c04_0_15_1_SNA_na SQC_STA_Rs1;
  c02_STA_Stat STA_Stat;
  c14_Nm_m81d92_p81d9_0d01 StW_Trq_EPS;
  c08_deg_m3k2_p3k15_0k025 EPS_FtWhlAngl_Offset;
  Rsrv01 Rsrv1_STA_Rs1;
  Rsrv02 Rsrv2_STA_Rs1;
  Rsrv08 Rsrv3_STA_Rs1;
} REC_STA_Rs1;

#  define Rte_TypeDef_REC_StWhl_Angl_Stat
typedef struct
{
  c14_deg_m819k2_819_0k1 StWhl_Angl;
  c02_StWhl_AnglSens_Stat StWhl_AnglSens_Stat;
  c04_0_15_1_SNA_na SQC_StWhl_Angl_Stat;
  c08_CRC_woSNA CRC_StWhl_Angl_Stat;
  c02_StWhl_AnglSens_Id StWhl_AnglSens_Id;
  c14_deg_p_s_m4096_4095_0k5 StWhl_AnglSpd;
  Rsrv16 Rsrv3_StWhl_Angl_Stat;
  Rsrv02 Rsrv2_StWhl_Angl_Stat;
  Rsrv02 Rsrv1_StWhl_Angl_Stat;
} REC_StWhl_Angl_Stat;

#  define Rte_TypeDef_REC_TCM_Data2
typedef struct
{
  c08_CRC_woSNA CRC_TCM_Data2;
  c14_0_163k82_0k01 EngWhlTrqRatio_TCM;
  c04_Gr Gr;
  c04_Gr_Target Gr_Target;
  c04_0_15_1_SNA_na SQC_TCM_Data2;
  DC_BOOL SSA_Enbl_Rq_TCM;
  c02_SSA_ENBL_DSABL_PNA_TCM SSA_Enbl_Stat_TCM;
  c03_TSL_Posn TSL_Posn_TCM;
  c16_Nm_0_65534_1 TxDrvTrqAbsVal;
  c08_Nm_0_63k5_0k25 TxTrqLoss;
} REC_TCM_Data2;

#  define Rte_TypeDef_REC_VehDyn_EPKB_Stat
typedef struct
{
  c08_m_p_sq_s_m10k24_10k08_0k08 VehAccel_X;
  c08_m_p_sq_s_m2k56_2k52_0k02 VehAccel_X_Offset;
  c08_m_p_sq_s_m10k24_10k08_0k08 VehAccel_Y;
  c08_m_p_sq_s_m2k56_2k52_0k02 VehAccel_Y_Offset;
  c04_0_15_1_SNA_na SQC_VehDyn_EPKB_Stat;
  c08_CRC_woSNA CRC_VehDyn_EPKB_Stat;
  c02_Signal_Qual VehAccel_Y_Qual;
  c02_Signal_Qual VehAccel_X_Qual;
  DC_BOOL EPKB_Enbl_Rq;
  c02_PkBrk_Rq_ESP PkBrk_Rq_SPCR;
  Rsrv08 Rsrv2_VehDyn_EPKB_Stat;
  Rsrv05 Rsrv1_VehDyn_EPKB_Stat;
} REC_VehDyn_EPKB_Stat;

#  define Rte_TypeDef_REC_VehDyn_SPCR_Stat
typedef struct
{
  c08_CRC_woSNA CRC_VehDyn_SPCR_Stat;
  DC_BOOL HSA_Sys_Flt;
  c04_0_15_1_SNA_na SQC_VehDyn_SPCR_Stat;
  c02_SPCR_AS_Dsabl SPCR_AS_Dsabl;
  c02_SPCR_AS_Off_Rq SPCR_AS_Off_Rq;
  c02_SPCR_Excpt_Rq_V2 SPCR_Excpt_Rq_V2;
  c04_SPCR_Md SPCR_Md;
  c02_SPCR_Sp_Stat SPCR_Sp_Stat;
  DC_BOOL SPCR_Veh_Immo;
  DC_BOOL TxPkPosn_Rq_SPCR;
  c08_deg_p_s_m6k96_6k96_0k08 VehYawRateOffset;
  c02_Signal_Qual VehYawRate_Raw_Qual;
  c02_SPCR_Style SPCR_Style;
  c16_deg_p_s_m327k68_327k66_0k01 VehYawRate_Raw;
  Rsrv01 Rsrv1_VehDyn_SPCR_Stat;
  Rsrv08 Rsrv2_VehDyn_SPCR_Stat;
} REC_VehDyn_SPCR_Stat;

#  define Rte_TypeDef_REC_Whl_Rt_Stat
typedef struct
{
  c08_CRC_woSNA CRC_Whl_Rt_Stat;
  c04_0_15_1_SNA_na SQC_Whl_Rt_Stat;
  c02_WhlDir WhlDir_FR_Stat;
  c02_WhlDir WhlDir_RR_Stat;
  c14_rpm_0_8191_0k5 WhlRPM_FR;
  c08_Impulses_0_254_1 WhlPlsCnt_RR;
  c02_Signal_Qual WhlRPM_FR_Qual;
  c14_rpm_0_8191_0k5 WhlRPM_RR;
  c08_Impulses_0_254_1 WhlPlsCnt_FR;
  c02_Signal_Qual WhlRPM_RR_Qual;
} REC_Whl_Rt_Stat;

#  define Rte_TypeDef_REC_WprWashSw_Stat
typedef struct
{
  c08_CRC_woSNA CRC_WprWashSw_Stat;
  Rsrv05 Rsrv1_WprWashSw_Stat;
  c04_0_15_1_SNA_na SQC_WprWashSw_Stat;
  c03_WprSw6Posn WprSw6Posn;
  c02_WprWash_R_Sw_Posn_V2 WprWash_R_Sw_Posn_V2;
  c02_WprSw_Stat WprWashSw_Psd;
} REC_WprWashSw_Stat;

# endif


/**********************************************************************************************************************
 * Per-Instance Memory User Types
 *********************************************************************************************************************/


/**********************************************************************************************************************
 * Constant value definitions
 *********************************************************************************************************************/

# define RTE_START_SEC_CONST_UNSPECIFIED
# include "MemMap.h"

# if defined XDIS_3m9f3z63q9hlrwm54ruw9zc0h
#  error "Constant value <XDIS_3m9f3z63q9hlrwm54ruw9zc0h> conflicts with an already defined symbol."
# else
#  define XDIS_3m9f3z63q9hlrwm54ruw9zc0h (Rte_XDIS_3m9f3z63q9hlrwm54ruw9zc0h)
# endif
extern CONST(ARR_08_UInt_noSNA_8, RTE_CONST) Rte_XDIS_3m9f3z63q9hlrwm54ruw9zc0h;

# if defined XDIS_52psshjfqpr2jsba1msmbf9aa
#  error "Constant value <XDIS_52psshjfqpr2jsba1msmbf9aa> conflicts with an already defined symbol."
# else
#  define XDIS_52psshjfqpr2jsba1msmbf9aa (Rte_XDIS_52psshjfqpr2jsba1msmbf9aa)
# endif
extern CONST(ARR_08_UInt_noSNA_8, RTE_CONST) Rte_XDIS_52psshjfqpr2jsba1msmbf9aa;

# if defined XDIS_eym22kyvymzct2gc7lt7029pr
#  error "Constant value <XDIS_eym22kyvymzct2gc7lt7029pr> conflicts with an already defined symbol."
# else
#  define XDIS_eym22kyvymzct2gc7lt7029pr (Rte_XDIS_eym22kyvymzct2gc7lt7029pr)
# endif
extern CONST(REC_08_UInt_Record8, RTE_CONST) Rte_XDIS_eym22kyvymzct2gc7lt7029pr;

# if defined XDIS_cvy48z02ilzrz26k4tn694wq1
#  error "Constant value <XDIS_cvy48z02ilzrz26k4tn694wq1> conflicts with an already defined symbol."
# else
#  define XDIS_cvy48z02ilzrz26k4tn694wq1 (Rte_XDIS_cvy48z02ilzrz26k4tn694wq1)
# endif
extern CONST(REC_ADAS_CuA, RTE_CONST) Rte_XDIS_cvy48z02ilzrz26k4tn694wq1;

# if defined XDIS_29uankvxdpaoah4om7sw6yuke
#  error "Constant value <XDIS_29uankvxdpaoah4om7sw6yuke> conflicts with an already defined symbol."
# else
#  define XDIS_29uankvxdpaoah4om7sw6yuke (Rte_XDIS_29uankvxdpaoah4om7sw6yuke)
# endif
extern CONST(REC_ADAS_Meta, RTE_CONST) Rte_XDIS_29uankvxdpaoah4om7sw6yuke;

# if defined XDIS_5ylt43xoch1njf63tlm9o9qrv
#  error "Constant value <XDIS_5ylt43xoch1njf63tlm9o9qrv> conflicts with an already defined symbol."
# else
#  define XDIS_5ylt43xoch1njf63tlm9o9qrv (Rte_XDIS_5ylt43xoch1njf63tlm9o9qrv)
# endif
extern CONST(REC_ADAS_Posn, RTE_CONST) Rte_XDIS_5ylt43xoch1njf63tlm9o9qrv;

# if defined XDIS_733lcitq986ob4o998bbhvhyb
#  error "Constant value <XDIS_733lcitq986ob4o998bbhvhyb> conflicts with an already defined symbol."
# else
#  define XDIS_733lcitq986ob4o998bbhvhyb (Rte_XDIS_733lcitq986ob4o998bbhvhyb)
# endif
extern CONST(REC_ADAS_Profile_Long_Latit, RTE_CONST) Rte_XDIS_733lcitq986ob4o998bbhvhyb;

# if defined XDIS_bz3fnapqemi4uyu8yfycije4d
#  error "Constant value <XDIS_bz3fnapqemi4uyu8yfycije4d> conflicts with an already defined symbol."
# else
#  define XDIS_bz3fnapqemi4uyu8yfycije4d (Rte_XDIS_bz3fnapqemi4uyu8yfycije4d)
# endif
extern CONST(REC_ADAS_Profile_Long_Longit, RTE_CONST) Rte_XDIS_bz3fnapqemi4uyu8yfycije4d;

# if defined XDIS_7qqg1vj667u63l75u64442xyk
#  error "Constant value <XDIS_7qqg1vj667u63l75u64442xyk> conflicts with an already defined symbol."
# else
#  define XDIS_7qqg1vj667u63l75u64442xyk (Rte_XDIS_7qqg1vj667u63l75u64442xyk)
# endif
extern CONST(REC_ADAS_Profile_Long_NPSL1, RTE_CONST) Rte_XDIS_7qqg1vj667u63l75u64442xyk;

# if defined XDIS_i2lbd0agco9si4i0stilkhfk
#  error "Constant value <XDIS_i2lbd0agco9si4i0stilkhfk> conflicts with an already defined symbol."
# else
#  define XDIS_i2lbd0agco9si4i0stilkhfk (Rte_XDIS_i2lbd0agco9si4i0stilkhfk)
# endif
extern CONST(REC_ADAS_Profile_Long_NPSL2, RTE_CONST) Rte_XDIS_i2lbd0agco9si4i0stilkhfk;

# if defined XDIS_a7q5luod94krpd5v2v35de6b9
#  error "Constant value <XDIS_a7q5luod94krpd5v2v35de6b9> conflicts with an already defined symbol."
# else
#  define XDIS_a7q5luod94krpd5v2v35de6b9 (Rte_XDIS_a7q5luod94krpd5v2v35de6b9)
# endif
extern CONST(REC_ADAS_Profile_Short_CurvLn, RTE_CONST) Rte_XDIS_a7q5luod94krpd5v2v35de6b9;

# if defined XDIS_5z818igjuuodaklbm45mclt0i
#  error "Constant value <XDIS_5z818igjuuodaklbm45mclt0i> conflicts with an already defined symbol."
# else
#  define XDIS_5z818igjuuodaklbm45mclt0i (Rte_XDIS_5z818igjuuodaklbm45mclt0i)
# endif
extern CONST(REC_ADAS_Profile_Short_HeadChSp, RTE_CONST) Rte_XDIS_5z818igjuuodaklbm45mclt0i;

# if defined XDIS_hut3550uc119naj76854tbe
#  error "Constant value <XDIS_hut3550uc119naj76854tbe> conflicts with an already defined symbol."
# else
#  define XDIS_hut3550uc119naj76854tbe (Rte_XDIS_hut3550uc119naj76854tbe)
# endif
extern CONST(REC_ADAS_Profile_Short_LocDest, RTE_CONST) Rte_XDIS_hut3550uc119naj76854tbe;

# if defined XDIS_74wdz5mtgt0xgnj9c5lofyp1k
#  error "Constant value <XDIS_74wdz5mtgt0xgnj9c5lofyp1k> conflicts with an already defined symbol."
# else
#  define XDIS_74wdz5mtgt0xgnj9c5lofyp1k (Rte_XDIS_74wdz5mtgt0xgnj9c5lofyp1k)
# endif
extern CONST(REC_ADAS_Profile_Short_RoadAcc, RTE_CONST) Rte_XDIS_74wdz5mtgt0xgnj9c5lofyp1k;

# if defined XDIS_3fllagq5mbqbdopt5n1hchhvp
#  error "Constant value <XDIS_3fllagq5mbqbdopt5n1hchhvp> conflicts with an already defined symbol."
# else
#  define XDIS_3fllagq5mbqbdopt5n1hchhvp (Rte_XDIS_3fllagq5mbqbdopt5n1hchhvp)
# endif
extern CONST(REC_ADAS_Profile_Short_RoadCon, RTE_CONST) Rte_XDIS_3fllagq5mbqbdopt5n1hchhvp;

# if defined XDIS_6zhjg0bxa5cwbni6wbku4s59f
#  error "Constant value <XDIS_6zhjg0bxa5cwbni6wbku4s59f> conflicts with an already defined symbol."
# else
#  define XDIS_6zhjg0bxa5cwbni6wbku4s59f (Rte_XDIS_6zhjg0bxa5cwbni6wbku4s59f)
# endif
extern CONST(REC_ADAS_Profile_Short_RoutNum, RTE_CONST) Rte_XDIS_6zhjg0bxa5cwbni6wbku4s59f;

# if defined XDIS_on7iugfsbpema4kse06nesnx
#  error "Constant value <XDIS_on7iugfsbpema4kse06nesnx> conflicts with an already defined symbol."
# else
#  define XDIS_on7iugfsbpema4kse06nesnx (Rte_XDIS_on7iugfsbpema4kse06nesnx)
# endif
extern CONST(REC_ADAS_Profile_Short_SlopeLn, RTE_CONST) Rte_XDIS_on7iugfsbpema4kse06nesnx;

# if defined XDIS_7hk3vyp54rvrjpgmjr92tlxxd
#  error "Constant value <XDIS_7hk3vyp54rvrjpgmjr92tlxxd> conflicts with an already defined symbol."
# else
#  define XDIS_7hk3vyp54rvrjpgmjr92tlxxd (Rte_XDIS_7hk3vyp54rvrjpgmjr92tlxxd)
# endif
extern CONST(REC_ADAS_Profile_Short_SlopeSt, RTE_CONST) Rte_XDIS_7hk3vyp54rvrjpgmjr92tlxxd;

# if defined XDIS_5s8xkx3a09ggvho2a9fqd3hq7
#  error "Constant value <XDIS_5s8xkx3a09ggvho2a9fqd3hq7> conflicts with an already defined symbol."
# else
#  define XDIS_5s8xkx3a09ggvho2a9fqd3hq7 (Rte_XDIS_5s8xkx3a09ggvho2a9fqd3hq7)
# endif
extern CONST(REC_ADAS_Profile_Short_VarSpSign, RTE_CONST) Rte_XDIS_5s8xkx3a09ggvho2a9fqd3hq7;

# if defined XDIS_a360845v565f66gha2z197mct
#  error "Constant value <XDIS_a360845v565f66gha2z197mct> conflicts with an already defined symbol."
# else
#  define XDIS_a360845v565f66gha2z197mct (Rte_XDIS_a360845v565f66gha2z197mct)
# endif
extern CONST(REC_ADAS_Segment, RTE_CONST) Rte_XDIS_a360845v565f66gha2z197mct;

# if defined XDIS_74so1hnf9jrn4ja83vqj30xjo
#  error "Constant value <XDIS_74so1hnf9jrn4ja83vqj30xjo> conflicts with an already defined symbol."
# else
#  define XDIS_74so1hnf9jrn4ja83vqj30xjo (Rte_XDIS_74so1hnf9jrn4ja83vqj30xjo)
# endif
extern CONST(REC_ADAS_Stub, RTE_CONST) Rte_XDIS_74so1hnf9jrn4ja83vqj30xjo;

# if defined XDIS_89txldvpxf3wmmmshi664l9fi
#  error "Constant value <XDIS_89txldvpxf3wmmmshi664l9fi> conflicts with an already defined symbol."
# else
#  define XDIS_89txldvpxf3wmmmshi664l9fi (Rte_XDIS_89txldvpxf3wmmmshi664l9fi)
# endif
extern CONST(REC_ALDW_Disp_Warn_Rq_515fv9hxb5jrzmunrr9r72aqj, RTE_CONST) Rte_XDIS_89txldvpxf3wmmmshi664l9fi;

# if defined XDIS_b487phgy3gdf4it8iyw7vvx1b
#  error "Constant value <XDIS_b487phgy3gdf4it8iyw7vvx1b> conflicts with an already defined symbol."
# else
#  define XDIS_b487phgy3gdf4it8iyw7vvx1b (Rte_XDIS_b487phgy3gdf4it8iyw7vvx1b)
# endif
extern CONST(REC_ALDW_LaneAttr1_evn08d6126fkfaksv87161o1j, RTE_CONST) Rte_XDIS_b487phgy3gdf4it8iyw7vvx1b;

# if defined XDIS_c5j4qxl6158mncp0fjcm41c3v
#  error "Constant value <XDIS_c5j4qxl6158mncp0fjcm41c3v> conflicts with an already defined symbol."
# else
#  define XDIS_c5j4qxl6158mncp0fjcm41c3v (Rte_XDIS_c5j4qxl6158mncp0fjcm41c3v)
# endif
extern CONST(REC_ALDW_LaneAttr2, RTE_CONST) Rte_XDIS_c5j4qxl6158mncp0fjcm41c3v;

# if defined XDIS_6alklwf7w6ez8qp4f0duulhp9
#  error "Constant value <XDIS_6alklwf7w6ez8qp4f0duulhp9> conflicts with an already defined symbol."
# else
#  define XDIS_6alklwf7w6ez8qp4f0duulhp9 (Rte_XDIS_6alklwf7w6ez8qp4f0duulhp9)
# endif
extern CONST(REC_ALDW_LaneAttr3, RTE_CONST) Rte_XDIS_6alklwf7w6ez8qp4f0duulhp9;

# if defined XDIS_ea6t5oadgt4up54vedtku53iu
#  error "Constant value <XDIS_ea6t5oadgt4up54vedtku53iu> conflicts with an already defined symbol."
# else
#  define XDIS_ea6t5oadgt4up54vedtku53iu (Rte_XDIS_ea6t5oadgt4up54vedtku53iu)
# endif
extern CONST(REC_ALDW_LaneAttr4_2ahxpf4cam3pi2le1l2woky78, RTE_CONST) Rte_XDIS_ea6t5oadgt4up54vedtku53iu;

# if defined XDIS_9bt67tmlwic2hpdebvulowh0u
#  error "Constant value <XDIS_9bt67tmlwic2hpdebvulowh0u> conflicts with an already defined symbol."
# else
#  define XDIS_9bt67tmlwic2hpdebvulowh0u (Rte_XDIS_9bt67tmlwic2hpdebvulowh0u)
# endif
extern CONST(REC_ALDW_Polyg_eymr1ts77ut9vrrgvrho4m92e, RTE_CONST) Rte_XDIS_9bt67tmlwic2hpdebvulowh0u;

# if defined XDIS_ege1xgc2t1fr9su24k3zj57jy
#  error "Constant value <XDIS_ege1xgc2t1fr9su24k3zj57jy> conflicts with an already defined symbol."
# else
#  define XDIS_ege1xgc2t1fr9su24k3zj57jy (Rte_XDIS_ege1xgc2t1fr9su24k3zj57jy)
# endif
extern CONST(REC_ALDW_VLN_a2qglp2324znbwefnu92uartf, RTE_CONST) Rte_XDIS_ege1xgc2t1fr9su24k3zj57jy;

# if defined XDIS_3et885bwtr39hzceqrvk16fn0
#  error "Constant value <XDIS_3et885bwtr39hzceqrvk16fn0> conflicts with an already defined symbol."
# else
#  define XDIS_3et885bwtr39hzceqrvk16fn0 (Rte_XDIS_3et885bwtr39hzceqrvk16fn0)
# endif
extern CONST(REC_BrkSys_Stat_d7pccc3s00bjj322036sa5kif, RTE_CONST) Rte_XDIS_3et885bwtr39hzceqrvk16fn0;

# if defined XDIS_4iplm8o2ag6o8b1aiaief96o4
#  error "Constant value <XDIS_4iplm8o2ag6o8b1aiaief96o4> conflicts with an already defined symbol."
# else
#  define XDIS_4iplm8o2ag6o8b1aiaief96o4 (Rte_XDIS_4iplm8o2ag6o8b1aiaief96o4)
# endif
extern CONST(REC_BrkSys_Stat_d7pccc3s00bjj322036sa5kif, RTE_CONST) Rte_XDIS_4iplm8o2ag6o8b1aiaief96o4;

# if defined XDIS_apei9emk73iatlbdg8hijkkab
#  error "Constant value <XDIS_apei9emk73iatlbdg8hijkkab> conflicts with an already defined symbol."
# else
#  define XDIS_apei9emk73iatlbdg8hijkkab (Rte_XDIS_apei9emk73iatlbdg8hijkkab)
# endif
extern CONST(REC_CamObj_1_DTQ_d7pccc3s00bjj322036sa5kif, RTE_CONST) Rte_XDIS_apei9emk73iatlbdg8hijkkab;

# if defined XDIS_b8o9m6xonboy0ikqx10ovt7v1
#  error "Constant value <XDIS_b8o9m6xonboy0ikqx10ovt7v1> conflicts with an already defined symbol."
# else
#  define XDIS_b8o9m6xonboy0ikqx10ovt7v1 (Rte_XDIS_b8o9m6xonboy0ikqx10ovt7v1)
# endif
extern CONST(REC_CamObj_2_DTQ_d7pccc3s00bjj322036sa5kif, RTE_CONST) Rte_XDIS_b8o9m6xonboy0ikqx10ovt7v1;

# if defined XDIS_b9q77wbo1kk6evz3v0nv5yogp
#  error "Constant value <XDIS_b9q77wbo1kk6evz3v0nv5yogp> conflicts with an already defined symbol."
# else
#  define XDIS_b9q77wbo1kk6evz3v0nv5yogp (Rte_XDIS_b9q77wbo1kk6evz3v0nv5yogp)
# endif
extern CONST(REC_CamObj_3_DTQ_d7pccc3s00bjj322036sa5kif, RTE_CONST) Rte_XDIS_b9q77wbo1kk6evz3v0nv5yogp;

# if defined XDIS_4ca4r1o61eezt8l89qo7ub7kh
#  error "Constant value <XDIS_4ca4r1o61eezt8l89qo7ub7kh> conflicts with an already defined symbol."
# else
#  define XDIS_4ca4r1o61eezt8l89qo7ub7kh (Rte_XDIS_4ca4r1o61eezt8l89qo7ub7kh)
# endif
extern CONST(REC_CamObj_AB_BPQ_7e63hifz077cq0l1to4chei0g, RTE_CONST) Rte_XDIS_4ca4r1o61eezt8l89qo7ub7kh;

# if defined XDIS_cljbx2y4yc8s4d795979p0cj2
#  error "Constant value <XDIS_cljbx2y4yc8s4d795979p0cj2> conflicts with an already defined symbol."
# else
#  define XDIS_cljbx2y4yc8s4d795979p0cj2 (Rte_XDIS_cljbx2y4yc8s4d795979p0cj2)
# endif
extern CONST(REC_CamObj_A_BPQ_Posn, RTE_CONST) Rte_XDIS_cljbx2y4yc8s4d795979p0cj2;

# if defined XDIS_13ge5pel87qn6jba28k9p7lg9
#  error "Constant value <XDIS_13ge5pel87qn6jba28k9p7lg9> conflicts with an already defined symbol."
# else
#  define XDIS_13ge5pel87qn6jba28k9p7lg9 (Rte_XDIS_13ge5pel87qn6jba28k9p7lg9)
# endif
extern CONST(REC_CamObj_B_BPQ_Posn, RTE_CONST) Rte_XDIS_13ge5pel87qn6jba28k9p7lg9;

# if defined XDIS_bb0thjljualkkzpcl53utjc0g
#  error "Constant value <XDIS_bb0thjljualkkzpcl53utjc0g> conflicts with an already defined symbol."
# else
#  define XDIS_bb0thjljualkkzpcl53utjc0g (Rte_XDIS_bb0thjljualkkzpcl53utjc0g)
# endif
extern CONST(REC_Cam_Polyg_4hl0f8uklena7h1l78vguqx2i, RTE_CONST) Rte_XDIS_bb0thjljualkkzpcl53utjc0g;

# if defined XDIS_3e6p7iw7h5u13kcrfqqirgrea
#  error "Constant value <XDIS_3e6p7iw7h5u13kcrfqqirgrea> conflicts with an already defined symbol."
# else
#  define XDIS_3e6p7iw7h5u13kcrfqqirgrea (Rte_XDIS_3e6p7iw7h5u13kcrfqqirgrea)
# endif
extern CONST(REC_Cam_Stat_1lbtoaaebi5n2qvdq20f1phhd, RTE_CONST) Rte_XDIS_3e6p7iw7h5u13kcrfqqirgrea;

# if defined XDIS_agxe4yon8ajbe5u6mc74js0ps
#  error "Constant value <XDIS_agxe4yon8ajbe5u6mc74js0ps> conflicts with an already defined symbol."
# else
#  define XDIS_agxe4yon8ajbe5u6mc74js0ps (Rte_XDIS_agxe4yon8ajbe5u6mc74js0ps)
# endif
extern CONST(REC_DTQ_Ctrl, RTE_CONST) Rte_XDIS_agxe4yon8ajbe5u6mc74js0ps;

# if defined XDIS_bjz8c4btf37iubzp4mstgu9oh
#  error "Constant value <XDIS_bjz8c4btf37iubzp4mstgu9oh> conflicts with an already defined symbol."
# else
#  define XDIS_bjz8c4btf37iubzp4mstgu9oh (Rte_XDIS_bjz8c4btf37iubzp4mstgu9oh)
# endif
extern CONST(REC_DTQ_Disp_Rq_V2_b0ko81o0x5jgvwtduf99gvzi0, RTE_CONST) Rte_XDIS_bjz8c4btf37iubzp4mstgu9oh;

# if defined XDIS_87c8qme7gzabik3f14yy7pw6u
#  error "Constant value <XDIS_87c8qme7gzabik3f14yy7pw6u> conflicts with an already defined symbol."
# else
#  define XDIS_87c8qme7gzabik3f14yy7pw6u (Rte_XDIS_87c8qme7gzabik3f14yy7pw6u)
# endif
extern CONST(REC_DTQ_DrawbarAngl_dgfi1nrxtb0voy6rb7ybeonmv, RTE_CONST) Rte_XDIS_87c8qme7gzabik3f14yy7pw6u;

# if defined XDIS_5dnkgcj1s3q367yo0vddwttll
#  error "Constant value <XDIS_5dnkgcj1s3q367yo0vddwttll> conflicts with an already defined symbol."
# else
#  define XDIS_5dnkgcj1s3q367yo0vddwttll (Rte_XDIS_5dnkgcj1s3q367yo0vddwttll)
# endif
extern CONST(REC_DTQ_Obj_Pres_4ahuc5cy8shtai9jzr7jgnsdp, RTE_CONST) Rte_XDIS_5dnkgcj1s3q367yo0vddwttll;

# if defined XDIS_4o8fxswqtdildyx5skb5btc97
#  error "Constant value <XDIS_4o8fxswqtdildyx5skb5btc97> conflicts with an already defined symbol."
# else
#  define XDIS_4o8fxswqtdildyx5skb5btc97 (Rte_XDIS_4o8fxswqtdildyx5skb5btc97)
# endif
extern CONST(REC_DateTm, RTE_CONST) Rte_XDIS_4o8fxswqtdildyx5skb5btc97;

# if defined XDIS_9pw8i0ygug69fgeixl3fppwde
#  error "Constant value <XDIS_9pw8i0ygug69fgeixl3fppwde> conflicts with an already defined symbol."
# else
#  define XDIS_9pw8i0ygug69fgeixl3fppwde (Rte_XDIS_9pw8i0ygug69fgeixl3fppwde)
# endif
extern CONST(REC_EVC_CfgBit_01_32_580uwq34s0n14g39jbrwwepfe, RTE_CONST) Rte_XDIS_9pw8i0ygug69fgeixl3fppwde;

# if defined XDIS_3ra3hfrctb8ykqf7cgee76gqt
#  error "Constant value <XDIS_3ra3hfrctb8ykqf7cgee76gqt> conflicts with an already defined symbol."
# else
#  define XDIS_3ra3hfrctb8ykqf7cgee76gqt (Rte_XDIS_3ra3hfrctb8ykqf7cgee76gqt)
# endif
extern CONST(REC_EVC_CfgBit_65_96_18cj3r9lb95cc7w4q3mwqkn86, RTE_CONST) Rte_XDIS_3ra3hfrctb8ykqf7cgee76gqt;

# if defined XDIS_daha2w6v3vaefjx33x5bj2qyu
#  error "Constant value <XDIS_daha2w6v3vaefjx33x5bj2qyu> conflicts with an already defined symbol."
# else
#  define XDIS_daha2w6v3vaefjx33x5bj2qyu (Rte_XDIS_daha2w6v3vaefjx33x5bj2qyu)
# endif
extern CONST(REC_EVC_CfgBit_65_96_580uwq34s0n14g39jbrwwepfe, RTE_CONST) Rte_XDIS_daha2w6v3vaefjx33x5bj2qyu;

# if defined XDIS_c6b2wcgb9hfwe2f3wnyp9dins
#  error "Constant value <XDIS_c6b2wcgb9hfwe2f3wnyp9dins> conflicts with an already defined symbol."
# else
#  define XDIS_c6b2wcgb9hfwe2f3wnyp9dins (Rte_XDIS_c6b2wcgb9hfwe2f3wnyp9dins)
# endif
extern CONST(REC_EVC_CfgBit_65_96_86np54yyz367qo0cci5oe9rjt, RTE_CONST) Rte_XDIS_c6b2wcgb9hfwe2f3wnyp9dins;

# if defined XDIS_tw4ubk1gymx4hzts75kgt7om
#  error "Constant value <XDIS_tw4ubk1gymx4hzts75kgt7om> conflicts with an already defined symbol."
# else
#  define XDIS_tw4ubk1gymx4hzts75kgt7om (Rte_XDIS_tw4ubk1gymx4hzts75kgt7om)
# endif
extern CONST(REC_EVC_CfgBit_65_96_93cqdgh4hhn5xns1hoko7garz, RTE_CONST) Rte_XDIS_tw4ubk1gymx4hzts75kgt7om;

# if defined XDIS_82uu0172t46c4fwd9lq92f6k0
#  error "Constant value <XDIS_82uu0172t46c4fwd9lq92f6k0> conflicts with an already defined symbol."
# else
#  define XDIS_82uu0172t46c4fwd9lq92f6k0 (Rte_XDIS_82uu0172t46c4fwd9lq92f6k0)
# endif
extern CONST(REC_EVC_CfgList_01_0C_evn08d6126fkfaksv87161o1j, RTE_CONST) Rte_XDIS_82uu0172t46c4fwd9lq92f6k0;

# if defined XDIS_6498ks0xbhxmal4q7mpokfp7k
#  error "Constant value <XDIS_6498ks0xbhxmal4q7mpokfp7k> conflicts with an already defined symbol."
# else
#  define XDIS_6498ks0xbhxmal4q7mpokfp7k (Rte_XDIS_6498ks0xbhxmal4q7mpokfp7k)
# endif
extern CONST(REC_Eng_Rs3_dgfi1nrxtb0voy6rb7ybeonmv, RTE_CONST) Rte_XDIS_6498ks0xbhxmal4q7mpokfp7k;

# if defined XDIS_3j9zqvtlbz2umvu1staalku57
#  error "Constant value <XDIS_3j9zqvtlbz2umvu1staalku57> conflicts with an already defined symbol."
# else
#  define XDIS_3j9zqvtlbz2umvu1staalku57 (Rte_XDIS_3j9zqvtlbz2umvu1staalku57)
# endif
extern CONST(REC_Eng_Rs_EngCtrl_14lojwgkcazelrb438elf5h0j, RTE_CONST) Rte_XDIS_3j9zqvtlbz2umvu1staalku57;

# if defined XDIS_6q290bs6crc8rexk0tcm244yy
#  error "Constant value <XDIS_6q290bs6crc8rexk0tcm244yy> conflicts with an already defined symbol."
# else
#  define XDIS_6q290bs6crc8rexk0tcm244yy (Rte_XDIS_6q290bs6crc8rexk0tcm244yy)
# endif
extern CONST(REC_Eng_Rs_EngCtrl_1j00gxu3p5exa8awg915k1zy, RTE_CONST) Rte_XDIS_6q290bs6crc8rexk0tcm244yy;

# if defined XDIS_b7xeyfx6c6dw2rf8lhqmuxhke
#  error "Constant value <XDIS_b7xeyfx6c6dw2rf8lhqmuxhke> conflicts with an already defined symbol."
# else
#  define XDIS_b7xeyfx6c6dw2rf8lhqmuxhke (Rte_XDIS_b7xeyfx6c6dw2rf8lhqmuxhke)
# endif
extern CONST(REC_GPS_Pos_Stat_1wd2axd8vhko9tuswwmd68tp0, RTE_CONST) Rte_XDIS_b7xeyfx6c6dw2rf8lhqmuxhke;

# if defined XDIS_4bheulk21diuzk8gw6quo48k5
#  error "Constant value <XDIS_4bheulk21diuzk8gw6quo48k5> conflicts with an already defined symbol."
# else
#  define XDIS_4bheulk21diuzk8gw6quo48k5 (Rte_XDIS_4bheulk21diuzk8gw6quo48k5)
# endif
extern CONST(REC_HiBm_Stat_9t50popkpz30is106xpis1iyh, RTE_CONST) Rte_XDIS_4bheulk21diuzk8gw6quo48k5;

# if defined XDIS_a4vn2jc6cwbo7mwgd802mjn63
#  error "Constant value <XDIS_a4vn2jc6cwbo7mwgd802mjn63> conflicts with an already defined symbol."
# else
#  define XDIS_a4vn2jc6cwbo7mwgd802mjn63 (Rte_XDIS_a4vn2jc6cwbo7mwgd802mjn63)
# endif
extern CONST(REC_IHC_Lgt_Stat_HLI_2ahxpf4cam3pi2le1l2woky78, RTE_CONST) Rte_XDIS_a4vn2jc6cwbo7mwgd802mjn63;

# if defined XDIS_d8hxesk99j1jrhq02nvtvkmm
#  error "Constant value <XDIS_d8hxesk99j1jrhq02nvtvkmm> conflicts with an already defined symbol."
# else
#  define XDIS_d8hxesk99j1jrhq02nvtvkmm (Rte_XDIS_d8hxesk99j1jrhq02nvtvkmm)
# endif
extern CONST(REC_IHC_Lgt_Stat_MPC_515fv9hxb5jrzmunrr9r72aqj, RTE_CONST) Rte_XDIS_d8hxesk99j1jrhq02nvtvkmm;

# if defined XDIS_5ep7nzceith6ltly39itg1oi6
#  error "Constant value <XDIS_5ep7nzceith6ltly39itg1oi6> conflicts with an already defined symbol."
# else
#  define XDIS_5ep7nzceith6ltly39itg1oi6 (Rte_XDIS_5ep7nzceith6ltly39itg1oi6)
# endif
extern CONST(REC_IHC_Plus_HL_Stat_a2qglp2324znbwefnu92uartf, RTE_CONST) Rte_XDIS_5ep7nzceith6ltly39itg1oi6;

# if defined XDIS_6q5x3bd0t24ntr8ke3c0xp0rq
#  error "Constant value <XDIS_6q5x3bd0t24ntr8ke3c0xp0rq> conflicts with an already defined symbol."
# else
#  define XDIS_6q5x3bd0t24ntr8ke3c0xp0rq (Rte_XDIS_6q5x3bd0t24ntr8ke3c0xp0rq)
# endif
extern CONST(REC_Ign_Stat_5wz7lvfuvag9tw5a51baqfzdd, RTE_CONST) Rte_XDIS_6q5x3bd0t24ntr8ke3c0xp0rq;

# if defined XDIS_bqxg3q8pbqe4cpvth35za34bd
#  error "Constant value <XDIS_bqxg3q8pbqe4cpvth35za34bd> conflicts with an already defined symbol."
# else
#  define XDIS_bqxg3q8pbqe4cpvth35za34bd (Rte_XDIS_bqxg3q8pbqe4cpvth35za34bd)
# endif
extern CONST(REC_Ign_Stat_b0ko81o0x5jgvwtduf99gvzi0, RTE_CONST) Rte_XDIS_bqxg3q8pbqe4cpvth35za34bd;

# if defined XDIS_9m09ra7ozqj24qxnjph6s4iq5
#  error "Constant value <XDIS_9m09ra7ozqj24qxnjph6s4iq5> conflicts with an already defined symbol."
# else
#  define XDIS_9m09ra7ozqj24qxnjph6s4iq5 (Rte_XDIS_9m09ra7ozqj24qxnjph6s4iq5)
# endif
extern CONST(REC_Impact_aa136in54vwmtfkfrrvvjwue, RTE_CONST) Rte_XDIS_9m09ra7ozqj24qxnjph6s4iq5;

# if defined XDIS_7o2wgf27smf8v2jqnvc2hdnl0
#  error "Constant value <XDIS_7o2wgf27smf8v2jqnvc2hdnl0> conflicts with an already defined symbol."
# else
#  define XDIS_7o2wgf27smf8v2jqnvc2hdnl0 (Rte_XDIS_7o2wgf27smf8v2jqnvc2hdnl0)
# endif
extern CONST(REC_LDC_Disp_Rq_ESP_1j00gxu3p5exa8awg915k1zy, RTE_CONST) Rte_XDIS_7o2wgf27smf8v2jqnvc2hdnl0;

# if defined XDIS_aycev4vktx3tia0nlx6kr89ag
#  error "Constant value <XDIS_aycev4vktx3tia0nlx6kr89ag> conflicts with an already defined symbol."
# else
#  define XDIS_aycev4vktx3tia0nlx6kr89ag (Rte_XDIS_aycev4vktx3tia0nlx6kr89ag)
# endif
extern CONST(REC_LDC_Disp_Rq_RDU_1j00gxu3p5exa8awg915k1zy, RTE_CONST) Rte_XDIS_aycev4vktx3tia0nlx6kr89ag;

# if defined XDIS_81eg2dzuwup0ien3bha0k4rmj
#  error "Constant value <XDIS_81eg2dzuwup0ien3bha0k4rmj> conflicts with an already defined symbol."
# else
#  define XDIS_81eg2dzuwup0ien3bha0k4rmj (Rte_XDIS_81eg2dzuwup0ien3bha0k4rmj)
# endif
extern CONST(REC_LDC_Rq_SCCM_5ella88r9jsc72fnnq5iugtsl, RTE_CONST) Rte_XDIS_81eg2dzuwup0ien3bha0k4rmj;

# if defined XDIS_4apks56u7rpjlon3h16derrov
#  error "Constant value <XDIS_4apks56u7rpjlon3h16derrov> conflicts with an already defined symbol."
# else
#  define XDIS_4apks56u7rpjlon3h16derrov (Rte_XDIS_4apks56u7rpjlon3h16derrov)
# endif
extern CONST(REC_LDP_Warn_Rq, RTE_CONST) Rte_XDIS_4apks56u7rpjlon3h16derrov;

# if defined XDIS_byvo3ajjwadipydfw6gh0y50l
#  error "Constant value <XDIS_byvo3ajjwadipydfw6gh0y50l> conflicts with an already defined symbol."
# else
#  define XDIS_byvo3ajjwadipydfw6gh0y50l (Rte_XDIS_byvo3ajjwadipydfw6gh0y50l)
# endif
extern CONST(REC_LDP_Warn_Rq, RTE_CONST) Rte_XDIS_byvo3ajjwadipydfw6gh0y50l;

# if defined XDIS_e295ekfxtuzl1jzpdr5bu5q25
#  error "Constant value <XDIS_e295ekfxtuzl1jzpdr5bu5q25> conflicts with an already defined symbol."
# else
#  define XDIS_e295ekfxtuzl1jzpdr5bu5q25 (Rte_XDIS_e295ekfxtuzl1jzpdr5bu5q25)
# endif
extern CONST(REC_LDP_Warn_Rq_2is6fi0meeac78nkn35zc5ui3, RTE_CONST) Rte_XDIS_e295ekfxtuzl1jzpdr5bu5q25;

# if defined XDIS_2gjyxvkyiuoiu26t8iciym780
#  error "Constant value <XDIS_2gjyxvkyiuoiu26t8iciym780> conflicts with an already defined symbol."
# else
#  define XDIS_2gjyxvkyiuoiu26t8iciym780 (Rte_XDIS_2gjyxvkyiuoiu26t8iciym780)
# endif
extern CONST(REC_LgtSens_Stat_9in9byg63c2fufil0n24ot5bf, RTE_CONST) Rte_XDIS_2gjyxvkyiuoiu26t8iciym780;

# if defined XDIS_e0ae455d99wmtrvt19uf8yilb
#  error "Constant value <XDIS_e0ae455d99wmtrvt19uf8yilb> conflicts with an already defined symbol."
# else
#  define XDIS_e0ae455d99wmtrvt19uf8yilb (Rte_XDIS_e0ae455d99wmtrvt19uf8yilb)
# endif
extern CONST(REC_MirrAdj_XX_Rq_MPM, RTE_CONST) Rte_XDIS_e0ae455d99wmtrvt19uf8yilb;

# if defined XDIS_fq1ssiofu4778y58q151qzd9
#  error "Constant value <XDIS_fq1ssiofu4778y58q151qzd9> conflicts with an already defined symbol."
# else
#  define XDIS_fq1ssiofu4778y58q151qzd9 (Rte_XDIS_fq1ssiofu4778y58q151qzd9)
# endif
extern CONST(REC_MirrAdj_XX_Rq_MPM, RTE_CONST) Rte_XDIS_fq1ssiofu4778y58q151qzd9;

# if defined XDIS_32q60l5bk2bsf0c40s0q215bx
#  error "Constant value <XDIS_32q60l5bk2bsf0c40s0q215bx> conflicts with an already defined symbol."
# else
#  define XDIS_32q60l5bk2bsf0c40s0q215bx (Rte_XDIS_32q60l5bk2bsf0c40s0q215bx)
# endif
extern CONST(REC_MirrAdj_XX_Rq_dv7hr5qpr6sv4leh8gdnnmvy2, RTE_CONST) Rte_XDIS_32q60l5bk2bsf0c40s0q215bx;

# if defined XDIS_3y4i0t87dao84amu80p4cd9k6
#  error "Constant value <XDIS_3y4i0t87dao84amu80p4cd9k6> conflicts with an already defined symbol."
# else
#  define XDIS_3y4i0t87dao84amu80p4cd9k6 (Rte_XDIS_3y4i0t87dao84amu80p4cd9k6)
# endif
extern CONST(REC_MirrAdj_XX_Rq_dv7hr5qpr6sv4leh8gdnnmvy2, RTE_CONST) Rte_XDIS_3y4i0t87dao84amu80p4cd9k6;

# if defined XDIS_8p9h7edtk03hh2tqh24gm0urh
#  error "Constant value <XDIS_8p9h7edtk03hh2tqh24gm0urh> conflicts with an already defined symbol."
# else
#  define XDIS_8p9h7edtk03hh2tqh24gm0urh (Rte_XDIS_8p9h7edtk03hh2tqh24gm0urh)
# endif
extern CONST(REC_MirrAdj_XX_Rq_dv7hr5qpr6sv4leh8gdnnmvy2, RTE_CONST) Rte_XDIS_8p9h7edtk03hh2tqh24gm0urh;

# if defined XDIS_ajfnxfs14s2r9e8he9ijftatu
#  error "Constant value <XDIS_ajfnxfs14s2r9e8he9ijftatu> conflicts with an already defined symbol."
# else
#  define XDIS_ajfnxfs14s2r9e8he9ijftatu (Rte_XDIS_ajfnxfs14s2r9e8he9ijftatu)
# endif
extern CONST(REC_MirrAdj_XX_Rq_dv7hr5qpr6sv4leh8gdnnmvy2, RTE_CONST) Rte_XDIS_ajfnxfs14s2r9e8he9ijftatu;

# if defined XDIS_1fl57l4js894fcqwconaj7hrv
#  error "Constant value <XDIS_1fl57l4js894fcqwconaj7hrv> conflicts with an already defined symbol."
# else
#  define XDIS_1fl57l4js894fcqwconaj7hrv (Rte_XDIS_1fl57l4js894fcqwconaj7hrv)
# endif
extern CONST(REC_NVP_Stat1_18cj3r9lb95cc7w4q3mwqkn86, RTE_CONST) Rte_XDIS_1fl57l4js894fcqwconaj7hrv;

# if defined XDIS_bwhw614mwphi92j5wrym9lhbp
#  error "Constant value <XDIS_bwhw614mwphi92j5wrym9lhbp> conflicts with an already defined symbol."
# else
#  define XDIS_bwhw614mwphi92j5wrym9lhbp (Rte_XDIS_bwhw614mwphi92j5wrym9lhbp)
# endif
extern CONST(REC_PN14_SupBat_Stat_2is6fi0meeac78nkn35zc5ui3, RTE_CONST) Rte_XDIS_bwhw614mwphi92j5wrym9lhbp;

# if defined XDIS_3zj31c9tjkuqv87hslnvfgvdq
#  error "Constant value <XDIS_3zj31c9tjkuqv87hslnvfgvdq> conflicts with an already defined symbol."
# else
#  define XDIS_3zj31c9tjkuqv87hslnvfgvdq (Rte_XDIS_3zj31c9tjkuqv87hslnvfgvdq)
# endif
extern CONST(REC_PN14_SupBat_Stat_icptf500osz37cvz00rql74g, RTE_CONST) Rte_XDIS_3zj31c9tjkuqv87hslnvfgvdq;

# if defined XDIS_px34blxw6vdvct4dduppd7zh
#  error "Constant value <XDIS_px34blxw6vdvct4dduppd7zh> conflicts with an already defined symbol."
# else
#  define XDIS_px34blxw6vdvct4dduppd7zh (Rte_XDIS_px34blxw6vdvct4dduppd7zh)
# endif
extern CONST(REC_Preview_Header1_a2qglp2324znbwefnu92uartf, RTE_CONST) Rte_XDIS_px34blxw6vdvct4dduppd7zh;

# if defined XDIS_3hza6qu2nzh155sr8lpjnsax1
#  error "Constant value <XDIS_3hza6qu2nzh155sr8lpjnsax1> conflicts with an already defined symbol."
# else
#  define XDIS_3hza6qu2nzh155sr8lpjnsax1 (Rte_XDIS_3hza6qu2nzh155sr8lpjnsax1)
# endif
extern CONST(REC_Preview_Header2_1ae8w4ccn5pv3jukyqv8emy5n, RTE_CONST) Rte_XDIS_3hza6qu2nzh155sr8lpjnsax1;

# if defined XDIS_70o5wl8t44ws1f84aev0ywg7q
#  error "Constant value <XDIS_70o5wl8t44ws1f84aev0ywg7q> conflicts with an already defined symbol."
# else
#  define XDIS_70o5wl8t44ws1f84aev0ywg7q (Rte_XDIS_70o5wl8t44ws1f84aev0ywg7q)
# endif
extern CONST(REC_Preview_ProfData1, RTE_CONST) Rte_XDIS_70o5wl8t44ws1f84aev0ywg7q;

# if defined XDIS_3d5089ci18xd9uciiecqbwjok
#  error "Constant value <XDIS_3d5089ci18xd9uciiecqbwjok> conflicts with an already defined symbol."
# else
#  define XDIS_3d5089ci18xd9uciiecqbwjok (Rte_XDIS_3d5089ci18xd9uciiecqbwjok)
# endif
extern CONST(REC_Preview_ProfData2, RTE_CONST) Rte_XDIS_3d5089ci18xd9uciiecqbwjok;

# if defined XDIS_9fgq727h4ygor98bl0w7z3lde
#  error "Constant value <XDIS_9fgq727h4ygor98bl0w7z3lde> conflicts with an already defined symbol."
# else
#  define XDIS_9fgq727h4ygor98bl0w7z3lde (Rte_XDIS_9fgq727h4ygor98bl0w7z3lde)
# endif
extern CONST(REC_Preview_VehAccel, RTE_CONST) Rte_XDIS_9fgq727h4ygor98bl0w7z3lde;

# if defined XDIS_8jmlifaxb2weyn91fhps0za73
#  error "Constant value <XDIS_8jmlifaxb2weyn91fhps0za73> conflicts with an already defined symbol."
# else
#  define XDIS_8jmlifaxb2weyn91fhps0za73 (Rte_XDIS_8jmlifaxb2weyn91fhps0za73)
# endif
extern CONST(REC_RDU_GlobalAttr_cp6wyrd9cg7ec7y2w3khz1gyt, RTE_CONST) Rte_XDIS_8jmlifaxb2weyn91fhps0za73;

# if defined XDIS_4f8w4ynrnxyvbnnxeqm0a8biz
#  error "Constant value <XDIS_4f8w4ynrnxyvbnnxeqm0a8biz> conflicts with an already defined symbol."
# else
#  define XDIS_4f8w4ynrnxyvbnnxeqm0a8biz (Rte_XDIS_4f8w4ynrnxyvbnnxeqm0a8biz)
# endif
extern CONST(REC_RDU_Gnrl_Stat_dgfi1nrxtb0voy6rb7ybeonmv, RTE_CONST) Rte_XDIS_4f8w4ynrnxyvbnnxeqm0a8biz;

# if defined XDIS_1fcypch5fbp2ltn1etyzeb7gf
#  error "Constant value <XDIS_1fcypch5fbp2ltn1etyzeb7gf> conflicts with an already defined symbol."
# else
#  define XDIS_1fcypch5fbp2ltn1etyzeb7gf (Rte_XDIS_1fcypch5fbp2ltn1etyzeb7gf)
# endif
extern CONST(REC_SCCM_Lvr_Stat_6v3sj55wsjghho72slblc9pby, RTE_CONST) Rte_XDIS_1fcypch5fbp2ltn1etyzeb7gf;

# if defined XDIS_89hs19maamgyxa5keu18etuqe
#  error "Constant value <XDIS_89hs19maamgyxa5keu18etuqe> conflicts with an already defined symbol."
# else
#  define XDIS_89hs19maamgyxa5keu18etuqe (Rte_XDIS_89hs19maamgyxa5keu18etuqe)
# endif
extern CONST(REC_SLA_SpdOffset_Rq_D, RTE_CONST) Rte_XDIS_89hs19maamgyxa5keu18etuqe;

# if defined XDIS_9c3cmcq23c1igvvm3w4p0icyl
#  error "Constant value <XDIS_9c3cmcq23c1igvvm3w4p0icyl> conflicts with an already defined symbol."
# else
#  define XDIS_9c3cmcq23c1igvvm3w4p0icyl (Rte_XDIS_9c3cmcq23c1igvvm3w4p0icyl)
# endif
extern CONST(REC_SPL_Obj1_Obj2_MPC_evn08d6126fkfaksv87161o1j, RTE_CONST) Rte_XDIS_9c3cmcq23c1igvvm3w4p0icyl;

# if defined XDIS_57kwz8igdzzu02otkg9y8gykg
#  error "Constant value <XDIS_57kwz8igdzzu02otkg9y8gykg> conflicts with an already defined symbol."
# else
#  define XDIS_57kwz8igdzzu02otkg9y8gykg (Rte_XDIS_57kwz8igdzzu02otkg9y8gykg)
# endif
extern CONST(REC_SPL_Obj1_Obj2_NV_evn08d6126fkfaksv87161o1j, RTE_CONST) Rte_XDIS_57kwz8igdzzu02otkg9y8gykg;

# if defined XDIS_b8r2pvbmlb5s6n82eskr4p4dj
#  error "Constant value <XDIS_b8r2pvbmlb5s6n82eskr4p4dj> conflicts with an already defined symbol."
# else
#  define XDIS_b8r2pvbmlb5s6n82eskr4p4dj (Rte_XDIS_b8r2pvbmlb5s6n82eskr4p4dj)
# endif
extern CONST(REC_STA_Rs1_b8u1rtjk1lcjd0w2lyxoy9rn2, RTE_CONST) Rte_XDIS_b8r2pvbmlb5s6n82eskr4p4dj;

# if defined XDIS_7krsecg3wmeufcyqgylks6qra
#  error "Constant value <XDIS_7krsecg3wmeufcyqgylks6qra> conflicts with an already defined symbol."
# else
#  define XDIS_7krsecg3wmeufcyqgylks6qra (Rte_XDIS_7krsecg3wmeufcyqgylks6qra)
# endif
extern CONST(REC_StWhl_Angl_Stat_1lbtoaaebi5n2qvdq20f1phhd, RTE_CONST) Rte_XDIS_7krsecg3wmeufcyqgylks6qra;

# if defined XDIS_6w0c10e3374jliy0c9hmcy7tn
#  error "Constant value <XDIS_6w0c10e3374jliy0c9hmcy7tn> conflicts with an already defined symbol."
# else
#  define XDIS_6w0c10e3374jliy0c9hmcy7tn (Rte_XDIS_6w0c10e3374jliy0c9hmcy7tn)
# endif
extern CONST(REC_TCM_Data2_b8u1rtjk1lcjd0w2lyxoy9rn2, RTE_CONST) Rte_XDIS_6w0c10e3374jliy0c9hmcy7tn;

# if defined XDIS_b7ohnebn25zn1sxeyo0dzf4hz
#  error "Constant value <XDIS_b7ohnebn25zn1sxeyo0dzf4hz> conflicts with an already defined symbol."
# else
#  define XDIS_b7ohnebn25zn1sxeyo0dzf4hz (Rte_XDIS_b7ohnebn25zn1sxeyo0dzf4hz)
# endif
extern CONST(REC_VIN, RTE_CONST) Rte_XDIS_b7ohnebn25zn1sxeyo0dzf4hz;

# if defined XDIS_87o3gju2irpjizbngijm3wp3t
#  error "Constant value <XDIS_87o3gju2irpjizbngijm3wp3t> conflicts with an already defined symbol."
# else
#  define XDIS_87o3gju2irpjizbngijm3wp3t (Rte_XDIS_87o3gju2irpjizbngijm3wp3t)
# endif
extern CONST(REC_VehDyn_EPKB_Stat_1ae8w4ccn5pv3jukyqv8emy5n, RTE_CONST) Rte_XDIS_87o3gju2irpjizbngijm3wp3t;

# if defined XDIS_8tmocfwevk0mx9f0c68dcq4ga
#  error "Constant value <XDIS_8tmocfwevk0mx9f0c68dcq4ga> conflicts with an already defined symbol."
# else
#  define XDIS_8tmocfwevk0mx9f0c68dcq4ga (Rte_XDIS_8tmocfwevk0mx9f0c68dcq4ga)
# endif
extern CONST(REC_VehDyn_SPCR_Stat_5wz7lvfuvag9tw5a51baqfzdd, RTE_CONST) Rte_XDIS_8tmocfwevk0mx9f0c68dcq4ga;

# if defined XDIS_1f9zo4951g5aj2am8i9wmlsf8
#  error "Constant value <XDIS_1f9zo4951g5aj2am8i9wmlsf8> conflicts with an already defined symbol."
# else
#  define XDIS_1f9zo4951g5aj2am8i9wmlsf8 (Rte_XDIS_1f9zo4951g5aj2am8i9wmlsf8)
# endif
extern CONST(REC_VehLvl_Stat, RTE_CONST) Rte_XDIS_1f9zo4951g5aj2am8i9wmlsf8;

# if defined XDIS_1tyo1qvoauzends8rhtzylohv
#  error "Constant value <XDIS_1tyo1qvoauzends8rhtzylohv> conflicts with an already defined symbol."
# else
#  define XDIS_1tyo1qvoauzends8rhtzylohv (Rte_XDIS_1tyo1qvoauzends8rhtzylohv)
# endif
extern CONST(REC_Whl_Lt_Stat, RTE_CONST) Rte_XDIS_1tyo1qvoauzends8rhtzylohv;

# if defined XDIS_4lopjhsp0ouh3pqt0uyfwxiun
#  error "Constant value <XDIS_4lopjhsp0ouh3pqt0uyfwxiun> conflicts with an already defined symbol."
# else
#  define XDIS_4lopjhsp0ouh3pqt0uyfwxiun (Rte_XDIS_4lopjhsp0ouh3pqt0uyfwxiun)
# endif
extern CONST(REC_Whl_Rt_Stat_b8u1rtjk1lcjd0w2lyxoy9rn2, RTE_CONST) Rte_XDIS_4lopjhsp0ouh3pqt0uyfwxiun;

# if defined XDIS_8nsjvjel6ubfogec1zfo1f0f6
#  error "Constant value <XDIS_8nsjvjel6ubfogec1zfo1f0f6> conflicts with an already defined symbol."
# else
#  define XDIS_8nsjvjel6ubfogec1zfo1f0f6 (Rte_XDIS_8nsjvjel6ubfogec1zfo1f0f6)
# endif
extern CONST(REC_WprWashSw_Stat_9t6sxiiysej7o2144of8lwc05, RTE_CONST) Rte_XDIS_8nsjvjel6ubfogec1zfo1f0f6;

# if defined SWCDEMSC_GRPINIT_EngRsEngCtrl
#  error "Constant value <SWCDEMSC_GRPINIT_EngRsEngCtrl> conflicts with an already defined symbol."
# else
#  define SWCDEMSC_GRPINIT_EngRsEngCtrl (Rte_SWCDEMSC_GRPINIT_EngRsEngCtrl)
# endif
extern CONST(SwcDemSc_EngRsEngCtrl_GrpType, RTE_CONST) Rte_SWCDEMSC_GRPINIT_EngRsEngCtrl;

# if defined SWCDEMSC_GRPINIT_IgnStat
#  error "Constant value <SWCDEMSC_GRPINIT_IgnStat> conflicts with an already defined symbol."
# else
#  define SWCDEMSC_GRPINIT_IgnStat (Rte_SWCDEMSC_GRPINIT_IgnStat)
# endif
extern CONST(SwcDemSc_IgnStat_GrpType, RTE_CONST) Rte_SWCDEMSC_GRPINIT_IgnStat;

# if defined SWCDEMSC_GRPINIT_PN14SupBatStat
#  error "Constant value <SWCDEMSC_GRPINIT_PN14SupBatStat> conflicts with an already defined symbol."
# else
#  define SWCDEMSC_GRPINIT_PN14SupBatStat (Rte_SWCDEMSC_GRPINIT_PN14SupBatStat)
# endif
extern CONST(SwcDemSc_PN14SupBatStat_GrpType, RTE_CONST) Rte_SWCDEMSC_GRPINIT_PN14SupBatStat;

# if defined SwcRoElite_Msg_Init
#  error "Constant value <SwcRoElite_Msg_Init> conflicts with an already defined symbol."
# else
#  define SwcRoElite_Msg_Init (Rte_SwcRoElite_Msg_Init)
# endif
extern CONST(SwcRoElite_MsgType, RTE_CONST) Rte_SwcRoElite_Msg_Init;

# define RTE_STOP_SEC_CONST_UNSPECIFIED
# include "MemMap.h"

# ifdef RTE_MICROSAR_PIM_EXPORT


/**********************************************************************************************************************
 * Rte_Pim (Per-Instance Memory)
 *********************************************************************************************************************/

#  define RTE_START_SEC_VAR_DEFAULT_RTE_PIM_GROUP_UNSPECIFIED
#  include "MemMap.h"

extern VAR(SwcRoElite_QueueType, RTE_VAR_DEFAULT_RTE_PIM_GROUP) Rte_RoElite_SwcRoElite_Queue;
extern VAR(SwcRoElite_MsgType, RTE_VAR_DEFAULT_RTE_PIM_GROUP) Rte_RoElite_SwcRoElite_DiagData;

#  define RTE_STOP_SEC_VAR_DEFAULT_RTE_PIM_GROUP_UNSPECIFIED
#  include "MemMap.h"


# endif


/**********************************************************************************************************************
 * Buffer definitions for implicit access to S/R port elements
 *********************************************************************************************************************/

# define RTE_START_SEC_VAR_NOINIT_UNSPECIFIED
# include "MemMap.h"

# define RTE_STOP_SEC_VAR_NOINIT_UNSPECIFIED
# include "MemMap.h"

/* begin Fileversion check */
# ifndef SKIP_MAGIC_NUMBER
#  ifdef RTE_MAGIC_NUMBER
#   if RTE_MAGIC_NUMBER != 1310030428
#    error "The magic number of the generated file <D:/Sandboxes/MFC300/MFC300_Base/05_Software/MCU/03_Design/05_DaVinci/MPC/Rte/Rte_Type.h> is different. Please check time and date of the generated RTE files!"
#   endif
#  else
#   define RTE_MAGIC_NUMBER 1310030428
#  endif  /* RTE_MAGIC_NUMBER */
# endif  /* SKIP_MAGIC_NUMBER */
/* end Fileversion check */

#endif /* _RTE_TYPE_H */
