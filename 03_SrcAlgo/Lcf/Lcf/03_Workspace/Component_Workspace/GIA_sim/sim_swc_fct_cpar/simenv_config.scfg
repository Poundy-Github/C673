# Note:
# 1. Replace xxx with component name in lowercase.
# 2. Fill {variant}_ccflags with required compiler flags.
#    The value in this template is only for example.
# 3. Fill {variant}_cppdefines with required preprocessor defines.
#    The value in this template is only for example.
#    Each preprocessor define must be written as string and separated with ,
# 4. Fill {variant}_linkflags with required linker flags.
#    The value in this template is only for example.
# 5. Fill {variant}_libpaths with required library include paths.
#    The value in this template is only for example.
# 6. Fill {variant}_libs with required libraries in library include paths.
#    The value in this template is only for example.
# 7. When additional variant is created, add it in the variant_list. Otherwise, the
#    variant will not be created.
# ----------------------------------------------------------------------------------------

#-----------------------
# variant configuration
#-----------------------

Import("project_name")

if (project_name == 'MFC431') | (project_name == 'MFC431HI28') | (project_name == 'MFC431TA19') | (project_name == 'MFC431LO19') | (project_name == 'MFC431LO20') | (project_name == 'MFC431SC19') | (project_name == 'MFC431SW19') | (project_name == 'MFC431VA10') | (project_name == 'MFC431BD10') | (project_name == 'MFC510') | (project_name == 'MFC520') | (project_name == 'MFC431VA21'):
  # create release variant
  release_variant = "release"
  release_ccflags = "/EHsc /nologo /c /Wp64 /Zi /errorReport:prompt /O2 /FD /MD /fp:except /W3"

  if (project_name == 'MFC431') | (project_name == 'MFC431HI28') | (project_name == 'MFC431TA19') | (project_name == 'MFC431LO19') | (project_name == 'MFC431LO20') | (project_name == 'MFC431SC19') | (project_name == 'MFC431SW19') | (project_name == 'MFC431VA10') | (project_name == 'MFC431BD10') | (project_name == 'MFC431VA21'):
    release_cppdefines = ["NDEBUG" , "WIN32" , "_WINDOWS" , "_USRDLL" , "_CRT_SECURE_NO_WARNINGS" , "_CRT_SECURE_NO_DEPRECATE" , "SRR_SWITCH=0" , "NEW_TRACES=0" , "SIMPLG_EXPORTS" , "CFG_PROJECT=Release" , "FCT_SIMU=1" , "ARS3xx_SIMU=1" , "_WINDLL" , "_MBCS", "FCT_SIMU_USE_SEN_ONLY"]

  elif (project_name == 'MFC510') | (project_name == 'MFC520') | (project_name == 'MFC525') | (project_name == 'MFC525CM10'):
    release_cppdefines = ["NDEBUG" , "WIN32" , "_WINDOWS" , "_USRDLL" , "_CRT_SECURE_NO_WARNINGS" , "_CRT_SECURE_NO_DEPRECATE" , "SRR_SWITCH=0" , "NEW_TRACES=0" , "SIMPLG_EXPORTS" , "CFG_PROJECT=Release" , "FCT_SIMU=1" , "ARS3xx_SIMU=1" , "_WINDLL" , "_MBCS", "FCT_SIMU_USE_SEN_ONLY", "TS_ARCH_FAMILY=", "TS_ARCH_DERIVATE="]
	
  else:
    release_cppdefines = ["NDEBUG" , "WIN32" , "_WINDOWS" , "_USRDLL" , "_CRT_SECURE_NO_WARNINGS" , "_CRT_SECURE_NO_DEPRECATE" , "SRR_SWITCH=0" , "NEW_TRACES=0" , "SIMPLG_EXPORTS" , "CFG_PROJECT=Release" , "FCT_SIMU=1" , "ARS3xx_SIMU=1" , "_WINDLL" , "_MBCS", "FCT_SIMU_USE_SEN_ONLY", "CPU_MPC5775N_EMU=1"]

  release_linkflags = "/INCREMENTAL:NO /NOLOGO /DLL /MANIFEST /DEBUG /MACHINE:X86 /ERRORREPORT:PROMPT"
  release_libpaths = ["#../../../04_Build/algo/" + algo_name + "/pc/release/"]
  release_libs = []#[algo_name + "_algo_pc_release.lib"]

  # create debug variant
  debug_variant = "debug"
  debug_ccflags =  "/EHsc /nologo /c /Wp64 /Zi /errorReport:prompt /Od /Gm /RTC1 /MDd /fp:except /W3 /wd4214 /wd4068 /wd4510 /wd4610 /wd4127"

  if (project_name == 'MFC431') | (project_name == 'MFC431HI28') | (project_name == 'MFC431TA19') | (project_name == 'MFC431LO19') | (project_name == 'MFC431LO20') | (project_name == 'MFC431SC19') | (project_name == 'MFC431SW19') | (project_name == 'MFC431VA10') | (project_name == 'MFC431BD10') | (project_name == 'MFC431VA21'):
    debug_cppdefines = ["_DEBUG" ,  "WIN32" ,  "_WINDOWS" ,  "_USRDLL" ,  "_CRT_SECURE_NO_WARNINGS" ,  "_CRT_SECURE_NO_DEPRECATE" ,  "SRR_SWITCH=0" ,  "NEW_TRACES=0" ,  "SIMPLG_EXPORTS" ,  "CFG_PROJECT=Debug" ,  "FCT_SIMU=1" ,  "ARS3xx_SIMU=1" ,  "_WINDLL" ,  "_MBCS", "FCT_SIMU_USE_SEN_ONLY"]
	
  elif (project_name == 'MFC510') | (project_name == 'MFC520'):
    debug_cppdefines = ["_DEBUG" ,  "WIN32" ,  "_WINDOWS" ,  "_USRDLL" ,  "_CRT_SECURE_NO_WARNINGS" ,  "_CRT_SECURE_NO_DEPRECATE" ,  "SRR_SWITCH=0" ,  "NEW_TRACES=0" ,  "SIMPLG_EXPORTS" ,  "CFG_PROJECT=Debug" ,  "FCT_SIMU=1" ,  "ARS3xx_SIMU=1" ,  "_WINDLL" ,  "_MBCS", "FCT_SIMU_USE_SEN_ONLY", "TS_ARCH_FAMILY=", "TS_ARCH_DERIVATE="]
	
  else:
    debug_cppdefines = ["_DEBUG" ,  "WIN32" ,  "_WINDOWS" ,  "_USRDLL" ,  "_CRT_SECURE_NO_WARNINGS" ,  "_CRT_SECURE_NO_DEPRECATE" ,  "SRR_SWITCH=0" ,  "NEW_TRACES=0" ,  "SIMPLG_EXPORTS" ,  "CFG_PROJECT=Debug" ,  "FCT_SIMU=1" ,  "ARS3xx_SIMU=1" ,  "_WINDLL" ,  "_MBCS", "FCT_SIMU_USE_SEN_ONLY", "CPU_MPC5775N_EMU=1"]

  debug_linkflags = "/INCREMENTAL:NO /NOLOGO /DLL /MANIFEST /DEBUG /MACHINE:X86"
  debug_libpaths = ["#../../../04_Build/algo/" + algo_name + "/pc/debug/"]
  debug_libs = []#[algo_name + "_algo_pc_debug.lib"]


  # variable containing compiler flags, defines and linker flags for all variants
  # when creating additional variant beside "release" and "debug", the variant must be added in this variable
  variant_list = [
  [release_variant, release_ccflags, release_cppdefines, release_linkflags, release_libpaths, release_libs],
  [debug_variant,   debug_ccflags,   debug_cppdefines,   debug_linkflags, debug_libpaths, debug_libs],
  ]

  #-----------------------
  # naming configuration
  #-----------------------

  # target name used by scons for building the target. The complete name will be "{component_name/algo_name}_{scons_target_name}", for example "sib_sim_swc"
  scons_target_name = "sim_swc_fct_cpar"

  # name of the generated visual C++ project
  vc_project_name = "sim_swc_fct_cpar"

  # folder name containing this scfg file and the visual C++ project. Usually the folder name is the same as the visual C++ project name.
  # example : 03_Workspace\algo\xxx_sim\sim_swc_xxx_cpar
  folder_name = "sim_swc_fct_cpar"

  # folder name containing build results (normally, build_folder_name = folder_name when there is only one algo in a component)
  # example : 04_Build\algo\xxx_sim\sim_swc_xxx_cpar
  build_folder_name = "sim_swc_fct_cpar"

  # name of the DLL. Usually the DLL name is the same as the visual C++ project name.
  # The complete name will be "{target_dll_name}.dll", for example "sim_swc_cb.dll"
  target_dll_name = "sim_swc_fct_cpar"

  # component name used in the xxx_sim folder name, for flexibility.
  # The complete folder name will be "{component_name_for_sim_folder}_sim"
  # example : 03_Workspace\algo\xxx_sim
  component_name_for_sim_folder = algo_name

  # when there is more than one algo in a component, the algo name is used in the build folder to separate the build results
  # The complete folder name will be "{algo_name_for_build_folder}_sim"
  # example : 04_Build\algo\xxx_sim
  algo_name_for_build_folder = algo_name

  #-----------------------
  # doxygen configuration
  #-----------------------

  # determine if doxygen is built (default: True)
  generate_doxygen = False
  #-----------------------
  # sim algo library configuration
  #-----------------------

  # determine if algo library is built (default: False)
  generate_algo_lib = False

  # determine if release algo library is copied to Deliverables folder (default: False)
  copy_algo_lib_to_deliverables = False

else:
  # create release variant
  release_variant = "release"
  release_ccflags = ""
  release_cppdefines = []
  release_linkflags = ""
  release_libpaths = []#["#../../../04_Build/algo/" + algo_name + "/pc/release/"]
  release_libs = []
  debug_variant = "debug"
  debug_ccflags = ""
  debug_cppdefines = []
  debug_linkflags = ""
  debug_libpaths = []#["#../../../04_Build/algo/" + algo_name + "/pc/debug/"]
  debug_libs = []#["gia_algo_pc_debug.lib"]
  variant_list = []
  scons_target_name =" "
  vc_project_name = ""
  folder_name = ""
  build_folder_name = ""
  target_dll_name = ""
  component_name_for_sim_folder = algo_name
  algo_name_for_build_folder = algo_name
  generate_doxygen = False
  doxy_file_name = "sim_swc_doxy_setup.txt"
  scons_doxygen_target_name = "doxy"
  generate_algo_lib = False
  copy_algo_lib_to_deliverables = False
  special_copy_operation = False
  special_copy_dict = []