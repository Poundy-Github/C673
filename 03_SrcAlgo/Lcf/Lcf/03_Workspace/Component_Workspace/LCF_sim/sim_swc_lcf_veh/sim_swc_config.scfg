# Note:
# 1. Replace xxx with component name in lowercase.
# 2. When needed, additional file list can be added (the path should be relative to the
#    folder containing SConstruct).
# 3. Include all required source files in sim_swc_src.
# 4. Include all required include paths in sim_swc_cpp_path.
# 5. Put path to the header file containing algo version in algo_version_file.
# 6. Add library paths which are used for all variants in external_lib_paths.
# 7. Add libraries which are used for all variants in external_lib.
# 8. When generate_sdl is True, fill pdo_src_list with list of C source files and fill 
#    PDO_TOOL_OPTIONS_SIM with PDO option.
# ----------------------------------------------------------------------------------------

# read file list containing source files and include paths
execfile(File("#../lcf_sim/sim_swc_lcf_veh/sim_swc_lcf_file_list.scfg").abspath)
execfile(File("#algo_lib_file_list.scfg").abspath)
execfile(File("#../../../02_Development_Tools/scons_tools/scons_common_config/externals_include_file_list.scfg").abspath)
execfile(File("#../../../01_Source_Code/externals/sim_extensions/sim_extension_file_list.scfg").abspath)

#-------------------------
# source
#-------------------------

# source files to build sim_swc
sim_swc_src = (Split(lcf_sim_swc_source_files) + 
               Split(sim_extension_source_files) + 
               Split(sim_extension_algo_service_source_files))

# include paths to build sim_swc
sim_swc_cpp_path = (Split(lcf_sim_swc_include_paths) + 
                    Split(externals_include_paths) + 
                    Split(lcf_algo_include_paths) + 
                    Split(lcf_algo_common_include_paths))

# header file containing algo version
algo_version_file = ("#../../../01_Source_Code/LCF/lcf_ver.h")

#-------------------------
# library
#-------------------------

# external library paths
external_lib_paths = ["#../../../../05_Testing/06_Test_Tools/mts/lib/", 
                      "#../../../01_Source_Code/externals/sim/lib/",
                      "#../../../../04_Engineering/04_Build/algo/cml/pc/release/"]

# external libraries
external_lib = ["kernel32.lib", "user32.lib", "gdi32.lib", "winspool.lib", 
                "comdlg32.lib", "advapi32.lib", "shell32.lib", "ole32.lib", 
                "oleaut32.lib", "uuid.lib", "odbc32.lib", "odbccp32.lib", "cml_algo_pc_release.lib"]

#-------------------------
# sdl
#-------------------------

# determine if sdl file is generated here, not in the library  (default: False)
generate_sdl = True

# pdo source
pdo_src_list = Split(lcf_sim_swc_pdo_sources)

# PDO tool option for sim DLL
cnUpper = component_name.upper()
	
PDO_TOOL_OPTIONS_SIM = ("-f sdl2.0 --disable normalobj --enable virtualobj --cycleinfo default," + 
                        cnUpper + "_VEH_ENV_PVT," + cnUpper + "_VEH_ENV " + cnUpper + "_VEH 23 -v 0x00000000-0xFFFFFFFF --checkvirtrange 0x00000000-0xFFFFFFFF")

# determine if rc file must be patched (default: True)
patch_rc_file = True

# compiler include path required by pdo_scan when generating sdl file
compiler_include_paths = """
C:/LegacyApp/VisualStudio2005/VC/include
C:/LegacyApp/VisualStudio2010/VC/include
c:/Program Files (x86)/Microsoft Visual Studio 10.0/VC/include
"""

#-----------------------------
# variables - generate RTA xml file 
#-----------------------------

# generate RTA xml file (default: False)
analyse_rta = False

# Path to the files which contain the enum definition
sourceList = []

# List of enum variables
enumList = []

# List of patterns
patternList = []

# Choose the path of the generated xml file  (default: "#../../../05_Deliverables/cfg/algo/" + component_name)
#xmlDestinationPath = ""

# if component has more then one algo. Select the algo name for the target (default: component_name)
#rta_target_algo_name = "sr"

#-----------------------------
# upto here
#-----------------------------

