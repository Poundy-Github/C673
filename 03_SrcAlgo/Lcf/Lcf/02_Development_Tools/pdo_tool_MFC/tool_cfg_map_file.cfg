/*
	Configuration file for PDO-Tool
	Template for Map-file & merging options
	
	Note: C and C++ comments are supported
	Each statement has to be terminated by a semicolon ';'
*/

msg_format = "msvc";

extended_type_compat = enable;	// Extended type compatibility flag: typedef-level indirection differences get ignored when enabled. If disabled,
				// strict type checking is done: typedefs have to be completely equal to be compatible

output_format = "XmlDat1.0";	// Supported values: "ASAP2", "XmlDat1.0", "TextDat", "SDL2.0", "EcuExtract"
output_encoding = "UTF-8";	// Output encoding currently always UTF-8
//output_file_name = "testcfg.sdl";	// Output file name setting (only use in special cases)

default_byte_order = "motorola";	// Default byte-order of data described in map-file. Possible values: "intel", "motorola"

map_file_update_indices = disable;	// Map-file information shall be used to update index information of arrays

map_file_extended_compat = enable;	// Map-file extended compatibility. Most map files do not respect real types, and
					// respecify objects with different (bit-mask)-compatible representations. For example
					// an unsigned 16-bit value with mask 0x0001 may be described in the map file as a byte
					// with mask 0x0001 (and address + 1 for big endian). If enabled, then compatible
					// representations are detected and handled accordingly. Possible values: enable/disable

map_file_mirror_bitmasks = enable;	// Map-files for different architectures seem to have contradicting bit-mask
					// specification scheme: for some map files bit 0 in a byte is 0x80, for others
					// it is 0x01. Sadly there is no exact way to tell which convention is being used.
					// (usually big-endian MCUs have 0x80, but then again not even this is true 100%
					// of the time). If enabled then bit 0 means mask 0x80, otherwise 0x01.


map_file_auto_mirror_bitmasks = enable;	// Try auto-detecting bit-mask mirror setting (see map_file_mirror_bitmasks)

map_file_multibyte_bit_workaround = enable;	// Use special work-around for multi-byte bit-field addresses
						// Some map files specify the first byte's address as addess of
						// a multi-byte bit-field. Others specify the last byte. Sadly again
						// one of the cases, where there is no way to tell based on the map-file
						// itself. Enable this option for map files where the address of the last
						// byte is specified

map_file_auto_multibyte_bit_workaround = enable;	// Try auto-detecting multi-byte bit-field address workaround setting

check_address_range = 0x0-0xFFFFFFFF;

check_virtual_address_range = 0x0-0x8FFFFF, 0x902000-0xFFFFFFFF;

// Message output options
symbol_redefinition = warning;
incomplete_fwd_ref = error;
fun_par_name_redef = ignore;
comment_desc_clash = ignore;
comment_min_clash = error;
comment_max_clash = error;
comment_offset_clash = error;
comment_factor_clash = error;
comment_unit_clash = error;
comment_name_clash = error;
comment_virtual_clash = error;
comment_values_clash = error;
comment_logical_error = error;
