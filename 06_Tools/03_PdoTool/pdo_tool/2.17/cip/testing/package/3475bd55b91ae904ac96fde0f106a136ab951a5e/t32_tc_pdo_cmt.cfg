/*
	t32_tc_pdo_cmt.cfg
	Configuration file for PDO C-MT parser for Tricore based projects
	
	This file is also a template that can be used for configuration for different
	compilers. It is basically split into three sections: first macro defintions
	then allocator settings, and finally global options. Note that even though
	the syntax of this file is C-like, there are several restrictions. The
	most important global restriction is that no pre-proc statements other then
	#define and #undef are supported (this means no #include, #if, #ifdef, #endif
	etc.) The definitions themselves could appear in any order, but to make it
	easier to navigate the file is split into the three sections as mentioned
	previously.
	

*/

/*
	Pre-proc macros
	In this part of the file define macros like in normal C-files, but without using
	new-line escape sequence within a multi-character operator/identifier/constant
	and between the macro name and the opening parenthesis for function-like macros
	(these constraints not only result in a simpler parser, they also lead to easier
	to read code)
*/


/* Just in case 'inline' was specified with an alternative spelling */
#define __inline inline

/* keywords of Taskings TriCore compiler */
#define __interrupt(x) 	/* empty */
#define __interrupt_fast(x) /* empty */
#define __indirect
#define __asm asm
#define __near near
#define __far far
#define __a0 /* empty */
#define __a1 /* empty */
#define __a8 /* empty */
#define __a9 /* empty */
#define __at(x) /* empty */
#define __atbit(x) /* empty */
#define __circ /* empty */
#define __sfrbit16 /* empty */
#define __sfrbit32 /* empty */
#define __enable_ /* empty */
#define __bisr_(x) /* empty */
#define __noinline /* empty */
#define __trap(x) /* empty */
#define __trap_fast(x) /* empty */
#define __syscallfunc(x) /* empty */
#define __stackparm /* empty */

/*
  The TriCore compiler additionally supports a '__bit' type, which
  corresponds to a 8 bit aligned 8 bit type with a value of either
  0 or 1. (See Tasking C compiler user manual 3.2.3)
*/
#define __bit	unsigned char		/* 8 bit data with two possible values */

/*
  The TriCore compiler also has fixed-point arithmetic types. These
  are currently not completely supported by PDO, so just map them
  to simple C types with similar representations. (See Tasking
  C compiler user manual 3.2.2)
*/
#define __sfract signed short		/* 16-bit Fix-point fractional [-1,1> */
#define __fract signed int		/* 32 bit Fix-point fractional [-1,1> */
#define __laccum signed long long	/* 64 bit Fix-point fractional [-131072,131072> */

/*
  Packed data types of the TriCore compiler (see Tasking C compiler
  manual 3.2.4). PDO currently does not have any support for vector types 
  (MMX anyone?) so just map these to normal standard scalars.
*/
#define __packb int		/* packed 4 byte = 32 bit vector */
#define __packhw short		/* packed 2 short = 32 bit vector */

/*
	Type allocation definitions
	This part of the file the allocator is configured. The alignment, byte order, and
	representation types of C-types can be specified here. All type descriptions have
	to start with the keyword 'type' followed by the parenthesized bitwise or of the
	types for which the description applies. This is followed by the bracketed ({})
	list of settings. The settings names are: 'alignement', 'size', 'byteorder' and
	'reptype'. It is required that for a valid simple type at least one of 'size'
	and 'reptype' needs to be set. (i.e.: it is not needed for struct/union/enum/function
	and arrays) If 'size' is not set, but 'reptype' is, then the size is auto deduced from
	the representation type. Under circumstances if no built-in type describes the
	representation, it can be useful to just set the size of the type without adding a
	representation type.
*/

type (unsigned long long)
{
	alignment	= 4;			/* 4-byte aligned always */
	size		= 8;			/* Size is 4 bytes (note: if not set, deduced from reptype) */
	byteorder	= intel;		/* Byte-order is intel */
	reptype		= uint64;		/* Representation is unsigned 64-bit integer */
}

type (signed long long)
{
	alignment	= 4;			/* 4-byte aligned always */
	size		= 8;			/* Size is 4 bytes (note: if not set, deduced from reptype) */
	byteorder	= intel;		/* Byte-order is intel */
	reptype		= sint64;		/* Representation is unsigned 64-bit integer */
}

type (unsigned int  | unsigned long)
{
	alignment	= 2;			/* 2-byte aligned */
	size		= 4;			/* Size is 4 bytes (note: if not set, deduced from reptype) */
	byteorder	= intel;		/* Byte-order is intel */
	reptype		= uint32;		/* Representation is unsigned 32-bit integer */
}

type (signed int | signed long)
{
	alignment	= 2;			/* 2-byte aligned */
	byteorder	= intel;		/* Byte-order is intel */
	reptype		= sint32;		/* Representation is signed 32-bit integer */
}

type (signed short)
{
	alignment	= 2;
	byteorder	= intel;
	reptype		= sint16;
}

type (unsigned short)
{
	alignment	= 2;
	byteorder	= intel;
	reptype		= uint16;
}

type (char | signed char)
{
	alignment	= 1;
	reptype		= sbyte;
}

type (unsigned char)
{
	alignment	= 1;
	reptype		= ubyte;
}

type (float)
{
	alignment	= 2;
	size		= 4;
	byteorder	= intel;
	reptype		= float32;
}

type (double | long double)
{
	alignment	= 4;
	size		= 8;
	byteorder	= intel;
	reptype		= float64;
}

type (pointer)
{
	alignment	= 4;
	byteorder	= intel;
	reptype		= uint32;
}

type (function)
{
	alignment	= 4;
}

type (struct | union)
{
	alignment	= 1;		/* Default struct/union alignement 1 byte - will automatically allocate
							structs with fields with greater alignement requirements to greater
							alignment boundaries */
}

type (array)
{
	alignment	= 1;
}

type (enum)
{
	reptype		= auto;
}


/*
	Global options
	The general layout of this section is option_name '=' option_value ';'
*/

doxygen_comments = on;		/* This option enables/disables support for comments starting with /*! and /*!<
							where the first form is before the object it applies to, while the second form
							is after the object it applies to. Possible values: on/enable, off/disable */

teves_comments = disable;	/* This option enables/disables support for comments in Teves-style starting
							with /*@. Possible values: on/enable, off/disable */

smart_comments = enable;	/* This option enables/disables support for comments without special decoration. These comments are
							parsed like doxygen comments, the only exception is that the exclamation mark is not
							required at the beginning of the comment. Binding is decided based on position of the
							comment (i.e.: in same line after declarator binds to that declarator, on a blank line
							bounds to the declarator following it) */

blank_line_reset_comment = enable;	/* This option controls if blank lines between comment and the declaration following/preceeding
							it shall reset the comment binding. Possible values on/enable, off/disable */

define_line_reset_comment = enable;	/* This option controls if a define line between a comment and a declaration shall reset the
							binding of that comment to the declaration. Possible values on/enable, off/disable */

merge_multiple_comments = enable;	/* This option controls how multiple comments bound to the same declaration are handled.
							If disabled, the nearest/first comment is bound only. Otherwise the information is merged. */
							
comment_in_initializer = disable;	/* This option controls how comments within initializers are handled. Old versions of the tooling had
							no special handling (as if set to enabled). Recommended setting is disabled, since usually
							comments within initializers are actually meant as descriptions of the initialization values */

comment_support_brief = enable;	/* This option controls if a seperate 'brief' comment is supported beside the detailed description. If
							this is disabled then only the long descriptions will be stored in the XML outputs. */

comment_default_brief = disable;	/* This option controls if on default entering a comment the unspecified information is treated as
							description (disabled) or brief description (enabled). Note option only has an effect if comment_support_brief
							is enabled. */

comment_tags_colon_optional = enable;	/* This option controls if colons following in-comment tags are treated as optional (enabled state) or
							required (disabled state). */

a_info_support = off;		/* This option can be used to turn support for the obsolete a_info/arr_info
							features on and off. Use of this is strongly discouraged as it is very unintuitive,
							error-prone and shows a total lack of forethought and design...
							Possible values: on/enable, off/disable (recommended) */

macros_in_comments = enable;	/* This option enables/disables macro expansion within mt-information
								comments non-description field. Possible values: on/enable, off/disable */

cycleid_per_inst = enable;	/* This option controls if list after @cycleid comment tag shall be treated
							as a list of cycleids with one entry applicable for each virtual instance
							(setting enable), or be treated as a global list, where the complete list
							applies to each virtual instance. */
							
simple_tag_one_line = enable;	/* This option controls if simple comment tags (like name/min/max/resolution/offset) only accept single lines
							Recommended setting: enabled, since usually just one line of information is desired */

comment_errors = warning;	/* Sets the reaction to errors during lexing of mt-information comments.
							Possible values: ignore, warning, error */

mixed_bit_fields = enable;	/* Enables the mixing of different type bit-fields within the same allocation
							unit. For example two fields: unsigned char x:4, unsigned int y:4 can be fit
							into the same byte. Certain compilers do place them in the same allocation unit
							(such as the CC32R, see CC32R manual chapter 5.9.1), while others do not
							(for example the MS-VC, see http://msdn2.microsoft.com/en-us/library/aa243469(VS.60).aspx).
							Possible values: on/enable, off/disable */

bit_field_piggyback = enable;	/* Enables the 'piggybacking' of bit-fields to the allocation unit of
								a normal field, if there are sufficient number of bits available. For
								example if a struct contains two fields: unsigned char x, unsigned int y:9,
								then a 32-bit int compiler with 'piggyback' support may pack the field
								'y' into the integer allocation unit that also contains x.
								Possible values: on/enable, off/disable */

bit_field_auto_type = disable;	/* Enables the 'automatic' minimal integer type for bit-field feature
								supported by some compilers. This new option was introduced with PDO version 2.15
								if enabled, then regardless of the type used to specify a bit-field the smallest
								applicable integer type is used.
								Possible values: on/enable, off/disable */
								
bit_field_max_comp_size = 8;		/* Maximum compression size in bytes for a bit-field. If this many bits are not available, next allocation unit is started.
								See also '-Xbit-fields-compress' of DIAB compiler for functionality.
								Possible values: integers >= 1 */

bitorder = lsbfirst;			/* Bit-fields are allocated least significant bit first
								Possible values: motorola/msbfirst/bigendian, intel/lsbfirst/littleendian */

asm_keyword	= enable;			/* Option for enabling/disabling support for the 'asm' keyword.
								Possible values: on/enable, off/disable */

inline_keyword = enable;		/* Option for enabling/disabling support for the 'inline' keyword.
								Possible values: on/enable, off/disable */

far_keyword	= enable;			/* Option for controling the far keyword support used by several compilers.
								Possible values: on/enable, off/disable */

near_keyword = enable;			/* Option for controling the near keyword support used by several compilers.
								Possible values: on/enable, off/disable */

restrict_keyword = enable;		/* Option for controling the limited restrict keyword support. This keyword
								was standardized with ISO C99, but is currently not supported by most compilers.
								If enabled, the parser will still ignore it.
								Possible values: on/enable, off/disable */

typeof_keyword = disable;		/* Option for controling the limited typeof keyword support. This keyword
								is not yet standardized by ISO, but supported by several compilers.
								If enabled, the parser will attempt to parse typeof expressions. As no comprehensive
								specification for the functionality exists, the parsing is only a guesswork based on
								the hodgepodge user-level documentation available online.
								Possible values: on/enable, off/disable */

auto_unsigned_const = enable;	/* Option controlling if numeric constants exceeding the range of signed ints without unsigned
								suffix(es) should be automatically treated as unsigned.
								Possible values: on/enable, off/disable */
								
attribute_keyword = disable;	/* Option controlling evaluation of the __attribute__ keyword. If enabled, then it is treated similar to the way the
								GCC compiler handles it. Possible values: on/enable, off/disable */

strict_float_prec = disable;	/* Option controlling evaluation of constant expressions. If disabled, then higher precission is used. If on
								then the precission of the emulated target architecture is used.
								Possible values: on/enable, off/disable */

parse_functions = disable;	/* Option controlling of functions get parsed. If enabled, then functions are parsed completely. If disabled
								then when the parser reaches a function definition it sets the lexer into skip mode
								until the end of the function (which is slightly faster).
								Possible values: on/enable, off/disable */

sys_inc_messages = disable;	/* Switch to enable/disable message generation for system include files */

macro_ident_redef = ignore;		/* Defines the reaction to identical macro re-definitions. Possible values
								are error, warning and ignore */
								
macro_diff_redef = warning;		/* Defines the reaction to different macro re-definitions. Possible values
								are error, warning and ignore */

macro_useless_undef = ignore;	/* Defines the reaction to identical macro re-definitions. Possible values
								are error, warning and ignore */

undef_ppc_condition = warning;	/* Defines the reaction to identical macro re-definitions. Possible values
								are error, warning and ignore */

float_in_ppc_cond = error;		/* Defines the reaction to use if floating-point constants in pre-processor
								conditionals. These are not specified according to the standard (only integer
								arithmetic is required), but some pre-processors/compilers support them.
								Possible values are error, warning, ignore */

string_in_ppc_cond = error;		/* Defines the reaction to use if string-literal constants are used in pre-
								processor constant expressions. Possible values are error, warning, ignore */

char_in_ppc_cond = warning;		/* Defines the reaction to use if character-literal constants are used in pre-
								processor constant expressions. Possible values are error, warning, ignore */

eof_in_ppc_ctrlline	= ignore;	/* What reaction to exhibit on end-of-file within a pre-processor control line.
								The C standard clearly forbids this, yet sadly this error is very wide-spread.
								The Metrowerks C standard headers are almost always with EOFs in control lines.
								Possible values: error, warning, ignore */

sizeof_use_in_ppc	= error;	/* What reaction to exhibit on sizeof keyword use in pre-processor control line.
								Possible values: error, warning, ignore */

cast_use_in_ppc	= error;		/* What reaction to exhibit on cast-expression use in pre-processor control line.
								This is clearly an error based on the ISO C standard
								Possible values: error, warning, ignore */

eof_in_include	= warning;		/* What reaction to exhibit on End-of-file in pre-processor #include statement.
								This is an error based on the ISO C standard, as all pre-processor control lines
								have to end in an end-of-line. Sadly this error is quite common and most compilers
								do not require and EOL at the end of each pre-processor control line.
								Possible values: error, warning, ignore */

eof_in_define	= warning;		/* What reaction to exhibit on End-of-file in a pre-processor #define statement.
								This is an error based on the ISO C standard, as all pre-processor control lines
								have to end in an end-of-line. Sadly this error is quite common and most compilers
								do not require and EOL at the end of each pre-processor control line.
								Possible values: error, warning, ignore */

define_missing_ws	= warning;	/* What reaction to exhibit on when the white-space between an object-like macro
								name and replacement list is missing. The ISO C standard requires that an object-like
								macro name be seperated from it's replacement list by a white-space. Sadly this is not
								always satisfied. If this is set to error, then the macro will be completely ignored.
								Possible values: error, warning, ignore */

type_info_fail	= error;		/* What reaction to exhibit when obtaining type information through the
								type (allocation) information interface fails. Depending on how PDO is used,
								the desired reaction can be ignore (i.e.: when sizeof is never used in
								declarations, and there is no need for allocation information), warning (when
								allocation information is nice to have, but not absolutely necessary), and
								error (when complete allocation is needed). */

implicit_int_type	= warning;	/* What reaction to exhibit on implicit 'int' types. These are definitely
								discouraged, as they are non C++ conformant, and generally indicate low
								quality code. Possible values: error, warning, ignore */

empty_input = warning;			/* What reaction to exhibit for empty translation units.
								The standard forbids this, but most established compilers support it.
								Possible values: error, warning, ignore */
								
glob_empty_stmt = warning;		/* What reaction to exhibit on global empty (null) statement.
								Based on standard (ISO) C this is an error (non-conforming code), but most
								compilers accept it silently.
								Possible values: error, warning, ignore */

symbol_redefinition = warning;	/* What reaction to exhibit on redefinition of a symbol on parser level. This can happen
								when two translation units define the same symbol with different meaning.
								Possible values: error, warning, ignore */

static_redefinition = ignore;	/* What reaction to exhibit on redeclaration of a static symbol in multiple compilation
								units. This is quite similar to 'symbol_redefintion', but only applies to statics
								Possible values: error, warning, ignore */

incomplete_fwd_ref = ignore;	/* What reaction to exhibit on incomplete forward type/symbol references on parser level. 
								Possible values: error, warning, ignore */

fun_par_name_redef = ignore;	/* What reaction to exhibit when the name of a parameter to a function is different in differnet
								declarations of the function. Possible values: error, warning, ignore */

comment_desc_clash = warning;	/* What reaction to exhibit when merging description comments attached to the same symbol, which conflict
								each other.
								Possible values: error, warning, ignore */

comment_min_clash = warning;	/* What reaction to exhibit when merging minimum comments attached to the same symbol, which conflict
								each other.
								Possible values: error, warning, ignore */

comment_max_clash = warning;	/* What reaction to exhibit when merging maximum comments attached to the same symbol, which conflict
								each other.
								Possible values: error, warning, ignore */

comment_offset_clash = warning;	/* What reaction to exhibit when merging offset comments attached to the same symbol, which conflict
								each other.
								Possible values: error, warning, ignore */

comment_factor_clash = warning;	/* What reaction to exhibit when merging factor (resolution) comments attached to the same symbol, which conflict
								each other.
								Possible values: error, warning, ignore */

comment_unit_clash = warning;	/* What reaction to exhibit when merging unit string comments attached to the same symbol, which conflict
								each other.
								Possible values: error, warning, ignore */

comment_name_clash = warning;	/* What reaction to exhibit when merging name string comments attached to the same symbol, which conflict
								each other.
								Possible values: error, warning, ignore */

comment_virtual_clash = warning;	/* What reaction to exhibit when merging virtual instance comments attached to the same symbol, which conflict
								each other.
								Possible values: error, warning, ignore */

comment_values_clash = warning;	/* What reaction to exhibit when merging values comments attached to the same symbol, which conflict
								each other.
								Possible values: error, warning, ignore */

comment_designator_error = error;	/* What reaction to exhibit when a parse error occurs within a comment's special binding designator.
								Possible values: error, warning, ignore */

comment_values_parse_error = warning;	/* What reaction to exhibit when a parse error occurs within a values expression/statement.
								Possible values: error, warning, ignore */

comment_logical_error = error;	/* What reaction to exhibit when a logical error/inconsistency in a comment occurs. An example would
								be specifying a factor=0, or specifying a minimum value > maximum etc.
								Possible values: error, warning, ignore */

comment_unbound_virtinst = error;	/* What reaction to exhibit when a virtual instance in a dangling (unassignable) comment is found.
								Possible values: error, warning, ignore */

charset = "iso8859-1";			/* Set input character set. Possible values "utf-8", "iso8859-1", "cp437", "cp852" */

msg_format = "gcc_msg";			/* Set message format setting to GCC
								Possible values "msvs_msg", "gcc_msg", "teves_msg", "cc32r_msg" */

file_caching = enable;			/* Flag to enable/disable file caching. Possible values: enable/on, disable/off */

/* Note on file/directory specifications: you may use either unix / or DOS \ style
directory delimiters. If you use DOS, you do not need to use the C escape form (i.e.: \\),
a simple backslash is sufficient, eg: C:\Program Files\Microsoft Visual Studio 8\VC\include\ */

//reinclude_file = "../src/os/ars3xx/tcb.h";	/* Coma seperated list of files to reinclude every time (in the same format as the include path) */

//sys_include_dirs = "C:/Program Files/Microsoft Visual Studio 8/VC/include/", "C:\Program Files\Microsoft Visual Studio 8\VC\include\sys";	/* Coma seperated list of directories (either absolute or relative to working dir) */

output_on_error = enable;					/* Specify if DAT output shall be generated even if errors were encountered (enable state)
											or that no output shall be generate if errors occured (disable) */

extended_type_compat = enable;			/* Extended type compatibility flag: typedef-level indirection differences get ignored when enabled. If disabled,
								strict type checking is done: typedefs have to be completely equal to be compatible */

multi_instance_statics = disable;		/* Enable creating multiple instances of statics when encountered in different compilation units */
