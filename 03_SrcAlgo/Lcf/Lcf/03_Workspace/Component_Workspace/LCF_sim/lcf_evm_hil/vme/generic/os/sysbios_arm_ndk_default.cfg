/*
 * SYSBIOS default configuration for EVM HIL running on ARM platforms 
 * and including NDK. This file is valid for VME-CortexA8 and VH28-CortexM4. 
 */
 
// supported platforms
var PLATFORM_VME    = "vme_evm_hil_ca8";
var PLATFORM_VH28   = "vh28_evm_hil_cm4";

// by default GNU flag is inactive
if (typeof GnuConfig == 'undefined')
{
    GnuConfig = false;
}

/**********************************************************************\
|                          Module  Dependencies                        |
\**********************************************************************/

var Bios        = xdc.useModule('ti.sysbios.BIOS');
var HeapMem     = xdc.useModule('ti.sysbios.heaps.HeapMem');
var Clock       = xdc.useModule('ti.sysbios.knl.Clock');
var Task        = xdc.useModule('ti.sysbios.knl.Task');
var Load        = xdc.useModule('ti.sysbios.utils.Load');
var Defaults    = xdc.useModule('xdc.runtime.Defaults');
var Memory      = xdc.useModule('xdc.runtime.Memory');
var System      = xdc.useModule('xdc.runtime.System');
var SysStd      = xdc.useModule("xdc.runtime.SysStd");
var Global      = xdc.useModule('ti.ndk.config.Global');
var Ip          = xdc.useModule('ti.ndk.config.Ip');
var Tcp         = xdc.useModule('ti.ndk.config.Tcp');
var GMACSW      = xdc.useModule('ti.nsp.drv.GMACSW');

if (GnuConfig)
{
  var SemiHost  = xdc.useModule('ti.sysbios.rts.gnu.SemiHostSupport');
}

/* platform dependent module includes */
if (Program.platformName == PLATFORM_VME)
{
  /* CortexA8 */
  var Hwi     = xdc.useModule('ti.sysbios.family.arm.a8.intcps.Hwi');
  var Cache   = xdc.useModule('ti.sysbios.family.arm.a8.Cache');
  var Mmu     = xdc.useModule('ti.sysbios.family.arm.a8.Mmu');
}
else if (Program.platformName == PLATFORM_VH28)
{
  /* CortexM4 */
  var Hwi     = xdc.useModule('ti.sysbios.family.arm.m3.Hwi');
  var Cache   = xdc.useModule('ti.sysbios.hal.unicache.Cache');
  var AMMU    = xdc.useModule('ti.sysbios.hal.ammu.AMMU');
  var Core    = xdc.useModule('ti.sysbios.family.arm.ducati.Core');
  var IntXbar = xdc.useModule('ti.sysbios.family.shared.vayu.IntXbar');
}
else
{
    // invalid platform
    print("Platform is not supported: " + Program.platformName);
}

/**********************************************************************\
|                      Miscellaneous Configuration                     |
\**********************************************************************/

if (Program.platformName == PLATFORM_VME)
{
    // startup function
    Bios.startupFxns = ['&centaurus_init'];
}
else if (Program.platformName == PLATFORM_VH28)
{
    // startup function
    Bios.startupFxns = ['&vayu_init'];

    // allow load profiling of ISRs
    Load.hwiEnabled = true;

	// specify core
	Core.id = 0;
	Program.global.coreName = "IPU1";
}

/* Specify startup init function for Bios */
Bios.libType = Bios.LibType_Custom;

/* Cache should be enabled to use the AMMU */
Cache.enableCache = true;

/* select Timer 0 to drive BIOS clock */
Clock.timerId = 0;
Clock.swiPriority = null;

Bios.smpEnabled = false;

/* Set the proxy for System module. This enables print statements at runtime in
 * the application */
System.SupportProxy = SysStd;


/**********************************************************************\
|                  Interrupt and MMU Configuration                     |
\**********************************************************************/
if (Program.platformName == PLATFORM_VME)
{
    Mmu.enableMMU = true;
    
    /* Program code/data memory */
    // Force internal and external memory to be normal, outer and inner write-back, no write allocate, non-shareable
    var inner = 3;
    var outer = 3;
    var attrs =
    {
        type: Mmu.FirstLevelDesc_SECTION,  // SECTION descriptor
        tex: 4 + outer,                    // tex =
        shareable: false,                  // shareable
        cacheable: ((inner & 0x2)!=0),     // cacheable
        bufferable: ((inner & 0x1)!=0),    // bufferable
    };
    // Set the descriptor for each entry in the address range
    for (var i=0x40000000; i < 0x40400000; i = i + 0x00100000)
    {
        // Each 'SECTION' descriptor entry spans a 1MB address range
        Mmu.setFirstLevelDescMeta(i, i, attrs);
    }
    for (var i=0x80000000; i < 0x90000000; i = i + 0x00100000)
    {
        // Each 'SECTION' descriptor entry spans a 1MB address range
        Mmu.setFirstLevelDescMeta(i, i, attrs);
    }

    /* Packet Buffer Memory */
    // Force shared memory to be normal, outer and inner write-back, no write allocate, non-shareable, non-executable
    var inner = 3;
    var outer = 3;
    var attrs =
    {
        type: Mmu.FirstLevelDesc_SECTION,  // SECTION descriptor
        tex: 4 + outer,                    // tex =
        shareable: false,                  // shareable
        cacheable: ((inner & 0x2)!=0),     // cacheable
        bufferable: ((inner & 0x1)!=0),    // bufferable
        noexecute  : true                  // not executable
    };
    for (var i=0x8E000000; i < 0x8F000000; i = i + 0x00100000)
    {
        // Each 'SECTION' descriptor entry spans a 1MB address range
        Mmu.setFirstLevelDescMeta(i, i, attrs);
    }

    // Force peripheral section to be NON cacheable, strongly-ordered memory
    var attrs = {
        type : Mmu.FirstLevelDesc_SECTION, // SECTION descriptor
        tex: 0,                            // tex = 0
        bufferable : false,                // bufferable
        cacheable  : false,                // cacheable
        shareable  : false,                // shareable
        noexecute  : true,                 // not executable
        accPerm    : 3                     // read/write
    };

    // Configure the corresponding Mmu page descriptor accordingly
    for (var i=0x40400000; i < 0x50000000; i = i + 0x00100000)
    {
        // Each 'SECTION' descriptor entry spans a 1MB address range
        Mmu.setFirstLevelDescMeta(i, i, attrs);
    }

    /* GMAC_SW RX_THRESH_PULSE Interrupt */
    var hwi_param_0 = new Hwi.Params;
    hwi_param_0.arg = 0;
    Hwi.create(40, '&HwIntRxThresh', hwi_param_0);

    /* GMAC_SW RX_PULSE Interrupt */
    var hwi_param_1 = new Hwi.Params;
    hwi_param_1.arg = 0;
    Hwi.create(41, '&HwIntRx', hwi_param_1);

    /* GMAC_SW TX_PULSE Interrupt */
    var hwi_param_2 = new Hwi.Params;
    hwi_param_2.arg = 0;
    Hwi.create(42, '&HwIntTx', hwi_param_2);

    /* GMAC_SW MISC_PULSE Interrupt */
    var hwi_param_3 = new Hwi.Params;
    hwi_param_3.arg = 0;
    Hwi.create(43, '&HwIntMisc', hwi_param_3);

    // Place the MMU table in DDR3
    if (!GnuConfig)
    {
      var sectionName = "ti.sysbios.family.arm.a8.mmuTableSection";
      Program.sectMap[sectionName] = new Program.SectionSpec();
      Program.sectMap[sectionName].type = "NOINIT";
      Program.sectMap[sectionName].loadSegment = "DDR3_CA8"
    }
}
else if (Program.platformName == PLATFORM_VH28)
{
    AMMU.configureAmmu = true;

    /*********************** Small Pages *************************/
    AMMU.smallPages[0].pageEnabled = AMMU.Enable_YES;
    AMMU.smallPages[0].logicalAddress = 0x00000000;
    AMMU.smallPages[0].translatedAddress = 0x55020000;
    AMMU.smallPages[0].translationEnabled = AMMU.Enable_YES;
    AMMU.smallPages[0].size = AMMU.Small_16K;
    AMMU.smallPages[0].volatileQualifier = AMMU.Volatile_FOLLOW;  
    AMMU.smallPages[0].L1_cacheable = AMMU.CachePolicy_CACHEABLE;

    AMMU.smallPages[1].pageEnabled = AMMU.Enable_YES;
    AMMU.smallPages[1].logicalAddress = 0x40000000;
    AMMU.smallPages[1].translatedAddress = 0x55080000;
    AMMU.smallPages[1].translationEnabled = AMMU.Enable_YES;
    AMMU.smallPages[1].size = AMMU.Small_16K;
    AMMU.smallPages[1].volatileQualifier = AMMU.Volatile_FOLLOW;  


    /*********************** Medium Pages *************************/
    AMMU.mediumPages[0].pageEnabled = AMMU.Enable_YES;
    AMMU.mediumPages[0].logicalAddress = 0x00300000;
    AMMU.mediumPages[0].translatedAddress = 0x40300000;
    AMMU.mediumPages[0].translationEnabled = AMMU.Enable_YES;
    AMMU.mediumPages[0].size = AMMU.Medium_256K;
    AMMU.mediumPages[0].L1_cacheable = AMMU.CachePolicy_CACHEABLE;
    AMMU.mediumPages[0].L1_writePolicy = AMMU.WritePolicy_WRITE_BACK;
    AMMU.mediumPages[0].L1_allocate    = AMMU.AllocatePolicy_ALLOCATE;
    AMMU.mediumPages[0].L1_posted = AMMU.PostedPolicy_POSTED;

    AMMU.mediumPages[1].pageEnabled = AMMU.Enable_YES;
    AMMU.mediumPages[1].logicalAddress = 0x63300000;
    AMMU.mediumPages[1].translatedAddress = 0x43300000;
    AMMU.mediumPages[1].translationEnabled = AMMU.Enable_YES;
    AMMU.mediumPages[1].size = AMMU.Medium_256K;
    AMMU.mediumPages[1].L1_cacheable = AMMU.CachePolicy_NON_CACHEABLE;
    AMMU.mediumPages[1].L1_posted = AMMU.PostedPolicy_NON_POSTED;
    AMMU.mediumPages[1].L2_cacheable = AMMU.CachePolicy_NON_CACHEABLE;
    AMMU.mediumPages[1].L2_posted = AMMU.PostedPolicy_NON_POSTED;

    /*********************** Large Pages *************************/
    AMMU.largePages[0].pageEnabled = AMMU.Enable_NO;    
    AMMU.largePages[0].logicalAddress = 0x60000000;
    AMMU.largePages[0].translationEnabled = AMMU.Enable_NO;
    AMMU.largePages[0].size = AMMU.Large_512M;
    AMMU.largePages[0].L1_cacheable = AMMU.CachePolicy_NON_CACHEABLE;
    AMMU.largePages[0].L1_posted = AMMU.PostedPolicy_NON_POSTED;
    AMMU.largePages[0].L2_cacheable = AMMU.CachePolicy_NON_CACHEABLE;
    AMMU.largePages[0].L2_posted = AMMU.PostedPolicy_NON_POSTED;

    AMMU.largePages[1].pageEnabled = AMMU.Enable_YES;
    AMMU.largePages[1].logicalAddress = 0x40000000;
    AMMU.largePages[1].translationEnabled = AMMU.Enable_NO;
    AMMU.largePages[1].size = AMMU.Large_512M;
    AMMU.largePages[1].L1_cacheable = AMMU.CachePolicy_NON_CACHEABLE;
    AMMU.largePages[1].L1_posted = AMMU.PostedPolicy_NON_POSTED;
    AMMU.largePages[1].L2_cacheable = AMMU.CachePolicy_NON_CACHEABLE;
    AMMU.largePages[1].L2_posted = AMMU.PostedPolicy_NON_POSTED;

    AMMU.largePages[2].pageEnabled = AMMU.Enable_YES;
    AMMU.largePages[2].logicalAddress = 0x80000000;
    AMMU.largePages[2].translationEnabled = AMMU.Enable_NO;
    AMMU.largePages[2].size = AMMU.Large_512M;
    AMMU.largePages[2].volatileQualifier = AMMU.Volatile_FOLLOW;
    AMMU.largePages[2].L1_cacheable = AMMU.CachePolicy_CACHEABLE;
    AMMU.largePages[2].L1_posted = AMMU.PostedPolicy_POSTED;
    AMMU.largePages[2].L2_cacheable = AMMU.CachePolicy_NON_CACHEABLE;
    AMMU.largePages[2].L2_posted = AMMU.PostedPolicy_NON_POSTED;

    AMMU.largePages[3].pageEnabled = AMMU.Enable_NO;
    AMMU.largePages[3].logicalAddress = 0xC0000000;
    AMMU.largePages[3].translationEnabled = AMMU.Enable_NO;
    AMMU.largePages[3].size = AMMU.Large_512M;
    AMMU.largePages[3].L1_cacheable = AMMU.CachePolicy_NON_CACHEABLE;
    AMMU.largePages[3].L1_posted = AMMU.PostedPolicy_NON_POSTED;
    AMMU.largePages[3].L2_cacheable = AMMU.CachePolicy_NON_CACHEABLE;
    AMMU.largePages[3].L2_posted = AMMU.PostedPolicy_NON_POSTED;

    /* GMAC_SW RX_THRESH_PULSE Interrupt */
    IntXbar.connectIRQMeta(57, 334);
    var hwi_param_0 = new Hwi.Params;
    hwi_param_0.arg = 0;
    Hwi.create(57, '&HwIntRxThresh', hwi_param_0);

    /* GMAC_SW RX_PULSE Interrupt */
    IntXbar.connectIRQMeta(58, 335);
    var hwi_param_1 = new Hwi.Params;
    hwi_param_1.arg = 0;
    Hwi.create(58, '&HwIntRx', hwi_param_1);

    /* GMAC_SW TX_PULSE Interrupt */
    IntXbar.connectIRQMeta(59, 336);
    var hwi_param_2 = new Hwi.Params;
    hwi_param_2.arg = 0;
    Hwi.create(59, '&HwIntTx', hwi_param_2);

    /* GMAC_SW MISC_PULSE Interrupt */
    IntXbar.connectIRQMeta(60, 337);
    var hwi_param_3 = new Hwi.Params;
    hwi_param_3.arg = 0;
    Hwi.create(60, '&HwIntMisc', hwi_param_3);
}


/**********************************************************************\
|                      Memory & Memory Map Setup                       |
\**********************************************************************/

/* create a HeapMem heap instance "DataHeap" */
var dataheapParams = new HeapMem.Params;
dataheapParams.size = 700000;
dataheapParams.sectionName = "DataHeap";
var dataHeap = HeapMem.create(dataheapParams);

/* set "dataHeap" to be the default Heap for the app */
Memory.defaultHeapInstance = dataHeap;

var dataMemSectName = Program.platform.dataMemory;
var codeMemSectName = Program.platform.codeMemory;

/* map the section name DataHeap to load into the data section of the platform */
Program.sectMap["DataHeap"] = dataMemSectName;

/* Put all code sections in the code section of the platform */
Program.sectMap[".text"] = codeMemSectName;

if (!GnuConfig)
{
  /* Use internal RAM to improve the throughput*/
  Program.sectMap[".far:NDK_PACKETMEM"] = dataMemSectName;
  Program.sectMap[".far:NDK_MMBUFFER"] = dataMemSectName;
  Program.sectMap[".far:NDK_MMBUFFER1"] = dataMemSectName;
  Program.sectMap[".far:NDK_OBJMEM"] = dataMemSectName;
}

/* functional safety sections */
Program.sectMap[".data_secure_section_var"] = "DDR3_FUNC_SEC";
Program.sectMap[".const_secure_section_const"] = "DDR3_FUNC_SEC";
/* intermediate section for gnu linkage */
Program.sectMap[".functional_security_sec_gnu"] = "DDR3_FUNC_SEC";


/**********************************************************************\
|                      NSP Driver configuration                        |
\**********************************************************************/

if (Program.platformName == PLATFORM_VME)
{
  GMACSW.device = GMACSW.DEVICE_CENTAURUS;
}
else if (Program.platformName == PLATFORM_VH28)
{
  GMACSW.device = GMACSW.DEVICE_VAYU
}

GMACSW.instrumentedBuild = false;

/**********************************************************************\
|                          NDK configuration                           |
\**********************************************************************/

/* select the stack library we want */
Global.IPv6            = false;
Global.stackLibType    = Global.MIN;
Global.netSchedulerPri = Global.NC_PRIORITY_HIGH;
Global.debugAbortLevel = Global.DBG_NONE;
Global.debugPrintLevel = Global.DBG_NONE;

/* Assign memory sections and sizes */
Global.pbmDataSection      = ".bss:NDK_PACKETMEM";
Global.memDataSection      = ".bss:NDK_MMBUFFER";
Global.lowTaskStackSize    = 8192;
Global.normTaskStackSize   = 8192;
Global.highTaskStackSize   = 8192;
Global.ndkThreadStackSize  = 8192;
Global.pktSizeFrameBuf     = 1536;
Global.pktNumFrameBufs     = 192;
Global.memRawPageSize      = 3072;
Global.memRawPageCount     = 16;

/* Use hook functions available in the ti.ndk.config.Global module to add CGI commands */
Global.networkOpenHook     = '&netOpenHook';
Global.networkCloseHook    = '&netCloseHook';

/* change the size of our receive buffers */
Tcp.transmitBufSize     = 8192;
Tcp.receiveBufSize      = 8192;
Tcp.receiveBufLimit     = 8192;

// static ip configuration
Ip.address          = "192.168.10.42";
Ip.mask             = "255.255.255.0";
Ip.gatewayIpAddr    = "192.168.10.1";
Ip.dhcpClientMode   = Ip.CIS_FLG_IFIDXVALID;
Ip.ifIdx            = 1; 

// location of the custom BIOS library under the output directory
xdc.module("xdc.cfg.SourceDir").outputDir = "src";

// Rebuild RTS => http://e2e.ti.com/support/embedded/bios/f/355/p/227731/803960.aspx#803960
Bios.includeXdcRuntime = true;

if (GnuConfig)
{
  Program.linkTemplate = "gnu/targets/arm/linkcmd_bm_v7a.xdt";
}

/**********************************************************************\
|                             END OF FILE                              |
\**********************************************************************/
