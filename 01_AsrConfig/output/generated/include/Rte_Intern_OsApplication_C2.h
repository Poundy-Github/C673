#ifndef RTE_INTERN_OSAPPLICATION_C2_H
#define RTE_INTERN_OSAPPLICATION_C2_H
/**
 * \file
 *
 * \brief AUTOSAR Rte
 *
 * This file contains the implementation of the AUTOSAR
 * module Rte.
 *
 * \version 6.6.3
 *
 * \author Elektrobit Automotive GmbH, 91058 Erlangen, Germany
 *
 * Copyright 2005 - 2021 Elektrobit Automotive GmbH
 * All rights exclusively reserved for Elektrobit Automotive GmbH,
 * unless expressly agreed to otherwise.
 */

/*
 * This file contains internal Rte declarations
 *
 * This file has been automatically generated by
 * EB tresos AutoCore Rte Generator Version 6.6.3
 * on Thu Jun 29 13:57:43 CST 2023. !!!IGNORE-LINE!!!
 */

/*
 * \addtogroup Rte Runtime Environment
 * @{
 */

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */
/* ==================[Includes]=============================================== */
#include <Os.h>
#include <TSMem.h>
#include <Atomics.h>
#include <Rte_Type.h>
#include <Com.h>
#include <Rte_Cbk.h>
#include <Rte_Partitioning.h>
#include <Rte_Components_Shared.h>

/* ==================[Macros]================================================= */
#define RTE_XFRM_ERROR_SERVERITY_MASK 0x80U
#define RTE_XFRM_IS_HARD_ERROR(x) (((x) & RTE_XFRM_ERROR_SERVERITY_MASK) != 0U)
#define RTE_XFRM_IS_SOFT_ERROR(x) (((x) != E_OK) && (((x) & RTE_XFRM_ERROR_SERVERITY_MASK) == 0U))
#define RTE_XFRM_UPDATE_STATUS_AND_XFRM_ERROR(xfrmErrorCode, status, xfrmError, xfrmClass) \
    do { \
    if ((xfrmErrorCode) != E_OK) \
    { \
    if (((xfrmErrorCode) & RTE_XFRM_ERROR_SERVERITY_MASK) != 0U) \
    { \
    (status) = RTE_E_HARD_TRANSFORMER_ERROR; \
    (xfrmError).transformerClass = (xfrmClass); \
    (xfrmError).errorCode = (xfrmErrorCode); \
    } \
    else if ((status) == E_OK) \
    { \
    (status) = RTE_E_SOFT_TRANSFORMER_ERROR; \
    (xfrmError).transformerClass = (xfrmClass); \
    (xfrmError).errorCode = (xfrmErrorCode); \
    } \
    else \
    { \
    /* no action required (see MISRA rule 14.10) */ \
    } \
    } \
    \
    } while (0)
#define RTE_XFRM_UPDATE_STATUS(xfrmErrorCode, status) \
    do { \
    if ((xfrmErrorCode) != E_OK) \
    { \
    if (((xfrmErrorCode) & RTE_XFRM_ERROR_SERVERITY_MASK) != 0U) \
    { \
    (status) = RTE_E_HARD_TRANSFORMER_ERROR; \
    } \
    else if ((status) == E_OK) \
    { \
    (status) = RTE_E_SOFT_TRANSFORMER_ERROR; \
    } \
    else \
    { \
    /* no action required (see MISRA rule 14.10) */ \
    } \
    } \
    \
    } while (0)
#ifdef OS_NsToTicks_Rte_Counter_C2
#define RTE_NS_TO_TICKS OS_NsToTicks_Rte_Counter_C2
#else
#define RTE_NS_TO_TICKS(ns) ((TickType)((ns) / 1000000))
#endif
#define Rte_StartScheduleTable_SchM_DefaultScheduleTable_OsApplication_C2() StartScheduleTableRel(SchM_DefaultScheduleTable_OsApplication_C2, 10U)
#define Rte_StartScheduleTable_Rte_DefaultScheduleTable_OsApplication_C2() StartScheduleTableRel(Rte_DefaultScheduleTable_OsApplication_C2, 10U)
#define Rte_SetEvent_OIE_862F453136842589E446179D9E799AEA() \
    do { \
    Rte_Task_SetEvent(Core3_OsTask_OperationInovkedProxy, Rte_OSTriggerExecutableEvent_Core3_OsTask_OperationInovkedProxy_OIE_862F453136842589E446179D9E799AEA); \
    (void)SetEvent(Core3_OsTask_OperationInovkedProxy, Rte_OSTriggerExecutableEvent_Core3_OsTask_OperationInovkedProxy_OIE_862F453136842589E446179D9E799AEA); \
    \
    } while (0)
#define Rte_SetEvent_MSSFE_A201CE503011DA46E8ADB75826DD3A34() \
    do { \
    Rte_Task_SetEvent(Core1_OsTask_Bsw_20ms, Rte_OSResolveWaitPointEvent); \
    (void)SetEvent(Core1_OsTask_Bsw_20ms, Rte_OSResolveWaitPointEvent); \
    \
    } while (0)
#define Rte_SetEvent_MSSFE_9D93B8918661A5C481676DEBE9105C4A() \
    do { \
    Rte_Task_SetEvent(Core3_OsTask_Bsw_20ms, Rte_OSResolveWaitPointEvent); \
    (void)SetEvent(Core3_OsTask_Bsw_20ms, Rte_OSResolveWaitPointEvent); \
    \
    } while (0)
#define Rte_SetEvent_IE_B34C63DE64B98B941B9132DF0D7E4988() \
    do { \
    Rte_Task_Activate(Core2_InitTask_Appl); \
    (void)ActivateTask(Core2_InitTask_Appl); \
    \
    } while (0)
#define Rte_SetEvent_MSE_FE04558BC80964D5FF00CB2D19E636F1() \
    do { \
    Rte_Task_SetEvent(Core2_OsTask_Bsw_20ms, Rte_OSTriggerExecutableEvent_Core2_OsTask_Bsw_20ms_MSE_FE04558BC80964D5FF00CB2D19E636F1); \
    (void)SetEvent(Core2_OsTask_Bsw_20ms, Rte_OSTriggerExecutableEvent_Core2_OsTask_Bsw_20ms_MSE_FE04558BC80964D5FF00CB2D19E636F1); \
    \
    } while (0)
#define Rte_IntLock() SuspendAllInterrupts()
#define Rte_IntUnlock() ResumeAllInterrupts()
#define RTE_PARTITION_UNINITIALIZED 0x0U
#define RTE_PARTITION_ACTIVE 0x1U
#define RTE_PARTITION_STOPPED 0x2U
#define RTE_PARTITION_TERMINATED 0x3U
#define RTE_PARTITION_RESTARTING 0x4U
#define RTE_PARTITION_STARTING 0x5U
#define SCHM_PARTITION_UNINITIALIZED 0xAU
#define SCHM_PARTITION_ACTIVE 0xBU
#define SCHM_PARTITION_STOPPED 0xCU
#define SCHM_PARTITION_STARTING 0xDU
#define RTE_CLIENT_REQUEST_READY 0x0U
#define RTE_CLIENT_REQUEST_PENDING 0x1U
#define RTE_CLIENT_REQUEST_FINISHED 0x2U
#define RTE_TRANSITION_BswM_1_OsApplication_C2_BSWM_ModeGroupCrossCore 4U
#define RTE_MODE_BswM_1_OsApplication_C2_BSWM_ModeGroupCrossCore_BSWM_GO_OFF_ONE_D 0U
#define RTE_MODE_BswM_1_OsApplication_C2_BSWM_ModeGroupCrossCore_BSWM_STARTUP_TWO_B 1U
#define RTE_MODE_BswM_1_OsApplication_C2_BSWM_ModeGroupCrossCore_BSWM_STARTUP_TWO_D 2U
#define RTE_MODE_BswM_1_OsApplication_C2_BSWM_ModeGroupCrossCore_BSWM_SWC_CYCLIC_SHUTDOWN_C1 3U
#define RTE_TRANSITION_BswM_1_OsApplication_C2_DcmEcuReset 7U
#define RTE_MODE_BswM_1_OsApplication_C2_DcmEcuReset_EXECUTE 0U
#define RTE_MODE_BswM_1_OsApplication_C2_DcmEcuReset_HARD 1U
#define RTE_MODE_BswM_1_OsApplication_C2_DcmEcuReset_JUMPTOBOOTLOADER 2U
#define RTE_MODE_BswM_1_OsApplication_C2_DcmEcuReset_JUMPTOSYSSUPPLIERBOOTLOADER 3U
#define RTE_MODE_BswM_1_OsApplication_C2_DcmEcuReset_KEYONOFF 4U
#define RTE_MODE_BswM_1_OsApplication_C2_DcmEcuReset_NONE 5U
#define RTE_MODE_BswM_1_OsApplication_C2_DcmEcuReset_SOFT 6U
#define RTE_TRANSITION_BswM_1_OsApplication_C2_DcmCommunicationControl 12U
#define RTE_MODE_BswM_1_OsApplication_C2_DcmCommunicationControl_DCM_ENABLE_RX_TX_NORM 0U
#define RTE_MODE_BswM_1_OsApplication_C2_DcmCommunicationControl_DCM_ENABLE_RX_DISABLE_TX_NORM 1U
#define RTE_MODE_BswM_1_OsApplication_C2_DcmCommunicationControl_DCM_DISABLE_RX_ENABLE_TX_NORM 2U
#define RTE_MODE_BswM_1_OsApplication_C2_DcmCommunicationControl_DCM_DISABLE_RX_TX_NORM 3U
#define RTE_MODE_BswM_1_OsApplication_C2_DcmCommunicationControl_DCM_ENABLE_RX_TX_NM 4U
#define RTE_MODE_BswM_1_OsApplication_C2_DcmCommunicationControl_DCM_ENABLE_RX_DISABLE_TX_NM 5U
#define RTE_MODE_BswM_1_OsApplication_C2_DcmCommunicationControl_DCM_DISABLE_RX_ENABLE_TX_NM 6U
#define RTE_MODE_BswM_1_OsApplication_C2_DcmCommunicationControl_DCM_DISABLE_RX_TX_NM 7U
#define RTE_MODE_BswM_1_OsApplication_C2_DcmCommunicationControl_DCM_ENABLE_RX_TX_NORM_NM 8U
#define RTE_MODE_BswM_1_OsApplication_C2_DcmCommunicationControl_DCM_ENABLE_RX_DISABLE_TX_NORM_NM 9U
#define RTE_MODE_BswM_1_OsApplication_C2_DcmCommunicationControl_DCM_DISABLE_RX_ENABLE_TX_NORM_NM 10U
#define RTE_MODE_BswM_1_OsApplication_C2_DcmCommunicationControl_DCM_DISABLE_RX_TX_NORM_NM 11U
#define RTE_TRANSITION_BswM_1_OsApplication_C0_BSWM_ModeGroupCrossCore 4U
#define RTE_MODE_BswM_1_OsApplication_C0_BSWM_ModeGroupCrossCore_BSWM_GO_OFF_ONE_D 0U
#define RTE_MODE_BswM_1_OsApplication_C0_BSWM_ModeGroupCrossCore_BSWM_STARTUP_TWO_B 1U
#define RTE_MODE_BswM_1_OsApplication_C0_BSWM_ModeGroupCrossCore_BSWM_STARTUP_TWO_D 2U
#define RTE_MODE_BswM_1_OsApplication_C0_BSWM_ModeGroupCrossCore_BSWM_SWC_CYCLIC_SHUTDOWN_C1 3U

/* ==================[Types]================================================== */
typedef struct
{
  VAR(uint8, TYPEDEF) rteState;
  VAR(uint16, TYPEDEF) rteSequenceNumber;
} Rte_ClientRequestBufferType_OsApplication_C2;
typedef struct
{
  VAR(uint8, TYPEDEF) clientId;
  P2VAR(Rte_ClientRequestBufferType_OsApplication_C2, TYPEDEF, RTE_APPL_DATA) requestBuffer;
} Rte_ClientDS_E50D28B6A988DCB0E5979CEA3FF457DB_Type;

/* ==================[Definition of functions with external linkage]========== */
#define RTE_START_SEC_OSAPPLICATION_C2_CODE
#include <Rte_MemMap.h>
DeclareTask(Core2_OsTask_Bsw_20ms);
DeclareTask(Core2_OsTask_OperationInovkedProxy);
DeclareTask(Core2_InitTask_Appl);
DeclareTask(Core2_OsTask_Appl_5ms);
DeclareEvent(SchM_OSShutdownEvent);
DeclareEvent(Rte_OSTimingEvent_Core0_OsTask_Bsw_5ms_TE_9250283FD3A374F9E6E088501A7A0E92);
DeclareEvent(Rte_OSTimingEvent_Core0_OsTask_Bsw_5ms_TE_C81871CF733B997334C7E18C4B5DB17E);
DeclareEvent(Rte_OSTriggerExecutableEvent_Core0_OsTask_OperationInovkedProxy_OIE_552EA811572BA59681987C71EFB54ECC);
DeclareEvent(Rte_OSTriggerExecutableEvent_Core0_OsTask_OperationInovkedProxy_OIE_011AFBC720300F6A194EA60FB61F4E04);
DeclareEvent(Rte_OSTriggerExecutableEvent_Core0_OsTask_OperationInovkedProxy_OIE_FD1BCC71E05DC6960AA85787EC4CB4F7);
DeclareEvent(Rte_OSTriggerExecutableEvent_Core0_OsTask_OperationInovkedProxy_OIE_126A0C301745690712CD863C031BE784);
DeclareEvent(Rte_OSTriggerExecutableEvent_Core0_OsTask_OperationInovkedProxy_OIE_7FD8B2BCE216C3489E24BBB9B7C1A49D);
DeclareEvent(Rte_OSTriggerExecutableEvent_Core0_OsTask_OperationInovkedProxy_OIE_642E03D9FBEEA9D4F79B96B1408FE38F);
DeclareEvent(Rte_OSTriggerExecutableEvent_Core0_OsTask_OperationInovkedProxy_OIE_C56FF6B21164EDC76DC8EB2AEDD1EB41);
DeclareEvent(Rte_OSTriggerExecutableEvent_Core0_OsTask_OperationInovkedProxy_MSE_5E3A8F3BBFFE5F72011B7ED19FA8023C);
DeclareEvent(Rte_OSTriggerExecutableEvent_Core0_OsTask_OperationInovkedProxy_MSE_848AFAA86723FB0BC1753CC118949923);
DeclareEvent(Rte_OSTriggerExecutableEvent_Core0_OsTask_OperationInovkedProxy_MSE_6D56C5D58BD4F989CD4CFCC731898ACF);
DeclareEvent(Rte_OSTriggerExecutableEvent_Core0_OsTask_OperationInovkedProxy_MSE_B765910ACCD46C21534E6C6B62E8C6C7);
DeclareEvent(Rte_OSShutdownEvent);
DeclareEvent(Rte_OSTimingEvent_Core0_OsTask_Appl_20ms_TE_F97F7A2ECAEA3A4FE9A6468E6E83C78D);
DeclareEvent(Rte_OSResolveWaitPointEvent);
DeclareEvent(Rte_OSTimingEvent_Core0_OsTask_Appl_60ms_TE_EF84604C92A30BF324A2DEF1D82825FD);
DeclareEvent(Rte_OSTimingEvent_Core0_OsTask_Appl_60ms_TE_344FB9C7D2E189EB211BC438F55F3A79);
DeclareEvent(Rte_OSTimingEvent_Core1_OsTask_Appl_10ms_TE_4FEAAB8C3BCDA73855D3E70C1E051D1F);
DeclareEvent(Rte_OSTimingEvent_Core1_OsTask_Appl_10ms_TE_82A7CF7B79788AAC9ACECC46B60FBA35);
DeclareEvent(Rte_OSTimingEvent_Core1_OsTask_Appl_10ms_TE_B7D8AAA4EAF6595FD3CAC5E9F209B7C4);
DeclareEvent(Rte_OSTimingEvent_Core1_OsTask_Bsw_20ms_TE_3F85B53DA8A2367156B9DBD85092648F);
DeclareEvent(Rte_OSTimingEvent_Core1_OsTask_Bsw_20ms_TE_9239C5A54F3433A5ED9A15C3877ED11B);
DeclareEvent(Rte_OSTimingEvent_Core1_OsTask_Bsw_20ms_TE_B040B4ED3027D1A3758BCA982B69EF51);
DeclareEvent(Rte_OSTriggerExecutableEvent_Core1_OsTask_Bsw_20ms_MSE_A201CE503011DA46E8ADB75826DD3A34);
DeclareEvent(Rte_OSTimingEvent_Core2_OsTask_Bsw_20ms_TE_29BB7D421FDFD8A63D5E80341CE8612E);
DeclareEvent(Rte_OSTimingEvent_Core2_OsTask_Bsw_20ms_TE_D3A2F42BF7C6C717EC3CCFC9FD15E731);
DeclareEvent(Rte_OSTriggerExecutableEvent_Core2_OsTask_Bsw_20ms_MSE_FE04558BC80964D5FF00CB2D19E636F1);
DeclareEvent(Rte_OSTimingEvent_Core2_OsTask_Appl_5ms_TE_89C5AF3EF7B20A2642A74C905331C459);
DeclareEvent(Rte_OSTimingEvent_Core2_OsTask_Appl_5ms_TE_2760829764E12F022E818C5F06DFF5F3);
DeclareEvent(Rte_OSTimingEvent_Core3_OsTask_Bsw_20ms_TE_657DAD7D229C5C6ECB7466187F0A914C);
DeclareEvent(Rte_OSTimingEvent_Core3_OsTask_Bsw_20ms_TE_D9D2DDEE891EEE02E4F9199A02316334);
DeclareEvent(Rte_OSTimingEvent_Core3_OsTask_Bsw_20ms_TE_60BBEC5D20DC45D3A7EA0EB66F240BAD);
DeclareEvent(Rte_OSTriggerExecutableEvent_Core3_OsTask_Bsw_20ms_MSE_9D93B8918661A5C481676DEBE9105C4A);
DeclareEvent(Rte_OSTriggerExecutableEvent_Core3_OsTask_OperationInovkedProxy_DRE_B4149D9898C6A2747D6E9740A283D97F);
DeclareEvent(Rte_OSTriggerExecutableEvent_Core3_OsTask_OperationInovkedProxy_OIE_BD25944D0BD6171202C934A684479703);
DeclareEvent(Rte_OSTriggerExecutableEvent_Core3_OsTask_OperationInovkedProxy_OIE_4F2ABD96EE1AE82498BD60777EBCB149);
DeclareEvent(Rte_OSTriggerExecutableEvent_Core3_OsTask_OperationInovkedProxy_OIE_862F453136842589E446179D9E799AEA);
#ifdef OS_HAS_WAITGETCLEAREVENT
#define Rte_WaitGetClearEvent_OsApplication_C2(e, ep, tid) (Rte_Task_WaitEvent(tid, e), OS_WaitGetClearEvent(e, ep), Rte_Task_WaitEventRet(tid, e), (*(ep) & (EventMaskType)~(EventMaskType)(e)) != 0U ? (SetEvent(tid, *(ep) & (EventMaskType)~(EventMaskType)(e)), *(ep) &= (e), E_OK) : E_OK)
#else
extern FUNC(StatusType, RTE_CODE) Rte_WaitGetClearEvent_OsApplication_C2 (EventMaskType eventToWait, P2VAR(EventMaskType, AUTOMATIC, RTE_APPL_DATA) eventReceived, TaskType myTaskId);
#endif

#define RTE_STOP_SEC_OSAPPLICATION_C2_CODE
#include <Rte_MemMap.h>
#ifdef __cplusplus
} /* extern "C" */
#endif /* __cplusplus */

#endif
/** @} doxygen end group definition  */
/* ==================[end of file]============================================ */
