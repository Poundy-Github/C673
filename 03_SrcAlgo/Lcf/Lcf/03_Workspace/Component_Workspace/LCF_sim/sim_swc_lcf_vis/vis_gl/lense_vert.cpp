
/*********************************************************************

This file is generated by StringifyShaderSource. 
Please do not modify except you know what you do.

StringifySource is a utility from sim_swc_ld_vis2. 
Please look in that directory to find them.

The Source is file is : '..\vis_gl\lense.vert'
Generatted at : 'Fri Nov 22 11:19:00 2013'

*********************************************************************/

""
"uniform double fK1;"
"uniform double fK2;"
"uniform vec2 v2Center;"
"uniform ivec2 v2ImageSize;"
"uniform ivec2 v2Viewport;"
""
"float Cardano( double p, double q)"
"{"
"  double u=pow( float( -q/2.0 + sqrt( q*q/4.0 + p*p*p/27.0)), float( 1.0/3.0));"
"  return float( u-p/(3.0*u));"
"}"
""
"double Dist2UndistTailor( double f, float r2, double fK1, double fK2, float fu)"
"{"
"  return f * ( 1 + fK1 * r2 + fK2 * r2 * r2) - fu;"
"}"
""
"double Dist2UndistDerived( double x, double y, double fK1, double fK2)"
"{"
"  return 1.0 + fK1*y*y + fK2*y*y*y*y + 3.0*(fK1+2.0*fK2*y*y)*x*x + 5.0*fK2*x*x*x*x;"
"}"
""
"vec2 CameraUndistorted2Distored( vec2 pos)"
"{"
"  if( fK2 == 0.0F)"
"  {"
"    if( fK1 != 0.0F)"
"    {"
"      // Use Cardano method to solve x(r)=x(r)( 1+k1*r2)"
"      // Cardano can be used if x*x term is avoided"
"      pos -= v2Center;"
"	  float r2 = dot( pos, pos);"
"      dvec2 tmp;"
"	  tmp.x = Cardano( pos.y*pos.y + 1.0/fK1, -pos.x/fK1);"
"      tmp.y = Cardano( pos.x*pos.x + 1.0/fK1, -pos.y/fK1);"
"      pos = tmp + v2Center;"
"    }"
"  }"
"  else"
"  {"
"    pos -= v2Center;"
"    float r2 = dot( pos, pos);"
"    vec2 p1 = pos;"
""
"    for( int i=0; i < 5; i++)"
"    {"
"	  dvec2 p2;"
"      p2.x = pos.x - ( Dist2UndistTailor( p1.x, r2, fK1, fK2, pos.x) / Dist2UndistDerived( p1.x, p1.y, fK1, fK2));"
"      p2.y = pos.y - ( Dist2UndistTailor( p1.y, r2, fK1, fK2, pos.y) / Dist2UndistDerived( p1.y, p1.x, fK1, fK2));"
"	  p1 = p2;"
"    }"
""
"	pos = p1 + v2Center;"
"  }"
"  return pos;"
"}"
""
"vec2 Viewport2Image( vec2 vp2d)"
"{"
"  if( v2ImageSize.x == 0 || v2ImageSize.y == 0 || v2Viewport.x == 0 || v2Viewport.y == 0)"
"    return vp2d;"
"  return vp2d * v2ImageSize / v2Viewport;"
"}"
""
"vec2 Image2Viewport( vec2 im2d)"
"{"
"  if( v2ImageSize.x == 0 || v2ImageSize.y == 0 || v2Viewport.x == 0 || v2Viewport.y == 0)"
"    return im2d;"
"  return im2d * v2Viewport / v2ImageSize;"
"}"
""
"void main()"
"{"
"  vec4 p4d = gl_ModelViewProjectionMatrix * gl_Vertex;"
"  vec2 p2d = vec2( p4d.x, p4d.y);"
"  p2d = Viewport2Image( p2d);"
"  p2d = CameraUndistorted2Distored( p2d);"
"  p2d = Image2Viewport( p2d);"
"  gl_Position = vec4( p2d, p4d.z, p4d.w);"
"  gl_FrontColor = gl_Color;"
"  gl_BackColor = gl_Color;"
"}"
""