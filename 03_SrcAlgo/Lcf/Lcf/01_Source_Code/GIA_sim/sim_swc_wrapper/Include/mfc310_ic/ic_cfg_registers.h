//* **********************************************************************
//  COMPANY:         $CompanyInfo: CONFIDENTIAL AND PROPRIETARY PROPERTY OF CONTINENTAL AG , A.D.C. GmbH  -  ALL RIGHTS RESERVED $
//  
//  PROJECT:         MFC30x_MCU
//  CPU:             MPC5675K
//  
//  PACKAGE:         $Source: ic_cfg_registers.h $ $Revision: 1.1 $
//  MKS Date:        $Date: 2021/12/13 17:25:47CET $
//  
//  RHAPSODY:        7.5.3
//  COMPONENT:       IC
//  CONFIGURATION:   DefaultConfig
//  MODEL ELEMENT:   ic_cfg_registers
//  MODULNAME:       ..\..\..\04_Engineering\01_Source_Code\Algo\ic\ic_cfg_registers.h
//  LOGIN:           uidt3974  
//  
//  ==========================================================================================
//  The following QAC messages are suppressed for this module:
//  
//  Array initializer lists are autogenerated via VBA macros from an excel sheet, so just ignore
//  comma at end of lists:
//    PRQA S 3111 EOF
//  
//  All array sizes are intentionally implicitly specified:
//    PRQA S 2674,3674 EOF
//  
//  All entries have internal linkage, as this file is 'inlined' in the module which uses it:
//    PRQA S 3480 EOF
//  
//  Arrays contain tons of magic numbers of course:
//    PRQA S 3120 EOF
//  
//  
//  AUTHOR:          $Author: Wang, David (Wangd3) $
//! CREATION DATE:   Tue, 13, Nov 2012  3:55 W. Europe Standard Time PM 
//**************************************************************************** */

#ifndef ic_cfg_registers_H
#define ic_cfg_registers_H

/*## dependency ic_registers */
#include "ic_registers.h"
/*## dependency ic_types */
#include "ic_types.h"
/*## package Ic_Pkg */

/*## class TopLevel::ic_cfg_registers */
/*#[ ignore */
//  ==========================================================================================
//  The following QAC messages are suppressed for this module:
//  
//  Array initializer lists are autogenerated via VBA macros from an excel sheet, so just ignore
//  comma at end of lists:
//    PRQA S 3111 EOF
//  
//  All array sizes are intentionally implicitly specified:
//    PRQA S 2674,3674 EOF
//  
//  All entries have internal linkage, as this file is 'inlined' in the module which uses it:
//    PRQA S 3480 EOF
//  
//  Arrays contain tons of magic numbers of course:
//    PRQA S 3120 EOF
/*#]*/


/*#[ ignore */

#ifdef __cplusplus
extern "C"
{
#endif

/*#]*/


//  Structure used to create arrays of registers to be compared/verified
/*## type IC_S_CompareRegPair */
typedef struct IC_S_CompareRegPair {
    //  Register to be checked
    IMGREG_E_SENSOR_REG e_Reg;		/*## attribute e_Reg */
    //  Bits set in this mask are checked, others not
    uint16 ui16_Bitmask;		/*## attribute ui16_Bitmask */
} IC_S_CompareRegPair;

/*## type IC_S_RegMaskValue */
typedef struct IC_S_RegMaskValue {
    IMGREG_E_SENSOR_REG e_Reg;		/*## attribute e_Reg */
    uint16 ui16_Mask;		/*## attribute ui16_Mask */
    uint16 ui16_Value;		/*## attribute ui16_Value */
} IC_S_RegMaskValue;


/*#[ ignore */

#ifdef __cplusplus
}
#endif

/*#]*/


/*## package Ic_Pkg */

/*## class TopLevel::ic_cfg_registers */


/*#[ ignore */
#ifdef __cplusplus
extern "C"
{
#endif

/*#]*/


/*## attribute ICCFG_cae_InitialRegsReadI2C */
static const IMGREG_E_SENSOR_REG ICCFG_cae_InitialRegsReadI2C[] = {

    // Imager identification data
    IMGREG_e_REG_MODEL_ID,
    IMGREG_e_REG_REVISION_NUMBER,
    IMGREG_e_REG_FUSE_ID1,
    IMGREG_e_REG_FUSE_ID2,
    IMGREG_e_REG_FUSE_ID3,
    IMGREG_e_REG_FUSE_ID4,

    // Temperature sensor calibration data
    IMGREG_e_REG_TEMPSENS_CALIB2,
    IMGREG_e_REG_TEMPSENS_CALIB4,

    // Obtain first temperature data value
    IMGREG_e_REG_TEMPSENS_DATA,

    // Other trimmed registers
    /* 0x3ecc */ IMGREG_e_REG_DAC_LD_0_1,
    /* 0x3ece */ IMGREG_e_REG_DAC_LD_2_3,
    /* 0x3ed0 */ IMGREG_e_REG_DAC_LD_4_5,
};

/*## attribute ICCFG_cas_VerifyRegs */
static const IC_S_CompareRegPair ICCFG_cas_VerifyRegs[] = {
    { IMGREG_e_REG_AE_DAMP_MAX_REG,             0xffff }, // !! IMPORTANT: USED FOR DATABUS CHECK !!
    // =====================================================================
    { IMGREG_e_REG_MODEL_ID,                    0xffff }, // [0x3000] Chip Version
    { IMGREG_e_REG_LOCK_CONTROL,                0xffff }, // [0x3010] Lock Control
    { IMGREG_e_REG_RESET_REGISTER,              0x9ffc }, // [0x301a] Reset Register (GPIO control, streaming, lock, parallel enable, etc)
    { IMGREG_e_REG_DATA_PEDESTAL,               0x0fff }, // [0x301e] Data Pedestal
    { IMGREG_e_REG_ROW_SPEED,                   0x0070 }, // [0x3028] Row speed (IO speed)
    { IMGREG_e_REG_VT_SYS_CLK_DIV,              0x001f }, // [0x302c] PLL Clock
    { IMGREG_e_REG_PRE_PLL_CLK_DIV,             0x003f }, // [0x302e] PLL Clock
    { IMGREG_e_REG_PLL_MULTIPLIER,              0x00ff }, // [0x3030] PLL Clock
    { IMGREG_e_REG_DIGITAL_BINNING,             0x0033 }, // [0x3032] Digital Binning
    { IMGREG_e_REG_EMBEDDED_DATA_CTRL,          0x1f8f }, // [0x3064] Embedded data control
    { IMGREG_e_REG_DATAPATH_SELECT,             0xff13 }, // [0x306e] Line Valid and Frame Valid control, slew rate control, HiVcm vs. SLVS
    { IMGREG_e_REG_TEST_PATTERN_MODE,           0xffff }, // [0x3070] Test pattern control
    { IMGREG_e_REG_TEST_RAW_MODE,               0x0003 }, // [0x307a] Turn on raw mode
    { IMGREG_e_REG_MINIMUM_T3,                  0xffff }, // [0x307e] minimum t3 exposure
    { IMGREG_e_REG_TEMPSENS_CTRL,               0x003f }, // [0x30b4] Temperature sensor control
    { IMGREG_e_REG_DIGITAL_CTRL,                0x000f }, // [0x30ba] column retriggering control
    { IMGREG_e_REG_TEMPSENS_CALIB2,             0xffff }, // [0x30c8] Temperature Calibration value
    { IMGREG_e_REG_TEMPSENS_CALIB4,             0xffff }, // [0x30cc] Reserved
    { IMGREG_e_REG_COLUMN_CORRECTION,           0xe00f }, // [0x30d4] Column Correction
    { IMGREG_e_REG_COLUMN_CORRECTION_THRESHOLD, 0xffff }, // [0x30d6] Reserved
    { IMGREG_e_REG_COLUMN_CORRECTION_CLIP,      0xffff }, // [0x30d8] Reserved
    { IMGREG_e_REG_ADC_BITS_0_1,                0xffff }, // [0x30de] Reserved
    { IMGREG_e_REG_ADC_BITS_2_3,                0xffff }, // [0x30e0] reserved
    { IMGREG_e_REG_ADC_BITS_4_5,                0xffff }, // [0x30e2] reserved
    { IMGREG_e_REG_ADC_BITS_6_7,                0xffff }, // [0x30e4] reserved
    { IMGREG_e_REG_ADC_CONFIG1,                 0xffff }, // [0x30e6] reserved
    { IMGREG_e_REG_GAIN_OFFSET_CTRL,            0xfdff }, // [0x30ea] reserved
    { IMGREG_e_REG_START_UP_FRAME_NR,           0x07ff }, // [0x30f0] Reserved
    { IMGREG_e_REG_OFFSET_LIMIT_LOW,            0x0fff }, // [0x30f4] Reserved
    { IMGREG_e_REG_OFFSET_LIMIT_HIGH,           0x0fff }, // [0x30f6] Reserved
    { IMGREG_e_REG_REG_OFFSET_BTM_GL,           0x0fff }, // [0x30f8] Reserved
    { IMGREG_e_REG_AE_LUMA_TARGET_REG,          0xffff }, // [0x3102] Luma control
    { IMGREG_e_REG_AE_HIST_TARGET_REG,          0xffff }, // [0x3104] Histogram target
    { IMGREG_e_REG_AE_DAMP_OFFSET_REG,          0xffff }, // [0x310c] AE damping offset
    { IMGREG_e_REG_AE_DAMP_GAIN_REG,            0xffff }, // [0x310e] AE damping gain
    { IMGREG_e_REG_AE_DAMP_MAX_REG,             0xffff }, // [0x3110] AE damp Max
    { IMGREG_e_REG_OTPM_DATA_MANUAL_L,          0xffff }, // [0x313a] OTPM_TCFG_MANUAL_L
    { IMGREG_e_REG_OTPM_DATA_MANUAL_H,          0xffff }, // [0x313c] OTPM_TCFG_MANUAL_H
    { IMGREG_e_REG_OTPM_DATA_MANUAL_EXTRA,      0xffff }, // [0x313e] OTPM_TCFG_MANUAL_EXTRA
    { IMGREG_e_REG_AE_ROI_X_START_OFFSET,       0xffff }, // [0x3140] AE ROI x start
    { IMGREG_e_REG_AE_ROI_Y_START_OFFSET,       0xffff }, // [0x3142] AE ROI y start
    { IMGREG_e_REG_AE_ROI_X_SIZE,               0xffff }, // [0x3144] AE ROI x size
    { IMGREG_e_REG_AE_ROI_Y_SIZE,               0xffff }, // [0x3146] AE ROI y size
    { IMGREG_e_REG_AE_HIST_BEGIN_PERC,          0xffff }, // [0x3148] AE histo begin percentage
    { IMGREG_e_REG_AE_HIST_END_PERC,            0xffff }, // [0x314a] AE histo end percentage
    { IMGREG_e_REG_AE_HIST_DIV,                 0xffff }, // [0x314c] AE histogram divider
    { IMGREG_e_REG_DELTA_DK_CONTROL,            0xf000 }, // [0x3180] Delta Dark Control
    { IMGREG_e_REG_DELTA_DK_CLIP,               0xffff }, // [0x3182] Delta Dark Clipping
    { IMGREG_e_REG_HDR_MC_CTRL1,                0x0fff }, // [0x318a] HDR Control S2 threshold
    { IMGREG_e_REG_HDR_MC_CTRL2,                0xffff }, // [0x318c] HDR Motion Control and test mode
    { IMGREG_e_REG_HDR_MC_CTRL3,                0xf3ff }, // [0x318e] HDR Motion control and pixel build
    { IMGREG_e_REG_HDR_MC_CTRL4,                0xffff }, // [0x3190] HDR DLO Control
    { IMGREG_e_REG_HDR_MC_CTRL5,                0x1fff }, // [0x3192] HDR s12 range
    { IMGREG_e_REG_HDR_MC_CTRL10,               0x0fff }, // [0x31a0] HDR MC threshold
    { IMGREG_e_REG_HDR_MC_CTRL11,               0x0fff }, // [0x31a2] HDR DLO threshold
    { IMGREG_e_REG_PLL_DITHER_1,                0xffff }, // [0x31da] Reserved
    { IMGREG_e_REG_PLL_DITHER_2,                0xffff }, // [0x31dc] Reserved
    { IMGREG_e_REG_PLL_DITHER_3,                0x00ff }, // [0x31de] Reserved
    { IMGREG_e_REG_PIX_DEF_ID,                  0x8003 }, // [0x31e0] Pixel Defect correction
    { IMGREG_e_REG_PIX_DEF_ID_BASE_RAM,         0x1fff }, // [0x31e2] Pixel Defect correction
    { IMGREG_e_REG_PIX_DEF_ID_STREAM_RAM,       0x1fff }, // [0x31e4] Pixel Defect correction
    { IMGREG_e_REG_PIX_DEF_RAM_RD_ADDR,         0x80ff }, // [0x31e6] Pixel Defect correction
    #ifdef ICCFG_SENSOR_ARX550
    { IMGREG_e_REG_VT_PIX_CLK_DIV,              0x001f }, // [0x302a] PLL Clock
    { IMGREG_e_REG_DARK_CONTROL,                0x188c }, // [0x3044] Dark Control: show dark columns and rows and row noise cancellation. Different for ARX550.
    { IMGREG_e_REG_SEQ_CTRL_PORT,               0x43ff }, // [0x3088] sequencer access
    { IMGREG_e_REG_ADC_CONFIG2,                 0x80ff }, // [0x30e8] reserved
    { IMGREG_e_REG_HDR_COMP,                    0x0007 }, // [0x31d0] HDR compression to 12 or 14 bits
    #else
    { IMGREG_e_REG_VT_PIX_CLK_DIV,              0x00ff }, // [0x302a] PLL Clock
    { IMGREG_e_REG_DARK_CONTROL,                0x1e84 }, // [0x3044] Dark Control: show dark columns and rows and row noise cancellation. Different for ARX550.
    { IMGREG_e_REG_SEQ_CTRL_PORT,               0x41ff }, // [0x3088] sequencer access
    { IMGREG_e_REG_ADC_CONFIG2,                 0xffff }, // [0x30e8] reserved
    { IMGREG_e_REG_HDR_COMP,                    0x0003 }, // [0x31d0] HDR compression to 12 or 14 bits
    #endif
};

/*## attribute ICCFG_cas_VerifyRegsDelayed */
static const IC_S_CompareRegPair ICCFG_cas_VerifyRegsDelayed[] = {
    { IMGREG_e_REG_Y_ADDR_START,                0xffff }, // [0x3002] Row Start
    { IMGREG_e_REG_X_ADDR_START,                0xffff }, // [0x3004] Column Start
    { IMGREG_e_REG_Y_ADDR_END,                  0xffff }, // [0x3006] Row End
    { IMGREG_e_REG_X_ADDR_END,                  0xffff }, // [0x3008] Column End. ARX550 different Array size.
    { IMGREG_e_REG_FRAME_LENGTH_LINES,          0xffff }, // [0x300a] Frame Length Lines
    { IMGREG_e_REG_COARSE_INTEGRATION_TIME,     0xffff }, // [0x3012] Coarse Integration Time
    { IMGREG_e_REG_READ_MODE,                   0xc000 }, // [0x3040] Read Mode: Horizontal / Vertical flip
    { IMGREG_e_REG_GREEN1_GAIN,                 0x00ff }, // [0x3056] Digital Gain for Green 1
    { IMGREG_e_REG_BLUE_GAIN,                   0x00ff }, // [0x3058] Digital Gain for Blue
    { IMGREG_e_REG_RED_GAIN,                    0x00ff }, // [0x305a] Digital Gain for Red
    { IMGREG_e_REG_GREEN2_GAIN,                 0x00ff }, // [0x305c] Digital Gain for Green 2
    { IMGREG_e_REG_GLOBAL_GAIN,                 0x00ff }, // [0x305e] Global Digital Gain
    { IMGREG_e_REG_OPERATION_MODE_CTRL,         0x003f }, // [0x3082] HDR control on /off ratio control
    { IMGREG_e_REG_DIGITAL_TEST,                0xfcf6 }, // [0x30b0] digital test: dcg, pll bypass, context b, no_sh_jump_limit
    { IMGREG_e_REG_AE_CTRL_REG,                 0x007f }, // [0x3100] AE control
    { IMGREG_e_REG_HDR_MC_CTRL6,                0x0fff }, // [0x3194] DLO T1 barrier
    { IMGREG_e_REG_HDR_MC_CTRL7,                0x0fff }, // [0x3196] DLO T2 barrier
    { IMGREG_e_REG_HDR_MC_CTRL8,                0x0fff }, // [0x3198] DLO T3 barrier
    { IMGREG_e_REG_HDR_MC_CTRL9,                0xffff }, // [0x319e] HDR DLO Filtering
    #ifdef ICCFG_SENSOR_ARX550
    { IMGREG_e_REG_LINE_LENGTH_PCK,             0xffff }, // [0x300c] Line Length Pclk
    #else
    { IMGREG_e_REG_LINE_LENGTH_PCK,             0xfffe }, // [0x300c] Line Length Pclk
    #endif
};

/*## attribute ICCFG_cas_VerifyRegsI2C */
static const IC_S_CompareRegPair ICCFG_cas_VerifyRegsI2C[] = {
    // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    // !! NOTE: Keep addresses in order to allow reading them as a block from the imager !!
    // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    { IMGREG_e_REG_OTPM_TCFG_WRITE_01,          0xffff }, // [0x3130] OTPM_TCFG_WRITE_1
    { IMGREG_e_REG_OTPM_TCFG_WRITE_23,          0xffff }, // [0x3132] OTPM_TCFG_WRITE_23
    { IMGREG_e_REG_OTPM_TCFG_READ_01,           0xffff }, // [0x3134] OTPM_TCFG_READ_1
    { IMGREG_e_REG_OTPM_TCFG_READ_23,           0xffff }, // [0x3136] OTPM_TCFG_READ_23
    { IMGREG_e_REG_OTPM_TCFG_READ_4B,           0xffff }, // [0x3138] OTPM_TCFG_READ_4B
    { IMGREG_e_REG_DAC_LD_0_1,                  0xffff }, // [0x3ecc] Reserved
    { IMGREG_e_REG_DAC_LD_2_3,                  0xffff }, // [0x3ece] Reserved
    { IMGREG_e_REG_DAC_LD_4_5,                  0xffff }, // [0x3ed0] Reserved
    { IMGREG_e_REG_DAC_LD_10_11,                0xffff }, // [0x3ed6] Reserved
    { IMGREG_e_REG_DAC_LD_12_13,                0xffff }, // [0x3ed8] Reserved
    { IMGREG_e_REG_DAC_LD_14_15,                0xffff }, // [0x3eda] Reserved
    { IMGREG_e_REG_DAC_LD_16_17,                0xffff }, // [0x3edc] Reserved
    { IMGREG_e_REG_DAC_LD_18_19,                0xffff }, // [0x3ede] Reserved
    { IMGREG_e_REG_DAC_LD_20_21,                0xffff }, // [0x3ee0] Reserved
    { IMGREG_e_REG_DAC_LD_22_23,                0xffff }, // [0x3ee2] Reserved
    { IMGREG_e_REG_DAC_LD_24_25,                0xffff }, // [0x3ee4] DAC_LD_24_25
    { IMGREG_e_REG_DAC_LD_26_27,                0xffff }, // [0x3ee6] Reserved
    { IMGREG_e_REG_DAC_LD_28_29,                0x0000 }, // [0x3ee8] --> unchecked, but required for block read
    { IMGREG_e_REG_DAC_LD_30_31,                0xffff }, // [0x3eea] Reserved
};

/*## attribute ICCFG_cas_VerifyRegsConst */
static const IC_S_RegMaskValue ICCFG_cas_VerifyRegsConst[] = {
    // Register                     Mask    Value
    { IMGREG_e_REG_READ_MODE,       0xc000, 0x0000 }, // Mirror&flip bits must NEVER be set!!
};

/*## attribute ICCFG_cae_LeftImagerRegisterRequest */
#if (ICCFG_ENABLE_LEFT_IMAGER == 1)
static const IMGREG_E_SENSOR_REG ICCFG_cae_LeftImagerRegisterRequest[] = {

    // IMPORTANT: FRAME_COUNT must always be the first entry!!
    /* 0x303a */ IMGREG_e_REG_FRAME_COUNT,

    // Explicit requests
    /* 0x3000 */ IMGREG_e_REG_MODEL_ID,                // Imager identification data
    /* 0x300e */ IMGREG_e_REG_REVISION_NUMBER,         // Imager identification data
    /* 0x30b2 */ IMGREG_e_REG_TEMPSENS_DATA,           // For reading temperature value
    /* 0x30b4 */ IMGREG_e_REG_TEMPSENS_CTRL,           // For reading temperature value
    /* 0x30c8 */ IMGREG_e_REG_TEMPSENS_CALIB2,         // For reading temperature value
    /* 0x30cc */ IMGREG_e_REG_TEMPSENS_CALIB4,         // For reading temperature value
    /* 0x3102 */ IMGREG_e_REG_AE_LUMA_TARGET_REG,      // Embedded timestamp
    /* 0x3104 */ IMGREG_e_REG_AE_HIST_TARGET_REG,      // Embedded timestamp
    /* 0x310c */ IMGREG_e_REG_AE_DAMP_OFFSET_REG,      // Embedded timestamp
    /* 0x310e */ IMGREG_e_REG_AE_DAMP_GAIN_REG,        // Embedded timestamp
    /* 0x3110 */ IMGREG_e_REG_AE_DAMP_MAX_REG,         // IMPORTANT: Used for databus-check!!

    // The Following registers are required for register checks
    /* 0x3002 */ IMGREG_e_REG_Y_ADDR_START,
    /* 0x3004 */ IMGREG_e_REG_X_ADDR_START,
    /* 0x3006 */ IMGREG_e_REG_Y_ADDR_END,
    /* 0x3008 */ IMGREG_e_REG_X_ADDR_END,
    /* 0x300a */ IMGREG_e_REG_FRAME_LENGTH_LINES,
    /* 0x300c */ IMGREG_e_REG_LINE_LENGTH_PCK,
    /* 0x3010 */ IMGREG_e_REG_LOCK_CONTROL,
    /* 0x3012 */ IMGREG_e_REG_COARSE_INTEGRATION_TIME,
    /* 0x301a */ IMGREG_e_REG_RESET_REGISTER,
    /* 0x301e */ IMGREG_e_REG_DATA_PEDESTAL,
    /* 0x3028 */ IMGREG_e_REG_ROW_SPEED,
    /* 0x302a */ IMGREG_e_REG_VT_PIX_CLK_DIV,
    /* 0x302c */ IMGREG_e_REG_VT_SYS_CLK_DIV,
    /* 0x302e */ IMGREG_e_REG_PRE_PLL_CLK_DIV,
    /* 0x3030 */ IMGREG_e_REG_PLL_MULTIPLIER,
    /* 0x3032 */ IMGREG_e_REG_DIGITAL_BINNING,
    /* 0x3040 */ IMGREG_e_REG_READ_MODE,
    /* 0x3044 */ IMGREG_e_REG_DARK_CONTROL,
    /* 0x3056 */ IMGREG_e_REG_GREEN1_GAIN,
    /* 0x3058 */ IMGREG_e_REG_BLUE_GAIN,
    /* 0x305a */ IMGREG_e_REG_RED_GAIN,
    /* 0x305c */ IMGREG_e_REG_GREEN2_GAIN,
    /* 0x305e */ IMGREG_e_REG_GLOBAL_GAIN,
    /* 0x3064 */ IMGREG_e_REG_EMBEDDED_DATA_CTRL,
    /* 0x306e */ IMGREG_e_REG_DATAPATH_SELECT,
    /* 0x3070 */ IMGREG_e_REG_TEST_PATTERN_MODE,
    /* 0x307a */ IMGREG_e_REG_TEST_RAW_MODE,
    /* 0x307e */ IMGREG_e_REG_MINIMUM_T3,
    /* 0x3082 */ IMGREG_e_REG_OPERATION_MODE_CTRL,
    /* 0x3088 */ IMGREG_e_REG_SEQ_CTRL_PORT,
    /* 0x30b0 */ IMGREG_e_REG_DIGITAL_TEST,
    /* 0x30ba */ IMGREG_e_REG_DIGITAL_CTRL,
    /* 0x30d4 */ IMGREG_e_REG_COLUMN_CORRECTION,
    /* 0x30d6 */ IMGREG_e_REG_COLUMN_CORRECTION_THRESHOLD,
    /* 0x30d8 */ IMGREG_e_REG_COLUMN_CORRECTION_CLIP,
    /* 0x30de */ IMGREG_e_REG_ADC_BITS_0_1,
    /* 0x30e0 */ IMGREG_e_REG_ADC_BITS_2_3,
    /* 0x30e2 */ IMGREG_e_REG_ADC_BITS_4_5,
    /* 0x30e4 */ IMGREG_e_REG_ADC_BITS_6_7,
    /* 0x30e6 */ IMGREG_e_REG_ADC_CONFIG1,
    /* 0x30e8 */ IMGREG_e_REG_ADC_CONFIG2,
    /* 0x30ea */ IMGREG_e_REG_GAIN_OFFSET_CTRL,
    /* 0x30f0 */ IMGREG_e_REG_START_UP_FRAME_NR,
    /* 0x30f4 */ IMGREG_e_REG_OFFSET_LIMIT_LOW,
    /* 0x30f6 */ IMGREG_e_REG_OFFSET_LIMIT_HIGH,
    /* 0x30f8 */ IMGREG_e_REG_REG_OFFSET_BTM_GL,
    /* 0x3100 */ IMGREG_e_REG_AE_CTRL_REG,
    /* 0x313a */ IMGREG_e_REG_OTPM_DATA_MANUAL_L,
    /* 0x313c */ IMGREG_e_REG_OTPM_DATA_MANUAL_H,
    /* 0x313e */ IMGREG_e_REG_OTPM_DATA_MANUAL_EXTRA,
    /* 0x3140 */ IMGREG_e_REG_AE_ROI_X_START_OFFSET,
    /* 0x3142 */ IMGREG_e_REG_AE_ROI_Y_START_OFFSET,
    /* 0x3144 */ IMGREG_e_REG_AE_ROI_X_SIZE,
    /* 0x3146 */ IMGREG_e_REG_AE_ROI_Y_SIZE,
    /* 0x3148 */ IMGREG_e_REG_AE_HIST_BEGIN_PERC,
    /* 0x314a */ IMGREG_e_REG_AE_HIST_END_PERC,
    /* 0x314c */ IMGREG_e_REG_AE_HIST_DIV,
    /* 0x3180 */ IMGREG_e_REG_DELTA_DK_CONTROL,
    /* 0x3182 */ IMGREG_e_REG_DELTA_DK_CLIP,
    /* 0x318a */ IMGREG_e_REG_HDR_MC_CTRL1,
    /* 0x318c */ IMGREG_e_REG_HDR_MC_CTRL2,
    /* 0x318e */ IMGREG_e_REG_HDR_MC_CTRL3,
    /* 0x3190 */ IMGREG_e_REG_HDR_MC_CTRL4,
    /* 0x3192 */ IMGREG_e_REG_HDR_MC_CTRL5,
    /* 0x3194 */ IMGREG_e_REG_HDR_MC_CTRL6,
    /* 0x3196 */ IMGREG_e_REG_HDR_MC_CTRL7,
    /* 0x3198 */ IMGREG_e_REG_HDR_MC_CTRL8,
    /* 0x319e */ IMGREG_e_REG_HDR_MC_CTRL9,
    /* 0x31a0 */ IMGREG_e_REG_HDR_MC_CTRL10,
    /* 0x31a2 */ IMGREG_e_REG_HDR_MC_CTRL11,
    /* 0x31d0 */ IMGREG_e_REG_HDR_COMP,
    /* 0x31da */ IMGREG_e_REG_PLL_DITHER_1,
    /* 0x31dc */ IMGREG_e_REG_PLL_DITHER_2,
    /* 0x31de */ IMGREG_e_REG_PLL_DITHER_3,
    /* 0x31e0 */ IMGREG_e_REG_PIX_DEF_ID,
    /* 0x31e2 */ IMGREG_e_REG_PIX_DEF_ID_BASE_RAM,
    /* 0x31e4 */ IMGREG_e_REG_PIX_DEF_ID_STREAM_RAM,
    /* 0x31e6 */ IMGREG_e_REG_PIX_DEF_RAM_RD_ADDR
};
#endif

/*## attribute ICCFG_cae_LeftImagerAsyncRead */
#if (ICCFG_ENABLE_LEFT_IMAGER == 1)
static const IMGREG_E_SENSOR_REG ICCFG_cae_LeftImagerAsyncRead[] = {
    IMGREG_e_REG_TEMPSENS_DATA,
    IMGREG_e_REG_TEMPSENS_CTRL
};
#endif


/*#[ ignore */

#ifdef __cplusplus
}
#endif

/*#]*/


#endif
/*********************************************************************
	File Path: ..\..\..\04_Engineering\01_Source_Code\Algo\ic\ic_cfg_registers.h
*********************************************************************/
