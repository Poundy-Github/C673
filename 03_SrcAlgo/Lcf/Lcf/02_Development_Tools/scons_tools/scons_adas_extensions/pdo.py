"""
Filename                  :  scons_adas_extensions\pdo.py
Description               :  Script used to generate sdl- and cdl-files via pdo-tool and sdlcompiler.
"""
#***************************************************************************************************
# COMPANY: Continental AG, ADAS, A.D.C. GmbH
#
# PROJECT: ETK/SCT_Sconstools
#
# COMPONENT: scons_adas_extensions
#
# MODULE NAME: pdo.py
#
# DESCRIPTION: Script used to generate sdl- and cdl-files via pdo-tool and sdlcompiler.
#
# INITIAL AUTHOR: Spruck, Jochen (spruckj)
#
# CREATION DATE: - 2013/01/29
#
# LAST CHANGE:      $Date: 2021/12/13 19:03:58CET $
#                   $Author: Wang, David (Wangd3) $
#
# CURRENT VERSION:  $Revision: 1.1 $
#############################################################################
# CHANGES:                   $Log: pdo.py  $
# CHANGES:                   Revision 1.1 2021/12/13 19:03:58CET Wang, David (Wangd3) 
# CHANGES:                   Initial revision
# CHANGES:                   Member added to project /ADAS/Projects/MFC5xx/MFC5J3/06_Algorithm/DPU/04_Engineering/02_Development_Tools/scons_tools/scons_adas_extensions/project.pj
# CHANGES:                   Revision 1.14 2016/05/27 11:58:29CEST Bhagawati, Tridip (uidr2134) 
# CHANGES:                   File and function header updated
# CHANGES:                   Revision 1.13 2015/09/23 16:02:56CEST Fischer-EXT, Andre (uidg5297) 
# CHANGES:                   add dependency on relevant compiler extraction for sdl generation
# CHANGES:                   - Added comments -  uidg5297 [Sep 23, 2015 4:02:56 PM CEST]
# CHANGES:                   Change Package : 379758:1 http://mks-psad:7002/im/viewissue?selection=379758
# CHANGES:                   Revision 1.12 2015/07/31 06:04:49CEST Bhagawati, Tridip (uidr2134) 
# CHANGES:                   Implement scons measfreeze size track mechanism
# CHANGES:                   --- Added comments ---  uidr2134 [Jul 31, 2015 6:04:49 AM CEST]
# CHANGES:                   Change Package : 362668:1 http://mks-psad:7002/im/viewissue?selection=362668
# CHANGES:                   Revision 1.11 2015/07/30 12:46:11CEST Bhagawati, Tridip (uidr2134) 
# CHANGES:                   Implemented scons measfreeze size mechanism
# CHANGES:                   --- Added comments ---  uidr2134 [Jul 30, 2015 12:46:12 PM CEST]
# CHANGES:                   Change Package : 362668:1 http://mks-psad:7002/im/viewissue?selection=362668
# CHANGES:                   Revision 1.10 2015/06/26 05:17:45CEST Palanisamy-EXT, Lenin (uidr0826) 
# CHANGES:                   Add revision label with module description for all GSCons files (Issue 320651)
# CHANGES:                   --- Added comments ---  uidr0826 [Jun 26, 2015 5:17:45 AM CEST]
# CHANGES:                   Change Package : 350940:1 http://mks-psad:7002/im/viewissue?selection=350940

#***************************************************************************************************

import SCons.Tool.msvc
import os.path
from SCons.Script import *
from xml.dom.minidom import parse
import xml.dom.minidom
    
def pdo_gen(target, source, env):
    """
    Function            :  pdo_gen
    Description         :  
    target              :  
    source              :  
    env                 :  
    Returns             :  
    """
    f = open(str(target[0]), "w")
    f.write("""\
/*  This file is automatically generated by the scons tool pdo.py. 
    Any changes will be overwritten. */
""")
    f.write(source[0].get_contents())
    f.write('\n')   # add newline to get rid of compiler warning on missing newline at end of file

def Pdo(self, target, c_file_contents, **kw):
    """
    Function                     :  Pdo
    Description                  :  
    target                       :  
    c_file_contents              :  
    **kw                         :  
    Returns                      :  
    """
    dummy_cfile  = self.PdoGen(os.path.splitext(str(target))[0],
                               Value(c_file_contents))
    if self.subst('$_TOOLS'):
        Depends(dummy_cfile, [self.subst('$_TOOLS')])
    preproc_file = self.PreprocessCC(dummy_cfile)
    sdl_file     = self.PdoTool(target, preproc_file, **kw)
    return sdl_file

def PdoFile(self, target, c_file, **kw):
    """
    Function            :  PdoFile
    Description         :  
    target              :  
    c_file              :  
    **kw                :  
    Returns             :  
    """
    pdodat       = self.PdoScanFile(os.path.splitext(str(target))[0],
                               c_file)
    if self.subst('$_TOOLS'):
        Requires(pdodat, [self.subst('$_TOOLS')])
    sdl_file     = self.PdoTool(target, pdodat, **kw)
    return sdl_file

def PdoFileCustom(self, target, source, **kw):
    """
    Function            :  PdoFileCustom
    Description         :  
    target              :  
    source              :  
    **kw                :  
    Returns             :  
    """
    preproc_file  = self.PreprocessCC(source)
    if self.subst('$_TOOLS'):
        Requires(preproc_file, [self.subst('$_TOOLS')])
    sdl_file      = self.PdoTool(target, preproc_file, **kw)
    return sdl_file
    
def Sdl(self, target, source, **kw):
    """
    Function            :  Sdl
    Description         :  
    target              :  
    source              :  
    **kw                :  
    Returns             :  
    """
    cdl_file     = self.SdlCompiler(target, source)
    return cdl_file

def builder_SdlCompileMultipleFiles(target, source, env):
    """
    Function            :  builder_SdlCompileMultipleFiles
    Description         :  
    target              :  
    source              :  
    env                 :  
    Returns             :  
    """
    SideEffect('a.dummy.file', target)
    tmpdir = "tmp_sdlcompiler"
    Execute(Mkdir(tmpdir))
    for sourcefile in source:
        Execute(Copy(tmpdir, sourcefile))
    os.system(Dir(env.subst('$SDL_COMPILER')).abspath + "/sdlcompiler.exe compile -id" + tmpdir + " -of" + str(target[0]) + " -le -us")
    Execute(Delete(tmpdir))
    return None
	
def generate_report(target, source, env):
    """
    Function            :  generate_report
    Description         :  
    target              :  
    source              :  
    env                 :  
    Returns             :  
    """
    totalSize = 0
    unit = "bytes"
    dataSource = open(str(source[0]))
    DOMTree = xml.dom.minidom.parse(dataSource)
    collection = DOMTree.documentElement
    elementGroup = collection.getElementsByTagName("Group")
    elementView = collection.getElementsByTagName("View")
    if elementView:
        for element in elementView:
            viewName = element.getAttribute("Name")
    print "============================================="
    print "measfreeze size information : %s" % algo_name + "_" + core + ".sdl"
    print "---------------------------------------------"
    print "SUMMARY :"
    """  Now writing the result """
    file = open(str(target[0]), "w")
    file.write("#measfreeze size summary")

    if elementGroup:
        for element in elementGroup:
            if element.hasAttribute("Size"):
                attrSize = element.getAttribute("Size")
            attrName = element.getAttribute("Name")
            totalSize = totalSize + int(attrSize)            
            if verbose:
                print "\tGroup Name & Size : %s" % attrName, attrSize, unit
                file.write("\nGroup Name & Size : " + attrName + " " + attrSize + " " + unit)
    print "\tName & Total Size : %s" % viewName, totalSize, unit
    print "---------------------------------------------"
    print "============================================="

    file.write("\nName & Total Size = " + viewName + " " + str(totalSize) + " " + unit)
    file.close()
    return None
							   
def action_read_sdl(env, srcfile, outfile):
    """
    Function             :  action_read_sdl
    Description          :  
    env                  :  
    srcfile              :  
    outfile              :  
    Returns              :  
    """
    action = Builder(action = generate_report)
    env.Append(BUILDERS = {'actionGenerate' : action})  
    return env.actionGenerate([outfile], [srcfile])

def generate(env):
    """
    Function        :  generate
    Description     :  
    env             :  
    Returns         :  
    """
    env.AddMethod(Pdo)
    env.AddMethod(PdoFile)
    env.AddMethod(PdoFileCustom)
    env.AddMethod(Sdl)
    env.AddMethod(action_read_sdl)
    
    env["_PDO_TOOLS"] = Dir(env.subst('$PDO_TOOLS')).abspath
    env["_PDO_SCAN_CONFIG"] = File(env.subst('$PDO_SCAN_CONFIG')).abspath
    env["_SDL_COMPILER"] = Dir(env.subst('$SDL_COMPILER')).abspath
    env.PrependENVPath('PATH', env.subst('"$_PDO_TOOLS"'))
    env.PrependENVPath('PATH', env.subst('"$_SDL_COMPILER"'))
    
    env["PDO_TOOL_OPTIONS"] = ""
    # prefix of include path must be -I
    env['INCPREFIX'] = '-I'

    # prefix of define must be -D
    env['CPPDEFPREFIX'] = '-D'
    
    env.SetDefault(
        PDOGENCOM           = pdo_gen,
        PDOGENCOMSTR        = '',
        PDOSCANCOM          = 'pdo_scan.exe -c $_PDO_SCAN_CONFIG $_CPPINCFLAGS $_CPPDEFFLAGS -o $TARGET $SOURCES',
        PDOSCANCOMSTR       = '',
        PDOTOOLCOM          = "pdo_tool.exe $SOURCES $PDO_TOOL_OPTIONS -o $TARGET",
        PDOTOOLCOMSTR       = '',
        SDLCOMPILERCOM      = 'sdlcompiler.exe compile -if$SOURCE -of$TARGET -le -us',
        SDLCOMPILERCOMSTR   = '',
        PDO_CYCLE_NAME      = "ARS300MainCycle", 
        PDO_CYCLE_ID        = "32")
    
    env['BUILDERS']['PdoGen'] = Builder(action = Action('$PDOGENCOM', '$PDOGENCOMSTR'),
                                        suffix = '.pdo.c')
                                        
    env['BUILDERS']['PdoScan'] = Builder(action = Action('$PDOSCANCOM', '$PDOSCANCOMSTR'),
                                         suffix = '.pdodat',
                                         src_builder = ['PreprocessCC', 'PreprocessCXX'],
                                         src_suffix = ['.pp'])

    env['BUILDERS']['PdoScanFile'] = Builder(action = Action('$PDOSCANCOM', '$PDOSCANCOMSTR'),
                                         suffix = '.pdodat',
                                         src_suffix = ['.c'],
                                         source_scanner = CScanner)
                                         
    env['BUILDERS']['PdoTool'] = Builder(action = Action('$PDOTOOLCOM', '$PDOTOOLCOMSTR'),
                                         suffix = '.sdl',
                                         src_suffix = ['.pdodat'],
                                         src_builder = 'PdoScan')

    env['BUILDERS']['SdlCompiler'] = Builder(action = Action('$SDLCOMPILERCOM', '$SDLCOMPILERCOMSTR'),
                                             suffix = '.cdl',
                                             src_suffix = ['.sdl'])

    env['BUILDERS']['SdlCompileMultipleFiles'] = Builder(action = builder_SdlCompileMultipleFiles,
                                                         suffix = '.cdl',
                                                         src_suffix = ['.sdl'])

def exists(env):
    """
    Function        :  exists
    Description     :  
    env             :  
    Returns         :  
    """
    return 1