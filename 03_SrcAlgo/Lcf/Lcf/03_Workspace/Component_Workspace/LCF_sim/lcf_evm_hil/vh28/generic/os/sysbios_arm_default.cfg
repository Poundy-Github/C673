/*
 * SYSBIOS default configuration for EVM HIL running on ARM platforms 
 * without NDK. This file is only valid for VH28-CortexA15.
 */
 
// supported platforms
var PLATFORM_VH28 = "vh28_evm_hil_ca15";

/**********************************************************************\
|                          Module  Dependencies                        |
\**********************************************************************/

var Bios      = xdc.useModule('ti.sysbios.BIOS');
var HeapMem   = xdc.useModule('ti.sysbios.heaps.HeapMem');
var Clock     = xdc.useModule('ti.sysbios.knl.Clock');
var Task      = xdc.useModule('ti.sysbios.knl.Task');
var Defaults  = xdc.useModule('xdc.runtime.Defaults');
var Memory    = xdc.useModule('xdc.runtime.Memory');
var System    = xdc.useModule('xdc.runtime.System');
var Defaults  = xdc.useModule('xdc.runtime.Defaults');
var Timestamp = xdc.useModule('xdc.runtime.Timestamp');
var SysStd    = xdc.useModule("xdc.runtime.SysStd");
var SemiHost  = xdc.useModule('ti.sysbios.rts.gnu.SemiHostSupport');

/* platform dependent module includes */
if (Program.platformName == PLATFORM_VH28)
{
  var Hwi   = xdc.useModule('ti.sysbios.hal.Hwi');
  var Cache = xdc.useModule('ti.sysbios.family.arm.a15.Cache');
  var MMU   = xdc.useModule('ti.sysbios.family.arm.a15.Mmu');
}
else
{
  // invalid platform
  print("Platform is not supported: " + Program.platformName);
}

/**********************************************************************\
|                      Miscellaneous Configuration                     |
\**********************************************************************/

// specify core name
Program.global.coreName = "MPU1";

// Cache should be enabled to use the AMMU
Cache.enableCache = true;

// select Timer 0 to drive BIOS clock
Clock.timerId = 0;
Clock.swiPriority = null;

// Set the proxy for System module. This enables print statements
System.SupportProxy = SysStd;


/**********************************************************************\
|                  Interrupt and MMU Configuration                     |
\**********************************************************************/

if (Program.platformName == PLATFORM_VH28)
{
  // Enable the MMU (Required for L1/L2 data caching)
  MMU.enableMMU = true;

  // descriptor attribute structure
  var attrs = new MMU.DescriptorAttrs();
  MMU.initDescAttrsMeta(attrs);
  attrs.type = MMU.DescriptorType_BLOCK;    // BLOCK descriptor
  attrs.shareable = 3;                      // inner-sharerable
  attrs.attrIndx = 2;                       // MAIR0 Byte2 describes
                                            // memory attributes for
                                            // this level2 entry

  // write memory region attribute in mairRegAttr[2] i.e. MAIR0 Reg Byte2
  MMU.setMAIRMeta(2, 0xFF);              // Mark mem regions as cacheable

  // Set the descriptor for each entry in the address range
  for (var i=0x40000000; i < 0x40600000; i = i + 0x00200000)
  {
      // Each 'BLOCK' descriptor entry spans a 2MB address range
      MMU.setSecondLevelDescMeta(i, i, attrs);
  }    

  // Set the descriptor for each entry in the address range
  for (var i=0x80000000; i < 0xA0000000; i = i + 0x00200000)
  {
      // Each 'BLOCK' descriptor entry spans a 2MB address range
      MMU.setSecondLevelDescMeta(i, i, attrs);
  }

  // descriptor attribute structure
  var attrs = new MMU.DescriptorAttrs();
  MMU.initDescAttrsMeta(attrs);
  attrs.type = MMU.DescriptorType_BLOCK;  // BLOCK descriptor
  attrs.noExecute = true;                 // not executable
  attrs.accPerm = 0;                      // read/write at PL1
  attrs.attrIndx = 1;                     // MAIR0 Byte1 describes
                                          // memory attributes for
                                          // each BLOCK MMU entry

  // write memory region attribute in mairRegAttr[1] i.e. MAIR0 Reg Byte1
  MMU.setMAIRMeta(1, 0x04);               // Mark mem regions as device memory

  // Configure the corresponding MMU page descriptor accordingly
  for (var i=0x40600000; i < 0x60000000; i = i + 0x00200000)
  {
    // Each 'BLOCK' descriptor entry spans a 2MB address range
    MMU.setSecondLevelDescMeta(i, i, attrs);
  }
}


/**********************************************************************\
|                      Memory & Memory Map Setup                       |
\**********************************************************************/

/* create a HeapMem heap instance "DataHeap" */
var dataheapParams = new HeapMem.Params;
dataheapParams.size = 700000;
dataheapParams.sectionName = "DataHeap";
var dataHeap = HeapMem.create(dataheapParams);

/* set "dataHeap" to be the default Heap for the app */
Memory.defaultHeapInstance = dataHeap;

var dataMemSectName = Program.platform.dataMemory;

/* map the section name DataHeap to load into the data section of the platform */
Program.sectMap["DataHeap"] = dataMemSectName;

// Move all sections to DDR 
Program.sectMap[".text"] = "DDR3_CA15";
Program.sectMap[".vecs"] = "DDR3_CA15";

/* functional safety sections */
Program.sectMap[".data_secure_section_var"] = "DDR3_FUNC_SEC";
Program.sectMap[".const_secure_section_const"] = "DDR3_FUNC_SEC";
/* intermediate section for gnu linkage */
Program.sectMap[".functional_security_sec_gnu"] = "DDR3_FUNC_SEC";


/**********************************************************************\
|                           Further Setup                              |
\**********************************************************************/

// RoSt: Workaround due to SYS/BIOS 6.35.04.50: will be fixed in version 6.40
// => http://e2e.ti.com/support/embedded/tirtos/f/355/p/337278/1177419.aspx#1177419
Program.linkTemplate = "gnu/targets/arm/linkcmd_bm_v7a.xdt";

// location of the custom BIOS library under the output directory
xdc.module("xdc.cfg.SourceDir").outputDir = "src";

Bios.libType = Bios.LibType_Custom;
//Bios.customCCOpts = "--neon --endian=little -mv7A15 --abi=eabi -q -ms --opt_for_speed=2  --program_level_compile -o3 -g --optimize_with_debug --enum_type=packed --float_support=VFPv3";
Bios.includeXdcRuntime = true;	// Added by ulwa: This urges to rebuild RTS (cf. http://e2e.ti.com/support/embedded/bios/f/355/p/227731/803960.aspx#803960

/**********************************************************************\
|                             END OF FILE                              |
\**********************************************************************/
