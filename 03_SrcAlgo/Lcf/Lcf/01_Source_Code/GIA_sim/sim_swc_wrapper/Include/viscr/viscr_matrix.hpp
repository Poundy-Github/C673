/*! \file **********************************************************************

  COMPANY:        Continental AG

  PROJECT:        MFC300

  CPU:            

  COMPONENT:      SAC - Stereo Auto Calibration

  MODULNAME:      viscr_matrix.hpp  

  DESCRIPTION:    Matrix library

  AUTHOR:         L. GARCIA
  Last Author     $Author: Wang, David (Wangd3) $

  CREATION DATE:  17.06.2011

  VERSION:        $Revision: 1.1 $
  CHANGES:        $Log: viscr_matrix.hpp  $
  CHANGES:        Revision 1.1 2021/12/13 17:28:31CET Wang, David (Wangd3) 
  CHANGES:        Initial revision
  CHANGES:        Member added to project /ADAS/Projects/MFC5xx/MFC5J3/06_Algorithm/DPU/04_Engineering/01_Source_Code/GIA_sim/sim_swc_wrapper/Include/viscr/project.pj
  CHANGES:        Revision 1.0 2017/03/03 10:40:21CET Sorge, Sven (uidg3181) 
  CHANGES:        Initial revision
  CHANGES:        Member added to project /ADAS/SW/Integration/06_Simulation_Components/GIA_GenericInterfaceAdapter/04_Engineering/03_Workspace/Component_Workspace/GIA_sim/sim_swc_wrapper/Include/viscr/project.pj
  CHANGES:        Revision 1.20 2014/03/06 11:35:29CET Ruland, Thomas (uidw0251) 
  CHANGES:        Fixed templating mistakes
  CHANGES:        - Added comments -  uidw0251 [Mar 6, 2014 11:35:30 AM CET]
  CHANGES:        Change Package : 210743:1 http://mks-psad:7002/im/viewissue?selection=210743
  CHANGES:        Revision 1.19 2014/02/28 10:19:39CET Ruland, Thomas (uidw0251) 
  CHANGES:        - New optimization framework (still using floating point objective)
  CHANGES:        - Single correspondence OdoYAC test framework
  CHANGES:        --- Added comments ---  uidw0251 [Feb 28, 2014 10:19:40 AM CET]
  CHANGES:        Change Package : 210743:1 http://mks-psad:7002/im/viewissue?selection=210743
  CHANGES:        Revision 1.18 2014/02/20 13:46:07CET Sadran-EXT, Emal (uidw7976) 
  CHANGES:        reactived floating point version of the epipolar_objfun for test purposes
  CHANGES:        --- Added comments ---  uidw7976 [Feb 20, 2014 1:46:07 PM CET]
  CHANGES:        Change Package : 196075:4 http://mks-psad:7002/im/viewissue?selection=196075
  CHANGES:        Revision 1.17 2013/03/15 19:14:57CET Ruland, Thomas (uidw0251) 
  CHANGES:        - first complete version of wrapper
  CHANGES:        --- Added comments ---  uidw0251 [Mar 15, 2013 7:14:58 PM CET]
  CHANGES:        Change Package : 173649:1 http://mks-psad:7002/im/viewissue?selection=173649
  CHANGES:        Revision 1.16 2012/07/14 09:35:40CEST Behrens, Alexander (uidv2823) 
  CHANGES:        add code coverage for dev 4.6.0
  CHANGES:        --- Added comments ---  uidv2823 [Jul 14, 2012 9:35:40 AM CEST]
  CHANGES:        Change Package : 134029:1 http://mks-psad:7002/im/viewissue?selection=134029
  CHANGES:        Revision 1.15 2012/06/26 11:19:34CEST Visscher-EXT, Eric (uidk7517) 
  CHANGES:        Code review comments added
  CHANGES:        --- Added comments ---  uidk7517 [Jun 26, 2012 11:19:34 AM CEST]
  CHANGES:        Change Package : 127722:1 http://mks-psad:7002/im/viewissue?selection=127722
  CHANGES:        Revision 1.14 2012/05/25 14:55:56CEST Exner, Christian (uidt8578) 
  CHANGES:        - added another viscr_mat_copy overload (from array to viscr_matrix)
  CHANGES:        --- Added comments ---  uidt8578 [May 25, 2012 2:55:56 PM CEST]
  CHANGES:        Change Package : 116950:2 http://mks-psad:7002/im/viewissue?selection=116950
  CHANGES:        Revision 1.13 2012/02/22 17:28:52CET Garcia, Lucien (uid26778) 
  CHANGES:        Remove unused code
  CHANGES:        --- Added comments ---  uid26778 [Feb 22, 2012 5:28:52 PM CET]
  CHANGES:        Change Package : 80273:2 http://mks-psad:7002/im/viewissue?selection=80273
  CHANGES:        Revision 1.12 2012/01/19 14:22:24CET Garcia, Lucien (uid26778) 
  CHANGES:        First integration of stereo EOL calibration
  CHANGES:        --- Added comments ---  uid26778 [Jan 19, 2012 2:22:25 PM CET]
  CHANGES:        Change Package : 94275:1 http://mks-psad:7002/im/viewissue?selection=94275
  CHANGES:        Revision 1.11 2011/10/04 16:19:35CEST Garcia, Lucien (uid26778) 
  CHANGES:        Remove lint warnings
  CHANGES:        --- Added comments ---  uid26778 [Oct 4, 2011 4:19:35 PM CEST]
  CHANGES:        Change Package : 80273:1 http://mks-psad:7002/im/viewissue?selection=80273

**************************************************************************** */

#ifndef _viscr_matrix_hpp_
#define _viscr_matrix_hpp_

#include <cassert>
#include <cstdlib>
#include <viscr_types.hpp>
#include <viscr_vector.hpp>
#include <sac_math.h>

/** @name Matrices
 * In order to avoid templates, fixed size matrices are generated by
 * aggregation: The data is stored as an array member of a struct and the
 * generic matrix points to this data.
 *
 * Internal storage is row-major (C-like).
 *
 */
/*@{*/

/// A generic matrix. Cannot change its size.  
//{{{
struct viscr_matrix
{
  /// Number of rows
  viscr_uint rows;


  /// Number of columns
  viscr_uint cols;


  /// Pointer to the data
  viscr_float * data;


  /// Default constructor as illegal values
  /* <ln_offset:+1to+4 COVERAGE reviewer name: Alexander Behrens date: 13.07.2012 reason: Function currently not used. */
  viscr_matrix(): 
    rows( 0),
    cols( 0),
    data( NULL) { }


  /// Normal constuctor for aggregation
  viscr_matrix( viscr_uint r, viscr_uint c, viscr_float * d):
    rows( r),
    cols( c),
    data( d) { }


  /// Read access
  viscr_float operator()( viscr_uint row, viscr_uint col) const 
  {
    assert( row<rows);
    assert( col<cols);
    return data[row*cols+col];
  }
  

  /// Write access
  viscr_float & operator()( viscr_uint row, viscr_uint col) 
  {
    assert( row<rows);
    assert( col<cols);
    return data[row*cols+col];
  }



  private:
    viscr_matrix( const viscr_matrix &);
    viscr_matrix & operator=( const viscr_matrix &);
};
/*}}}*/



/// Set all elements to zero
extern void
viscr_mat_zero(
    viscr_matrix & m);


/// Set to identity matrix
extern void
viscr_mat_identity(
    viscr_matrix & m);


/// Multiply a matrix by a vector c=A*b
extern void
viscr_mat_mult_vec(
  viscr_vector & c,
  const viscr_matrix & A,
  const viscr_vector & b);

// ~CodeReview ~ID:1e7196ab27ad6715d2ef793ed5325738 ~Reviewer:CW01\uidk7517 ~Date:23.06.2012 ~Priority:3 ~Comment:Remove or document reason for dead code
//#if 0 // CODE NOT USED
/// Multiply a matrix by a vector c=a*B
extern void
viscr_mat_mult_vec_left(
  viscr_vector & c,
  const viscr_vector & a,
  const viscr_matrix & B);
//#endif

/// Multiply a matrix by a matrix C=A*B
extern void
viscr_mat_mult_mat(
  viscr_matrix & C,
  const viscr_matrix & A,
  const viscr_matrix & B);


/// Return maximal diagonal element of a square matrix
extern viscr_float
viscr_mat_max_diag(
  const viscr_matrix & A);


/// Return L-infinity norm of matrix (maximum-element)
extern viscr_float
viscr_mat_norm_Linfty(
  const viscr_matrix & A);


/// Return L-infinity norm of absolute delta between both matrices
extern viscr_float
viscr_mat_norm_LinftyAbsDelta(
  const viscr_matrix & A,
  const viscr_matrix & B);


/////////////////////////////////////////////////////////////////////////////////////////
// 
// TRANSPOSE AND COPY FUNCTIONS
// f32_t ARRAY[9] should be in raw major = {a00; a01; a20; a10; a11; a12; a20; a21; a22}
/// Copy a matrix and transpose it: A=B'
extern void viscr_mat_transpose_copy(   viscr_matrix &A,   const viscr_matrix &B);
extern void viscr_mat_transpose_copy(   viscr_matrix &A,   const f32_t B[9]);
extern void viscr_mat_transpose_copy(   mat3 &A,           const f32_t B[9]);
extern void viscr_mat_transpose_copy(   f32_t A[9],        const f32_t B[9]);
extern void viscr_mat_transpose_copy(   f32_t A[9],        const viscr_matrix &B);
extern void viscr_mat_transpose_copy(   f32_t A[9],        const mat3 &B);
/// Copy a matrix: A=B
extern void viscr_mat_copy(             viscr_matrix &A,   const mat3 &B);
extern void viscr_mat_copy(             viscr_matrix &A,   const f32_t B[9]);
extern void viscr_mat_copy(             f32_t (&A)[9],     const viscr_matrix &B);
extern void viscr_mat_copy(             viscr_matrix & A,  const viscr_matrix &B);
extern void viscr_mat_copy(             mat3 &A,           const viscr_matrix &B);
extern void viscr_mat_copy(             mat3 &A,           const f32_t B[9]);
extern void viscr_mat_copy(             f32_t A[9],        const mat3 &B);
extern void viscr_mat_copy(             f32_t A[9],        const f32_t B[9]);

/////////////////////////////////////////////////////////////////////////////////////////

#define MAKE_MATRIX( r, c)\
struct viscr_mat##r##c \
{ \
  viscr_matrix m; \
  viscr_float data[r*c]; \
  viscr_mat##r##c(): m( r, c, data) { }  \
 \
  viscr_mat##r##c( const viscr_float o[r*c]): m( r,c,data) { for( viscr_uint i=0U; i<(r*c); ++i) data[i]=o[i]; } \
  viscr_mat##r##c( const viscr_mat##r##c & o): m( r,c,data) { viscr_mat_copy( m, o.m); } \
  viscr_mat##r##c & operator=( const viscr_mat##r##c & o) { viscr_mat_copy( m, o.m); return *this; } \
}


MAKE_MATRIX(1,1);
MAKE_MATRIX(2,1);
MAKE_MATRIX(2,2);
MAKE_MATRIX(3,3);
MAKE_MATRIX(3,1);
MAKE_MATRIX(3,4);
MAKE_MATRIX(4,4);
MAKE_MATRIX(4,3);
MAKE_MATRIX(4,2);
MAKE_MATRIX(4,1);
MAKE_MATRIX(6,6);
MAKE_MATRIX(9,6);
MAKE_MATRIX(9,1);
MAKE_MATRIX(6,1);
#undef MAKE_MATRIX

#if 0
// Deactivated until specialised solver for identity matrix is implemented.

/// Invert a matrix using LU factorisation: a=inv(B). piv must have enough
/// entries to hold one value per row of A. Returns false if singular.
extern bool
viscr_mat_invert(
    viscr_matrix & A,
    viscr_matrix & LU,
    viscr_uint * piv,
    const viscr_matrix & B);
#endif

//! Templated version of matrix definition to allow more flexible usage
template <uint32 cRow, uint32 cCol>
class viscr_mat
{ 
public:
  viscr_matrix m;
  viscr_float data[cRow*cCol];
  
  viscr_mat() : m(cRow, cCol, data) { }
  
  viscr_mat(const viscr_float o[cRow*cCol]) : 
  m(cRow, cCol,data) 
  {
    for( viscr_uint i=0U; i<(cRow*cCol); ++i) {
      data[i]=o[i];
    }
  }
  
  viscr_mat(const viscr_mat & o): m(cRow, cCol, data) {
    viscr_mat_copy(m, o.m);
  }
  
  viscr_mat & operator=( const viscr_mat & o) {
    viscr_mat_copy(m, o.m); return *this;
  }
};

/*@}*/

#endif

