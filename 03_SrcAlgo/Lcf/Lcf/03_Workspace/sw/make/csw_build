#!/bin/bash
(set -o igncr) 2>/dev/null && set -o igncr; # this comment is required

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )" # portable version of 'realpath'

Black='\033[0;30m'
DarkGray='\033[1;30m'
Blue='\033[0;34m'
LightBlue='\033[1;34m'
Green='\033[0;32m'
LightGreen='\033[1;32m'
Cyan='\033[0;36m'
LightCyan='\033[1;36m'
Red='\033[0;31m'
LightRed='\033[1;31m'
Purple='\033[0;35m'
LightPurple='\033[1;35m'
Brown='\033[0;33m'
Yellow='\033[1;33m'
LightGray='\033[0;37m'
White='\033[1;37m'
NO_COLOR='\033[0m'

WARNING_FILE="$DIR/warnings.txt"

echo -E 'Options recognized by csw wrapper:'
echo -E ''
echo -E '    showwarnings    Pops up your default editor after the build'
echo -E '                    showing a sorted summary of all warnings'
echo -E '                    that occurred during the build (without duplicates)'
echo -E ''
echo -E ''

ARGS=$*
ShowWarnings=0
#parse args here too:
while [[ $# -ge 1 ]] #>=
do
  case "$1" in
    "showwarnings")
      ShowWarnings=1
      ;;
  esac
  shift
done

colorizeOutput() {
  #because of a bash bug, we put all regexes in variables first.
  warning='\<warnings?\>' #match "warning" and "warnings"
  error='\<error\>|\<fail'
  success='\<success|\<pass|\<OK\>' #also match successFUL and passED
  done='\<done\>'
  scons='\<scons\>'
  compiling='^compiling\>'
  buildMarker='Building'
  courageMarker='^make(\[1\])?:'
  courageBuild='^gcc\>|^g\+\+\>|^export\>|\<Sconscript_courage\>|(Component|TestFrame).*should be tested'
  courageCoverage='^ctc\>'
  hideMessage='not a git repository'
  shopt -s nocasematch
  shopt -s compat31
  > "$WARNING_FILE" #makes the file empty

  # read -r is for raw input
  # [[ -n ... ]] tests if the given string doesn't have zero length (just to handle the last line correctly)
  while IFS='' read -r line || [[ -n "$line" ]]; do
    if [[ "$line" =~ $warning ]]; then
      echo -ne "$Yellow"
      echo -E  "$line"
      echo -E  "$line" >> "$WARNING_FILE" #append to warning file
      echo -ne "$NO_COLOR"
    elif [[ "$line" =~ $error ]]; then
      echo -ne "$LightRed"
      echo -E  "$line"
      echo -ne "$NO_COLOR"
    elif [[ "$line" =~ $success ]]; then
      echo -ne "$Green"
      echo -E  "$line"
      echo -ne "$NO_COLOR"
    elif [[ "$line" =~ $done ]]; then
      echo -ne "$LightGreen"
      echo -E  "$line"
      echo -ne "$NO_COLOR"
    elif [[ "$line" =~ $scons ]]; then
      echo -ne "$LightBlue"
      echo -E  "$line"
      echo -ne "$NO_COLOR"
    elif [[ "$line" =~ $compiling ]]; then
      echo -ne "$Cyan"
      echo -E  "$line"
      echo -ne "$NO_COLOR"
    elif [[ "$line" =~ $courageMarker ]]; then
      echo -ne "$LightPurple"
      echo -E  "$line"
      echo -ne "$NO_COLOR"
    elif [[ "$line" =~ $courageBuild ]]; then
      echo -ne "$Purple"
      echo -E  "$line"
      echo -ne "$NO_COLOR"
    elif [[ "$line" =~ $buildMarker ]]; then
      echo -ne "$LightCyan"
      echo -E  "$line"
      echo -ne "$NO_COLOR"
    elif [[ "$line" =~ $courageCoverage ]]; then
      echo -ne "$Blue"
      echo -E  "$line"
      echo -ne "$NO_COLOR"
    elif [[ "$line" =~ $hideMessage ]]; then
      echo -ne "$DarkGray"
      echo -E  "$line"
      echo -ne "$NO_COLOR"
    else
      echo -E "$line"
    fi
  done
}

"$DIR"/sw_build.bat $ARGS 2>&1 | colorizeOutput
sort --unique --output="$WARNING_FILE" "$WARNING_FILE"
if [[ $ShowWarnings -eq 1 ]]; then
  start "$WARNING_FILE" #open the warning file in the default editor
fi
