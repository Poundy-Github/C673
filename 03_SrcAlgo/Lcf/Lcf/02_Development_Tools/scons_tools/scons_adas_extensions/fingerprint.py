"""
Filename                  :  scons_adas_extensions\fingerprint.py
Description               :  Script used to generate the fingerprint files.
"""
#***************************************************************************************************
# COMPANY: Continental AG, ADAS, A.D.C. GmbH
#
# PROJECT: ETK/SCT_Sconstools
#
# COMPONENT: scons_adas_extensions
#
# MODULE NAME: fingerprint.py
#
# DESCRIPTION: Script used to generate the fingerprint files.
#
# INITIAL AUTHOR: Spruck, Jochen (spruckj)
#
# CREATION DATE: - 2013/01/29
#
# LAST CHANGE:      $Date: 2021/12/13 19:03:53CET $
#                   $Author: Wang, David (Wangd3) $
#
# CURRENT VERSION:  $Revision: 1.1 $
#############################################################################
# CHANGES:                   $Log: fingerprint.py  $
# CHANGES:                   Revision 1.1 2021/12/13 19:03:53CET Wang, David (Wangd3) 
# CHANGES:                   Initial revision
# CHANGES:                   Member added to project /ADAS/Projects/MFC5xx/MFC5J3/06_Algorithm/DPU/04_Engineering/02_Development_Tools/scons_tools/scons_adas_extensions/project.pj
# CHANGES:                   Revision 1.6 2016/05/27 11:47:37CEST Bhagawati, Tridip (uidr2134) 
# CHANGES:                   File and function header updated
# CHANGES:                   Revision 1.5 2015/06/26 05:17:35CEST Palanisamy-EXT, Lenin (uidr0826) 
# CHANGES:                   Add revision label with module description for all GSCons files (Issue 320651)
# CHANGES:                   - Added comments -  uidr0826 [Jun 26, 2015 5:17:36 AM CEST]
# CHANGES:                   Change Package : 350940:1 http://mks-psad:7002/im/viewissue?selection=350940

#***************************************************************************************************

import md5, struct, sys, os.path
from SCons.Script import *

def error_key(s):
    """
    Function      :  error_key
    Description   :  
    s             :  
    Returns       :  
    """
    A = struct.unpack("b", "A")[0]
    Z = struct.unpack("b", "Z")[0]
    a = struct.unpack("b", "a")[0]
    z = struct.unpack("b", "z")[0]
    s = str(s)
    i = len(s) - 1
    res = 0L
    while i >= 0 and s[i] != '/' and s[i] != '\\':
        u = (struct.unpack("b", s[i])[0])
        if u >= A and u <= Z:
            u = u - (A - a)
        res = ((res << 3) | (res >> (32 - 3))) ^ u
        res = res & (0xffffffffL)
        i -= 1
    return "0x%04x%04xUL" % ((res >> 16) & 0xffff,  res & 0xffff)

def md5sumToLongTuple(md5sum):
    """
    Function           :  md5sumToLongTuple
    Description        :  
    md5sum             :  
    Returns            :  
    """
    return (
        struct.unpack("L", md5sum[0:4])[0],
        struct.unpack("L", md5sum[4:8])[0],
        struct.unpack("L", md5sum[8:12])[0],
        struct.unpack("L", md5sum[12:16])[0],)
    
def md5sumToUlongc(md5sum, index):
    """
    Function           :  md5sumToUlongc
    Description        :  
    md5sum             :  
    index              :  
    Returns            :  
    """
    ul = struct.unpack("L", md5sum[index*4:index*4+4])[0]
    return "0x%04x%04xUL" % (ul >> 16, ul & 0xffff)

def generateFingerprint(target, source, env):
    """
    Function            :  generateFingerprint
    Description         :  Generate the fingerprint of the file.
    target              :  Target output.
    source              :  scons_adas_extensions files required.
    env                 :  Environment variable.
    Returns             :  
    """
    if target[0] is None:
        f = sys.stdout
        target[0] = "a/b.h"
    else:
        f = open(str(target[0]), "w")
    if not hasattr(source[-1], "abspath"):
        versionmaps = source[-1].read()
        source = source[:-1]
    protect = os.path.split(str(target[0]))[-1].replace('.', '_').upper()
    f.write(
"""\
/* This file is automatically generated by the scons tool fingerprint.py
   Any changes will be overwritten! */    

#ifndef %(protect)s
#define %(protect)s


""" % locals())
    fp_vars = env["FINGERPRINT_VARS"]
    for variable in fp_vars.keys():
        if fp_vars[variable] is None:
            s_i = range(len(source))
        else:
            s_i = fp_vars[variable]

        srcstr = ""
        for i in s_i:
            s = source[i]
            srcstr += open(str(s)).read()
        md5sum = md5.new(srcstr).digest()
        md5_1 = md5sumToUlongc(md5sum, 0)
        md5_2 = md5sumToUlongc(md5sum, 1)
        md5_3 = md5sumToUlongc(md5sum, 2)
        md5_4 = md5sumToUlongc(md5sum, 3)

        f.write("""\
static const unsigned long int %(variable)s1 = %(md5_1)s;
static const unsigned long int %(variable)s2 = %(md5_2)s;
static const unsigned long int %(variable)s3 = %(md5_3)s;
static const unsigned long int %(variable)s4 = %(md5_4)s;

""" % locals())
        
        if variable in versionmaps.keys():
            vm = versionmaps[variable]
            k = md5sumToLongTuple(md5sum)
            if k in vm.keys():
                major = vm[k][1]
                minor = vm[k][2]
                patch = vm[k][3]
                vtext = vm[k][0]
            else:
                major = 99
                minor = 99
                patch = 99
                vtext = "LD 99.99.99 TEST"
            f.write("""\
static const unsigned long int %(variable)s_VERSION_MAJOR = %(major)s;
static const unsigned long int %(variable)s_VERSION_MINOR = %(minor)s;
static const unsigned long int %(variable)s_VERSION_PATCH = %(patch)s;
static const unchecktype(unsigned char) %(variable)s_VERSION_TEXT[LD_INTERFACE_VERSION_INFO_LEN] = "%(vtext)s";

""" % locals())

    srcstr = ""
    error_keys = []
    for i in s_i:
        s = source[i]
        srcstr += open(str(s)).read()
        error_keys.append(error_key(s))
    FileErrorKeys = ",".join(error_keys)
    FileNames = ",".join(map(lambda x: '"' + os.path.basename(str(x)) + '"',source))
    NumberOfFiles = len(source)
    f.write("""\
#define FINGERPRINT_NUM_FILES (%(NumberOfFiles)d)
#define FINGERPRINT_ARRAY_OF_ERROR_KEYS \
{%(FileErrorKeys)s}
#define FINGERPRINT_ARRAY_OF_FILENAMES \
{%(FileNames)s}

""" % locals())
    f.write("#endif\n")
    f.close()
    # the following is a workaround for returning too early from this function (some threading stuff?) 
    # resulting in a file not found error from the compiler
    # cmd = r'%s -c "import sys, os, os.path; open(\"%s\").read(1)" ' % (sys.executable, str(target[0]).replace('\\', '/'))
    # while 1:
        # ret = os.system(cmd)
        # if not ret: break
    # sleep to be sure that the file is sync'ed :-(
    # time.sleep(2.5)
    print "generate fingerprint done."

def generate(env):
    """
    Function        :  generate
    Description     :  Standard SCons function.
    env             :  Environment variable.
    Returns         :  
    """
    env['BUILDERS']['Fingerprint'] = Builder(action=Action(generateFingerprint, "$FINGERPRINTCOMSTR"))

def exists(env):
    """
    Function        :  exists
    Description     :  Standard SCons function.
    env             :  Environment variable.
    Returns         :  
    """
    return 1

if __name__ == "__main__":
    # mini-test
    env = {}
    env["FINGERPRINT_VARS"]={'FP' : [0], 'ALL' : None}
    generateFingerprint([None], ["fingerprint.py", "pdo.py"], env) 